<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\LIBS\Extensions\inc\office10\msouser.h" pos:tabs="8"><cpp:pragma pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">pragma</cpp:directive> once</cpp:pragma>

<comment type="block" format="doxygen" pos:line="3" pos:column="1">/****************************************************************************
	MsoUser.h

	Owner: DavePa
 	Copyright (c) 1994 Microsoft Corporation

	Declarations for common functions and interfaces required for apps
	to use the Office DLL.
****************************************************************************/</comment>

<cpp:ifndef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifndef</cpp:directive> <name pos:line="13" pos:column="9">MSOUSER_H</name></cpp:ifndef>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">MSOUSER_H</name></cpp:macro></cpp:define>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"msodebug.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"msoiv.h"</lit:literal></cpp:file></cpp:include> <comment type="line" pos:line="18" pos:column="20">// Instrumented Version for Office9 #defines and typedef</comment>

<cpp:ifndef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifndef</cpp:directive> <name pos:line="20" pos:column="9">MSO_NO_INTERFACES</name></cpp:ifndef>
<decl_stmt><decl><type><name pos:line="21" pos:column="1">interface</name></type> <name pos:line="21" pos:column="11">IMsoControlContainer</name></decl>;</decl_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="22" pos:column="8">// MSO_NO_INTERFACES</comment>

<comment type="block" format="doxygen" pos:line="24" pos:column="1">/****************************************************************************
	The ISimpleUnknown interface is a variant on IUnknown which supports
	QueryInterface but not reference counts.  All objects of this type
	are owned by their primary user and freed in an object-specific way.
	Objects are allowed to extend themselves by supporting other interfaces
	(or other versions of the primary interface), but these interfaces
	cannot be freed without the knowledge and cooperation of the object's
	owner.  Hey, it's just like a good old fashioned data structure except
	now you can extend the interfaces.
****************************************************************** DAVEPA **/</comment>

<cpp:undef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">undef</cpp:directive>  <name pos:line="35" pos:column="9">INTERFACE</name></cpp:undef>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">INTERFACE</name></cpp:macro>  <cpp:value pos:line="36" pos:column="20">ISimpleUnknown</cpp:value></cpp:define>

<macro><name pos:line="38" pos:column="1">DECLARE_INTERFACE</name><argument_list pos:line="38" pos:column="18">(<argument pos:line="38" pos:column="19">ISimpleUnknown</argument>)</argument_list></macro>
<block pos:line="39" pos:column="1">{
	<comment type="block" pos:line="40" pos:column="9">/* ISimpleUnknown's QueryInterface has the same semantics as the one in
		IUnknown, except that QI(IUnknown) succeeds if and only if the object
		also supports any real IUnknown interfaces, QI(ISimpleUnknown) always
		succeeds, and there is no implicit AddRef when an non-IUnknown-derived
		interface is requested.  If an object supports both IUnknown-derived
		and ISimpleUnknown-derived interfaces, then it must implement a
		reference count, but all active ISimpleUnknown-derived interfaces count
		as a single reference count. */</comment>
	<function_decl><type><name pos:line="48" pos:column="9">MSOMETHOD</name></type>(<name pos:line="48" pos:column="19">QueryInterface</name>) <parameter_list pos:line="48" pos:column="35">(<param><decl><type><name pos:line="48" pos:column="36">THIS_</name> <name pos:line="48" pos:column="42">REFIID</name></type> <name pos:line="48" pos:column="49">riid</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="55">void</name> <type:modifier pos:line="48" pos:column="60">*</type:modifier><type:modifier pos:line="48" pos:column="61">*</type:modifier></type><name pos:line="48" pos:column="62">ppvObj</name></decl></param>)</parameter_list> <name pos:line="48" pos:column="70">PURE</name>;</function_decl>
}</block><empty_stmt pos:line="49" pos:column="2">;</empty_stmt>


<comment type="block" format="doxygen" pos:line="52" pos:column="1">/****************************************************************************
	HMSOINST is an opaque reference to an Office instance record.  Each
	thread of each EXE or DLL that uses Office must call MsoFInitOffice
	to init Office and get an HMSOINST.
****************************************************************** DAVEPA **/</comment>
<cpp:ifndef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifndef</cpp:directive> <name pos:line="57" pos:column="9">HMSOINST</name></cpp:ifndef>
<typedef pos:line="58" pos:column="1">typedef <type pos:line="58" pos:column="9">struct <name pos:line="58" pos:column="16">MSOINST</name> <type:modifier pos:line="58" pos:column="24">*</type:modifier></type><name pos:line="58" pos:column="25">HMSOINST</name>;</typedef>  <comment type="line" pos:line="58" pos:column="36">// MSOINST is defined only within Office</comment>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="61" pos:column="10">"msotc.h"</lit:literal></cpp:file></cpp:include>

<comment type="block" format="doxygen" pos:line="63" pos:column="1">/****************************************************************************
	The IMsoUser interface has methods for Office to call back to the
	app for general information that is common across Office features.
****************************************************************** DAVEPA **/</comment>

<cpp:undef pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">undef</cpp:directive>  <name pos:line="68" pos:column="9">INTERFACE</name></cpp:undef>
<cpp:define pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="69" pos:column="9">INTERFACE</name></cpp:macro>  <cpp:value pos:line="69" pos:column="20">IMsoUser</cpp:value></cpp:define>

<enum pos:line="71" pos:column="1">enum <block pos:line="71" pos:column="6">{
	<decl><name pos:line="72" pos:column="9">msofmGrowZone</name> <init pos:line="72" pos:column="23">= <expr><lit:literal type="number" pos:line="72" pos:column="25">1</lit:literal></expr></init></decl><op:operator pos:line="72" pos:column="26">,</op:operator>
}</block>;</enum>

<enum pos:line="75" pos:column="1">enum <block pos:line="75" pos:column="6">{
	<decl><name pos:line="76" pos:column="9">msocchMaxShortAppId</name> <init pos:line="76" pos:column="29">= <expr><lit:literal type="number" pos:line="76" pos:column="31">15</lit:literal></expr></init></decl>
}</block>;</enum>


<comment type="block" pos:line="80" pos:column="1">/*	dlgType sent to IMsoUser::FPrepareForDialog. Modal dialogs have LSB 0.*/</comment>
<cpp:define pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="81" pos:column="9">msodlgWindowsModal</name></cpp:macro>			<cpp:value pos:line="81" pos:column="49">0x00000000</cpp:value></cpp:define>
<cpp:define pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="82" pos:column="9">msodlgWindowsModeless</name></cpp:macro>		<cpp:value pos:line="82" pos:column="41">0x00000001</cpp:value></cpp:define>
<cpp:define pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="83" pos:column="9">msodlgSdmModal</name></cpp:macro>				<cpp:value pos:line="83" pos:column="49">0x00000010</cpp:value></cpp:define>
<cpp:define pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="84" pos:column="9">msodlgSdmModeless</name></cpp:macro>			<cpp:value pos:line="84" pos:column="49">0x00000011</cpp:value></cpp:define>
<cpp:define pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="85" pos:column="9">msodlgUIModalWinModeless</name></cpp:macro>	<cpp:value pos:line="85" pos:column="41">0x00000101</cpp:value></cpp:define>
<cpp:define pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="86" pos:column="9">msodlgUIModalSdmModeless</name></cpp:macro>	<cpp:value pos:line="86" pos:column="41">0x00000111</cpp:value></cpp:define>
<cpp:define pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="87" pos:column="9">msodlgSdmModalNWaitAct</name></cpp:macro>	<cpp:value pos:line="87" pos:column="33">0x00001000</cpp:value></cpp:define>


<comment type="line" pos:line="90" pos:column="1">// Notification codes for FNotifyAction methods</comment>
<comment type="line" pos:line="91" pos:column="1">// Names containing 'Query' indicate app's return value is sought.  Other</comment>
<comment type="line" pos:line="92" pos:column="1">// values are strictly to notify app.</comment>
<enum pos:line="93" pos:column="1">enum
	<block pos:line="94" pos:column="9">{
	<decl><name pos:line="95" pos:column="9">msonaStartHelpMode</name> <init pos:line="95" pos:column="28">= <expr><lit:literal type="number" pos:line="95" pos:column="30">0</lit:literal></expr></init></decl><op:operator pos:line="95" pos:column="31">,</op:operator>			<comment type="line" pos:line="95" pos:column="49">// User entered Quick tip mode (Shift-F1).  App should update any internal state</comment>
	<decl><name pos:line="96" pos:column="9">msonaEndHelpMode</name></decl><op:operator pos:line="96" pos:column="25">,</op:operator>					<comment type="line" pos:line="96" pos:column="65">// Quick tip was displayed.  App should restore cursor.</comment>
	<decl><name pos:line="97" pos:column="9">msonaBeforePaletteRealize</name></decl><op:operator pos:line="97" pos:column="34">,</op:operator>		<comment type="line" pos:line="97" pos:column="49">// Office is going to realize one or more palettes, see comment below</comment>
	<decl><name pos:line="98" pos:column="9">msonaQueryDisablePip</name></decl><op:operator pos:line="98" pos:column="29">,</op:operator>			<comment type="line" pos:line="98" pos:column="49">// Gives the app the chance to refuse a .PIP file, should it not want one.</comment>
	<decl><name pos:line="99" pos:column="9">msonaQueryInsertPicture</name></decl><op:operator pos:line="99" pos:column="32">,</op:operator>		<comment type="line" pos:line="99" pos:column="49">// Asks the app if we can insert a picture</comment>
	<decl><name pos:line="100" pos:column="9">msonaQueryAcbAware</name></decl><op:operator pos:line="100" pos:column="27">,</op:operator>				<comment type="line" pos:line="100" pos:column="57">// Asks the app if it's fully aware of the Active ClipBoard</comment>
	<decl><name pos:line="101" pos:column="9">msonaBeforeInitTFCBalloons</name></decl><op:operator pos:line="101" pos:column="35">,</op:operator>	<comment type="line" pos:line="101" pos:column="41">// tells the app that TFC balloons are about to be initialized</comment>
	<decl><name pos:line="102" pos:column="9">msonaAfterInitTFCBalloons</name></decl><op:operator pos:line="102" pos:column="34">,</op:operator>		<comment type="line" pos:line="102" pos:column="49">// tells the app that TFC balloon initialization is over</comment>
	<decl><name pos:line="103" pos:column="9">msonaAddinBeforeConnect</name></decl><op:operator pos:line="103" pos:column="32">,</op:operator>
	<decl><name pos:line="104" pos:column="9">msonaAddinAfterConnect</name></decl><op:operator pos:line="104" pos:column="31">,</op:operator>
	<decl><name pos:line="105" pos:column="9">msonaAddinBeforeDisconnect</name></decl><op:operator pos:line="105" pos:column="35">,</op:operator>
	<decl><name pos:line="106" pos:column="9">msonaAddinAfterDisconnect</name></decl>
	}</block>;</enum>

<comment type="line" pos:line="109" pos:column="1">// Subsystem classifications for FEmNotifyAction methods</comment>
<enum pos:line="110" pos:column="1">enum
	<block pos:line="111" pos:column="9">{
	<decl><name pos:line="112" pos:column="9">msoemssToolbar</name> <init pos:line="112" pos:column="24">= <expr><lit:literal type="number" pos:line="112" pos:column="26">0</lit:literal></expr></init></decl><op:operator pos:line="112" pos:column="27">,</op:operator>			<comment type="line" pos:line="112" pos:column="49">// Command bars</comment>
	<decl><name pos:line="113" pos:column="9">msoemssAppEm</name></decl><op:operator pos:line="113" pos:column="21">,</op:operator>					<comment type="line" pos:line="113" pos:column="57">// App Event Monitor</comment>
	<decl><name pos:line="114" pos:column="9">msoemssTip</name></decl><op:operator pos:line="114" pos:column="19">,</op:operator>						<comment type="line" pos:line="114" pos:column="65">// Possible future feature: tip interface</comment>
	<decl><name pos:line="115" pos:column="9">msoemssTimer</name></decl><op:operator pos:line="115" pos:column="21">,</op:operator>					<comment type="line" pos:line="115" pos:column="57">// Possible future feature: timer notify</comment>
	}</block>;</enum>

<comment type="block" pos:line="118" pos:column="1">/* About msonaBeforePaletteRealize:

	Office will call FNotifyAction(msonaBeforePaletteRealize) to let the app
	it's going to realize a palette. The app should start palette management
	if it has delayed doing so until it absolutely needs to.
	
	The app should select and realize a palette, and from now on, should
	respond to palette messages WM_QUERYNEWPALETTE and WM_PALETTECHANGED.
*/</comment>


<macro><name pos:line="129" pos:column="1">DECLARE_INTERFACE</name><argument_list pos:line="129" pos:column="18">(<argument pos:line="129" pos:column="19">IMsoUser</argument>)</argument_list></macro>
<block pos:line="130" pos:column="1">{
   <comment type="block" pos:line="131" pos:column="4">/* Debuging interfacing for this interface */</comment>
   <decl_stmt><decl><type><name pos:line="132" pos:column="4">MSODEBUGMETHOD</name></type>

	<comment type="block" pos:line="134" pos:column="9">/* Return an IDispatch object for the Application object in 'ppidisp'
		Return fSuccess. */</comment>
	<name pos:line="136" pos:column="9">MSOMETHOD_</name><argument_list pos:line="136" pos:column="19">(<argument><expr><name pos:line="136" pos:column="20">BOOL</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="26">FGetIDispatchApp</name></expr></argument>)</argument_list> <argument_list pos:line="136" pos:column="44">(<argument><expr><name pos:line="136" pos:column="45">THIS_</name> <name pos:line="136" pos:column="51">IDispatch</name> <op:operator pos:line="136" pos:column="61">*</op:operator><op:operator pos:line="136" pos:column="62">*</op:operator><name pos:line="136" pos:column="63">ppidisp</name></expr></argument>)</argument_list> <name pos:line="136" pos:column="72">PURE</name></decl>;</decl_stmt>

	<comment type="block" pos:line="138" pos:column="9">/* Return the long representing the application, as required by the
		"Creator" method of VBA objects. */</comment>
	<macro><name pos:line="140" pos:column="9">MSOMETHOD_</name><argument_list pos:line="140" pos:column="19">(<argument pos:line="140" pos:column="20">LONG</argument>, <argument pos:line="140" pos:column="26">LAppCreatorCode</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="140" pos:column="43">(</op:operator><name pos:line="140" pos:column="44">THIS</name><op:operator pos:line="140" pos:column="48">)</op:operator> <name pos:line="140" pos:column="50">PURE</name></expr>;</expr_stmt>		<comment type="line" pos:line="140" pos:column="65">//  REVIEW:  PETERO:  Is this MAC only?</comment>

	<comment type="block" pos:line="142" pos:column="9">/* If the host does not support running macros then return FALSE,
		else check the macro reference in wtzMacro, which is in a 257 char buffer,
		for validity, modify it in-place if desired, and return TRUE if valid. 
		The object trying to attach the macro, if any, is given by 'pisu'.
		The format of macro references is defined by the host, but the typical
		simple case would be the name of a VBA Sub.  The host may delay
		expensive validation checks until FRunMacro as desired. */</comment>
	<macro><name pos:line="149" pos:column="9">MSOMETHOD_</name><argument_list pos:line="149" pos:column="19">(<argument pos:line="149" pos:column="20">BOOL</argument>, <argument pos:line="149" pos:column="26">FCheckMacro</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="149" pos:column="39">(</op:operator><name pos:line="149" pos:column="40">THIS_</name> <name pos:line="149" pos:column="46">WCHAR</name> <op:operator pos:line="149" pos:column="52">*</op:operator><name pos:line="149" pos:column="53">wtzMacro</name><op:operator pos:line="149" pos:column="61">,</op:operator> <name pos:line="149" pos:column="63">ISimpleUnknown</name> <op:operator pos:line="149" pos:column="78">*</op:operator><name pos:line="149" pos:column="79">pisu</name><op:operator pos:line="149" pos:column="83">)</op:operator> <name pos:line="149" pos:column="85">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="151" pos:column="9">/* Run the macro given by the reference wtz (which has been checked for
		validity by FCheckMacro).  The object to which the macro is attached, 
		if any, is given by 'pisu'.  Return TRUE if successful (FALSE if the
		host does not support running macros). */</comment>
	<macro><name pos:line="155" pos:column="9">MSOMETHOD_</name><argument_list pos:line="155" pos:column="19">(<argument pos:line="155" pos:column="20">BOOL</argument>, <argument pos:line="155" pos:column="26">FRunMacro</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="155" pos:column="37">(</op:operator><name pos:line="155" pos:column="38">THIS_</name> <name pos:line="155" pos:column="44">WCHAR</name> <op:operator pos:line="155" pos:column="50">*</op:operator><name pos:line="155" pos:column="51">wtzMacro</name><op:operator pos:line="155" pos:column="59">,</op:operator> <name pos:line="155" pos:column="61">ISimpleUnknown</name> <op:operator pos:line="155" pos:column="76">*</op:operator><name pos:line="155" pos:column="77">pisu</name><op:operator pos:line="155" pos:column="81">,</op:operator>
										 <name pos:line="156" pos:column="82">VARIANT</name> <op:operator pos:line="156" pos:column="90">*</op:operator><name pos:line="156" pos:column="91">pvarResult</name><op:operator pos:line="156" pos:column="101">,</op:operator> <name pos:line="156" pos:column="103">VARIANT</name> <op:operator pos:line="156" pos:column="111">*</op:operator><name pos:line="156" pos:column="112">rgvar</name><op:operator pos:line="156" pos:column="117">,</op:operator>
										 <name pos:line="157" pos:column="82">int</name> <name pos:line="157" pos:column="86">cvar</name><op:operator pos:line="157" pos:column="90">)</op:operator> <name pos:line="157" pos:column="92">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="159" pos:column="9">/* When a low memory condition occurs this callback method will be invoked.  The
		Application should free up cbBytesNeeded or more if it can.  Return back the
		actual number of bytes that were freed. */</comment>
	<macro><name pos:line="162" pos:column="9">MSOMETHOD_</name><argument_list pos:line="162" pos:column="19">(<argument pos:line="162" pos:column="20">int</argument>, <argument pos:line="162" pos:column="25">CbFreeMem</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="162" pos:column="36">(</op:operator><name pos:line="162" pos:column="37">THIS_</name> <name pos:line="162" pos:column="43">int</name> <name pos:line="162" pos:column="47">cbBytesNeeded</name><op:operator pos:line="162" pos:column="60">,</op:operator> <name pos:line="162" pos:column="62">int</name> <name pos:line="162" pos:column="66">msofm</name><op:operator pos:line="162" pos:column="71">)</op:operator> <name pos:line="162" pos:column="73">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="164" pos:column="9">/* Office will call this in deciding whether or not to do certain actions
		that require OLE. */</comment>
	<macro><name pos:line="166" pos:column="9">MSOMETHOD_</name><argument_list pos:line="166" pos:column="19">(<argument pos:line="166" pos:column="20">BOOL</argument>, <argument pos:line="166" pos:column="26">FIsOleStarted</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="166" pos:column="41">(</op:operator><name pos:line="166" pos:column="42">THIS</name><op:operator pos:line="166" pos:column="46">)</op:operator> <name pos:line="166" pos:column="48">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="168" pos:column="9">/* Office will call this in deciding whether or not to do certain actions
		that require OLE. If the Application supports delayed OLE initialization
		and OLE has not been started, try to start OLE now.  Office makes no
		guarantee that it will cache the value returned here, so this may be
		called even after OLE has been started. */</comment>
	<macro><name pos:line="173" pos:column="9">MSOMETHOD_</name><argument_list pos:line="173" pos:column="19">(<argument pos:line="173" pos:column="20">BOOL</argument>, <argument pos:line="173" pos:column="26">FStartOle</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="173" pos:column="37">(</op:operator><name pos:line="173" pos:column="38">THIS</name><op:operator pos:line="173" pos:column="42">)</op:operator> <name pos:line="173" pos:column="44">PURE</name></expr>;</expr_stmt>
	<comment type="block" pos:line="174" pos:column="9">/* If a Picture Container is being created Office will call back to the IMsoUser
		to fill the Picture Container with control(s). */</comment>
	<comment type="line" pos:line="176" pos:column="9">// TODO: TCoon unsigned int should be UCBK_SDM</comment>
	<macro><name pos:line="177" pos:column="9">MSOMETHOD_</name><argument_list pos:line="177" pos:column="19">(<argument pos:line="177" pos:column="20">BOOL</argument>, <argument pos:line="177" pos:column="26">FFillPictureContainer</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="177" pos:column="49">(</op:operator><name pos:line="177" pos:column="50">THIS_</name> <name pos:line="177" pos:column="56">interface</name> <name pos:line="177" pos:column="66">IMsoControlContainer</name> <op:operator pos:line="177" pos:column="87">*</op:operator><name pos:line="177" pos:column="88">picc</name><op:operator pos:line="177" pos:column="92">,</op:operator>
															<name pos:line="178" pos:column="121">unsigned</name> <name pos:line="178" pos:column="130">int</name> <name pos:line="178" pos:column="134">tmc</name><op:operator pos:line="178" pos:column="137">,</op:operator> <name pos:line="178" pos:column="139">unsigned</name> <name pos:line="178" pos:column="148">int</name> <name pos:line="178" pos:column="152">wBtn</name><op:operator pos:line="178" pos:column="156">,</op:operator>
															<name pos:line="179" pos:column="121">BOOL</name> <op:operator pos:line="179" pos:column="126">*</op:operator><name pos:line="179" pos:column="127">pfStop</name><op:operator pos:line="179" pos:column="133">,</op:operator> <name pos:line="179" pos:column="135">int</name> <op:operator pos:line="179" pos:column="139">*</op:operator><name pos:line="179" pos:column="140">pdx</name><op:operator pos:line="179" pos:column="143">,</op:operator> <name pos:line="179" pos:column="145">int</name> <op:operator pos:line="179" pos:column="149">*</op:operator><name pos:line="179" pos:column="150">pdy</name><op:operator pos:line="179" pos:column="153">)</op:operator> <name pos:line="179" pos:column="155">PURE</name></expr>;</expr_stmt>
	<comment type="block" pos:line="180" pos:column="9">/* The app should pass thru the parameters to WinHelp or the equivalent
		on the Mac */</comment>
	<macro><name pos:line="182" pos:column="9">MSOMETHOD_</name><argument_list pos:line="182" pos:column="19">(<argument pos:line="182" pos:column="20">void</argument>, <argument pos:line="182" pos:column="26">CallHelp</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="182" pos:column="35">(</op:operator><name pos:line="182" pos:column="36">THIS_</name> <name pos:line="182" pos:column="42">HWND</name> <name pos:line="182" pos:column="47">hwnd</name><op:operator pos:line="182" pos:column="51">,</op:operator> <name pos:line="182" pos:column="53">WCHAR</name> <op:operator pos:line="182" pos:column="59">*</op:operator><name pos:line="182" pos:column="60">wzHelpFile</name><op:operator pos:line="182" pos:column="70">,</op:operator> 
			<name pos:line="183" pos:column="25">UINT</name> <name pos:line="183" pos:column="30">uCommand</name><op:operator pos:line="183" pos:column="38">,</op:operator> <name pos:line="183" pos:column="40">DWORD</name> <name pos:line="183" pos:column="46">dwData</name><op:operator pos:line="183" pos:column="52">)</op:operator> <name pos:line="183" pos:column="54">PURE</name></expr>;</expr_stmt>
	<comment type="line" pos:line="184" pos:column="9">// WHAT IS THIS? </comment>
	<comment type="block" pos:line="185" pos:column="9">/* The init call to initialize sdm. Get called when first sdm
	   dialog needs to come up. */</comment>
	<macro><name pos:line="187" pos:column="9">MSOMETHOD_</name><argument_list pos:line="187" pos:column="19">(<argument pos:line="187" pos:column="20">BOOL</argument>, <argument pos:line="187" pos:column="26">FInitDialog</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="187" pos:column="38">(</op:operator><name pos:line="187" pos:column="39">THIS</name><op:operator pos:line="187" pos:column="43">)</op:operator> <name pos:line="187" pos:column="45">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="189" pos:column="9">/* AutoCorrect functions. Used to inegrate this feature with the apps
		undo functionality and extended AC functionality in Word. */</comment>
	<macro><name pos:line="191" pos:column="9">MSOMETHOD_</name><argument_list pos:line="191" pos:column="19">(<argument pos:line="191" pos:column="20">void</argument>, <argument pos:line="191" pos:column="26">ACRecordVars</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="191" pos:column="39">(</op:operator><name pos:line="191" pos:column="40">THIS_</name> <name pos:line="191" pos:column="46">DWORD</name> <name pos:line="191" pos:column="52">dwVars</name><op:operator pos:line="191" pos:column="58">)</op:operator> <name pos:line="191" pos:column="60">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="192" pos:column="9">MSOMETHOD_</name><argument_list pos:line="192" pos:column="19">(<argument pos:line="192" pos:column="20">BOOL</argument>, <argument pos:line="192" pos:column="26">ACFFullService</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="192" pos:column="41">(</op:operator><name pos:line="192" pos:column="42">THIS</name><op:operator pos:line="192" pos:column="46">)</op:operator> <name pos:line="192" pos:column="48">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="193" pos:column="9">MSOMETHOD_</name><argument_list pos:line="193" pos:column="19">(<argument pos:line="193" pos:column="20">void</argument>, <argument pos:line="193" pos:column="26">ACRecordRepl</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="193" pos:column="39">(</op:operator><name pos:line="193" pos:column="40">THIS_</name> <name pos:line="193" pos:column="46">int</name><op:operator pos:line="193" pos:column="49">,</op:operator> <name pos:line="193" pos:column="51">WCHAR</name> <op:operator pos:line="193" pos:column="57">*</op:operator><name pos:line="193" pos:column="58">wzFrom</name><op:operator pos:line="193" pos:column="64">,</op:operator> <name pos:line="193" pos:column="66">WCHAR</name> <op:operator pos:line="193" pos:column="72">*</op:operator><name pos:line="193" pos:column="73">wzTo</name><op:operator pos:line="193" pos:column="77">)</op:operator> <name pos:line="193" pos:column="79">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="194" pos:column="9">MSOMETHOD_</name><argument_list pos:line="194" pos:column="19">(<argument pos:line="194" pos:column="20">void</argument>, <argument pos:line="194" pos:column="26">ACAdjustAC</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="194" pos:column="37">(</op:operator><name pos:line="194" pos:column="38">THIS_</name> <name pos:line="194" pos:column="44">int</name> <name pos:line="194" pos:column="48">iwz</name><op:operator pos:line="194" pos:column="51">,</op:operator> <name pos:line="194" pos:column="53">int</name> <name pos:line="194" pos:column="57">idiwz</name><op:operator pos:line="194" pos:column="62">)</op:operator> <name pos:line="194" pos:column="64">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="196" pos:column="9">/* Return the CLSID of the application */</comment>
	<macro><name pos:line="197" pos:column="9">MSOMETHOD_</name><argument_list pos:line="197" pos:column="19">(<argument pos:line="197" pos:column="20">void</argument>, <argument pos:line="197" pos:column="26">GetAppClsid</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="197" pos:column="39">(</op:operator><name pos:line="197" pos:column="40">THIS_</name> <name pos:line="197" pos:column="46">LPCLSID</name> <op:operator pos:line="197" pos:column="54">*</op:operator><op:operator pos:line="197" pos:column="55">)</op:operator> <name pos:line="197" pos:column="57">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="199" pos:column="9">/* Before and After doing a sdm dialog, call back to the application for
		them to do their own init and cleanup.
		The dlg parameter is a bitmap flags defined here as msodlgXXXX
		*/</comment>
 	<macro><name pos:line="203" pos:column="9">MSOMETHOD_</name><argument_list pos:line="203" pos:column="19">(<argument pos:line="203" pos:column="20">BOOL</argument>, <argument pos:line="203" pos:column="26">FPrepareForDialog</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="203" pos:column="45">(</op:operator><name pos:line="203" pos:column="46">THIS_</name> <name pos:line="203" pos:column="52">void</name> <op:operator pos:line="203" pos:column="57">*</op:operator><op:operator pos:line="203" pos:column="58">*</op:operator><name pos:line="203" pos:column="59">ppvDlg</name><op:operator pos:line="203" pos:column="65">,</op:operator> <name pos:line="203" pos:column="67">int</name> <name pos:line="203" pos:column="71">dlgType</name><op:operator pos:line="203" pos:column="78">)</op:operator> <name pos:line="203" pos:column="80">PURE</name></expr>;</expr_stmt>
 	<macro><name pos:line="204" pos:column="9">MSOMETHOD_</name><argument_list pos:line="204" pos:column="19">(<argument pos:line="204" pos:column="20">void</argument>, <argument pos:line="204" pos:column="26">CleanupFromDialog</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="204" pos:column="45">(</op:operator><name pos:line="204" pos:column="46">THIS_</name> <name pos:line="204" pos:column="52">void</name> <op:operator pos:line="204" pos:column="57">*</op:operator><name pos:line="204" pos:column="58">pvDlg</name><op:operator pos:line="204" pos:column="63">)</op:operator> <name pos:line="204" pos:column="65">PURE</name></expr>;</expr_stmt>

	<comment type="line" pos:line="206" pos:column="9">// Applications must provide a short (max 15 char + '\0') string which</comment>
	<comment type="line" pos:line="207" pos:column="9">// identifies the application.  This string is used as the application ID</comment>
	<comment type="line" pos:line="208" pos:column="9">// with ODMA.  This string may be displayed to the user, so it should be</comment>
	<comment type="line" pos:line="209" pos:column="9">// localized.  But strings should be chosen so that localized versions</comment>
	<comment type="line" pos:line="210" pos:column="9">// can often use the same string.  (For example, "MS Excel" would be a</comment>
	<comment type="line" pos:line="211" pos:column="9">// good string for Excel to use with most Western-language versions.)  If</comment>
	<comment type="line" pos:line="212" pos:column="9">// the file format changes for a localized version (eg. for Far East or</comment>
	<comment type="line" pos:line="213" pos:column="9">// bi-di versions), a different string should be used for the localized</comment>
	<comment type="line" pos:line="214" pos:column="9">// versions whose file format is different.  (It is assumed that all</comment>
	<comment type="line" pos:line="215" pos:column="9">// versions with the same localized string can read each other's files.)</comment>
	<comment type="line" pos:line="216" pos:column="9">// The application should copy the string into the buffer provided.</comment>
	<comment type="line" pos:line="217" pos:column="9">// This string cannot begin with a digit.  The application can assume</comment>
	<comment type="line" pos:line="218" pos:column="9">// that wzShortAppId points to a buffer which can hold msocchMaxShortAppId</comment>
	<comment type="line" pos:line="219" pos:column="9">// Unicode characters plus a terminating '\0' character.</comment>
	<comment type="line" pos:line="220" pos:column="9">// If you have questions, contact erikhan.</comment>
	<macro><name pos:line="221" pos:column="9">MSOMETHOD_</name><argument_list pos:line="221" pos:column="19">(<argument pos:line="221" pos:column="20">void</argument>, <argument pos:line="221" pos:column="26">GetWzShortAppId</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="221" pos:column="43">(</op:operator><name pos:line="221" pos:column="44">THIS_</name> <name pos:line="221" pos:column="50">WCHAR</name> <op:operator pos:line="221" pos:column="56">*</op:operator><name pos:line="221" pos:column="57">wzShortAppId</name><op:operator pos:line="221" pos:column="69">)</op:operator> <name pos:line="221" pos:column="71">PURE</name></expr>;</expr_stmt>

	<macro><name pos:line="223" pos:column="9">MSOMETHOD_</name><argument_list pos:line="223" pos:column="19">(<argument pos:line="223" pos:column="20">void</argument>, <argument pos:line="223" pos:column="26">GetStickyDialogInfo</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="223" pos:column="47">(</op:operator><name pos:line="223" pos:column="48">THIS_</name> <name pos:line="223" pos:column="54">int</name> <name pos:line="223" pos:column="58">hidDlg</name><op:operator pos:line="223" pos:column="64">,</op:operator> <name pos:line="223" pos:column="66">POINT</name> <op:operator pos:line="223" pos:column="72">*</op:operator><name pos:line="223" pos:column="73">ppt</name><op:operator pos:line="223" pos:column="76">)</op:operator> <name pos:line="223" pos:column="78">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="224" pos:column="9">MSOMETHOD_</name><argument_list pos:line="224" pos:column="19">(<argument pos:line="224" pos:column="20">void</argument>, <argument pos:line="224" pos:column="26">SetPointStickyDialog</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="224" pos:column="48">(</op:operator><name pos:line="224" pos:column="49">THIS_</name> <name pos:line="224" pos:column="55">int</name> <name pos:line="224" pos:column="59">hidDlg</name><op:operator pos:line="224" pos:column="65">,</op:operator> <name pos:line="224" pos:column="67">POINT</name> <op:operator pos:line="224" pos:column="73">*</op:operator><name pos:line="224" pos:column="74">ppt</name><op:operator pos:line="224" pos:column="77">)</op:operator> <name pos:line="224" pos:column="79">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="226" pos:column="9">/* Called before command bars start tracking, and after they stop. Note
		that this will be called even in the HMenu cases, and on the Mac.
		Also, when real command bars start tracking, you are called on
		OnComponentActivate by the Component Manager. Make sure you know which
		callback you want to use.
		This callback is used by Excel to remove/put back a keyboard change they
		have on the Mac. */</comment>
	<macro><name pos:line="233" pos:column="9">MSOMETHOD_</name><argument_list pos:line="233" pos:column="19">(<argument pos:line="233" pos:column="20">void</argument>, <argument pos:line="233" pos:column="26">OnToolbarTrack</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="233" pos:column="42">(</op:operator><name pos:line="233" pos:column="43">THIS_</name> <name pos:line="233" pos:column="49">BOOL</name> <name pos:line="233" pos:column="54">fStart</name><op:operator pos:line="233" pos:column="60">)</op:operator> <name pos:line="233" pos:column="62">PURE</name></expr>;</expr_stmt>
	
	<comment type="block" pos:line="235" pos:column="9">/* Notification that the action given by 'na' occurred.
		Return TRUE if the
		notification was processed.
	*/</comment>
	<macro><name pos:line="239" pos:column="9">MSOMETHOD_</name><argument_list pos:line="239" pos:column="19">(<argument pos:line="239" pos:column="20">BOOL</argument>, <argument pos:line="239" pos:column="26">FNotifyAction</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="239" pos:column="41">(</op:operator><name pos:line="239" pos:column="42">THIS_</name> <name pos:line="239" pos:column="48">int</name> <name pos:line="239" pos:column="52">na</name><op:operator pos:line="239" pos:column="54">)</op:operator> <name pos:line="239" pos:column="56">PURE</name></expr>;</expr_stmt>

	<comment type="line" pos:line="241" pos:column="9">// TODO(JBelt): this callback is obsolete</comment>
	<comment type="block" pos:line="242" pos:column="9">/* Called back by the Office Darwin layer to let the app hook up its additional
		Darwin tables. The MSOTCFCF structure is explained in detail in msotc.h.
		Fill pfcf with the structure.
		You will be called on this API the very first time Office encounters a
		file id which is outside its scope. This can't happen unless you called
		MsoFGimmeFile or one of its friends with such an id in the first place.
		Non-Darwinized apps can just do nothing here. */</comment>
	<macro><name pos:line="249" pos:column="9">MSOMETHOD_</name><argument_list pos:line="249" pos:column="19">(<argument pos:line="249" pos:column="20">void</argument>, <argument pos:line="249" pos:column="26">HookDarwinTables</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="249" pos:column="44">(</op:operator><name pos:line="249" pos:column="45">THIS_</name> <name pos:line="249" pos:column="51">MSOTCFCF</name> <op:operator pos:line="249" pos:column="60">*</op:operator><name pos:line="249" pos:column="61">pfcf</name><op:operator pos:line="249" pos:column="65">)</op:operator> <name pos:line="249" pos:column="67">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="251" pos:column="9">/*  Handle all event monitor notifications.
		There was an action of interest to the event monitor in Office, such as
		toolbar	activity.  The 'subsystem' in which the action occurs is
		indicated by emss.  na is a subsystem-specific notify action
		identifier.  A negative valued na indicates a pre-action notification
		to the event monitor.  Not all events generate a pre-action, but all do
		generate a post-action.  Arguments are packed into the structure at
		pvArgs, in a subsystem and na-specific fashion.  pvArgs is maintained
		(i.e. allocated and freed, if necessary) entirely on the Office side.
		ppvEmNotify is provided for app-side communication between pre- and
		post-action notifications.  ppvEmNotify is maintained entirely by the
		application.
		Return TRUE from FEmNotifyAction if the notification was processed.
		Currently, the return value is only relevant in the case where TRUE
		is returned from a pre-action notification, in which case no
		post-action notification is sent for that event.
	*/</comment>
	<macro><name pos:line="268" pos:column="9">MSOMETHOD_</name><argument_list pos:line="268" pos:column="19">(<argument pos:line="268" pos:column="20">BOOL</argument>, <argument pos:line="268" pos:column="26">FEmNotifyAction</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="268" pos:column="43">(</op:operator><name pos:line="268" pos:column="44">THIS_</name> <name pos:line="268" pos:column="50">int</name> <name pos:line="268" pos:column="54">emss</name><op:operator pos:line="268" pos:column="58">,</op:operator> <name pos:line="268" pos:column="60">int</name> <name pos:line="268" pos:column="64">na</name><op:operator pos:line="268" pos:column="66">,</op:operator>
										<name pos:line="269" pos:column="81">void</name> <op:operator pos:line="269" pos:column="86">*</op:operator><op:operator pos:line="269" pos:column="87">*</op:operator><name pos:line="269" pos:column="88">ppvEmNotify</name><op:operator pos:line="269" pos:column="99">,</op:operator> <name pos:line="269" pos:column="101">void</name> <op:operator pos:line="269" pos:column="106">*</op:operator><name pos:line="269" pos:column="107">pvArgs</name><op:operator pos:line="269" pos:column="113">)</op:operator> <name pos:line="269" pos:column="115">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="271" pos:column="9">/* Called by an office for a button customized to be hyperlink passing the
	   mode in which the App should open the hyperlink provided in pwzSource
	   Return TRUE if app opened Hyperlink for the given mode
	          FALSE if hyperlink could not be opened/app doesn't care about it */</comment>
	<macro><name pos:line="275" pos:column="9">MSOMETHOD_</name><argument_list pos:line="275" pos:column="19">(<argument pos:line="275" pos:column="20">BOOL</argument>, <argument pos:line="275" pos:column="26">FOpenHyperlink</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="275" pos:column="42">(</op:operator><name pos:line="275" pos:column="43">THIS_</name> <name pos:line="275" pos:column="49">LPCWSTR</name> <name pos:line="275" pos:column="57">pwzSource</name><op:operator pos:line="275" pos:column="66">,</op:operator><name pos:line="275" pos:column="67">LPCWSTR</name> <name pos:line="275" pos:column="75">pwzLocation</name><op:operator pos:line="275" pos:column="86">,</op:operator>
									  <name pos:line="276" pos:column="75">DWORD</name> <name pos:line="276" pos:column="81">grfwtbnt</name><op:operator pos:line="276" pos:column="89">,</op:operator><name pos:line="276" pos:column="90">int</name> <name pos:line="276" pos:column="94">mode</name><op:operator pos:line="276" pos:column="98">)</op:operator> <name pos:line="276" pos:column="100">PURE</name></expr>;</expr_stmt>
}</block><empty_stmt pos:line="277" pos:column="2">;</empty_stmt>


<comment type="block" format="doxygen" pos:line="280" pos:column="1">/****************************************************************************
	IMsoUser10 is an Office10 extension of IMsoUser interface

	Office code cannot assume that clients implement IMsoUser10 interface.

****************************************************************** IgorZ **/</comment>

<cpp:undef pos:line="287" pos:column="1">#<cpp:directive pos:line="287" pos:column="2">undef</cpp:directive>  <name pos:line="287" pos:column="9">INTERFACE</name></cpp:undef>
<cpp:define pos:line="288" pos:column="1">#<cpp:directive pos:line="288" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="288" pos:column="9">INTERFACE</name></cpp:macro>  <cpp:value pos:line="288" pos:column="20">IMsoUser10</cpp:value></cpp:define>

<macro><name pos:line="290" pos:column="1">DECLARE_INTERFACE</name><argument_list pos:line="290" pos:column="18">(<argument pos:line="290" pos:column="19">IMsoUser10</argument>)</argument_list></macro>
<block pos:line="291" pos:column="1">{
	<macro><name pos:line="292" pos:column="9">MSOMETHOD_</name><argument_list pos:line="292" pos:column="19">(<argument pos:line="292" pos:column="20">HRESULT</argument>, <argument pos:line="292" pos:column="29">HrOnMsoFInitOffice</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="292" pos:column="48">(</op:operator>
		<name pos:line="293" pos:column="17">HWND</name> <name pos:line="293" pos:column="22">hwndMain</name><op:operator pos:line="293" pos:column="30">,</op:operator> 
		<name pos:line="294" pos:column="17">HINSTANCE</name> <name pos:line="294" pos:column="27">hinstClient</name><op:operator pos:line="294" pos:column="38">,</op:operator> 
		<name pos:line="295" pos:column="17">IMsoUser</name> <op:operator pos:line="295" pos:column="26">*</op:operator><name pos:line="295" pos:column="27">piuser</name><op:operator pos:line="295" pos:column="33">,</op:operator> 
		const <name pos:line="296" pos:column="23">WCHAR</name> <op:operator pos:line="296" pos:column="29">*</op:operator><name pos:line="296" pos:column="30">wzHostName</name><op:operator pos:line="296" pos:column="40">,</op:operator>
		<name pos:line="297" pos:column="17">HMSOINST</name> <op:operator pos:line="297" pos:column="26">*</op:operator><name pos:line="297" pos:column="27">phinst</name><op:operator pos:line="297" pos:column="33">,</op:operator>
		<name pos:line="298" pos:column="17">BOOL</name> <op:operator pos:line="298" pos:column="22">*</op:operator><name pos:line="298" pos:column="23">pfHandled</name><op:operator pos:line="298" pos:column="32">)</op:operator> <name pos:line="298" pos:column="34">PURE</name></expr>;</expr_stmt>

	<macro><name pos:line="300" pos:column="9">MSOMETHOD_</name><argument_list pos:line="300" pos:column="19">(<argument pos:line="300" pos:column="20">void</argument>, <argument pos:line="300" pos:column="26">OnMsoUninitOffice</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="300" pos:column="44">(</op:operator><name pos:line="300" pos:column="45">HMSOINST</name> <name pos:line="300" pos:column="54">hinst</name><op:operator pos:line="300" pos:column="59">,</op:operator> <name pos:line="300" pos:column="61">BOOL</name> <op:operator pos:line="300" pos:column="66">*</op:operator><name pos:line="300" pos:column="67">pfHandled</name><op:operator pos:line="300" pos:column="76">)</op:operator> <name pos:line="300" pos:column="78">PURE</name></expr>;</expr_stmt>
}</block><empty_stmt pos:line="301" pos:column="2">;</empty_stmt>


<macro><name pos:line="304" pos:column="1">MSOAPI_</name><argument_list pos:line="304" pos:column="8">(<argument pos:line="304" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="304" pos:column="15">MsoFSetInstIMsoUser10</name><argument_list pos:line="304" pos:column="36">(<argument pos:line="304" pos:column="37">HMSOINST hinst</argument>, <argument pos:line="304" pos:column="53">IMsoUser10 *pUser10</argument>)</argument_list></macro><empty_stmt pos:line="304" pos:column="73">;</empty_stmt>


<comment type="line" pos:line="307" pos:column="1">// NOTE: Another copy of this definition is in msosdm.h</comment>
<cpp:ifndef pos:line="308" pos:column="1">#<cpp:directive pos:line="308" pos:column="2">ifndef</cpp:directive> <name pos:line="308" pos:column="9">PFNFFillPictureContainer</name></cpp:ifndef>
<typedef pos:line="309" pos:column="1">typedef <function_decl><type><name pos:line="309" pos:column="9">BOOL</name></type> (<name pos:line="309" pos:column="15">MSOSTDAPICALLTYPE</name> <type:modifier pos:line="309" pos:column="33">*</type:modifier><name pos:line="309" pos:column="34">PFNFFillPictureContainer</name>) <parameter_list pos:line="309" pos:column="60">(<param><decl><type><name pos:line="309" pos:column="61">interface</name> <name pos:line="309" pos:column="71">IMsoControlContainer</name> <type:modifier pos:line="309" pos:column="92">*</type:modifier></type><name pos:line="309" pos:column="93">picc</name></decl></param>,
														<param><decl><type><name pos:line="310" pos:column="113">unsigned</name> <name pos:line="310" pos:column="122">int</name></type> <name pos:line="310" pos:column="126">tmc</name></decl></param>, <param><decl><type><name pos:line="310" pos:column="131">unsigned</name> <name pos:line="310" pos:column="140">int</name></type> <name pos:line="310" pos:column="144">wBtn</name></decl></param>,
														<param><decl><type><name pos:line="311" pos:column="113">BOOL</name> <type:modifier pos:line="311" pos:column="118">*</type:modifier></type><name pos:line="311" pos:column="119">pfStop</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="127">int</name> <type:modifier pos:line="311" pos:column="131">*</type:modifier></type><name pos:line="311" pos:column="132">pdx</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="137">int</name> <type:modifier pos:line="311" pos:column="141">*</type:modifier></type><name pos:line="311" pos:column="142">pdy</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:endif pos:line="312" pos:column="1">#<cpp:directive pos:line="312" pos:column="2">endif</cpp:directive></cpp:endif>
<cpp:ifndef pos:line="313" pos:column="1">#<cpp:directive pos:line="313" pos:column="2">ifndef</cpp:directive> <name pos:line="313" pos:column="9">PFNFFillPictureContainerEx</name></cpp:ifndef>
<typedef pos:line="314" pos:column="1">typedef <function_decl><type><name pos:line="314" pos:column="9">BOOL</name></type> (<name pos:line="314" pos:column="15">MSOSTDAPICALLTYPE</name> <type:modifier pos:line="314" pos:column="33">*</type:modifier><name pos:line="314" pos:column="34">PFNFFillPictureContainerEx</name>) <parameter_list pos:line="314" pos:column="62">(<param><decl><type><name pos:line="314" pos:column="63">interface</name> <name pos:line="314" pos:column="73">IMsoControlContainer</name> <type:modifier pos:line="314" pos:column="94">*</type:modifier></type><name pos:line="314" pos:column="95">picc</name></decl></param>,
														<param><decl><type><name pos:line="315" pos:column="113">unsigned</name> <name pos:line="315" pos:column="122">int</name></type> <name pos:line="315" pos:column="126">tmc</name></decl></param>, <param><decl><type><name pos:line="315" pos:column="131">unsigned</name> <name pos:line="315" pos:column="140">int</name></type> <name pos:line="315" pos:column="144">wBtn</name></decl></param>,
														<param><decl><type><name pos:line="316" pos:column="113">BOOL</name> <type:modifier pos:line="316" pos:column="118">*</type:modifier></type><name pos:line="316" pos:column="119">pfStop</name></decl></param>, <param><decl><type><name pos:line="316" pos:column="127">int</name> <type:modifier pos:line="316" pos:column="131">*</type:modifier></type><name pos:line="316" pos:column="132">pdx</name></decl></param>, <param><decl><type><name pos:line="316" pos:column="137">int</name> <type:modifier pos:line="316" pos:column="141">*</type:modifier></type><name pos:line="316" pos:column="142">pdy</name></decl></param>, <param><decl><type><name pos:line="316" pos:column="147">UINT</name> <type:modifier pos:line="316" pos:column="152">*</type:modifier></type><name pos:line="316" pos:column="153">pufFlags</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:endif pos:line="317" pos:column="1">#<cpp:directive pos:line="317" pos:column="2">endif</cpp:directive></cpp:endif>



<comment type="line" pos:line="321" pos:column="1">// What does an application do when it needs mso to call it back sometime?</comment>
<comment type="line" pos:line="322" pos:column="1">// It registers a callback, of course.  We have callbacks all over the place</comment>
<comment type="line" pos:line="323" pos:column="1">// and it's about time they started coming together.  Here's a mechanism</comment>
<comment type="line" pos:line="324" pos:column="1">// for registering a callback in a common way.</comment>
<comment type="line" pos:line="325" pos:column="1">//</comment>
<comment type="line" pos:line="326" pos:column="1">// First, the callback of interest is identified by an msocb constant.  The app</comment>
<comment type="line" pos:line="327" pos:column="1">// determines which callback(s) it wants to register, and calls MsoFSetCallback.</comment>
<comment type="line" pos:line="328" pos:column="1">// This will return the previously registered callback for that msocb.</comment>
<comment type="line" pos:line="329" pos:column="1">//</comment>
<comment type="line" pos:line="330" pos:column="1">// The callback signature should be defined for each msocb.</comment>
<comment type="line" pos:line="331" pos:column="1">//</comment>
<comment type="line" pos:line="332" pos:column="1">// --brianhi</comment>

<typedef pos:line="334" pos:column="1">typedef <function_decl><type><name pos:line="334" pos:column="9">void</name></type> (<name pos:line="334" pos:column="15">MSOSTDAPICALLTYPE</name> <type:modifier pos:line="334" pos:column="33">*</type:modifier> <name pos:line="334" pos:column="35">PFNGENERICCALLBACK</name>)<parameter_list pos:line="334" pos:column="54">(<param><decl><type><name pos:line="334" pos:column="55">void</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<enum pos:line="336" pos:column="1">enum
<block pos:line="337" pos:column="1">{
	<comment type="line" pos:line="338" pos:column="9">// msocbAddinGetIDispatch:  The addins object uses this callback to obtain</comment>
	<comment type="line" pos:line="339" pos:column="9">// an IDispatch object from a host application.</comment>

	<decl><name pos:line="341" pos:column="9">msocbAddinGetIDispatch</name> <init pos:line="341" pos:column="32">= <expr><lit:literal type="number" pos:line="341" pos:column="34">0</lit:literal></expr></init></decl><op:operator pos:line="341" pos:column="35">,</op:operator>		<comment type="line" pos:line="341" pos:column="49">// use PFNADDINGETIDISPATCH</comment>

	<comment type="line" pos:line="343" pos:column="9">// Add new callback types here</comment>

	<decl><name pos:line="345" pos:column="9">msocbCallbackCount</name></decl>
}</block>;</enum>

<typedef pos:line="348" pos:column="1">typedef <function_decl><type><name pos:line="348" pos:column="9">IDispatch</name> <type:modifier pos:line="348" pos:column="19">*</type:modifier></type> (<name pos:line="348" pos:column="22">MSOSTDAPICALLTYPE</name> <type:modifier pos:line="348" pos:column="40">*</type:modifier> <name pos:line="348" pos:column="42">PFNADDINGETIDISPATCH</name>)<parameter_list pos:line="348" pos:column="63">(<param><decl><type><specifier pos:line="348" pos:column="64">const</specifier> <name pos:line="348" pos:column="70">WCHAR</name> <type:modifier pos:line="348" pos:column="76">*</type:modifier></type> <name pos:line="348" pos:column="78">pwzAddinPath</name></decl></param>)</parameter_list>;</function_decl></typedef>


<macro><name pos:line="351" pos:column="1">MSOAPI_</name><argument_list pos:line="351" pos:column="8">(<argument pos:line="351" pos:column="9">PFNGENERICCALLBACK</argument>)</argument_list></macro> <macro><name pos:line="351" pos:column="29">MsoPfnSetCallback</name><argument_list pos:line="351" pos:column="46">(<argument pos:line="351" pos:column="47">UINT msocb</argument>, <argument pos:line="351" pos:column="59">PFNGENERICCALLBACK pfn</argument>)</argument_list></macro><empty_stmt pos:line="351" pos:column="82">;</empty_stmt>	<comment type="line" pos:line="351" pos:column="89">// returns previous callback</comment>
<macro><name pos:line="352" pos:column="1">MSOAPI_</name><argument_list pos:line="352" pos:column="8">(<argument pos:line="352" pos:column="9">PFNGENERICCALLBACK</argument>)</argument_list></macro> <macro><name pos:line="352" pos:column="29">MsoPfnGetCallback</name><argument_list pos:line="352" pos:column="46">(<argument pos:line="352" pos:column="47">UINT msocb</argument>)</argument_list></macro><empty_stmt pos:line="352" pos:column="58">;</empty_stmt>



<comment type="block" format="doxygen" pos:line="356" pos:column="1">/*****************************************************************************
	Registry structure for initing MSO for MsoFLangChanged
*****************************************************************************/</comment>
<typedef pos:line="359" pos:column="1">typedef <type><struct pos:line="359" pos:column="9">struct <name pos:line="359" pos:column="16">_MSOREGLANG</name>
<block pos:line="360" pos:column="1">{<public type="default" pos:line="360" pos:column="2">
	<decl_stmt><decl><type><name pos:line="361" pos:column="9">int</name></type> <name pos:line="361" pos:column="13">msoridAppRegistryLang</name></decl>;</decl_stmt>	<comment type="line" pos:line="361" pos:column="41">// For ORAPI apps</comment>
	<decl_stmt><decl><type><name pos:line="362" pos:column="9">WCHAR</name><type:modifier pos:line="362" pos:column="14">*</type:modifier></type> <name pos:line="362" pos:column="16">pwzAppRegistryLang</name></decl>;</decl_stmt>	<comment type="line" pos:line="362" pos:column="41">// If above 0, used to get registry entry (FP)</comment>
</public>}</block></struct></type><name pos:line="363" pos:column="2">MSOREGLANG</name>;</typedef> 

<cpp:if pos:line="365" pos:column="1">#<cpp:directive pos:line="365" pos:column="2">if</cpp:directive> <expr><name pos:line="365" pos:column="5">VSMSODEBUG</name></expr></cpp:if>

<comment type="block" format="doxygen" pos:line="367" pos:column="1">/*****************************************************************************
	Block Entry structure for Memory Checking
*****************************************************************************/</comment>
<typedef pos:line="370" pos:column="1">typedef <type><struct pos:line="370" pos:column="9">struct <name pos:line="370" pos:column="16">_MSOBE</name>
<block pos:line="371" pos:column="1">{<public type="default" pos:line="371" pos:column="2">
	<decl_stmt><decl><type><name pos:line="372" pos:column="9">void</name><type:modifier pos:line="372" pos:column="13">*</type:modifier></type> <name pos:line="372" pos:column="15">hp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="373" pos:column="9">int</name></type> <name pos:line="373" pos:column="13">bt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="374" pos:column="9">unsigned</name></type> <name pos:line="374" pos:column="18">cb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="375" pos:column="9">BOOL</name></type> <name pos:line="375" pos:column="14">fAllocHasSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="376" pos:column="9">HMSOINST</name></type> <name pos:line="376" pos:column="18">pinst</name></decl>;</decl_stmt>
</public>}</block></struct></type><name pos:line="377" pos:column="2">MSOBE</name>;</typedef>


<comment type="block" format="doxygen" pos:line="380" pos:column="1">/****************************************************************************
	The IMsoDebugUser interface has Debug methods for Office to call back
   to the app for debugging information that is common across Office features.
****************************************************************** JIMMUR **/</comment>

<cpp:undef pos:line="385" pos:column="1">#<cpp:directive pos:line="385" pos:column="2">undef</cpp:directive>  <name pos:line="385" pos:column="9">INTERFACE</name></cpp:undef>
<cpp:define pos:line="386" pos:column="1">#<cpp:directive pos:line="386" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="386" pos:column="9">INTERFACE</name></cpp:macro>  <cpp:value pos:line="386" pos:column="20">IMsoDebugUser</cpp:value></cpp:define>

<macro><name pos:line="388" pos:column="1">DECLARE_INTERFACE</name><argument_list pos:line="388" pos:column="18">(<argument pos:line="388" pos:column="19">IMsoDebugUser</argument>)</argument_list></macro>
<block pos:line="389" pos:column="1">{
   <comment type="block" pos:line="390" pos:column="4">/* Call the MsoFSaveBe API for all of the structures in this application 
		so that leak detection can be preformed.  If this function returns 
		FALSE the memory check will be aborted. The lparam parameter if the 
		same lparam value passed to the MsoFChkMem API.  This parameter should 
		in turn be passed to the MsoFSaveBe API which this method should call 
		to write out its stuctures. */</comment>
   <macro><name pos:line="396" pos:column="4">MSOMETHOD_</name><argument_list pos:line="396" pos:column="14">(<argument pos:line="396" pos:column="15">BOOL</argument>, <argument pos:line="396" pos:column="21">FWriteBe</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="396" pos:column="31">(</op:operator><name pos:line="396" pos:column="32">THIS_</name> <name pos:line="396" pos:column="38">LPARAM</name><op:operator pos:line="396" pos:column="44">)</op:operator> <name pos:line="396" pos:column="46">PURE</name></expr>;</expr_stmt>

   <comment type="block" pos:line="398" pos:column="4">/* This callback allows the application to abort an on going memory check.
	   If this function return TRUE the memory check will be aborted.  
		If FALSE then the memory check will continue.  The application should 
		check its message queue to determine if the memory check should 
		continue.  The lparam paramater if the same lparam value passed to the 
		MsoFChkMem API.  This allows the application to supply some context if 
		it is required. */</comment>
   <macro><name pos:line="405" pos:column="4">MSOMETHOD_</name><argument_list pos:line="405" pos:column="14">(<argument pos:line="405" pos:column="15">BOOL</argument>, <argument pos:line="405" pos:column="21">FCheckAbort</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="405" pos:column="34">(</op:operator><name pos:line="405" pos:column="35">THIS_</name> <name pos:line="405" pos:column="41">LPARAM</name><op:operator pos:line="405" pos:column="47">)</op:operator> <name pos:line="405" pos:column="49">PURE</name></expr>;</expr_stmt>

   <comment type="block" pos:line="407" pos:column="4">/* This callback is called when duplicate items are  found in the heap.
      This provides a way for an applications to manage its referenced counted
		items.  The prgbe parameter is a pointer to the array of MSOBE records. The
		ibe parameter is the current index into that array.  The cbe parameter
		is the count of BEs in the array.  This method should look at the MSOBE in
		question and return back the next index that should checked.  A value of
		0 for the return value will designate that an error has occured.*/</comment>
   <macro><name pos:line="414" pos:column="4">MSOMETHOD_</name><argument_list pos:line="414" pos:column="14">(<argument pos:line="414" pos:column="15">int</argument>, <argument pos:line="414" pos:column="20">IbeCheckItem</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="414" pos:column="34">(</op:operator><name pos:line="414" pos:column="35">THIS_</name> <name pos:line="414" pos:column="41">LPARAM</name> <name pos:line="414" pos:column="48">lParam</name><op:operator pos:line="414" pos:column="54">,</op:operator> <name pos:line="414" pos:column="56">MSOBE</name> <op:operator pos:line="414" pos:column="62">*</op:operator><name pos:line="414" pos:column="63">prgbe</name><op:operator pos:line="414" pos:column="68">,</op:operator> <name pos:line="414" pos:column="70">int</name> <name pos:line="414" pos:column="74">ibe</name><op:operator pos:line="414" pos:column="77">,</op:operator> <name pos:line="414" pos:column="79">int</name> <name pos:line="414" pos:column="83">cbe</name><op:operator pos:line="414" pos:column="86">)</op:operator> <name pos:line="414" pos:column="88">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="416" pos:column="9">/* This call back is used to aquire the strigstring name of a Bt. This is used
		when an error occurs during a memory integrity check.  Returning FALSE means
		that there is no string.*/</comment>
	<macro><name pos:line="419" pos:column="9">MSOMETHOD_</name><argument_list pos:line="419" pos:column="19">(<argument pos:line="419" pos:column="20">BOOL</argument>, <argument pos:line="419" pos:column="26">FGetSzForBt</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="419" pos:column="39">(</op:operator><name pos:line="419" pos:column="40">THIS_</name> <name pos:line="419" pos:column="46">LPARAM</name> <name pos:line="419" pos:column="53">lParam</name><op:operator pos:line="419" pos:column="59">,</op:operator> <name pos:line="419" pos:column="61">MSOBE</name> <op:operator pos:line="419" pos:column="67">*</op:operator><name pos:line="419" pos:column="68">pbe</name><op:operator pos:line="419" pos:column="71">,</op:operator> <name pos:line="419" pos:column="73">int</name> <op:operator pos:line="419" pos:column="77">*</op:operator><name pos:line="419" pos:column="78">pcbsz</name><op:operator pos:line="419" pos:column="83">,</op:operator>
												<name pos:line="420" pos:column="97">char</name> <op:operator pos:line="420" pos:column="102">*</op:operator><op:operator pos:line="420" pos:column="103">*</op:operator><name pos:line="420" pos:column="104">ppszbt</name><op:operator pos:line="420" pos:column="110">)</op:operator> <name pos:line="420" pos:column="112">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="422" pos:column="9">/* This callback is used to signal to the application that an assert is
		about to come up.  szTitle is the title of the assert, and szMsg is the
		message to be displayed in the assert, pmb contains the messagebox
		flags that will be used for the assert.  Return a MessageBox return code
		(IDABORT, IDRETRY, IDIGNORE) to stop the current assert processing and
		simulate the given return behavior.  Returns 0 to proceed with default
		assert processing.  The messagebox type can be changed by modifying
		the MB at *pmb.  iaso contains the type of assert being performed */</comment>
	<macro><name pos:line="430" pos:column="9">MSOMETHOD_</name><argument_list pos:line="430" pos:column="19">(<argument pos:line="430" pos:column="20">int</argument>, <argument pos:line="430" pos:column="25">PreAssert</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="430" pos:column="36">(</op:operator><name pos:line="430" pos:column="37">THIS_</name> <name pos:line="430" pos:column="43">int</name> <name pos:line="430" pos:column="47">iaso</name><op:operator pos:line="430" pos:column="51">,</op:operator> <name pos:line="430" pos:column="53">char</name><op:operator pos:line="430" pos:column="57">*</op:operator> <name pos:line="430" pos:column="59">szTitle</name><op:operator pos:line="430" pos:column="66">,</op:operator> <name pos:line="430" pos:column="68">char</name><op:operator pos:line="430" pos:column="72">*</op:operator> <name pos:line="430" pos:column="74">szMsg</name><op:operator pos:line="430" pos:column="79">,</op:operator> <name pos:line="430" pos:column="81">UINT</name><op:operator pos:line="430" pos:column="85">*</op:operator> <name pos:line="430" pos:column="87">pmb</name><op:operator pos:line="430" pos:column="90">)</op:operator> <name pos:line="430" pos:column="92">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="432" pos:column="9">/* This callback is used to signal to the application that an assert has 
		gone away.  id is the MessageBox return code for the assert.  The return
		value is used to modify the MessageBox return code behavior of the
		assert handler */</comment>
	<macro><name pos:line="436" pos:column="9">MSOMETHOD_</name><argument_list pos:line="436" pos:column="19">(<argument pos:line="436" pos:column="20">int</argument>, <argument pos:line="436" pos:column="25">PostAssert</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="436" pos:column="37">(</op:operator><name pos:line="436" pos:column="38">THIS_</name> <name pos:line="436" pos:column="44">int</name> <name pos:line="436" pos:column="48">id</name><op:operator pos:line="436" pos:column="50">)</op:operator> <name pos:line="436" pos:column="52">PURE</name></expr>;</expr_stmt>
}</block><empty_stmt pos:line="437" pos:column="2">;</empty_stmt>

<macro><name pos:line="439" pos:column="1">MSOAPI_</name><argument_list pos:line="439" pos:column="8">(<argument pos:line="439" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="439" pos:column="15">MsoFWriteHMSOINSTBe</name><argument_list pos:line="439" pos:column="34">(<argument pos:line="439" pos:column="35">LPARAM lParam</argument>, <argument pos:line="439" pos:column="50">HMSOINST hinst</argument>)</argument_list></macro><empty_stmt pos:line="439" pos:column="65">;</empty_stmt>
<cpp:endif pos:line="440" pos:column="1">#<cpp:directive pos:line="440" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="440" pos:column="8">// VSMSODEBUG</comment>


<comment type="block" format="doxygen" pos:line="443" pos:column="1">/****************************************************************************
	Initialization of the Office DLL
****************************************************************************/</comment>

<comment type="block" pos:line="447" pos:column="1">/* Initialize the Office DLL.  Each thread of each EXE or DLL using the
	Office DLL must call this function.  On Windows, 'hwndMain' is the hwnd of
	the app's main window, and is used to detect context switches to other 
	Office apps, and to send RPC-styles messages from one office dll to another.
	On the Mac, this used to establish window ownership (for WLM apps), and can
	be NULL for non-WLM apps.  The 'hinst' is the HINSTANCE of 
	the EXE or DLL.  The interface 'piuser' must implement the IMsoUser 
	interface for this use of Office.  wzHostName is a pointer to the short name
	of the host to be used in menu item text. It must be no longer than 32
	characters including the null terminator.
	The HMSOINST instance reference
	for this use of Office is returned in 'phinst'.  Return fSuccess. */</comment>
<macro><name pos:line="459" pos:column="1">MSOAPI_</name><argument_list pos:line="459" pos:column="8">(<argument pos:line="459" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="459" pos:column="15">MsoFInitOffice</name><argument_list pos:line="459" pos:column="29">(<argument pos:line="459" pos:column="30">HWND hwndMain</argument>, <argument pos:line="459" pos:column="45">HINSTANCE hinstClient</argument>, 
									  <argument pos:line="460" pos:column="75">IMsoUser *piuser</argument>, <argument pos:line="460" pos:column="93">const WCHAR *wzHostName</argument>,
									  <argument pos:line="461" pos:column="75">HMSOINST *phinst</argument>)</argument_list></macro><empty_stmt pos:line="461" pos:column="92">;</empty_stmt>

<comment type="block" pos:line="463" pos:column="1">/* As above, but establishes a app specific registry entry to check an apps last
	UI Language.  This is compared to the current UI lang and can then correctly
	tell the app and COM addins when the lang has changed under it. */</comment>
<macro><name pos:line="466" pos:column="1">MSOAPI_</name><argument_list pos:line="466" pos:column="8">(<argument pos:line="466" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="466" pos:column="15">MsoFInitOfficeEx</name><argument_list pos:line="466" pos:column="31">(<argument pos:line="466" pos:column="32">HWND hwndMain</argument>, <argument pos:line="466" pos:column="47">HINSTANCE hinstClient</argument>, 
									  <argument pos:line="467" pos:column="75">IMsoUser *piuser</argument>, <argument pos:line="467" pos:column="93">const WCHAR *wzHostName</argument>,
									  <argument pos:line="468" pos:column="75">HMSOINST *phinst</argument>, <argument pos:line="468" pos:column="93">MSOREGLANG* pMLRApp</argument>)</argument_list></macro><empty_stmt pos:line="468" pos:column="113">;</empty_stmt>

<comment type="block" pos:line="470" pos:column="1">/* Uninitialize the Office DLL given the HMSOINST as returned by
	MsoFInitOffice.  The 'hinst' is no longer valid after this call. */</comment>
<macro><name pos:line="472" pos:column="1">MSOAPI_</name><argument_list pos:line="472" pos:column="8">(<argument pos:line="472" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="472" pos:column="15">MsoUninitOffice</name><argument_list pos:line="472" pos:column="30">(<argument pos:line="472" pos:column="31">HMSOINST hinst</argument>)</argument_list></macro><empty_stmt pos:line="472" pos:column="46">;</empty_stmt>

<comment type="block" pos:line="474" pos:column="1">/* This API is called by when a new thread is created which may use the
   Office memory allocation functions. */</comment>
<macro><name pos:line="476" pos:column="1">MSOAPI_</name><argument_list pos:line="476" pos:column="8">(<argument pos:line="476" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="476" pos:column="15">MsoFInitThread</name><argument_list pos:line="476" pos:column="29">(<argument pos:line="476" pos:column="30">HANDLE hThread</argument>)</argument_list></macro><empty_stmt pos:line="476" pos:column="45">;</empty_stmt>

<comment type="block" pos:line="478" pos:column="1">/* This API is called by when a thread is which may use the Office memory
	allocation functions is about to be destroyed. */</comment>
<macro><name pos:line="480" pos:column="1">MSOAPI_</name><argument_list pos:line="480" pos:column="8">(<argument pos:line="480" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="480" pos:column="15">MsoUninitThread</name><argument_list pos:line="480" pos:column="30">(<argument><expr><name pos:line="480" pos:column="31">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="482" pos:column="1">/* These APIs are called when a thread which may use the Office memory
   allocation functions has been suspended/resumed. */</comment>
<macro><name pos:line="484" pos:column="1">MSOAPI_</name><argument_list pos:line="484" pos:column="8">(<argument pos:line="484" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="484" pos:column="15">MsoThreadSuspended</name><argument_list pos:line="484" pos:column="33">(<argument><expr><name pos:line="484" pos:column="34">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="485" pos:column="1">MSOAPI_</name><argument_list pos:line="485" pos:column="8">(<argument pos:line="485" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="485" pos:column="15">MsoThreadResumed</name><argument_list pos:line="485" pos:column="31">(<argument><expr><name pos:line="485" pos:column="32">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="487" pos:column="1">/* Load and register the Office OLE Automation Type Library by searching
	for the appropriate resource or file (don't use existing registry entries).  
	Return typelib in ppitl or just register and release if ppitl is NULL.
	Return HRESULT returned	from LoadTypeLib/RegisterTypeLib. */</comment>
<macro><name pos:line="491" pos:column="1">MSOAPI_</name><argument_list pos:line="491" pos:column="8">(<argument pos:line="491" pos:column="9">HRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="491" pos:column="18">MsoHrLoadTypeLib</name><argument_list pos:line="491" pos:column="34">(<argument><expr><name pos:line="491" pos:column="35">ITypeLib</name> <op:operator pos:line="491" pos:column="44">*</op:operator><op:operator pos:line="491" pos:column="45">*</op:operator><name pos:line="491" pos:column="46">ppitl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="493" pos:column="1">/* This API is used by Office clients in their implementation of 
	IVbaProjecSite::HostCheckReference. This API returns Minor version of a typelib
	that is still 100% binary compatible with the current version of a typelib 

	return HRESULT is:
		NOERROR if rgguid was handled.
		S_FALSE	if rgguid is not handled
*/</comment>
<macro><name pos:line="501" pos:column="1">MSOAPI_</name><argument_list pos:line="501" pos:column="8">(<argument pos:line="501" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="501" pos:column="18">MsoHrCheckMsoTypeLibReference</name><argument_list pos:line="501" pos:column="47">(<argument pos:line="501" pos:column="48">int fSave</argument>, <argument pos:line="501" pos:column="59">REFGUID rgguid</argument>, <argument pos:line="501" pos:column="75">UINT *puMajor</argument>, <argument pos:line="501" pos:column="90">UINT* puMinor</argument>)</argument_list></macro><empty_stmt pos:line="501" pos:column="104">;</empty_stmt>

<comment type="block" pos:line="503" pos:column="1">/* Register everything that Office needs in the registry for a normal user
	setup (e.g. typelib, proxy interfaces).  Return NOERROR or an HRESULT
	error code. */</comment>
<macro><name pos:line="506" pos:column="1">MSOAPI_</name><argument_list pos:line="506" pos:column="8">(<argument pos:line="506" pos:column="9">HRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="506" pos:column="18">MsoHrRegisterAll</name><argument_list pos:line="506" pos:column="34">()</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="508" pos:column="1">/* Same as MsoHrRegisterAll except takes the szPathOleAut param which specifies 
	the path name to an alternate version of oleaut32.dll to load and use. */</comment>
<macro><name pos:line="510" pos:column="1">MSOAPIX_</name><argument_list pos:line="510" pos:column="9">(<argument pos:line="510" pos:column="10">HRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="510" pos:column="19">MsoHrRegisterAllEx</name><argument_list pos:line="510" pos:column="37">(<argument><expr><name pos:line="510" pos:column="38">char</name> <op:operator pos:line="510" pos:column="43">*</op:operator><name pos:line="510" pos:column="44">szPathOleAut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="512" pos:column="1">/* Unregister anything that is safe and easy to unregister.
	Return NOERROR or an HRESULT error code. */</comment>
<macro><name pos:line="514" pos:column="1">MSOAPIX_</name><argument_list pos:line="514" pos:column="9">(<argument pos:line="514" pos:column="10">HRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="514" pos:column="19">MsoHrUnregisterAll</name><argument_list pos:line="514" pos:column="37">()</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="516" pos:column="1">/* Reset the hwndMain of the hinst to the passed in hwndMain.  -- Word::Stevera */</comment>
<macro><name pos:line="517" pos:column="1">MSOAPI_</name><argument_list pos:line="517" pos:column="8">(<argument pos:line="517" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="517" pos:column="15">MsoFSetInstHwndMain</name><argument_list pos:line="517" pos:column="34">(<argument pos:line="517" pos:column="35">HMSOINST hinst</argument>, <argument pos:line="517" pos:column="51">HWND hwndMain</argument>)</argument_list></macro><empty_stmt pos:line="517" pos:column="65">;</empty_stmt>

<comment type="block" pos:line="519" pos:column="1">/*	Apps can call this when they start to shutdown.  Office can use this to
	ignore subsequent clicks on the assistant, etc. */</comment>
<macro><name pos:line="521" pos:column="1">MSOAPI_</name><argument_list pos:line="521" pos:column="8">(<argument pos:line="521" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="521" pos:column="15">MsoStartShutdown</name><argument_list pos:line="521" pos:column="31">(<argument><expr><name pos:line="521" pos:column="32">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="523" pos:column="1">/* Apps can call this to get an IDispatch interface to the Answer Wizard object. */</comment>
<macro><name pos:line="524" pos:column="1">MSOAPI_</name><argument_list pos:line="524" pos:column="8">(<argument pos:line="524" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="524" pos:column="15">MsoFGetIDispatchAnswerWizard</name><argument_list pos:line="524" pos:column="43">(<argument pos:line="524" pos:column="44">HMSOINST hinst</argument>, <argument pos:line="524" pos:column="60">IDispatch **ppidisp</argument>)</argument_list></macro><empty_stmt pos:line="524" pos:column="80">;</empty_stmt>

<cpp:if pos:line="526" pos:column="1">#<cpp:directive pos:line="526" pos:column="2">if</cpp:directive> <expr><name pos:line="526" pos:column="5">VSMSODEBUG</name></expr></cpp:if>
	<comment type="block" pos:line="527" pos:column="9">/* Add the IMsoDebugUser interface to the HMSOINST instance reference.
	   Return fSuccess. */</comment>
	<macro><name pos:line="529" pos:column="9">MSOAPI_</name><argument_list pos:line="529" pos:column="16">(<argument pos:line="529" pos:column="17">BOOL</argument>)</argument_list></macro> <macro><name pos:line="529" pos:column="23">MsoFSetDebugInterface</name><argument_list pos:line="529" pos:column="44">(<argument pos:line="529" pos:column="45">HMSOINST hinst</argument>, <argument pos:line="529" pos:column="61">IMsoDebugUser *piodu</argument>)</argument_list></macro><empty_stmt pos:line="529" pos:column="82">;</empty_stmt>
	<macro><name pos:line="530" pos:column="9">MSOAPI_</name><argument_list pos:line="530" pos:column="16">(<argument pos:line="530" pos:column="17">BOOL</argument>)</argument_list></macro> <macro><name pos:line="530" pos:column="23">MsoFGetDebugInterface</name><argument_list pos:line="530" pos:column="44">(<argument pos:line="530" pos:column="45">HMSOINST hinst</argument>, <argument pos:line="530" pos:column="61">IMsoDebugUser **ppiodu</argument>)</argument_list></macro><empty_stmt pos:line="530" pos:column="84">;</empty_stmt>

<cpp:endif pos:line="532" pos:column="1">#<cpp:directive pos:line="532" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="534" pos:column="1">#<cpp:directive pos:line="534" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="534" pos:column="9">msopuigrfFreeCtlMem</name></cpp:macro>  <cpp:value pos:line="534" pos:column="30">0x00000001</cpp:value></cpp:define>

<comment type="block" pos:line="536" pos:column="1">/* Used to Clean up the Office dll before calling MsoUninitOffice. Only called
	in rare or catastrophic events. 

	If you are planning to add a new grf, then you should make sure that there
	is NO other way of doing what you want to do before adding the new grf. 

	If you are planning to call MsoPreUnInitOffice you should try to find a
	better way to accomplish this and just let MsoUninitOffice do its job
	like it is supposed to.

	msopuigrfFreeCtlMem - used to free the CtlMem chain since app is dying 
					in a catastrophic way. Needs to be called before they
					overflow the stack.
	
*/</comment>
<macro><name pos:line="551" pos:column="1">MSOAPI_</name><argument_list pos:line="551" pos:column="8">(<argument pos:line="551" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="551" pos:column="15">MsoPreUnInitOffice</name><argument_list pos:line="551" pos:column="33">(<argument pos:line="551" pos:column="34">HMSOINST hinst</argument>, <argument pos:line="551" pos:column="50">DWORD grfUninit</argument>)</argument_list></macro><empty_stmt pos:line="551" pos:column="66">;</empty_stmt>

<comment type="block" format="doxygen" pos:line="553" pos:column="1">/****************************************************************************
	Other APIs of global interest
****************************************************************************/</comment>

<comment type="block" pos:line="557" pos:column="1">/* A generic implementation of QueryInterface for an object given by pisu
	with a single ISimpleUnknown-derived interface given by riidObj.  
	Succeeds only if riidQuery == riidObj or ISimpleUnknown.  
	Returns NOERROR and pisu in *ppvObj if success, else E_NOINTERFACE. */</comment>
<macro><name pos:line="561" pos:column="1">MSOAPI_</name><argument_list pos:line="561" pos:column="8">(<argument pos:line="561" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="561" pos:column="18">MsoHrSimpleQueryInterface</name><argument_list pos:line="561" pos:column="43">(<argument pos:line="561" pos:column="44">ISimpleUnknown *pisu</argument>, 
							<argument pos:line="562" pos:column="57">REFIID riidObj</argument>, <argument pos:line="562" pos:column="73">REFIID riidQuery</argument>, <argument pos:line="562" pos:column="91">void **ppvObj</argument>)</argument_list></macro><empty_stmt pos:line="562" pos:column="105">;</empty_stmt>

<comment type="block" pos:line="564" pos:column="1">/* Like MsoHrSimpleQueryInterface except succeeds for either riidObj1
	or riidObj2, returning pisu in both cases and therefore useful for
	inherited interfaces. */</comment>
<macro><name pos:line="567" pos:column="1">MSOAPI_</name><argument_list pos:line="567" pos:column="8">(<argument pos:line="567" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="567" pos:column="18">MsoHrSimpleQueryInterface2</name><argument_list pos:line="567" pos:column="44">(<argument pos:line="567" pos:column="45">ISimpleUnknown *pisu</argument>, 
							<argument pos:line="568" pos:column="57">REFIID riidObj1</argument>, <argument pos:line="568" pos:column="74">REFIID riidObj2</argument>, <argument pos:line="568" pos:column="91">REFIID riidQuery</argument>, 
							<argument pos:line="569" pos:column="57">void **ppvObj</argument>)</argument_list></macro><empty_stmt pos:line="569" pos:column="71">;</empty_stmt>

<comment type="block" pos:line="571" pos:column="1">/* This message filter is called for EVERY message the host app receives.
	If the procedure processes it should return TRUE otw FALSE. */</comment>
<macro><name pos:line="573" pos:column="1">MSOAPI_</name><argument_list pos:line="573" pos:column="8">(<argument pos:line="573" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="573" pos:column="15">FHandledLimeMsg</name><argument_list pos:line="573" pos:column="30">(<argument><expr><name pos:line="573" pos:column="31">MSG</name> <op:operator pos:line="573" pos:column="35">*</op:operator><name pos:line="573" pos:column="36">pmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" format="doxygen" pos:line="576" pos:column="1">/*************************************************************************
	MSOGV -- Generic Value

	Currently we have a bunch of fields in Office-defined structures
	with names like pvClient, pvDgs, etc.  These are all declared as
	void *'s, but really they're just for the user of Office to stick
	some data in an Office structure.

	The problem with using void * and calling these fields pvFoo is that
	people keep assuming that you could legitimately compare them against
	NULL and draw some conclusion (like that you didn't need to call the
	host back to free	stuff).  This tended to break hosts who were storing
	indices in these fields.

	So I invented "generic value" (great name, huh?)  Variables of this
	type are named gvFoo.  Almost by definition, there is NO gvNil.

	This type will always be unsigned and always big enough to contain
	either a uint or a pointer.  We don't promise that this stays the
	same length forever, so don't go saving them in files.
************************************************************ PeterEn ****/</comment>
<typedef pos:line="597" pos:column="1">typedef <type><name pos:line="597" pos:column="9">void</name> <type:modifier pos:line="597" pos:column="14">*</type:modifier></type><name pos:line="597" pos:column="15">MSOGV</name>;</typedef>
<cpp:define pos:line="598" pos:column="1">#<cpp:directive pos:line="598" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="598" pos:column="9">msocbMSOGV</name></cpp:macro> <cpp:value pos:line="598" pos:column="20">(sizeof(MSOGV))</cpp:value></cpp:define>


<comment type="block" format="doxygen" pos:line="601" pos:column="1">/*************************************************************************
	MSOCLR -- Color

	This contains "typed" colors.  The high byte is the type,
	the low three are the data.  RGB colors have a "type" of zero.
	It'd be cool you could just cast a COLORREF to an MSOCR and have it
	work (for that to work we'd have to define RGB colors by something
	other than a zero high byte)

	TODO peteren:  These used to be called MSOCR, but cr was a really bad
	hungarian choice for this, it intersects with COLORREF all over the
	place an in the hosts.  I renamed it MSOCLR.  See if we can replace
	some of the "cr" with "clr"

	TODO peteren
	TODO johnbo

	We don't really use this type everywhere we should yet.
************************************************************ PeterEn ****/</comment>
<typedef pos:line="620" pos:column="1">typedef <type><name pos:line="620" pos:column="9">ULONG</name></type> <name pos:line="620" pos:column="15">MSOCLR</name>;</typedef>
<cpp:define pos:line="621" pos:column="1">#<cpp:directive pos:line="621" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="621" pos:column="9">msocbMSOCLR</name></cpp:macro> <cpp:value pos:line="621" pos:column="21">(sizeof(MSOCLR))</cpp:value></cpp:define>
<cpp:define pos:line="622" pos:column="1">#<cpp:directive pos:line="622" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="622" pos:column="9">msoclrNil</name></cpp:macro>   <cpp:value pos:line="622" pos:column="21">(0xFFFFFFFF)</cpp:value></cpp:define>
<cpp:define pos:line="623" pos:column="1">#<cpp:directive pos:line="623" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="623" pos:column="9">msoclrBlack</name></cpp:macro> <cpp:value pos:line="623" pos:column="21">(0x00000000)</cpp:value></cpp:define>
<cpp:define pos:line="624" pos:column="1">#<cpp:directive pos:line="624" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="624" pos:column="9">msoclrWhite</name></cpp:macro> <cpp:value pos:line="624" pos:column="21">(0x00FFFFFF)</cpp:value></cpp:define>
<cpp:define pos:line="625" pos:column="1">#<cpp:directive pos:line="625" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="625" pos:column="9">msoclrNinch</name></cpp:macro> <cpp:value pos:line="625" pos:column="21">(0x80000001)</cpp:value></cpp:define>
<cpp:define pos:line="626" pos:column="1">#<cpp:directive pos:line="626" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="626" pos:column="9">MsoClrFromCr</name><parameter_list pos:line="626" pos:column="21">(<param><type><name pos:line="626" pos:column="22">cr</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="626" pos:column="26">((MSOCLR)(cr &amp; 0x00FFFFFF))</cpp:value></cpp:define>
	<comment type="block" pos:line="627" pos:column="9">/* Converts a Win32 COLORREF to an MSOCLR */</comment>

<comment type="block" pos:line="629" pos:column="1">/* Old names, remove these */</comment>
<cpp:define pos:line="630" pos:column="1">#<cpp:directive pos:line="630" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="630" pos:column="9">MSOCR</name></cpp:macro> <cpp:value pos:line="630" pos:column="15">MSOCLR</cpp:value></cpp:define>
<cpp:define pos:line="631" pos:column="1">#<cpp:directive pos:line="631" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="631" pos:column="9">msocbMSOCR</name></cpp:macro> <cpp:value pos:line="631" pos:column="20">msocbMSOCLR</cpp:value></cpp:define>
<cpp:define pos:line="632" pos:column="1">#<cpp:directive pos:line="632" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="632" pos:column="9">msocrNil</name></cpp:macro>   <cpp:value pos:line="632" pos:column="20">msoclrNil</cpp:value></cpp:define>
<cpp:define pos:line="633" pos:column="1">#<cpp:directive pos:line="633" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="633" pos:column="9">msocrBlack</name></cpp:macro> <cpp:value pos:line="633" pos:column="20">msoclrBlack</cpp:value></cpp:define>
<cpp:define pos:line="634" pos:column="1">#<cpp:directive pos:line="634" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="634" pos:column="9">msocrWhite</name></cpp:macro> <cpp:value pos:line="634" pos:column="20">msoclrWhite</cpp:value></cpp:define>
<cpp:define pos:line="635" pos:column="1">#<cpp:directive pos:line="635" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="635" pos:column="9">msocrNinch</name></cpp:macro> <cpp:value pos:line="635" pos:column="20">msoclrNinch</cpp:value></cpp:define>

<comment type="block" pos:line="637" pos:column="1">/* MsoFGetColorString returns the name of a color. We'll fill out WZ
	with a string of at most cchMax character, not counting the 0 at the end.
	We return TRUE on success.  If you give us a non-NULL pcch will set *pcch
	to the number of characters in the string.
	If you have a COLORREF you can convert with MsoClrFromCr(cr). */</comment>
<macro><name pos:line="642" pos:column="1">MSOAPI_</name><argument_list pos:line="642" pos:column="8">(<argument pos:line="642" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="642" pos:column="15">MsoFGetColorString</name><argument_list pos:line="642" pos:column="33">(<argument pos:line="642" pos:column="34">MSOCLR clr</argument>, <argument pos:line="642" pos:column="46">WCHAR *wz</argument>, <argument pos:line="642" pos:column="57">int cchMax</argument>, <argument pos:line="642" pos:column="69">int *pcch</argument>)</argument_list></macro><empty_stmt pos:line="642" pos:column="79">;</empty_stmt>

<comment type="block" pos:line="644" pos:column="1">/* MsoFGetSplitMenuColorString returns a string for a split menu.

	If idsItem is not msoidsNil, we'll just insert the string for idsItem
	into the string for idsPattern and return the result in wz.
	
	If idsItem is msoidsNil, we'll try to get a string from the MSOCLR
	using MsoFGetColorString.  If that fails, we'll use
	msoidsSplitMenuCustomItem. */</comment>
<macro><name pos:line="652" pos:column="1">MSOAPI_</name><argument_list pos:line="652" pos:column="8">(<argument pos:line="652" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="652" pos:column="15">MsoFGetSplitMenuColorString</name><argument_list pos:line="652" pos:column="42">(<argument pos:line="652" pos:column="43">int tcidPattern</argument>, <argument pos:line="652" pos:column="60">int fItem</argument>, <argument pos:line="652" pos:column="71">MSOCLR clr</argument>, 
												  <argument pos:line="653" pos:column="99">WCHAR *wz</argument>, <argument pos:line="653" pos:column="110">int cchMax</argument>, <argument pos:line="653" pos:column="122">int *pcch</argument>)</argument_list></macro><empty_stmt pos:line="653" pos:column="132">;</empty_stmt>


<comment type="block" format="doxygen" pos:line="656" pos:column="1">/*************************************************************************
	Stream I/O Support Functions

  	MsoFByteLoad, MsoFByteSave, MsoFWordLoad, MsoFWordSave, etc.
	The following functions are helper functions to be used when loading or
	saving toolbar data using an OLE 2 Stream.  They take care of the stream
	I/O, byte swapping for consistency between Mac and Windows, and error
	checking.  They should be used in all FLoad/FSave callback functions. 
	MsoFWtzLoad expects wtz to point at an array of 257 WCHARs.  MsoFWtzSave
	will save an empty string if wtz is passed as NULL.
	
	SetLastError:  can be set to values from IStream's Read and Write methods
************************************************************ WAHHABB ****/</comment>
<macro><name pos:line="669" pos:column="1">MSOAPIX_</name><argument_list pos:line="669" pos:column="9">(<argument pos:line="669" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="669" pos:column="16">MsoFByteLoad</name><argument_list pos:line="669" pos:column="28">(<argument pos:line="669" pos:column="29">LPSTREAM pistm</argument>, <argument pos:line="669" pos:column="45">BYTE *pb</argument>)</argument_list></macro><empty_stmt pos:line="669" pos:column="54">;</empty_stmt>
<macro><name pos:line="670" pos:column="1">MSOAPIX_</name><argument_list pos:line="670" pos:column="9">(<argument pos:line="670" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="670" pos:column="16">MsoFByteSave</name><argument_list pos:line="670" pos:column="28">(<argument pos:line="670" pos:column="29">LPSTREAM pistm</argument>, <argument pos:line="670" pos:column="45">const BYTE b</argument>)</argument_list></macro><empty_stmt pos:line="670" pos:column="58">;</empty_stmt>
<macro><name pos:line="671" pos:column="1">MSOAPI_</name><argument_list pos:line="671" pos:column="8">(<argument pos:line="671" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="671" pos:column="15">MsoFWordLoad</name><argument_list pos:line="671" pos:column="27">(<argument pos:line="671" pos:column="28">LPSTREAM pistm</argument>, <argument pos:line="671" pos:column="44">WORD *pw</argument>)</argument_list></macro><empty_stmt pos:line="671" pos:column="53">;</empty_stmt>
<macro><name pos:line="672" pos:column="1">MSOAPI_</name><argument_list pos:line="672" pos:column="8">(<argument pos:line="672" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="672" pos:column="15">MsoFWordSave</name><argument_list pos:line="672" pos:column="27">(<argument pos:line="672" pos:column="28">LPSTREAM pistm</argument>, <argument pos:line="672" pos:column="44">const WORD w</argument>)</argument_list></macro><empty_stmt pos:line="672" pos:column="57">;</empty_stmt>
<macro><name pos:line="673" pos:column="1">MSOAPI_</name><argument_list pos:line="673" pos:column="8">(<argument pos:line="673" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="673" pos:column="15">MsoFLongLoad</name><argument_list pos:line="673" pos:column="27">(<argument pos:line="673" pos:column="28">LPSTREAM pistm</argument>, <argument pos:line="673" pos:column="44">LONG *pl</argument>)</argument_list></macro><empty_stmt pos:line="673" pos:column="53">;</empty_stmt>
<macro><name pos:line="674" pos:column="1">MSOAPI_</name><argument_list pos:line="674" pos:column="8">(<argument pos:line="674" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="674" pos:column="15">MsoFLongSave</name><argument_list pos:line="674" pos:column="27">(<argument pos:line="674" pos:column="28">LPSTREAM pistm</argument>, <argument pos:line="674" pos:column="44">const LONG l</argument>)</argument_list></macro><empty_stmt pos:line="674" pos:column="57">;</empty_stmt>
<macro><name pos:line="675" pos:column="1">MSOAPIX_</name><argument_list pos:line="675" pos:column="9">(<argument pos:line="675" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="675" pos:column="16">MsoFWtzLoad</name><argument_list pos:line="675" pos:column="27">(<argument pos:line="675" pos:column="28">LPSTREAM pistm</argument>, <argument pos:line="675" pos:column="44">WCHAR *wtz</argument>)</argument_list></macro><empty_stmt pos:line="675" pos:column="55">;</empty_stmt>
<macro><name pos:line="676" pos:column="1">MSOAPIX_</name><argument_list pos:line="676" pos:column="9">(<argument pos:line="676" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="676" pos:column="16">MsoFWtzSave</name><argument_list pos:line="676" pos:column="27">(<argument pos:line="676" pos:column="28">LPSTREAM pistm</argument>, <argument pos:line="676" pos:column="44">const WCHAR *wtz</argument>)</argument_list></macro><empty_stmt pos:line="676" pos:column="61">;</empty_stmt>


<comment type="block" format="doxygen" pos:line="679" pos:column="1">/****************************************************************************
	The IMSoPref (Preferences File) Interface provides a platform independent
	way to maintain settings, using a preferences file on the Macintosh, and
	a registry subkey on Windows
************************************************************** BenW ********/</comment>

<cpp:define pos:line="685" pos:column="1">#<cpp:directive pos:line="685" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="685" pos:column="9">inifAppOnly</name></cpp:macro>   <cpp:value pos:line="685" pos:column="23">1</cpp:value></cpp:define>	<comment type="line" pos:line="685" pos:column="25">// tons of these</comment>
<cpp:define pos:line="686" pos:column="1">#<cpp:directive pos:line="686" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="686" pos:column="9">inifExcelOnly</name></cpp:macro> <cpp:value pos:line="686" pos:column="23">1</cpp:value></cpp:define> <comment type="line" pos:line="686" pos:column="25">// tons of these.  Old comment:  /* EXCEL.INI only */</comment>
<cpp:define pos:line="687" pos:column="1">#<cpp:directive pos:line="687" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="687" pos:column="9">inifSysOnly</name></cpp:macro>   <cpp:value pos:line="687" pos:column="23">2</cpp:value></cpp:define>	<comment type="line" pos:line="687" pos:column="25">// only one use of this: xl\dde2.c</comment>
<cpp:define pos:line="688" pos:column="1">#<cpp:directive pos:line="688" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="688" pos:column="9">inifCache</name></cpp:macro>     <cpp:value pos:line="688" pos:column="23">4</cpp:value></cpp:define> <comment type="line" pos:line="688" pos:column="25">// tons of these, but always ORed with inifApp|ExcelOnly?</comment>

<comment type="line" pos:line="690" pos:column="1">// This order is assumed in util.cpp SET::CbQueryProfileItemIndex</comment>
<enum pos:line="691" pos:column="1">enum
<block pos:line="692" pos:column="1">{
	<decl><name pos:line="693" pos:column="9">msoprfNil</name> <init pos:line="693" pos:column="19">= <expr><lit:literal type="number" pos:line="693" pos:column="21">0</lit:literal></expr></init></decl><op:operator pos:line="693" pos:column="22">,</op:operator>
	<decl><name pos:line="694" pos:column="9">msoprfInt</name> <init pos:line="694" pos:column="19">= <expr><lit:literal type="number" pos:line="694" pos:column="21">1</lit:literal></expr></init></decl><op:operator pos:line="694" pos:column="22">,</op:operator>
	<decl><name pos:line="695" pos:column="9">msoprfString</name> <init pos:line="695" pos:column="22">= <expr><lit:literal type="number" pos:line="695" pos:column="24">2</lit:literal></expr></init></decl><op:operator pos:line="695" pos:column="25">,</op:operator>
	<decl><name pos:line="696" pos:column="9">msoprfBlob</name> <init pos:line="696" pos:column="20">= <expr><lit:literal type="number" pos:line="696" pos:column="22">3</lit:literal></expr></init></decl>
}</block>;</enum>

<cpp:undef pos:line="699" pos:column="1">#<cpp:directive pos:line="699" pos:column="2">undef</cpp:directive>  <name pos:line="699" pos:column="9">INTERFACE</name></cpp:undef>
<cpp:define pos:line="700" pos:column="1">#<cpp:directive pos:line="700" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="700" pos:column="9">INTERFACE</name></cpp:macro>  <cpp:value pos:line="700" pos:column="20">IMsoPref</cpp:value></cpp:define>

<macro><name pos:line="702" pos:column="1">DECLARE_INTERFACE</name><argument_list pos:line="702" pos:column="18">(<argument pos:line="702" pos:column="19">IMsoPref</argument>)</argument_list></macro>
<block pos:line="703" pos:column="1">{
	<comment type="line" pos:line="704" pos:column="9">//*** FDebugMessage method ***</comment>
	<decl_stmt><decl><type><name pos:line="705" pos:column="9">MSODEBUGMETHOD</name></type>

	<comment type="line" pos:line="707" pos:column="9">// IMsoPref methods</comment>
	<name pos:line="708" pos:column="9">MSOMETHOD_</name><argument_list pos:line="708" pos:column="19">(<argument><expr><name pos:line="708" pos:column="20">int</name></expr></argument>, <argument><expr><name pos:line="708" pos:column="25">LQueryProfileInt</name></expr></argument>)</argument_list> <argument_list pos:line="708" pos:column="43">(<argument><expr><name pos:line="708" pos:column="44">THIS_</name> const <name pos:line="708" pos:column="56">WCHAR</name> <op:operator pos:line="708" pos:column="62">*</op:operator></expr></argument>, <argument><expr pos:line="708" pos:column="65">const <name pos:line="708" pos:column="71">WCHAR</name> <op:operator pos:line="708" pos:column="77">*</op:operator></expr></argument>, <argument><expr><name pos:line="708" pos:column="80">int</name></expr></argument>, <argument><expr><name pos:line="708" pos:column="85">int</name></expr></argument>)</argument_list> <name pos:line="708" pos:column="90">PURE</name></decl>;</decl_stmt>
	<macro><name pos:line="709" pos:column="9">MSOMETHOD_</name><argument_list pos:line="709" pos:column="19">(<argument pos:line="709" pos:column="20">int</argument>, <argument pos:line="709" pos:column="25">CchQueryProfileString</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="709" pos:column="48">(</op:operator><name pos:line="709" pos:column="49">THIS_</name> const <name pos:line="709" pos:column="61">WCHAR</name> <op:operator pos:line="709" pos:column="67">*</op:operator><name pos:line="709" pos:column="68">wzSection</name><op:operator pos:line="709" pos:column="77">,</op:operator>
			const <name pos:line="710" pos:column="31">WCHAR</name> <op:operator pos:line="710" pos:column="37">*</op:operator><name pos:line="710" pos:column="38">wzKey</name><op:operator pos:line="710" pos:column="43">,</op:operator> const <name pos:line="710" pos:column="51">WCHAR</name> <op:operator pos:line="710" pos:column="57">*</op:operator><name pos:line="710" pos:column="58">wzDefault</name><op:operator pos:line="710" pos:column="67">,</op:operator> <name pos:line="710" pos:column="69">WCHAR</name> <op:operator pos:line="710" pos:column="75">*</op:operator><name pos:line="710" pos:column="76">wzValue</name><op:operator pos:line="710" pos:column="83">,</op:operator>
			<name pos:line="711" pos:column="25">int</name> <name pos:line="711" pos:column="29">cchMax</name><op:operator pos:line="711" pos:column="35">,</op:operator> <name pos:line="711" pos:column="37">int</name> <name pos:line="711" pos:column="41">inif</name><op:operator pos:line="711" pos:column="45">)</op:operator> <name pos:line="711" pos:column="47">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="712" pos:column="9">MSOMETHOD_</name><argument_list pos:line="712" pos:column="19">(<argument pos:line="712" pos:column="20">int</argument>, <argument pos:line="712" pos:column="25">CbQueryProfileBlob</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="712" pos:column="45">(</op:operator><name pos:line="712" pos:column="46">THIS_</name> const <name pos:line="712" pos:column="58">WCHAR</name> <op:operator pos:line="712" pos:column="64">*</op:operator><op:operator pos:line="712" pos:column="65">,</op:operator> const <name pos:line="712" pos:column="73">WCHAR</name> <op:operator pos:line="712" pos:column="79">*</op:operator><op:operator pos:line="712" pos:column="80">,</op:operator> <name pos:line="712" pos:column="82">BYTE</name> <op:operator pos:line="712" pos:column="87">*</op:operator><op:operator pos:line="712" pos:column="88">,</op:operator> <name pos:line="712" pos:column="90">int</name><op:operator pos:line="712" pos:column="93">,</op:operator> <name pos:line="712" pos:column="95">BYTE</name> <op:operator pos:line="712" pos:column="100">*</op:operator><op:operator pos:line="712" pos:column="101">,</op:operator> <name pos:line="712" pos:column="103">int</name><op:operator pos:line="712" pos:column="106">,</op:operator> <name pos:line="712" pos:column="108">int</name><op:operator pos:line="712" pos:column="111">)</op:operator> <name pos:line="712" pos:column="113">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="713" pos:column="9">MSOMETHOD_</name><argument_list pos:line="713" pos:column="19">(<argument pos:line="713" pos:column="20">BOOL</argument>, <argument pos:line="713" pos:column="26">FWriteProfileInt</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="713" pos:column="44">(</op:operator><name pos:line="713" pos:column="45">THIS_</name> const <name pos:line="713" pos:column="57">WCHAR</name> <op:operator pos:line="713" pos:column="63">*</op:operator><op:operator pos:line="713" pos:column="64">,</op:operator> const <name pos:line="713" pos:column="72">WCHAR</name> <op:operator pos:line="713" pos:column="78">*</op:operator><op:operator pos:line="713" pos:column="79">,</op:operator> <name pos:line="713" pos:column="81">int</name><op:operator pos:line="713" pos:column="84">,</op:operator> <name pos:line="713" pos:column="86">int</name><op:operator pos:line="713" pos:column="89">)</op:operator> <name pos:line="713" pos:column="91">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="714" pos:column="9">MSOMETHOD_</name><argument_list pos:line="714" pos:column="19">(<argument pos:line="714" pos:column="20">BOOL</argument>, <argument pos:line="714" pos:column="26">FWriteProfileString</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="714" pos:column="47">(</op:operator><name pos:line="714" pos:column="48">THIS_</name> const <name pos:line="714" pos:column="60">WCHAR</name> <op:operator pos:line="714" pos:column="66">*</op:operator><op:operator pos:line="714" pos:column="67">,</op:operator> const <name pos:line="714" pos:column="75">WCHAR</name> <op:operator pos:line="714" pos:column="81">*</op:operator><op:operator pos:line="714" pos:column="82">,</op:operator> const <name pos:line="714" pos:column="90">WCHAR</name> <op:operator pos:line="714" pos:column="96">*</op:operator><op:operator pos:line="714" pos:column="97">,</op:operator> <name pos:line="714" pos:column="99">int</name><op:operator pos:line="714" pos:column="102">)</op:operator> <name pos:line="714" pos:column="104">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="715" pos:column="9">MSOMETHOD_</name><argument_list pos:line="715" pos:column="19">(<argument pos:line="715" pos:column="20">BOOL</argument>, <argument pos:line="715" pos:column="26">FWriteProfileBlob</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="715" pos:column="44">(</op:operator><name pos:line="715" pos:column="45">THIS_</name> const <name pos:line="715" pos:column="57">WCHAR</name> <op:operator pos:line="715" pos:column="63">*</op:operator><op:operator pos:line="715" pos:column="64">,</op:operator> const <name pos:line="715" pos:column="72">WCHAR</name> <op:operator pos:line="715" pos:column="78">*</op:operator><op:operator pos:line="715" pos:column="79">,</op:operator> const <name pos:line="715" pos:column="87">BYTE</name> <op:operator pos:line="715" pos:column="92">*</op:operator><op:operator pos:line="715" pos:column="93">,</op:operator> <name pos:line="715" pos:column="95">int</name><op:operator pos:line="715" pos:column="98">,</op:operator> <name pos:line="715" pos:column="100">int</name><op:operator pos:line="715" pos:column="103">)</op:operator> <name pos:line="715" pos:column="105">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="716" pos:column="9">MSOMETHOD_</name><argument_list pos:line="716" pos:column="19">(<argument pos:line="716" pos:column="20">BOOL</argument>, <argument pos:line="716" pos:column="26">FDelProfileSection</argument>)</argument_list></macro><expr_stmt><expr><op:operator pos:line="716" pos:column="45">(</op:operator><name pos:line="716" pos:column="46">THIS_</name> const <name pos:line="716" pos:column="58">WCHAR</name> <op:operator pos:line="716" pos:column="64">*</op:operator><op:operator pos:line="716" pos:column="65">)</op:operator> <name pos:line="716" pos:column="67">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="717" pos:column="9">MSOMETHOD_</name><argument_list pos:line="717" pos:column="19">(<argument pos:line="717" pos:column="20">BOOL</argument>, <argument pos:line="717" pos:column="26">CbQueryProfileItemIndex</argument>)</argument_list></macro>	<expr_stmt><expr><op:operator pos:line="717" pos:column="57">(</op:operator><name pos:line="717" pos:column="58">THIS_</name> const <name pos:line="717" pos:column="70">WCHAR</name> <op:operator pos:line="717" pos:column="76">*</op:operator><name pos:line="717" pos:column="77">wzSection</name><op:operator pos:line="717" pos:column="86">,</op:operator> <name pos:line="717" pos:column="88">int</name> <name pos:line="717" pos:column="92">ikey</name><op:operator pos:line="717" pos:column="96">,</op:operator> <name pos:line="717" pos:column="98">WCHAR</name> <op:operator pos:line="717" pos:column="104">*</op:operator><name pos:line="717" pos:column="105">wzKey</name><op:operator pos:line="717" pos:column="110">,</op:operator> <name pos:line="717" pos:column="112">int</name> <name pos:line="717" pos:column="116">cchMaxKey</name><op:operator pos:line="717" pos:column="125">,</op:operator> <name pos:line="717" pos:column="127">BYTE</name> <op:operator pos:line="717" pos:column="132">*</op:operator><name pos:line="717" pos:column="133">pbValue</name><op:operator pos:line="717" pos:column="140">,</op:operator> <name pos:line="717" pos:column="142">int</name> <name pos:line="717" pos:column="146">cbMaxValue</name><op:operator pos:line="717" pos:column="156">,</op:operator> <name pos:line="717" pos:column="158">int</name> <op:operator pos:line="717" pos:column="162">*</op:operator><name pos:line="717" pos:column="163">pprf</name><op:operator pos:line="717" pos:column="167">,</op:operator> <name pos:line="717" pos:column="169">int</name> <name pos:line="717" pos:column="173">inif</name><op:operator pos:line="717" pos:column="177">)</op:operator> <name pos:line="717" pos:column="179">PURE</name></expr>;</expr_stmt>
}</block><empty_stmt pos:line="718" pos:column="2">;</empty_stmt>

<enum pos:line="720" pos:column="1">enum
<block pos:line="721" pos:column="1">{
	<decl><name pos:line="722" pos:column="9">msoprfUser</name> <init pos:line="722" pos:column="20">= <expr><lit:literal type="number" pos:line="722" pos:column="22">0x0000</lit:literal></expr></init></decl><op:operator pos:line="722" pos:column="28">,</op:operator>	<comment type="line" pos:line="722" pos:column="33">// use HKEY_CURRENT_USER</comment>
	<decl><name pos:line="723" pos:column="9">msoprfMachine</name> <init pos:line="723" pos:column="23">= <expr><lit:literal type="number" pos:line="723" pos:column="25">0x0001</lit:literal></expr></init></decl><op:operator pos:line="723" pos:column="31">,</op:operator>	<comment type="line" pos:line="723" pos:column="33">// use HKEY_LOCAL_MACHINE</comment>
	<decl><name pos:line="724" pos:column="9">msoprfIgnoreReg</name> <init pos:line="724" pos:column="25">= <expr><lit:literal type="number" pos:line="724" pos:column="27">0x8000</lit:literal></expr></init></decl><op:operator pos:line="724" pos:column="33">,</op:operator>	<comment type="line" pos:line="724" pos:column="41">// always return defaults</comment>
}</block>;</enum>

<macro><name pos:line="727" pos:column="1">MSOAPI_</name><argument_list pos:line="727" pos:column="8">(<argument pos:line="727" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="727" pos:column="15">MsoFCreateIPref</name><argument_list pos:line="727" pos:column="30">(<argument pos:line="727" pos:column="31">const WCHAR *wzPref</argument>, 
		<argument pos:line="728" pos:column="17">const WCHAR *wzUnused</argument>, <argument pos:line="728" pos:column="40">long lUnused1</argument>, <argument pos:line="728" pos:column="55">long lUnused2</argument>, 
		<argument pos:line="729" pos:column="17">int prf</argument>, <argument pos:line="729" pos:column="26">int wUnused3</argument>, <argument pos:line="729" pos:column="40">IMsoPref **ppipref</argument>)</argument_list></macro><empty_stmt pos:line="729" pos:column="59">;</empty_stmt>

<macro><name pos:line="731" pos:column="1">MSOAPI_</name><argument_list pos:line="731" pos:column="8">(<argument pos:line="731" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="731" pos:column="15">MsoDestroyIPref</name><argument_list pos:line="731" pos:column="30">(<argument><expr><name pos:line="731" pos:column="31">IMsoPref</name> <op:operator pos:line="731" pos:column="40">*</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name pos:line="733" pos:column="1">MSOAPIMX_</name><argument_list pos:line="733" pos:column="10">(<argument pos:line="733" pos:column="11">int</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="733" pos:column="16">MsoCchGetUsersFilesFolder</name><argument_list pos:line="733" pos:column="41">(<argument><expr><name pos:line="733" pos:column="42">WCHAR</name> <op:operator pos:line="733" pos:column="48">*</op:operator><name pos:line="733" pos:column="49">wzFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:line="735" pos:column="1">#<cpp:directive pos:line="735" pos:column="2">ifdef</cpp:directive> <name pos:line="735" pos:column="8">MAPIVIM</name></cpp:ifdef>
<comment type="block" pos:line="736" pos:column="1">/*	Returns the a full pathname to the MAPIVIM DLL in wzPath.   */</comment>
<macro><name pos:line="737" pos:column="1">MSOAPI_</name><argument_list pos:line="737" pos:column="8">(<argument pos:line="737" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="737" pos:column="14">MsoFGetMapiPath</name><argument_list pos:line="737" pos:column="29">(<argument pos:line="737" pos:column="30">WCHAR* wzPath</argument>, <argument pos:line="737" pos:column="45">BOOL fInstall</argument>)</argument_list></macro><empty_stmt pos:line="737" pos:column="59">;</empty_stmt>
<cpp:endif pos:line="738" pos:column="1">#<cpp:directive pos:line="738" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="738" pos:column="8">// MAPIVIM</comment>

<macro><name pos:line="740" pos:column="1">MSOAPIMX_</name><argument_list pos:line="740" pos:column="10">(<argument pos:line="740" pos:column="11">WCHAR *</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="740" pos:column="20">MsoWzGetKey</name><argument_list pos:line="740" pos:column="31">(<argument><expr pos:line="740" pos:column="32">const <name pos:line="740" pos:column="38">WCHAR</name> <op:operator pos:line="740" pos:column="44">*</op:operator><name pos:line="740" pos:column="45">wzApp</name></expr></argument>, <argument><expr pos:line="740" pos:column="52">const <name pos:line="740" pos:column="58">WCHAR</name> <op:operator pos:line="740" pos:column="64">*</op:operator><name pos:line="740" pos:column="65">wzSection</name></expr></argument>, <argument><expr><name pos:line="740" pos:column="76">WCHAR</name> <op:operator pos:line="740" pos:column="82">*</op:operator><name pos:line="740" pos:column="83">wzKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="743" pos:column="1">/*-------------------------------------------------------------------------
	MsoFGetCursorLocation

	Given the name of an animated cursor, returns the file where that cursor
	is found by looking up the name in the Cursors section of the Office prefs.
	
	On Windows, we return the name of a .CUR or .ANI file.
	On the Mac, we return the name of a single file which contains all the cursors.
	NULL means to use the cursors in the Office Shared Library.
	
	For Office 97, this is NYI on the Mac

	Returns fTrue is a cursor was found, fFalse otherwise.

------------------------------------------------------------------ BENW -*/</comment>
<macro><name pos:line="758" pos:column="1">MSOAPI_</name><argument_list pos:line="758" pos:column="8">(<argument pos:line="758" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="758" pos:column="15">MsoFGetCursorLocation</name><argument_list pos:line="758" pos:column="36">(<argument><expr><name pos:line="758" pos:column="37">WCHAR</name> <op:operator pos:line="758" pos:column="43">*</op:operator><name pos:line="758" pos:column="44">wzCursorName</name></expr></argument>, <argument><expr><name pos:line="758" pos:column="58">WCHAR</name> <op:operator pos:line="758" pos:column="64">*</op:operator><name pos:line="758" pos:column="65">wzFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen" pos:line="760" pos:column="1">/****************************************************************************
	The IMsoSplashUser interface is implemented by a user wishing to
	display a splash screen
************************************************************** SHAMIKB *****/</comment>

<cpp:undef pos:line="765" pos:column="1">#<cpp:directive pos:line="765" pos:column="2">undef</cpp:directive>  <name pos:line="765" pos:column="9">INTERFACE</name></cpp:undef>
<cpp:define pos:line="766" pos:column="1">#<cpp:directive pos:line="766" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="766" pos:column="9">INTERFACE</name></cpp:macro>  <cpp:value pos:line="766" pos:column="20">IMsoSplashUser</cpp:value></cpp:define>

<macro><name pos:line="768" pos:column="1">DECLARE_INTERFACE</name><argument_list pos:line="768" pos:column="18">(<argument pos:line="768" pos:column="19">IMsoSplashUser</argument>)</argument_list></macro>
<block pos:line="769" pos:column="1">{
	<macro><name pos:line="770" pos:column="9">MSOMETHOD_</name><argument_list pos:line="770" pos:column="19">(<argument pos:line="770" pos:column="20">BOOL</argument>, <argument pos:line="770" pos:column="26">FCreateBmp</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="770" pos:column="38">(</op:operator><name pos:line="770" pos:column="39">THIS_</name> <name pos:line="770" pos:column="45">BITMAPINFO</name><op:operator pos:line="770" pos:column="55">*</op:operator><op:operator pos:line="770" pos:column="56">*</op:operator> <name pos:line="770" pos:column="58">pbi</name><op:operator pos:line="770" pos:column="61">,</op:operator> <name pos:line="770" pos:column="63">void</name><op:operator pos:line="770" pos:column="67">*</op:operator><op:operator pos:line="770" pos:column="68">*</op:operator> <name pos:line="770" pos:column="70">pBits</name><op:operator pos:line="770" pos:column="75">)</op:operator> <name pos:line="770" pos:column="77">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="771" pos:column="9">MSOMETHOD_</name><argument_list pos:line="771" pos:column="19">(<argument pos:line="771" pos:column="20">BOOL</argument>, <argument pos:line="771" pos:column="26">FDestroyBmp</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="771" pos:column="39">(</op:operator><name pos:line="771" pos:column="40">THIS_</name> <name pos:line="771" pos:column="46">BITMAPINFO</name><op:operator pos:line="771" pos:column="56">*</op:operator> <name pos:line="771" pos:column="58">pbi</name><op:operator pos:line="771" pos:column="61">,</op:operator> <name pos:line="771" pos:column="63">void</name><op:operator pos:line="771" pos:column="67">*</op:operator> <name pos:line="771" pos:column="69">pBits</name><op:operator pos:line="771" pos:column="74">)</op:operator> <name pos:line="771" pos:column="76">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="772" pos:column="9">MSOMETHOD_</name><argument_list pos:line="772" pos:column="19">(<argument pos:line="772" pos:column="20">void</argument>, <argument pos:line="772" pos:column="26">PreBmpDisplay</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="772" pos:column="41">(</op:operator><name pos:line="772" pos:column="42">THIS_</name> <name pos:line="772" pos:column="48">HDC</name> <name pos:line="772" pos:column="52">hdcScreen</name><op:operator pos:line="772" pos:column="61">,</op:operator> <name pos:line="772" pos:column="63">HWND</name> <name pos:line="772" pos:column="68">hwnd</name><op:operator pos:line="772" pos:column="72">,</op:operator> <name pos:line="772" pos:column="74">BITMAPINFO</name><op:operator pos:line="772" pos:column="84">*</op:operator> <name pos:line="772" pos:column="86">pbi</name><op:operator pos:line="772" pos:column="89">,</op:operator> <name pos:line="772" pos:column="91">void</name><op:operator pos:line="772" pos:column="95">*</op:operator> <name pos:line="772" pos:column="97">pBits</name><op:operator pos:line="772" pos:column="102">)</op:operator> <name pos:line="772" pos:column="104">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="773" pos:column="9">MSOMETHOD_</name><argument_list pos:line="773" pos:column="19">(<argument pos:line="773" pos:column="20">void</argument>, <argument pos:line="773" pos:column="26">PostBmpDisplay</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="773" pos:column="42">(</op:operator><name pos:line="773" pos:column="43">THIS_</name> <name pos:line="773" pos:column="49">HDC</name> <name pos:line="773" pos:column="53">hdcScreen</name><op:operator pos:line="773" pos:column="62">,</op:operator> <name pos:line="773" pos:column="64">HWND</name> <name pos:line="773" pos:column="69">hwnd</name><op:operator pos:line="773" pos:column="73">,</op:operator> <name pos:line="773" pos:column="75">BITMAPINFO</name> <op:operator pos:line="773" pos:column="86">*</op:operator><name pos:line="773" pos:column="87">pbi</name><op:operator pos:line="773" pos:column="90">,</op:operator> <name pos:line="773" pos:column="92">void</name><op:operator pos:line="773" pos:column="96">*</op:operator> <name pos:line="773" pos:column="98">pBits</name><op:operator pos:line="773" pos:column="103">)</op:operator> <name pos:line="773" pos:column="105">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="774" pos:column="9">MSOMETHOD_</name><argument_list pos:line="774" pos:column="19">(<argument pos:line="774" pos:column="20">void</argument>, <argument pos:line="774" pos:column="26">ProvideTextSize</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="774" pos:column="43">(</op:operator><name pos:line="774" pos:column="44">THIS_</name> <name pos:line="774" pos:column="50">HDC</name> <name pos:line="774" pos:column="54">hdcScreen</name><op:operator pos:line="774" pos:column="63">,</op:operator> <name pos:line="774" pos:column="65">HWND</name> <name pos:line="774" pos:column="70">hwnd</name><op:operator pos:line="774" pos:column="74">,</op:operator> <name pos:line="774" pos:column="76">DWORD</name><op:operator pos:line="774" pos:column="81">*</op:operator> <name pos:line="774" pos:column="83">cxSize</name><op:operator pos:line="774" pos:column="89">,</op:operator> <name pos:line="774" pos:column="91">DWORD</name><op:operator pos:line="774" pos:column="96">*</op:operator> <name pos:line="774" pos:column="98">cySize</name><op:operator pos:line="774" pos:column="104">)</op:operator> <name pos:line="774" pos:column="106">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="775" pos:column="9">MSOMETHOD_</name><argument_list pos:line="775" pos:column="19">(<argument pos:line="775" pos:column="20">void</argument>, <argument pos:line="775" pos:column="26">TextOnlyDisplay</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="775" pos:column="43">(</op:operator><name pos:line="775" pos:column="44">THIS_</name> <name pos:line="775" pos:column="50">HDC</name> <name pos:line="775" pos:column="54">hdcScreen</name><op:operator pos:line="775" pos:column="63">,</op:operator> <name pos:line="775" pos:column="65">HWND</name> <name pos:line="775" pos:column="70">hwnd</name><op:operator pos:line="775" pos:column="74">)</op:operator> <name pos:line="775" pos:column="76">PURE</name></expr>;</expr_stmt>
	<macro><name pos:line="776" pos:column="9">MSOMETHOD_</name><argument_list pos:line="776" pos:column="19">(<argument pos:line="776" pos:column="20">void</argument>, <argument pos:line="776" pos:column="26">TextDispose</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="776" pos:column="39">(</op:operator><name pos:line="776" pos:column="40">THIS</name><op:operator pos:line="776" pos:column="44">)</op:operator> <name pos:line="776" pos:column="46">PURE</name></expr>;</expr_stmt>
}</block><empty_stmt pos:line="777" pos:column="2">;</empty_stmt>

<comment type="line" pos:line="779" pos:column="1">// APIs for displaying splash screen</comment>

<comment type="line" pos:line="781" pos:column="1">// Note:  The fDoHydra parameter for MsoFShowStartup is used to indicate support for the ProvideTextSize</comment>
<comment type="line" pos:line="782" pos:column="1">// and TextOnlyDisplay interfaces, which are used to generate a text-only splash screen under Hydra.</comment>
<comment type="line" pos:line="783" pos:column="1">// Passing FALSE will force full-bitmap splash screen display even under Hydra.</comment>
<macro><name pos:line="784" pos:column="1">MSOAPI_</name><argument_list pos:line="784" pos:column="8">(<argument pos:line="784" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="784" pos:column="15">MsoFShowStartup</name><argument_list pos:line="784" pos:column="30">(<argument pos:line="784" pos:column="31">HWND hwndMain</argument>, <argument pos:line="784" pos:column="46">BITMAPINFO* pbi</argument>, <argument pos:line="784" pos:column="63">void* pBits</argument>, <argument pos:line="784" pos:column="76">IMsoSplashUser *pSplshUser</argument>, <argument pos:line="784" pos:column="104">BOOL fDoHydra</argument>)</argument_list></macro><empty_stmt pos:line="784" pos:column="118">;</empty_stmt>
<comment type="line" pos:line="785" pos:column="1">//MSOAPI_(void) MsoUpdateStartup();</comment>
<cpp:define pos:line="786" pos:column="1">#<cpp:directive pos:line="786" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="786" pos:column="9">MsoUpdateStartup</name><parameter_list pos:line="786" pos:column="25">()</parameter_list></cpp:macro></cpp:define>
<macro><name pos:line="787" pos:column="1">MSOAPI_</name><argument_list pos:line="787" pos:column="8">(<argument pos:line="787" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="787" pos:column="15">MsoDestroyStartup</name><argument_list pos:line="787" pos:column="32">()</argument_list></call></expr>;</expr_stmt>


<comment type="block" format="doxygen" pos:line="790" pos:column="1">/****************************************************************************
	Stuff about File IO
************************************************************** PeterEn *****/</comment>

<comment type="block" pos:line="794" pos:column="1">/* MSOFO = File Offset.  This is the type in which Office stores seek
	positions in files/streams.  I kinda wanted to use FP but that's already
	a floating point quantity. Note that the IStream interfaces uses
	64-bit quantities to store these; for now we're just using 32.  These
	are exactly the same thing as FCs in Word. */</comment>
<typedef pos:line="799" pos:column="1">typedef <type><name pos:line="799" pos:column="9">ULONG</name></type> <name pos:line="799" pos:column="15">MSOFO</name>;</typedef>
<cpp:define pos:line="800" pos:column="1">#<cpp:directive pos:line="800" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="800" pos:column="9">msofoFirst</name></cpp:macro> <cpp:value pos:line="800" pos:column="20">((MSOFO)0x00000000)</cpp:value></cpp:define>
<cpp:define pos:line="801" pos:column="1">#<cpp:directive pos:line="801" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="801" pos:column="9">msofoLast</name></cpp:macro>  <cpp:value pos:line="801" pos:column="20">((MSOFO)0xFFFFFFFC)</cpp:value></cpp:define>
<cpp:define pos:line="802" pos:column="1">#<cpp:directive pos:line="802" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="802" pos:column="9">msofoMax</name></cpp:macro>   <cpp:value pos:line="802" pos:column="20">((MSOFO)0xFFFFFFFD)</cpp:value></cpp:define>
<cpp:define pos:line="803" pos:column="1">#<cpp:directive pos:line="803" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="803" pos:column="9">msofoNil</name></cpp:macro>   <cpp:value pos:line="803" pos:column="20">((MSOFO)0xFFFFFFFF)</cpp:value></cpp:define>

<comment type="block" pos:line="805" pos:column="1">/* MSODFO = Delta File Offset.  A difference between two MSOFOs. */</comment>
<typedef pos:line="806" pos:column="1">typedef <type><name pos:line="806" pos:column="9">MSOFO</name></type> <name pos:line="806" pos:column="15">MSODFO</name>;</typedef>
<cpp:define pos:line="807" pos:column="1">#<cpp:directive pos:line="807" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="807" pos:column="9">msodfoFirst</name></cpp:macro> <cpp:value pos:line="807" pos:column="21">((MSODFO)0x00000000)</cpp:value></cpp:define>
<cpp:define pos:line="808" pos:column="1">#<cpp:directive pos:line="808" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="808" pos:column="9">msodfoLast</name></cpp:macro>  <cpp:value pos:line="808" pos:column="21">((MSODFO)0xFFFFFFFC)</cpp:value></cpp:define>
<cpp:define pos:line="809" pos:column="1">#<cpp:directive pos:line="809" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="809" pos:column="9">msodfoMax</name></cpp:macro>   <cpp:value pos:line="809" pos:column="21">((MSODFO)0xFFFFFFFD)</cpp:value></cpp:define>
<cpp:define pos:line="810" pos:column="1">#<cpp:directive pos:line="810" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="810" pos:column="9">msodfoNil</name></cpp:macro>   <cpp:value pos:line="810" pos:column="21">((MSODFO)0xFFFFFFFF)</cpp:value></cpp:define>


<comment type="block" pos:line="813" pos:column="1">/*-----------------------------------------------------------------------------
	MSOEAD (Mso Encrytion Algorithm Descriptor
-------------------------------------------------------------------- HAILIU -*/</comment>
<cpp:define pos:line="816" pos:column="1">#<cpp:directive pos:line="816" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="816" pos:column="9">msoeadfOffice</name></cpp:macro>   <cpp:value pos:line="816" pos:column="25">0x1</cpp:value></cpp:define>  <comment type="line" pos:line="816" pos:column="30">// office implemented RC4 encryption</comment>
<cpp:define pos:line="817" pos:column="1">#<cpp:directive pos:line="817" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="817" pos:column="9">msoeadfXor</name></cpp:macro>      <cpp:value pos:line="817" pos:column="25">0x2</cpp:value></cpp:define>  <comment type="line" pos:line="817" pos:column="30">// very weak XOR encryption</comment>
<cpp:define pos:line="818" pos:column="1">#<cpp:directive pos:line="818" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="818" pos:column="9">msoeadfCryptAPI</name></cpp:macro> <cpp:value pos:line="818" pos:column="25">0x4</cpp:value></cpp:define>  <comment type="line" pos:line="818" pos:column="30">// CryptAPI implemented encryption (could be any algorithm)</comment>
<cpp:define pos:line="819" pos:column="1">#<cpp:directive pos:line="819" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="819" pos:column="9">msoeadfExcludeDocProps</name></cpp:macro> <cpp:value pos:line="819" pos:column="32">0x8</cpp:value></cpp:define> <comment type="line" pos:line="819" pos:column="36">// Don't encrypt doc properterties</comment>
<cpp:define pos:line="820" pos:column="1">#<cpp:directive pos:line="820" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="820" pos:column="9">msoeadfMask</name></cpp:macro>     <cpp:value pos:line="820" pos:column="25">0x7</cpp:value></cpp:define>  <comment type="line" pos:line="820" pos:column="30">// mask to get the encryption type</comment>

<typedef pos:line="822" pos:column="1">typedef <type><struct pos:line="822" pos:column="9">struct <name pos:line="822" pos:column="16">_msoead</name>
	<block pos:line="823" pos:column="9">{<public type="default" pos:line="823" pos:column="10">
	<decl_stmt><decl><type><name pos:line="824" pos:column="9">DWORD</name></type>   <name pos:line="824" pos:column="17">dwEadf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="825" pos:column="9">DWORD</name></type>   <name pos:line="825" pos:column="17">cbExtra</name></decl>;</decl_stmt>   <comment type="line" pos:line="825" pos:column="28">// forward compatibility</comment>
	<decl_stmt><decl><type><name pos:line="826" pos:column="9">int</name></type>     <name pos:line="826" pos:column="17">algid</name></decl>;</decl_stmt>     <comment type="line" pos:line="826" pos:column="28">// encryption algo id</comment>
	<decl_stmt><decl><type><name pos:line="827" pos:column="9">int</name></type>     <name pos:line="827" pos:column="17">algidHash</name></decl>;</decl_stmt> <comment type="line" pos:line="827" pos:column="28">// hashing algo id</comment>
	<decl_stmt><decl><type><name pos:line="828" pos:column="9">UINT</name></type>    <name pos:line="828" pos:column="17">cbitKey</name></decl>;</decl_stmt>   <comment type="line" pos:line="828" pos:column="28">// encryption key length</comment>
	<decl_stmt><decl><type><name pos:line="829" pos:column="9">DWORD</name></type>   <name pos:line="829" pos:column="17">dwProvType</name></decl>;</decl_stmt><comment type="line" pos:line="829" pos:column="28">// provider type</comment>
	<decl_stmt><decl><type><name pos:line="830" pos:column="9">LPCWSTR</name></type> <name pos:line="830" pos:column="17">wzProv</name></decl>;</decl_stmt>    <comment type="line" pos:line="830" pos:column="28">// Crypt Service Provider name</comment>
	<decl_stmt><decl><type><name pos:line="831" pos:column="9">LPBYTE</name></type>  <name pos:line="831" pos:column="17">pbExtra</name></decl>;</decl_stmt>   <comment type="line" pos:line="831" pos:column="28">// forward compatibility</comment>
	</public>}</block></struct></type> <name pos:line="832" pos:column="11">MSOEAD</name>;</typedef>


<comment type="block" format="doxygen" pos:line="835" pos:column="1">/****************************************************************************
	Defines the IMsoCryptSession interface

	Use this interface to encrypt or decrypt data.  In the future, perhaps
	the Crypto API can be hooked up underneath.  For now, the encryption will
	be linked to office directly.
***************************************************************** MarkWal **/</comment>
<cpp:undef pos:line="842" pos:column="1">#<cpp:directive pos:line="842" pos:column="2">undef</cpp:directive> <name pos:line="842" pos:column="8">INTERFACE</name></cpp:undef>
<cpp:define pos:line="843" pos:column="1">#<cpp:directive pos:line="843" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="843" pos:column="9">INTERFACE</name></cpp:macro> <cpp:value pos:line="843" pos:column="19">IMsoCryptSession</cpp:value></cpp:define>

<macro><name pos:line="845" pos:column="1">DECLARE_INTERFACE</name><argument_list pos:line="845" pos:column="18">(<argument pos:line="845" pos:column="19">IMsoCryptSession</argument>)</argument_list></macro>
<block pos:line="846" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="847" pos:column="9">MSODEBUGMETHOD</name></type>

	<comment type="block" pos:line="849" pos:column="9">/* discard this crypt session */</comment>
	<name pos:line="850" pos:column="9">MSOMETHOD_</name><argument_list pos:line="850" pos:column="19">(<argument><expr><name pos:line="850" pos:column="20">void</name></expr></argument>, <argument><expr><name pos:line="850" pos:column="26">Free</name></expr></argument>)</argument_list> <argument_list pos:line="850" pos:column="32">(<argument><expr><name pos:line="850" pos:column="33">THIS</name></expr></argument>)</argument_list> <name pos:line="850" pos:column="39">PURE</name></decl>;</decl_stmt>

	<comment type="block" pos:line="852" pos:column="9">/* reset the encryptor to a boundary state vs. continuing current
		stream.  iBlock indicates which block boundary to reset to. */</comment>
	<macro><name pos:line="854" pos:column="9">MSOMETHOD_</name><argument_list pos:line="854" pos:column="19">(<argument pos:line="854" pos:column="20">void</argument>, <argument pos:line="854" pos:column="26">Reset</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="854" pos:column="33">(</op:operator><name pos:line="854" pos:column="34">THIS_</name> <name pos:line="854" pos:column="40">unsigned</name> <name pos:line="854" pos:column="49">long</name> <name pos:line="854" pos:column="54">iBlock</name><op:operator pos:line="854" pos:column="60">)</op:operator> <name pos:line="854" pos:column="62">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="856" pos:column="9">/* encrypts the buffer indicated by pv inplace.  cb indicates
		how long the data is.  Encryption can change the length of the
		data if block algorithms are allowed via cbBlock non-zero on
		the call to MsoFCreateCryptSession.  In that case, *pcbNew is set
		to the new size of the buffer.  In any other case pcbNew may be NULL. */</comment>
	<macro><name pos:line="861" pos:column="9">MSOMETHOD_</name><argument_list pos:line="861" pos:column="19">(<argument pos:line="861" pos:column="20">void</argument>, <argument pos:line="861" pos:column="26">Crypt</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="861" pos:column="33">(</op:operator><name pos:line="861" pos:column="34">THIS_</name> <name pos:line="861" pos:column="40">unsigned</name> <name pos:line="861" pos:column="49">char</name> <op:operator pos:line="861" pos:column="54">*</op:operator><name pos:line="861" pos:column="55">pb</name><op:operator pos:line="861" pos:column="57">,</op:operator> <name pos:line="861" pos:column="59">int</name> <name pos:line="861" pos:column="63">cb</name><op:operator pos:line="861" pos:column="65">,</op:operator> <name pos:line="861" pos:column="67">int</name> <op:operator pos:line="861" pos:column="71">*</op:operator><name pos:line="861" pos:column="72">pcbNew</name><op:operator pos:line="861" pos:column="78">)</op:operator> <name pos:line="861" pos:column="80">PURE</name></expr>;</expr_stmt>
	<comment type="block" pos:line="862" pos:column="9">/* decrypts the buffer indicated by pv inplace.  cb indicates
		how long the data is.  Encryption can change the length of the
		data if block algorithms are allowed via cbBlock non-zero on
		the call to MsoFCreateCryptSession.  In that case, *pcbNew is set
		to the new size of the buffer.  In any other case pcbNew may be NULL. */</comment>
	<macro><name pos:line="867" pos:column="9">MSOMETHOD_</name><argument_list pos:line="867" pos:column="19">(<argument pos:line="867" pos:column="20">void</argument>, <argument pos:line="867" pos:column="26">Decrypt</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="867" pos:column="35">(</op:operator><name pos:line="867" pos:column="36">THIS_</name> <name pos:line="867" pos:column="42">PBYTE</name> <name pos:line="867" pos:column="48">pb</name><op:operator pos:line="867" pos:column="50">,</op:operator> <name pos:line="867" pos:column="52">int</name> <name pos:line="867" pos:column="56">cb</name><op:operator pos:line="867" pos:column="58">,</op:operator> <name pos:line="867" pos:column="60">int</name> <op:operator pos:line="867" pos:column="64">*</op:operator><name pos:line="867" pos:column="65">pcbNew</name><op:operator pos:line="867" pos:column="71">)</op:operator> <name pos:line="867" pos:column="73">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="869" pos:column="9">/* set the password to the indicated string.  Also, resets the algorithm */</comment>
	<macro><name pos:line="870" pos:column="9">MSOMETHOD_</name><argument_list pos:line="870" pos:column="19">(<argument pos:line="870" pos:column="20">BOOL</argument>, <argument pos:line="870" pos:column="26">FSetPass</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="870" pos:column="36">(</op:operator><name pos:line="870" pos:column="37">THIS_</name> const <name pos:line="870" pos:column="49">WCHAR</name> <op:operator pos:line="870" pos:column="55">*</op:operator><name pos:line="870" pos:column="56">wtzPass</name><op:operator pos:line="870" pos:column="63">)</op:operator> <name pos:line="870" pos:column="65">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="872" pos:column="9">/* if the encryption algorithm is a block algorithm, CbBlock indicates the
		block size.  A buffer passed in to Encrypt may grow to a CbBlock
		boundary. */</comment>
	<macro><name pos:line="875" pos:column="9">MSOMETHOD_</name><argument_list pos:line="875" pos:column="19">(<argument pos:line="875" pos:column="20">int</argument>, <argument pos:line="875" pos:column="25">CbBlock</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="875" pos:column="34">(</op:operator><name pos:line="875" pos:column="35">THIS</name><op:operator pos:line="875" pos:column="39">)</op:operator> <name pos:line="875" pos:column="41">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="877" pos:column="9">/* make this crypt session persistent so it can be loaded by 
		MsoFLoadCryptSession, stream should be positioned correctly
		before calling FSave and it will be positioned at the next byte
		when it returns */</comment>
	<macro><name pos:line="881" pos:column="9">MSOMETHOD_</name><argument_list pos:line="881" pos:column="19">(<argument pos:line="881" pos:column="20">BOOL</argument>, <argument pos:line="881" pos:column="26">FSave</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="881" pos:column="33">(</op:operator><name pos:line="881" pos:column="34">THIS_</name> <name pos:line="881" pos:column="40">LPSTREAM</name> <name pos:line="881" pos:column="49">pistm</name><op:operator pos:line="881" pos:column="54">)</op:operator> <name pos:line="881" pos:column="56">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="883" pos:column="9">/* make a duplicate of this crypt session */</comment>
	<macro><name pos:line="884" pos:column="9">MSOMETHOD_</name><argument_list pos:line="884" pos:column="19">(<argument pos:line="884" pos:column="20">BOOL</argument>, <argument pos:line="884" pos:column="26">FClone</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="884" pos:column="34">(</op:operator><name pos:line="884" pos:column="35">THIS_</name> <name pos:line="884" pos:column="41">interface</name> <name pos:line="884" pos:column="51">IMsoCryptSession</name> <op:operator pos:line="884" pos:column="68">*</op:operator><op:operator pos:line="884" pos:column="69">*</op:operator><name pos:line="884" pos:column="70">ppics</name><op:operator pos:line="884" pos:column="75">)</op:operator> <name pos:line="884" pos:column="77">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="886" pos:column="9">/* return the pead */</comment>
	<macro><name pos:line="887" pos:column="9">MSOMETHOD_</name><argument_list pos:line="887" pos:column="19">(<argument pos:line="887" pos:column="20">MSOEAD*</argument>, <argument pos:line="887" pos:column="29">Pead</argument>)</argument_list></macro> <expr_stmt><expr><op:operator pos:line="887" pos:column="35">(</op:operator><name pos:line="887" pos:column="36">THIS</name><op:operator pos:line="887" pos:column="40">)</op:operator> <name pos:line="887" pos:column="42">PURE</name></expr>;</expr_stmt>

	<comment type="block" pos:line="889" pos:column="9">/* Set the encrpytion stream which contains all the encrypted sub storage
		When passed in, the stream pointer is assumed to be at 0. Caller must
		set fCreate to TRUE if the stream passed in is a blank stream (in save
		scenario). In load scenario, fCreate should be FALSE */</comment>
	<function_decl><type><name pos:line="893" pos:column="9">MSOMETHOD</name></type>(<name pos:line="893" pos:column="19">HrSetEncryptionStream</name>)<parameter_list pos:line="893" pos:column="41">(<param><decl><type><name pos:line="893" pos:column="42">THIS_</name> <name pos:line="893" pos:column="48">LPSTREAM</name></type> <name pos:line="893" pos:column="57">pistm</name></decl></param>, <param><decl><type><name pos:line="893" pos:column="64">BOOL</name></type> <name pos:line="893" pos:column="69">fCreate</name></decl></param>)</parameter_list> <name pos:line="893" pos:column="78">PURE</name>;</function_decl>
	
	<comment type="block" pos:line="895" pos:column="9">/* For encryption, add the storage to the encryption stream. If fReserve is
		TRUE, the function simply reserve the name wzStg so no one else can get
		use it. pistg is ignored in this case can be NULL. If fReserve is FALSE,
		then pistg can not be NULL, this method will stream pistg and encrypted
		the result stream in the encryption stream set through
		HrSetEncryptionStream */</comment>
	<function_decl><type><name pos:line="901" pos:column="9">MSOMETHOD</name></type>(<name pos:line="901" pos:column="19">HrAddStg</name>)<parameter_list pos:line="901" pos:column="28">(<param><decl><type><name pos:line="901" pos:column="29">THIS_</name> <name pos:line="901" pos:column="35">LPCWSTR</name></type> <name pos:line="901" pos:column="43">wzStg</name></decl></param>, <param><decl><type><name pos:line="901" pos:column="50">LPSTORAGE</name></type> <name pos:line="901" pos:column="60">pistg</name></decl></param>, <param><decl><type><name pos:line="901" pos:column="67">BOOL</name></type> <name pos:line="901" pos:column="72">fReserve</name></decl></param>)</parameter_list> <name pos:line="901" pos:column="82">PURE</name>;</function_decl>
	
	<comment type="block" pos:line="903" pos:column="9">/* For decryption, get the storage from the encrpytion stream
		This should be called to load back the stg saved through HrAddStg */</comment>
	<function_decl><type><name pos:line="905" pos:column="9">MSOMETHOD</name></type>(<name pos:line="905" pos:column="19">HrGetStg</name>)<parameter_list pos:line="905" pos:column="28">(<param><decl><type><name pos:line="905" pos:column="29">THIS_</name> <name pos:line="905" pos:column="35">LPCWSTR</name></type> <name pos:line="905" pos:column="43">wzStg</name></decl></param>, <param><decl><type><name pos:line="905" pos:column="50">LPSTORAGE</name> <type:modifier pos:line="905" pos:column="60">*</type:modifier></type><name pos:line="905" pos:column="61">ppistg</name></decl></param>)</parameter_list> <name pos:line="905" pos:column="69">PURE</name>;</function_decl>

	<comment type="block" pos:line="907" pos:column="9">/* Same as HrAddStg but with IStream */</comment>
	<function_decl><type><name pos:line="908" pos:column="9">MSOMETHOD</name></type>(<name pos:line="908" pos:column="19">HrAddStm</name>)<parameter_list pos:line="908" pos:column="28">(<param><decl><type><name pos:line="908" pos:column="29">THIS_</name> <name pos:line="908" pos:column="35">LPCWSTR</name></type> <name pos:line="908" pos:column="43">wzStm</name></decl></param>, <param><decl><type><name pos:line="908" pos:column="50">LPSTREAM</name></type> <name pos:line="908" pos:column="59">pistm</name></decl></param>, <param><decl><type><name pos:line="908" pos:column="66">BOOL</name></type> <name pos:line="908" pos:column="71">fReserve</name></decl></param>)</parameter_list> <name pos:line="908" pos:column="81">PURE</name>;</function_decl>

	<comment type="block" pos:line="910" pos:column="9">/* Same as HrGetStg but with IStream */</comment>
	<function_decl><type><name pos:line="911" pos:column="9">MSOMETHOD</name></type>(<name pos:line="911" pos:column="19">HrGetStm</name>)<parameter_list pos:line="911" pos:column="28">(<param><decl><type><name pos:line="911" pos:column="29">THIS_</name> <name pos:line="911" pos:column="35">LPCWSTR</name></type> <name pos:line="911" pos:column="43">wzStm</name></decl></param>, <param><decl><type><name pos:line="911" pos:column="50">LPSTREAM</name> <type:modifier pos:line="911" pos:column="59">*</type:modifier></type><name pos:line="911" pos:column="60">ppistm</name></decl></param>)</parameter_list> <name pos:line="911" pos:column="68">PURE</name>;</function_decl>

	<comment type="block" pos:line="913" pos:column="9">/* Write the lookup table for the encrypted sub-storage/stream. No more sub
		Elements can be added once this method is called */</comment>
	<function_decl><type><name pos:line="915" pos:column="9">MSOMETHOD</name></type>(<name pos:line="915" pos:column="19">HrWriteSubTable</name>)<parameter_list pos:line="915" pos:column="35">(<param><decl><type><name pos:line="915" pos:column="36">THIS</name></type></decl></param>)</parameter_list> <name pos:line="915" pos:column="42">PURE</name>;</function_decl>

	<comment type="block" pos:line="917" pos:column="9">/* Get the stream back, the app usually doesn't need to call this method.
		The only exception is XL which use to method to enable it to save to a
		stg opened with STGM_SIMPLE */</comment>
	<function_decl><type><name pos:line="920" pos:column="9">MSOMETHOD</name></type>(<name pos:line="920" pos:column="19">HrGetEncryptionStream</name>)<parameter_list pos:line="920" pos:column="41">(<param><decl><type><name pos:line="920" pos:column="42">THIS_</name> <name pos:line="920" pos:column="48">LPSTREAM</name> <type:modifier pos:line="920" pos:column="57">*</type:modifier></type><name pos:line="920" pos:column="58">ppistm</name></decl></param>)</parameter_list> <name pos:line="920" pos:column="66">PURE</name>;</function_decl>
}</block><empty_stmt pos:line="921" pos:column="2">;</empty_stmt>


<comment type="block" pos:line="924" pos:column="1">/*-----------------------------------------------------------------------------
|	MSOAPI_	MsoFEncrypt
| Determine whether the languauge is French Standard	
|	
|	
|	Arguments:
|		None
|	
|	Returns:
|			BOOL: True if Language != French (Standard); else false
|	Keywords:
|	
------------------------------------------------------------SALIMI-----------*/</comment>
<macro><name pos:line="937" pos:column="1">MSOAPI_</name><argument_list pos:line="937" pos:column="8">(<argument pos:line="937" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="937" pos:column="15">MsoFEncrypt</name><argument_list pos:line="937" pos:column="26">()</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="940" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFreePead
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="943" pos:column="1">MSOAPI_</name><argument_list pos:line="943" pos:column="8">(<argument pos:line="943" pos:column="9">VOID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="943" pos:column="15">MsoFreePead</name><argument_list pos:line="943" pos:column="26">(<argument><expr><name pos:line="943" pos:column="27">MSOEAD</name> <op:operator pos:line="943" pos:column="34">*</op:operator><name pos:line="943" pos:column="35">pead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	


<comment type="block" pos:line="946" pos:column="1">/*-----------------------------------------------------------------------------
	MsoPeadClone
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="949" pos:column="1">MSOAPI_</name><argument_list pos:line="949" pos:column="8">(<argument pos:line="949" pos:column="9">MSOEAD*</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="949" pos:column="18">MsoPeadClone</name><argument_list pos:line="949" pos:column="30">(<argument><expr><name pos:line="949" pos:column="31">MSOEAD</name> <op:operator pos:line="949" pos:column="38">*</op:operator><name pos:line="949" pos:column="39">pead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if pos:line="952" pos:column="1">#<cpp:directive pos:line="952" pos:column="2">if</cpp:directive> <expr><name pos:line="952" pos:column="5">VSMSODEBUG</name></expr></cpp:if>
<comment type="block" pos:line="953" pos:column="1">/*-----------------------------------------------------------------------------
	MsoDebugPead
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="956" pos:column="1">MSOAPI_</name><argument_list pos:line="956" pos:column="8">(<argument pos:line="956" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="956" pos:column="15">MsoDebugPead</name><argument_list pos:line="956" pos:column="27">(<argument pos:line="956" pos:column="28">MSOEAD *pead</argument>, <argument pos:line="956" pos:column="42">HMSOINST hinst</argument>, <argument pos:line="956" pos:column="58">UINT dm</argument>, <argument pos:line="956" pos:column="67">WPARAM wparam</argument>,
	<argument pos:line="957" pos:column="9">LPARAM lparam</argument>)</argument_list></macro><empty_stmt pos:line="957" pos:column="23">;</empty_stmt>
<cpp:endif pos:line="958" pos:column="1">#<cpp:directive pos:line="958" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="958" pos:column="8">// VSMSODEBUG</comment>

<comment type="block" pos:line="960" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFChooseEncryptionAllowed

	Check registry setting and see if the admin has disabled user from choosing
	encryption algorithms. 
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="966" pos:column="1">MSOAPI_</name><argument_list pos:line="966" pos:column="8">(<argument pos:line="966" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="966" pos:column="15">MsoFChooseEncryptionAllowed</name><argument_list pos:line="966" pos:column="42">(<argument><expr><name pos:line="966" pos:column="43">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="969" pos:column="1">/*-----------------------------------------------------------------------------
	MsoPeadGetDefault
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="972" pos:column="1">MSOAPI_</name><argument_list pos:line="972" pos:column="8">(<argument pos:line="972" pos:column="9">MSOEAD*</argument>)</argument_list></macro> <macro><name pos:line="972" pos:column="18">MsoPeadGetDefault</name><argument_list pos:line="972" pos:column="35">(<argument pos:line="972" pos:column="36">DWORD grfead</argument>)</argument_list></macro><empty_stmt pos:line="972" pos:column="49">;</empty_stmt>


<comment type="block" pos:line="975" pos:column="1">/*-----------------------------------------------------------------------------
	MsoPeadChoose
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="978" pos:column="1">MSOAPI_</name><argument_list pos:line="978" pos:column="8">(<argument pos:line="978" pos:column="9">MSOEAD*</argument>)</argument_list></macro> <macro><name pos:line="978" pos:column="18">MsoPeadChoose</name><argument_list pos:line="978" pos:column="31">(<argument pos:line="978" pos:column="32">HWND hwndParent</argument>, <argument pos:line="978" pos:column="49">HMSOINST hinst</argument>,
	<argument pos:line="979" pos:column="9">MSOEAD *peadDefault</argument>, <argument pos:line="979" pos:column="30">DWORD grfead</argument>)</argument_list></macro><empty_stmt pos:line="979" pos:column="43">;</empty_stmt>

<comment type="block" pos:line="981" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFCreateCryptSession

	Create a new crypt session accodring to pead. The created session will
	take owner ship of the pead (even if it fails). Therefore the caller should
	not call MsoFreePead or MsoDebugPead after calling this function. This is
	done to avoid cloning pead
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="989" pos:column="1">MSOAPI_</name><argument_list pos:line="989" pos:column="8">(<argument pos:line="989" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="989" pos:column="15">MsoFCreateCryptSession</name><argument_list pos:line="989" pos:column="37">(<argument pos:line="989" pos:column="38">const WCHAR *wtzPass</argument>, <argument pos:line="989" pos:column="60">MSOEAD *pead</argument>,
	<argument pos:line="990" pos:column="9">interface IMsoCryptSession **ppics</argument>, <argument pos:line="990" pos:column="45">int cbBlock</argument>)</argument_list></macro><empty_stmt pos:line="990" pos:column="57">;</empty_stmt>


<comment type="block" pos:line="993" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFLoadCryptSession

	Load a crypt session
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="998" pos:column="1">MSOAPI_</name><argument_list pos:line="998" pos:column="8">(<argument pos:line="998" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="998" pos:column="15">MsoFLoadCryptSession</name><argument_list pos:line="998" pos:column="35">(<argument pos:line="998" pos:column="36">const WCHAR *wtzPass</argument>, <argument pos:line="998" pos:column="58">IStream *pistm</argument>,
	<argument pos:line="999" pos:column="9">interface IMsoCryptSession **ppics</argument>, <argument pos:line="999" pos:column="45">MSOEAD **ppead</argument>, <argument pos:line="999" pos:column="61">int cbBlock</argument>)</argument_list></macro><empty_stmt pos:line="999" pos:column="73">;</empty_stmt>


<comment type="block" pos:line="1002" pos:column="1">/*-----------------------------------------------------------------------------
	MsoBstrAlgoFromPead
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="1005" pos:column="1">MSOAPI_</name><argument_list pos:line="1005" pos:column="8">(<argument pos:line="1005" pos:column="9">BSTR</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1005" pos:column="15">MsoBstrAlgoFromPead</name><argument_list pos:line="1005" pos:column="34">(<argument><expr><name pos:line="1005" pos:column="35">MSOEAD</name> <op:operator pos:line="1005" pos:column="42">*</op:operator><name pos:line="1005" pos:column="43">pead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="1008" pos:column="1">/*-----------------------------------------------------------------------------
	MsoBstrProvFromPead
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="1011" pos:column="1">MSOAPI_</name><argument_list pos:line="1011" pos:column="8">(<argument pos:line="1011" pos:column="9">BSTR</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1011" pos:column="15">MsoBstrProvFromPead</name><argument_list pos:line="1011" pos:column="34">(<argument><expr><name pos:line="1011" pos:column="35">MSOEAD</name> <op:operator pos:line="1011" pos:column="42">*</op:operator><name pos:line="1011" pos:column="43">pead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1013" pos:column="1">/*-----------------------------------------------------------------------------
	MsoPeadFromWzs
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="1016" pos:column="1">MSOAPI_</name><argument_list pos:line="1016" pos:column="8">(<argument pos:line="1016" pos:column="9">MSOEAD *</argument>)</argument_list></macro> <macro><name pos:line="1016" pos:column="19">MsoPeadFromWzs</name><argument_list pos:line="1016" pos:column="33">(<argument pos:line="1016" pos:column="34">DWORD grfead</argument>, <argument pos:line="1016" pos:column="48">LPCWSTR wzProv</argument>, <argument pos:line="1016" pos:column="64">LPCWSTR wzAlgo</argument>,
	<argument pos:line="1017" pos:column="9">int cbitKey</argument>, <argument pos:line="1017" pos:column="22">BOOL fEncryptDocProps</argument>)</argument_list></macro><empty_stmt pos:line="1017" pos:column="44">;</empty_stmt>
	

<comment type="block" pos:line="1020" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRecordPead
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="1023" pos:column="1">MSOAPI_</name><argument_list pos:line="1023" pos:column="8">(<argument pos:line="1023" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1023" pos:column="15">MsoFRecordPead</name><argument_list pos:line="1023" pos:column="29">(<argument pos:line="1023" pos:column="30">MSOEAD *pead</argument>, <argument pos:line="1023" pos:column="44">UINT appId</argument>)</argument_list></macro><empty_stmt pos:line="1023" pos:column="55">;</empty_stmt>


<comment type="block" format="doxygen" pos:line="1026" pos:column="1">/****************************************************************************
	Office ZoomRect animation code
****************************************************************************/</comment>
<macro><name pos:line="1029" pos:column="1">MSOAPI_</name><argument_list pos:line="1029" pos:column="8">(<argument pos:line="1029" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="1029" pos:column="15">MsoZoomRect</name><argument_list pos:line="1029" pos:column="26">(<argument pos:line="1029" pos:column="27">RECT *prcFrom</argument>, <argument pos:line="1029" pos:column="42">RECT *prcTo</argument>, <argument pos:line="1029" pos:column="55">BOOL fAccelerate</argument>, <argument pos:line="1029" pos:column="73">HRGN hrgnClip</argument>)</argument_list></macro><empty_stmt pos:line="1029" pos:column="87">;</empty_stmt>
<macro><name pos:line="1030" pos:column="1">MSOAPI_</name><argument_list pos:line="1030" pos:column="8">(<argument pos:line="1030" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="1030" pos:column="15">MsoZoomRectEx</name><argument_list pos:line="1030" pos:column="28">(<argument pos:line="1030" pos:column="29">RECT *prcFrom</argument>, <argument pos:line="1030" pos:column="44">RECT *prcTo</argument>, <argument pos:line="1030" pos:column="57">BOOL fAccelerate</argument>, <argument pos:line="1030" pos:column="75">HRGN hrgnClip</argument>, <argument pos:line="1030" pos:column="90">int delay</argument>)</argument_list></macro><empty_stmt pos:line="1030" pos:column="100">;</empty_stmt>

<comment type="line" pos:line="1032" pos:column="1">// Idle Initialization stuff</comment>

<comment type="line" pos:line="1034" pos:column="1">// Idle Init structure</comment>
<typedef pos:line="1035" pos:column="1">typedef <type><struct pos:line="1035" pos:column="9">struct <name pos:line="1035" pos:column="16">tagMSOIDLEINIT</name>
<block pos:line="1036" pos:column="1">{<public type="default" pos:line="1036" pos:column="2">
	<function_decl><type><name pos:line="1037" pos:column="9">BOOL</name></type> (<type:modifier pos:line="1037" pos:column="15">*</type:modifier><name pos:line="1037" pos:column="16">pfnIdleInit</name>)<parameter_list pos:line="1037" pos:column="28">(<param><decl><type><name pos:line="1037" pos:column="29">void</name></type></decl></param>)</parameter_list>;</function_decl>
</public>}</block></struct></type> <name pos:line="1038" pos:column="3">MSOIDLEINIT</name>;</typedef>

<comment type="block" pos:line="1040" pos:column="1">/*---------------------------------------------------------------------------
	MsoFRegisterAppIdleInitTasks

	Register the app's idle init task list with the idle init manager.
---------------------------------------------------------------- EricSchr -*/</comment>
<macro><name pos:line="1045" pos:column="1">MSOAPIX_</name><argument_list pos:line="1045" pos:column="9">(<argument pos:line="1045" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1045" pos:column="16">MsoFRegisterAppIdleInitTasks</name><argument_list pos:line="1045" pos:column="44">(<argument pos:line="1045" pos:column="45">MSOIDLEINIT *pAppIdleInit</argument>,
	<argument pos:line="1046" pos:column="9">DWORD cItems</argument>)</argument_list></macro><empty_stmt pos:line="1046" pos:column="22">;</empty_stmt>

<cpp:if pos:line="1048" pos:column="1">#<cpp:directive pos:line="1048" pos:column="2">if</cpp:directive> <expr><name pos:line="1048" pos:column="5">VSMSODEBUG</name></expr></cpp:if>
<comment type="block" pos:line="1049" pos:column="1">/*	Allows testing to turn off idle initialization at any desired point. */</comment>
<macro><name pos:line="1050" pos:column="1">MSOAPIXX_</name><argument_list pos:line="1050" pos:column="10">(<argument pos:line="1050" pos:column="11">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1050" pos:column="17">MsoDisableIdleInit</name><argument_list pos:line="1050" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:line="1051" pos:column="1">/*	Simulates plenty of idle time so that all idle init tasks are executed
	- tests that they all work. */</comment>
<macro><name pos:line="1053" pos:column="1">MSOAPIXX_</name><argument_list pos:line="1053" pos:column="10">(<argument pos:line="1053" pos:column="11">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1053" pos:column="17">MsoDoAllIdleInit</name><argument_list pos:line="1053" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1054" pos:column="1">#<cpp:directive pos:line="1054" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="1056" pos:column="1">// Idle Init helper macros</comment>
<cpp:define pos:line="1057" pos:column="1">#<cpp:directive pos:line="1057" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1057" pos:column="9">IndexFromIif</name><parameter_list pos:line="1057" pos:column="21">(<param><type><name pos:line="1057" pos:column="22">iif</name></type></param>)</parameter_list></cpp:macro>   <cpp:value pos:line="1057" pos:column="29">((iif) &gt;&gt; 8)</cpp:value></cpp:define>
<cpp:define pos:line="1058" pos:column="1">#<cpp:directive pos:line="1058" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1058" pos:column="9">MaskFromIif</name><parameter_list pos:line="1058" pos:column="20">(<param><type><name pos:line="1058" pos:column="21">iif</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1058" pos:column="26">((iif) &amp; 0xFF)</cpp:value></cpp:define>

<cpp:define pos:line="1060" pos:column="1">#<cpp:directive pos:line="1060" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1060" pos:column="9">MsoMarkIdleInitDone</name><parameter_list pos:line="1060" pos:column="28">(<param><type><name pos:line="1060" pos:column="29">rgIdle</name></type></param>, <param><type><name pos:line="1060" pos:column="37">iif</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="1061" pos:column="9">(rgIdle[IndexFromIif(iif)] |= MaskFromIif(iif))</cpp:value></cpp:define>

<cpp:define pos:line="1063" pos:column="1">#<cpp:directive pos:line="1063" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1063" pos:column="9">MsoFIdleInitDone</name><parameter_list pos:line="1063" pos:column="25">(<param><type><name pos:line="1063" pos:column="26">rgIdle</name></type></param>, <param><type><name pos:line="1063" pos:column="34">iif</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="1064" pos:column="9">(rgIdle[IndexFromIif(iif)] &amp; MaskFromIif(iif))</cpp:value></cpp:define>


<comment type="block" pos:line="1067" pos:column="1">/*---------------------------------------------------------------------------
	Office Reoccuring Idle definitions
----------------------------------------------------------------- MRuhlen -*/</comment>

<function_decl><type><name pos:line="1071" pos:column="1">EXTERN_C</name> <name pos:line="1071" pos:column="10">void</name> <name pos:line="1071" pos:column="15">__stdcall</name></type> <name pos:line="1071" pos:column="25">DeQueueDoAddCFF</name><parameter_list pos:line="1071" pos:column="40">(<param><decl><type><name pos:line="1071" pos:column="41">void</name></type></decl></param>)</parameter_list>;</function_decl>  <comment type="line" pos:line="1071" pos:column="49">// defined in dmuoldoc.cpp</comment>
<macro><name pos:line="1072" pos:column="1">MSOAPI_</name><argument_list pos:line="1072" pos:column="8">(<argument pos:line="1072" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1072" pos:column="15">MsoDrawingDownloadIdle</name><argument_list pos:line="1072" pos:column="37">(<argument><expr><name pos:line="1072" pos:column="38">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line" pos:line="1072" pos:column="49">// defined in drevent.cpp</comment>

<typedef pos:line="1074" pos:column="1">typedef <type><struct pos:line="1074" pos:column="9">struct <name pos:line="1074" pos:column="16">tagMSOIDLEREOCCUR</name>
<block pos:line="1075" pos:column="1">{<public type="default" pos:line="1075" pos:column="2">
	<function_decl><type><name pos:line="1076" pos:column="9">void</name></type> (<type:modifier pos:line="1076" pos:column="15">*</type:modifier><name pos:line="1076" pos:column="16">pfnIdleReoccur</name>)<parameter_list pos:line="1076" pos:column="31">(<param><decl><type><name pos:line="1076" pos:column="32">void</name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="1077" pos:column="9">DWORD</name></type> <name pos:line="1077" pos:column="15">msec</name></decl>;</decl_stmt>						<comment type="line" pos:line="1077" pos:column="65">// Minimum app uptime before calling</comment>
</public>}</block></struct></type> <name pos:line="1078" pos:column="3">MSOIDLEREOCCUR</name>;</typedef>

<function_decl><type><name pos:line="1080" pos:column="1">BOOL</name></type> <name pos:line="1080" pos:column="6">MsoFKickStartIdle</name><parameter_list pos:line="1080" pos:column="23">(<param><decl><type><name pos:line="1080" pos:column="24">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="1081" pos:column="1">void</name></type> <name pos:line="1081" pos:column="6">MsoResetIdleTickCount</name><parameter_list pos:line="1081" pos:column="27">(<param><decl><type><name pos:line="1081" pos:column="28">void</name></type></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name pos:line="1083" pos:column="1">EXTERN_C</name> <name pos:line="1083" pos:column="10">DWORD</name></type> <name pos:line="1083" pos:column="16">vgffMsoIdleReoccur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1084" pos:column="1">EXTERN_C</name> <name pos:line="1084" pos:column="10">BOOL</name></type>  <name pos:line="1084" pos:column="16">vgfIdleReoccurShutdown</name></decl>;</decl_stmt>

<comment type="line" pos:line="1086" pos:column="1">// idle reoccur flags</comment>
<comment type="line" pos:line="1087" pos:column="1">// one bit for each reoccuring idle task.</comment>


<cpp:define pos:line="1090" pos:column="1">#<cpp:directive pos:line="1090" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1090" pos:column="9">irfIdleReoccurStop</name></cpp:macro>              <cpp:value pos:line="1090" pos:column="41">0x80000000</cpp:value></cpp:define>
<cpp:define pos:line="1091" pos:column="1">#<cpp:directive pos:line="1091" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1091" pos:column="9">irfDeQueueDoAddCFF</name></cpp:macro>              <cpp:value pos:line="1091" pos:column="41">0x00000001</cpp:value></cpp:define>
<cpp:define pos:line="1092" pos:column="1">#<cpp:directive pos:line="1092" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1092" pos:column="9">irfAlertIdsCannotSuspendAtIdle</name></cpp:macro>  <cpp:value pos:line="1092" pos:column="41">0x00000002</cpp:value></cpp:define>
<cpp:define pos:line="1093" pos:column="1">#<cpp:directive pos:line="1093" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1093" pos:column="9">irfDRDownloadIdle</name></cpp:macro>               <cpp:value pos:line="1093" pos:column="41">0x00000004</cpp:value></cpp:define>
<cpp:define pos:line="1094" pos:column="1">#<cpp:directive pos:line="1094" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1094" pos:column="9">irfMsoForgetLastGimme</name></cpp:macro>           <cpp:value pos:line="1094" pos:column="41">0x00000008</cpp:value></cpp:define>
<cpp:define pos:line="1095" pos:column="1">#<cpp:directive pos:line="1095" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1095" pos:column="9">irfLicenseSelect</name></cpp:macro>                <cpp:value pos:line="1095" pos:column="41">0x00000010</cpp:value></cpp:define>
<cpp:define pos:line="1096" pos:column="1">#<cpp:directive pos:line="1096" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1096" pos:column="9">irfLicenseAction</name></cpp:macro>                <cpp:value pos:line="1096" pos:column="41">0x00000020</cpp:value></cpp:define>
<cpp:define pos:line="1097" pos:column="1">#<cpp:directive pos:line="1097" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1097" pos:column="9">irfAcbRenderThumbnails</name></cpp:macro>          <cpp:value pos:line="1097" pos:column="41">0x00000040</cpp:value></cpp:define>
<cpp:define pos:line="1098" pos:column="1">#<cpp:directive pos:line="1098" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1098" pos:column="9">irfLicenseEnsurePID</name></cpp:macro>             <cpp:value pos:line="1098" pos:column="41">0x00000080</cpp:value></cpp:define>
<cpp:define pos:line="1099" pos:column="1">#<cpp:directive pos:line="1099" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1099" pos:column="9">irfLicenseValidate</name></cpp:macro>              <cpp:value pos:line="1099" pos:column="41">0x00000100</cpp:value></cpp:define>
<cpp:define pos:line="1100" pos:column="1">#<cpp:directive pos:line="1100" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1100" pos:column="9">irfLicenseWizard</name></cpp:macro>                <cpp:value pos:line="1100" pos:column="41">0x00000200</cpp:value></cpp:define>
<cpp:define pos:line="1101" pos:column="1">#<cpp:directive pos:line="1101" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1101" pos:column="9">irfLicClockChecks</name></cpp:macro>               <cpp:value pos:line="1101" pos:column="41">0x00000400</cpp:value></cpp:define>


<comment type="line" pos:line="1104" pos:column="1">// Helper functions to remove and add a reoccuring idle task.  Pass one of the</comment>
<comment type="line" pos:line="1105" pos:column="1">// flags above to these to add or remove it from the reoccuring idle list.</comment>
<comment type="line" pos:line="1106" pos:column="1">// DO NOT USE THESE FROM OUTSIDE MSO.DLL</comment>

<function><type><name pos:line="1108" pos:column="1">__inline</name> <name pos:line="1108" pos:column="10">void</name></type> <name pos:line="1108" pos:column="15">RemoveReoccuringIdleIrf</name><parameter_list pos:line="1108" pos:column="38">(<param><decl><type><name pos:line="1108" pos:column="39">unsigned</name></type> <name pos:line="1108" pos:column="48">irf</name></decl></param>)</parameter_list>
<block pos:line="1109" pos:column="1">{
	<expr_stmt><expr><name pos:line="1110" pos:column="9">vgffMsoIdleReoccur</name> <op:operator pos:line="1110" pos:column="28">&amp;=</op:operator> <op:operator pos:line="1110" pos:column="31">~</op:operator><name pos:line="1110" pos:column="32">irf</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1113" pos:column="1">__inline</name> <name pos:line="1113" pos:column="10">void</name></type> <name pos:line="1113" pos:column="15">AddReoccuringIdleIrf</name><parameter_list pos:line="1113" pos:column="35">(<param><decl><type><name pos:line="1113" pos:column="36">unsigned</name></type> <name pos:line="1113" pos:column="45">irf</name></decl></param>)</parameter_list>
<block pos:line="1114" pos:column="1">{
	<expr_stmt><expr><name pos:line="1115" pos:column="9">vgffMsoIdleReoccur</name> <op:operator pos:line="1115" pos:column="28">|=</op:operator> <name pos:line="1115" pos:column="31">irf</name></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="1118" pos:column="1">// Office10.233220 -- Access needs to know if reoccuring tasks are left</comment>
<macro><name pos:line="1119" pos:column="1">MSOAPI_</name><argument_list pos:line="1119" pos:column="8">(<argument pos:line="1119" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1119" pos:column="15">MsoFHasReoccuringIdleTasks</name><argument_list pos:line="1119" pos:column="41">()</argument_list></call></expr>;</expr_stmt>


<comment type="block" pos:line="1122" pos:column="1">/*	On the Windows side we don't call OleInitialize at boot time - only
	CoInitialize. On the Mac side this is currently not being done because
	the Running Object Table is tied in with OleInitialize - so we can't
	call RegisterActiveObject if OleInitialize is not called - may
	want to revisit this issue. */</comment>

<comment type="block" pos:line="1128" pos:column="1">/*	Should be called before every call that requires OleInitialize to have
	been called previously. This function calls OleInitialize if it hasn't
	already been called. */</comment>
<macro><name pos:line="1131" pos:column="1">MSOAPI_</name><argument_list pos:line="1131" pos:column="8">(<argument pos:line="1131" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1131" pos:column="15">MsoFEnsureOleInited</name><argument_list pos:line="1131" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:line="1132" pos:column="1">/*	If OleInitialize has been called then calls OleUninitialize */</comment>
<macro><name pos:line="1133" pos:column="1">MSOAPI_</name><argument_list pos:line="1133" pos:column="8">(<argument pos:line="1133" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1133" pos:column="15">MsoOleUninitialize</name><argument_list pos:line="1133" pos:column="33">()</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:line="1135" pos:column="1">// Delayed Drag Drop Registration</comment>
<comment type="block" pos:line="1136" pos:column="1">/*	These routines are unnecessary on the Mac since Mac OLE doesn't require OLE
    to be initialized prior to using the drag/drop routines */</comment>
<comment type="block" pos:line="1138" pos:column="1">/*	All calls to RegisterDragDrop should be replaced by
	MsoHrRegisterDragDrop. RegisterDragDrop requires OleInitialize so
	during boot RegisterDragDrop should not be called. This function
	adds the drop target to a queue if OleInitialize hasn't already been
	called. If it has then it just calls RegisterDragDrop. */</comment>
<macro><name pos:line="1143" pos:column="1">MSOAPI_</name><argument_list pos:line="1143" pos:column="8">(<argument pos:line="1143" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="1143" pos:column="18">MsoHrRegisterDragDrop</name><argument_list pos:line="1143" pos:column="39">(<argument pos:line="1143" pos:column="40">HWND hwnd</argument>, <argument pos:line="1143" pos:column="51">IDropTarget *pDropTarget</argument>)</argument_list></macro><empty_stmt pos:line="1143" pos:column="76">;</empty_stmt>

<comment type="block" pos:line="1145" pos:column="1">/*	All calls to RevokeDragDrop should be replaced by
	MsoHrRevokeDragDrop. If a delayed queue of drop targets exists
	then this checks the queue first for the target. */</comment>
<macro><name pos:line="1148" pos:column="1">MSOAPI_</name><argument_list pos:line="1148" pos:column="8">(<argument pos:line="1148" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="1148" pos:column="18">MsoHrRevokeDragDrop</name><argument_list pos:line="1148" pos:column="37">(<argument pos:line="1148" pos:column="38">HWND hwnd</argument>)</argument_list></macro><empty_stmt pos:line="1148" pos:column="48">;</empty_stmt>

<comment type="block" pos:line="1150" pos:column="1">/*	Since all drop targets previously registered at boot time are now
	stored in a queue, we need to make sure we register them sometime.
	These can become drop targets
	a. if we are initiating a drag and drop - in which case we call this
	function before calling DoDragDrop (inside MsoHrDoDragDrop).
	b. while losing activation - so we might become the drop target of
	another app. So this function is called from the WM_ACTIVATEAPP
	message handler. */</comment>
<macro><name pos:line="1158" pos:column="1">MSOAPI_</name><argument_list pos:line="1158" pos:column="8">(<argument pos:line="1158" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1158" pos:column="15">MsoFRegisterDragDropList</name><argument_list pos:line="1158" pos:column="39">()</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1160" pos:column="1">/*	This function should be called instead of DoDragDrop - it first
	registers any drop targets that may be in the lazy init queue. */</comment>
<macro><name pos:line="1162" pos:column="1">MSOAPI_</name><argument_list pos:line="1162" pos:column="8">(<argument pos:line="1162" pos:column="9">HRESULT</argument>)</argument_list></macro> <macro><name pos:line="1162" pos:column="18">MsoHrDoDragDrop</name><argument_list pos:line="1162" pos:column="33">(<argument pos:line="1162" pos:column="34">IDataObject *pDataObject</argument>,
	<argument pos:line="1163" pos:column="9">IDropSource *pDropSource</argument>, <argument pos:line="1163" pos:column="35">DWORD dwOKEffect</argument>, <argument pos:line="1163" pos:column="53">DWORD *pdwEffect</argument>)</argument_list></macro><empty_stmt pos:line="1163" pos:column="70">;</empty_stmt>


<comment type="block" pos:line="1166" pos:column="1">/*	Module names MsoLoadModule supports */</comment>
<comment type="block" pos:line="1167" pos:column="1">/*  IF ANY THING IS CHANGED HERE - CHANGE GLOBALS.CPP! */</comment>

<enum pos:line="1169" pos:column="1">enum
<block pos:line="1170" pos:column="1">{
	<decl><name pos:line="1171" pos:column="9">msoimodUser</name></decl><op:operator pos:line="1171" pos:column="20">,</op:operator>		<comment type="line" pos:line="1171" pos:column="33">// System User</comment>
	<decl><name pos:line="1172" pos:column="9">msoimodGdi</name></decl><op:operator pos:line="1172" pos:column="19">,</op:operator>			<comment type="line" pos:line="1172" pos:column="41">// System GDI</comment>
	<decl><name pos:line="1173" pos:column="9">msoimodWinnls</name></decl><op:operator pos:line="1173" pos:column="22">,</op:operator>		<comment type="line" pos:line="1173" pos:column="33">// System International utilities</comment>
	<cpp:define pos:line="1174" pos:column="9">#<cpp:directive pos:line="1174" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="1174" pos:column="17">msoimodGetMax</name></cpp:macro> <cpp:value pos:line="1174" pos:column="31">(msoimodWinnls+1)</cpp:value></cpp:define>
	
	<decl><name pos:line="1176" pos:column="9">msoimodShell</name></decl><op:operator pos:line="1176" pos:column="21">,</op:operator>		<comment type="line" pos:line="1176" pos:column="33">// System Shell</comment>
	<decl><name pos:line="1177" pos:column="9">msoimodCommctrl</name></decl><op:operator pos:line="1177" pos:column="24">,</op:operator>	<comment type="line" pos:line="1177" pos:column="33">// System Common controls</comment>
	<decl><name pos:line="1178" pos:column="9">msoimodOleAuto</name></decl><op:operator pos:line="1178" pos:column="23">,</op:operator>		<comment type="line" pos:line="1178" pos:column="33">// System OLE automation</comment>
	<decl><name pos:line="1179" pos:column="9">msoimodCommdlg</name></decl><op:operator pos:line="1179" pos:column="23">,</op:operator>		<comment type="line" pos:line="1179" pos:column="33">// System common dialogs</comment>
	<decl><name pos:line="1180" pos:column="9">msoimodVersion</name></decl><op:operator pos:line="1180" pos:column="23">,</op:operator>		<comment type="line" pos:line="1180" pos:column="33">// System version APIs</comment>
	<decl><name pos:line="1181" pos:column="9">msoimodWinmm</name></decl><op:operator pos:line="1181" pos:column="21">,</op:operator>		<comment type="line" pos:line="1181" pos:column="33">// System multimedia</comment>
	<decl><name pos:line="1182" pos:column="9">msoimodMapi</name></decl><op:operator pos:line="1182" pos:column="20">,</op:operator>		<comment type="line" pos:line="1182" pos:column="33">// Mail</comment>
	<decl><name pos:line="1183" pos:column="9">msoimodHlink</name></decl><op:operator pos:line="1183" pos:column="21">,</op:operator>		<comment type="line" pos:line="1183" pos:column="33">// Hyperlink APIs</comment>
	<decl><name pos:line="1184" pos:column="9">msoimodUrlmon</name></decl><op:operator pos:line="1184" pos:column="22">,</op:operator>		<comment type="line" pos:line="1184" pos:column="33">// Url moniker APIs</comment>
	<decl><name pos:line="1185" pos:column="9">msoimodJet</name></decl><op:operator pos:line="1185" pos:column="19">,</op:operator>			<comment type="line" pos:line="1185" pos:column="41">// Jet database</comment>
	<decl><name pos:line="1186" pos:column="9">msoimodOleAcc</name></decl><op:operator pos:line="1186" pos:column="22">,</op:operator>		<comment type="line" pos:line="1186" pos:column="33">// OLE Accessibility</comment>
	<decl><name pos:line="1187" pos:column="9">msoimodWinsock</name></decl><op:operator pos:line="1187" pos:column="23">,</op:operator>		<comment type="line" pos:line="1187" pos:column="33">// Network Sockets</comment>
	<decl><name pos:line="1188" pos:column="9">msoimodMpr</name></decl><op:operator pos:line="1188" pos:column="19">,</op:operator>			<comment type="line" pos:line="1188" pos:column="41">// Windows Network</comment>
	<decl><name pos:line="1189" pos:column="9">msoimodOdma</name></decl><op:operator pos:line="1189" pos:column="20">,</op:operator>		<comment type="line" pos:line="1189" pos:column="33">// odma</comment>
	<decl><name pos:line="1190" pos:column="9">msoimodWininet</name></decl><op:operator pos:line="1190" pos:column="23">,</op:operator>		<comment type="line" pos:line="1190" pos:column="33">// internet stuff</comment>
	<decl><name pos:line="1191" pos:column="9">msoimodRpcrt4</name></decl><op:operator pos:line="1191" pos:column="22">,</op:operator>		<comment type="line" pos:line="1191" pos:column="33">// RPC</comment>
	<decl><name pos:line="1192" pos:column="9">msoimodDarwin</name></decl><op:operator pos:line="1192" pos:column="22">,</op:operator>		<comment type="line" pos:line="1192" pos:column="33">// Darwin</comment>
	<decl><name pos:line="1193" pos:column="9">msoimodCrypt32</name></decl><op:operator pos:line="1193" pos:column="23">,</op:operator>	<comment type="line" pos:line="1193" pos:column="25">// crypto dll - digital signing</comment>
	<decl><name pos:line="1194" pos:column="9">msoimodWintrust</name></decl><op:operator pos:line="1194" pos:column="24">,</op:operator>	<comment type="line" pos:line="1194" pos:column="33">// wintrust.dll - digital signing</comment>
	<decl><name pos:line="1195" pos:column="9">msoimodCryptdlg</name></decl><op:operator pos:line="1195" pos:column="24">,</op:operator>	<comment type="line" pos:line="1195" pos:column="33">// cryptdlg.dll - digital signing</comment>
	<decl><name pos:line="1196" pos:column="9">msoimodSigner</name></decl><op:operator pos:line="1196" pos:column="22">,</op:operator>		<comment type="line" pos:line="1196" pos:column="33">// signer.dll - digital signing</comment>
	<decl><name pos:line="1197" pos:column="9">msoimodSoftpub</name></decl><op:operator pos:line="1197" pos:column="23">,</op:operator>	<comment type="line" pos:line="1197" pos:column="25">// softpub.dll - digital signing</comment>
	<decl><name pos:line="1198" pos:column="9">msoimodAdvapi32</name></decl><op:operator pos:line="1198" pos:column="24">,</op:operator>	<comment type="line" pos:line="1198" pos:column="33">// advapi32.dll - digital signing</comment>
	<decl><name pos:line="1199" pos:column="9">msoimodVbe</name></decl><op:operator pos:line="1199" pos:column="19">,</op:operator>
	<decl><name pos:line="1200" pos:column="9">msoimodRichEdit</name></decl><op:operator pos:line="1200" pos:column="24">,</op:operator>    <comment type="line" pos:line="1200" pos:column="29">// Richedit dll </comment>
	<decl><name pos:line="1201" pos:column="9">msoimodMsoHev</name></decl><op:operator pos:line="1201" pos:column="22">,</op:operator>		<comment type="line" pos:line="1201" pos:column="33">// Msohev.dll</comment>
	<decl><name pos:line="1202" pos:column="9">msoimodMssign32</name></decl><op:operator pos:line="1202" pos:column="24">,</op:operator>	<comment type="line" pos:line="1202" pos:column="33">// mssign32.dll - digital signing</comment>
	<decl><name pos:line="1203" pos:column="9">msoimodOlepro32</name></decl><op:operator pos:line="1203" pos:column="24">,</op:operator>    <comment type="line" pos:line="1203" pos:column="29">// olepro32.dll - OleCreateFontIndirect &amp; OldCreatePictureIndirect</comment>
	<decl><name pos:line="1204" pos:column="9">msoimodCryptui</name></decl><op:operator pos:line="1204" pos:column="23">,</op:operator>	<comment type="line" pos:line="1204" pos:column="25">// cryptui.dll - IE5 digital signing</comment>
	<decl><name pos:line="1205" pos:column="9">msoimodIE5Crypt32</name></decl><op:operator pos:line="1205" pos:column="26">,</op:operator>	<comment type="line" pos:line="1205" pos:column="33">// IE5 crypto dll - digital signing</comment>
	<decl><name pos:line="1206" pos:column="9">msoimodWinspool</name></decl><op:operator pos:line="1206" pos:column="24">,</op:operator>    <comment type="line" pos:line="1206" pos:column="29">// winspool.drv</comment>
	<decl><name pos:line="1207" pos:column="9">msoimodKernel32</name></decl><op:operator pos:line="1207" pos:column="24">,</op:operator>    <comment type="line" pos:line="1207" pos:column="29">// kernel32.dll</comment>
	<decl><name pos:line="1208" pos:column="9">msoimodShlwapi</name></decl><op:operator pos:line="1208" pos:column="23">,</op:operator>		<comment type="line" pos:line="1208" pos:column="33">// shlwapi.dll</comment>
	<decl><name pos:line="1209" pos:column="9">msoimodActiveds</name></decl><op:operator pos:line="1209" pos:column="24">,</op:operator>        <comment type="line" pos:line="1209" pos:column="33">// activeds.dll - Active Directory dll</comment>
	<decl><name pos:line="1210" pos:column="9">msoimodWFF</name></decl><op:operator pos:line="1210" pos:column="19">,</op:operator>         <comment type="line" pos:line="1210" pos:column="29">// ippwff.dll - IWebFolderForms dll</comment>
	<decl><name pos:line="1211" pos:column="9">msoimodNetapi32</name></decl><op:operator pos:line="1211" pos:column="24">,</op:operator>        <comment type="line" pos:line="1211" pos:column="33">// netapi32.dll - Network API</comment>
	<decl><name pos:line="1212" pos:column="9">msoimodWtsapi32</name></decl><op:operator pos:line="1212" pos:column="24">,</op:operator>	<comment type="line" pos:line="1212" pos:column="33">// WTS Api's</comment>
	<decl><name pos:line="1213" pos:column="9">msoimodMscat32</name></decl><op:operator pos:line="1213" pos:column="23">,</op:operator>     <comment type="line" pos:line="1213" pos:column="29">// mscat32.dll - digital signing</comment>
	<decl><name pos:line="1214" pos:column="9">msoimodMax</name></decl><op:operator pos:line="1214" pos:column="19">,</op:operator>
}</block>;</enum>

<comment type="block" pos:line="1217" pos:column="1">/* ifn enums for Modules loaded by MsoLoadModule */</comment>
<comment type="block" pos:line="1218" pos:column="1">/* THE ORDER MUST MATCH THAT IN GLOBALS.CPP! -- MRuhlen */</comment>

<enum pos:line="1220" pos:column="1">enum
<block pos:line="1221" pos:column="1">{
	<decl><name pos:line="1222" pos:column="9">ifnFindTextA</name></decl><op:operator pos:line="1222" pos:column="21">,</op:operator>
	<decl><name pos:line="1223" pos:column="9">ifnFindTextW</name></decl><op:operator pos:line="1223" pos:column="21">,</op:operator>
	<decl><name pos:line="1224" pos:column="9">ifnReplaceTextA</name></decl><op:operator pos:line="1224" pos:column="24">,</op:operator>
	<decl><name pos:line="1225" pos:column="9">ifnReplaceTextW</name></decl><op:operator pos:line="1225" pos:column="24">,</op:operator>
	<decl><name pos:line="1226" pos:column="9">ifnGetFileTitleA</name></decl><op:operator pos:line="1226" pos:column="25">,</op:operator>
	<decl><name pos:line="1227" pos:column="9">ifnGetFileTitleW</name></decl><op:operator pos:line="1227" pos:column="25">,</op:operator>
	<decl><name pos:line="1228" pos:column="9">ifnCommDlgExtendedError</name></decl><op:operator pos:line="1228" pos:column="32">,</op:operator>

	<decl><name pos:line="1230" pos:column="9">cfnCommdlg</name></decl>
}</block>;</enum>	


<enum pos:line="1234" pos:column="1">enum
<block pos:line="1235" pos:column="1">{
	<decl><name pos:line="1236" pos:column="9">ifnGetFileVersionInfoA</name></decl><op:operator pos:line="1236" pos:column="31">,</op:operator>
	<decl><name pos:line="1237" pos:column="9">ifnGetFileVersionInfoSizeA</name></decl><op:operator pos:line="1237" pos:column="35">,</op:operator>
	<decl><name pos:line="1238" pos:column="9">ifnVerQueryValueA</name></decl><op:operator pos:line="1238" pos:column="26">,</op:operator>
	<decl><name pos:line="1239" pos:column="9">ifnGetFileVersionInfoW</name></decl><op:operator pos:line="1239" pos:column="31">,</op:operator>
	<decl><name pos:line="1240" pos:column="9">ifnGetFileVersionInfoSizeW</name></decl><op:operator pos:line="1240" pos:column="35">,</op:operator>
	<decl><name pos:line="1241" pos:column="9">ifnVerQueryValueW</name></decl><op:operator pos:line="1241" pos:column="26">,</op:operator>

	<decl><name pos:line="1243" pos:column="9">cfnVersion</name></decl>
}</block>;</enum>

<enum pos:line="1246" pos:column="1">enum
<block pos:line="1247" pos:column="1">{
	<decl><name pos:line="1248" pos:column="9">ifnSHGetDesktopFolder</name></decl><op:operator pos:line="1248" pos:column="30">,</op:operator>
	<decl><name pos:line="1249" pos:column="9">ifnSHGetMalloc</name></decl><op:operator pos:line="1249" pos:column="23">,</op:operator>
	<decl><name pos:line="1250" pos:column="9">ifnSHGetPathFromIDList</name></decl><op:operator pos:line="1250" pos:column="31">,</op:operator>
	<decl><name pos:line="1251" pos:column="9">ifnSHGetPathFromIDListW</name></decl><op:operator pos:line="1251" pos:column="32">,</op:operator>
	<decl><name pos:line="1252" pos:column="9">ifnSHGetDataFromIDListA</name></decl><op:operator pos:line="1252" pos:column="32">,</op:operator>
	<decl><name pos:line="1253" pos:column="9">ifnSHGetDataFromIDListW</name></decl><op:operator pos:line="1253" pos:column="32">,</op:operator>
	<decl><name pos:line="1254" pos:column="9">ifnSHBrowseForFolderA</name></decl><op:operator pos:line="1254" pos:column="30">,</op:operator>
	<decl><name pos:line="1255" pos:column="9">ifnSHBrowseForFolderW</name></decl><op:operator pos:line="1255" pos:column="30">,</op:operator>
	<decl><name pos:line="1256" pos:column="9">ifnSHGetSpecialFolderLocation</name></decl><op:operator pos:line="1256" pos:column="38">,</op:operator>
	<decl><name pos:line="1257" pos:column="9">ifnSHGetFileInfoA</name></decl><op:operator pos:line="1257" pos:column="26">,</op:operator>
	<decl><name pos:line="1258" pos:column="9">ifnSHGetFileInfoW</name></decl><op:operator pos:line="1258" pos:column="26">,</op:operator>
	<decl><name pos:line="1259" pos:column="9">ifnExtractIconExA</name></decl><op:operator pos:line="1259" pos:column="26">,</op:operator>
	<decl><name pos:line="1260" pos:column="9">ifnExtractIconW</name></decl><op:operator pos:line="1260" pos:column="24">,</op:operator>
	<decl><name pos:line="1261" pos:column="9">ifnDllGetClassObject</name></decl><op:operator pos:line="1261" pos:column="29">,</op:operator>
	<decl><name pos:line="1262" pos:column="9">ifnDragQueryPoint</name></decl><op:operator pos:line="1262" pos:column="26">,</op:operator>
	<decl><name pos:line="1263" pos:column="9">ifnDragQueryFileA</name></decl><op:operator pos:line="1263" pos:column="26">,</op:operator>
	<decl><name pos:line="1264" pos:column="9">ifnDragQueryFileW</name></decl><op:operator pos:line="1264" pos:column="26">,</op:operator>
	<decl><name pos:line="1265" pos:column="9">ifnDragFinish</name></decl><op:operator pos:line="1265" pos:column="22">,</op:operator>
	<decl><name pos:line="1266" pos:column="9">ifnDragAcceptFiles</name></decl><op:operator pos:line="1266" pos:column="27">,</op:operator>
	<decl><name pos:line="1267" pos:column="9">ifnExtractIconA</name></decl><op:operator pos:line="1267" pos:column="24">,</op:operator>
	<decl><name pos:line="1268" pos:column="9">ifnShellExecuteA</name></decl><op:operator pos:line="1268" pos:column="25">,</op:operator>
	<decl><name pos:line="1269" pos:column="9">ifnShellExecuteW</name></decl><op:operator pos:line="1269" pos:column="25">,</op:operator>
	<decl><name pos:line="1270" pos:column="9">ifnShellExecuteExA</name></decl><op:operator pos:line="1270" pos:column="27">,</op:operator>
	<decl><name pos:line="1271" pos:column="9">ifnShellExecuteExW</name></decl><op:operator pos:line="1271" pos:column="27">,</op:operator>
	<decl><name pos:line="1272" pos:column="9">ifnSHAppBarMessage</name></decl><op:operator pos:line="1272" pos:column="27">,</op:operator>
	<decl><name pos:line="1273" pos:column="9">ifnFindExecutableA</name></decl><op:operator pos:line="1273" pos:column="27">,</op:operator>
	<decl><name pos:line="1274" pos:column="9">ifnFindExecutableW</name></decl><op:operator pos:line="1274" pos:column="27">,</op:operator>
	<decl><name pos:line="1275" pos:column="9">ifnInvalidateDriveType</name></decl><op:operator pos:line="1275" pos:column="31">,</op:operator>
	<decl><name pos:line="1276" pos:column="9">ifnSHGetSpecialFolderPath</name></decl><op:operator pos:line="1276" pos:column="34">,</op:operator>
	<decl><name pos:line="1277" pos:column="9">ifnSHChangeNotify</name></decl><op:operator pos:line="1277" pos:column="26">,</op:operator>
	<decl><name pos:line="1278" pos:column="9">ifnSHAddToRecentDocs</name></decl><op:operator pos:line="1278" pos:column="29">,</op:operator>
	<decl><name pos:line="1279" pos:column="9">ifnSHFileOperationA</name></decl><op:operator pos:line="1279" pos:column="28">,</op:operator>
	<decl><name pos:line="1280" pos:column="9">ifnSHFileOperationW</name></decl><op:operator pos:line="1280" pos:column="28">,</op:operator>
	<decl><name pos:line="1281" pos:column="9">ifnExtractIconExW</name></decl><op:operator pos:line="1281" pos:column="26">,</op:operator>
	<decl><name pos:line="1282" pos:column="9">ifnSHCoCreateInstance</name></decl><op:operator pos:line="1282" pos:column="30">,</op:operator>
	<decl><name pos:line="1283" pos:column="9">ifnCIDLData_CreateFromIDArray</name></decl><op:operator pos:line="1283" pos:column="38">,</op:operator>
	<decl><name pos:line="1284" pos:column="9">ifnSHCreateLinks</name></decl><op:operator pos:line="1284" pos:column="25">,</op:operator>
	<decl><name pos:line="1285" pos:column="9">ifnShell_NotifyIconA</name></decl><op:operator pos:line="1285" pos:column="29">,</op:operator>
	<decl><name pos:line="1286" pos:column="9">cfnShell</name></decl>
}</block>;</enum>

<enum pos:line="1289" pos:column="1">enum
<block pos:line="1290" pos:column="1">{
	<decl><name pos:line="1291" pos:column="9">ifnVariantInit</name></decl><op:operator pos:line="1291" pos:column="23">,</op:operator>
	<decl><name pos:line="1292" pos:column="9">ifnVariantClear</name></decl><op:operator pos:line="1292" pos:column="24">,</op:operator>
	<decl><name pos:line="1293" pos:column="9">ifnVariantChangeType</name></decl><op:operator pos:line="1293" pos:column="29">,</op:operator>
	<decl><name pos:line="1294" pos:column="9">ifnVariantChangeTypeEx</name></decl><op:operator pos:line="1294" pos:column="31">,</op:operator>
	<decl><name pos:line="1295" pos:column="9">ifnVariantTimeToDosDateTime</name></decl><op:operator pos:line="1295" pos:column="36">,</op:operator>
	<decl><name pos:line="1296" pos:column="9">ifnDosDateTimeToVariantTime</name></decl><op:operator pos:line="1296" pos:column="36">,</op:operator>
	<decl><name pos:line="1297" pos:column="9">ifnSysAllocString</name></decl><op:operator pos:line="1297" pos:column="26">,</op:operator>
	<decl><name pos:line="1298" pos:column="9">ifnSysAllocStringLen</name></decl><op:operator pos:line="1298" pos:column="29">,</op:operator>
	<decl><name pos:line="1299" pos:column="9">ifnSysFreeString</name></decl><op:operator pos:line="1299" pos:column="25">,</op:operator>
	<decl><name pos:line="1300" pos:column="9">ifnSysStringLen</name></decl><op:operator pos:line="1300" pos:column="24">,</op:operator>
	<decl><name pos:line="1301" pos:column="9">ifnSafeArrayGetDim</name></decl><op:operator pos:line="1301" pos:column="27">,</op:operator>
	<decl><name pos:line="1302" pos:column="9">ifnSafeArrayAccessData</name></decl><op:operator pos:line="1302" pos:column="31">,</op:operator>
	<decl><name pos:line="1303" pos:column="9">ifnSafeArrayUnaccessData</name></decl><op:operator pos:line="1303" pos:column="33">,</op:operator>
	<decl><name pos:line="1304" pos:column="9">ifnSafeArrayGetUBound</name></decl><op:operator pos:line="1304" pos:column="30">,</op:operator>
	<decl><name pos:line="1305" pos:column="9">ifnSafeArrayGetLBound</name></decl><op:operator pos:line="1305" pos:column="30">,</op:operator>
	<decl><name pos:line="1306" pos:column="9">ifnLoadRegTypeLib</name></decl><op:operator pos:line="1306" pos:column="26">,</op:operator>
	<decl><name pos:line="1307" pos:column="9">ifnLoadTypeLib</name></decl><op:operator pos:line="1307" pos:column="23">,</op:operator>
	<decl><name pos:line="1308" pos:column="9">ifnQueryPathOfRegTypeLib</name></decl><op:operator pos:line="1308" pos:column="33">,</op:operator>
	<decl><name pos:line="1309" pos:column="9">ifnVariantCopy</name></decl><op:operator pos:line="1309" pos:column="23">,</op:operator>
	<decl><name pos:line="1310" pos:column="9">ifnSafeArrayCreate</name></decl><op:operator pos:line="1310" pos:column="27">,</op:operator>
	<decl><name pos:line="1311" pos:column="9">ifnSafeArrayDestroy</name></decl><op:operator pos:line="1311" pos:column="28">,</op:operator>
	<decl><name pos:line="1312" pos:column="9">ifnSafeArrayGetElement</name></decl><op:operator pos:line="1312" pos:column="31">,</op:operator>
	<decl><name pos:line="1313" pos:column="9">ifnRegisterTypeLib</name></decl><op:operator pos:line="1313" pos:column="27">,</op:operator>
	<decl><name pos:line="1314" pos:column="9">ifnCreateErrorInfo</name></decl><op:operator pos:line="1314" pos:column="27">,</op:operator>
	<decl><name pos:line="1315" pos:column="9">ifnSetErrorInfo</name></decl><op:operator pos:line="1315" pos:column="24">,</op:operator>
	<decl><name pos:line="1316" pos:column="9">ifnGetErrorInfo</name></decl><op:operator pos:line="1316" pos:column="24">,</op:operator>
	<decl><name pos:line="1317" pos:column="9">ifnGetActiveObject</name></decl><op:operator pos:line="1317" pos:column="27">,</op:operator>
	<decl><name pos:line="1318" pos:column="9">ifnSysReAllocStringLen</name></decl><op:operator pos:line="1318" pos:column="31">,</op:operator>
	<decl><name pos:line="1319" pos:column="9">ifnSysReAllocString</name></decl><op:operator pos:line="1319" pos:column="28">,</op:operator>
	<decl><name pos:line="1320" pos:column="9">ifnSysAllocStringByteLen</name></decl><op:operator pos:line="1320" pos:column="33">,</op:operator>
	<decl><name pos:line="1321" pos:column="9">ifnSafeArrayUnlock</name></decl><op:operator pos:line="1321" pos:column="27">,</op:operator>
	<decl><name pos:line="1322" pos:column="9">ifnSafeArrayLock</name></decl><op:operator pos:line="1322" pos:column="25">,</op:operator>
	<decl><name pos:line="1323" pos:column="9">ifnOleCreatePropertyFrameIndirect</name></decl><op:operator pos:line="1323" pos:column="42">,</op:operator>
	<decl><name pos:line="1324" pos:column="9">ifnSysStringByteLen</name></decl><op:operator pos:line="1324" pos:column="28">,</op:operator>
	<decl><name pos:line="1325" pos:column="9">ifnSafeArrayRedim</name></decl><op:operator pos:line="1325" pos:column="26">,</op:operator>
	<decl><name pos:line="1326" pos:column="9">ifnSystemTimeToVariantTime</name></decl><op:operator pos:line="1326" pos:column="35">,</op:operator>
	<decl><name pos:line="1327" pos:column="9">ifnSafeArrayGetElemsize</name></decl><op:operator pos:line="1327" pos:column="32">,</op:operator>
	<decl><name pos:line="1328" pos:column="9">ifnVarBstrFromR8</name></decl><op:operator pos:line="1328" pos:column="25">,</op:operator>
	<decl><name pos:line="1329" pos:column="9">ifnOleLoadPicture</name></decl><op:operator pos:line="1329" pos:column="26">,</op:operator>
	<decl><name pos:line="1330" pos:column="9">ifnRevokeActiveObject</name></decl><op:operator pos:line="1330" pos:column="30">,</op:operator>
	<decl><name pos:line="1331" pos:column="9">ifnRegisterActiveObject</name></decl><op:operator pos:line="1331" pos:column="32">,</op:operator>
	<decl><name pos:line="1332" pos:column="9">ifnDispGetIDsOfNames</name></decl><op:operator pos:line="1332" pos:column="29">,</op:operator>
	<decl><name pos:line="1333" pos:column="9">ifnDispInvoke</name></decl><op:operator pos:line="1333" pos:column="22">,</op:operator>
	<decl><name pos:line="1334" pos:column="9">ifnCreateTypeLib2</name></decl><op:operator pos:line="1334" pos:column="26">,</op:operator>
	<decl><name pos:line="1335" pos:column="9">ifnLHashValOfNameSys</name></decl><op:operator pos:line="1335" pos:column="29">,</op:operator>
	<decl><name pos:line="1336" pos:column="9">ifnVarDateFromUdate</name></decl><op:operator pos:line="1336" pos:column="28">,</op:operator>
	<decl><name pos:line="1337" pos:column="9">ifnVarUdateFromDate</name></decl><op:operator pos:line="1337" pos:column="28">,</op:operator>
	<decl><name pos:line="1338" pos:column="9">ifnGetAltMonthNames</name></decl><op:operator pos:line="1338" pos:column="28">,</op:operator>
	<decl><name pos:line="1339" pos:column="9">ifnSafeArrayPutElement</name></decl><op:operator pos:line="1339" pos:column="31">,</op:operator>
	<decl><name pos:line="1340" pos:column="9">ifnVariantCopyInd</name></decl><op:operator pos:line="1340" pos:column="26">,</op:operator>
	<decl><name pos:line="1341" pos:column="9">ifnSafeArrayAllocData</name></decl><op:operator pos:line="1341" pos:column="30">,</op:operator>
	<decl><name pos:line="1342" pos:column="9">ifnSafeArrayDestroyData</name></decl><op:operator pos:line="1342" pos:column="32">,</op:operator>
	<decl><name pos:line="1343" pos:column="9">ifnVarR4FromR8</name></decl><op:operator pos:line="1343" pos:column="23">,</op:operator>
	<decl><name pos:line="1344" pos:column="9">ifnVarR8FromR4</name></decl><op:operator pos:line="1344" pos:column="23">,</op:operator>
	<decl><name pos:line="1345" pos:column="9">ifnOaBuildVersion</name></decl><op:operator pos:line="1345" pos:column="26">,</op:operator>
	<decl><name pos:line="1346" pos:column="9">ifnLoadTypeLibEx</name></decl><op:operator pos:line="1346" pos:column="25">,</op:operator>
	<decl><name pos:line="1347" pos:column="9">ifnVariantTimeToSystemTime</name></decl><op:operator pos:line="1347" pos:column="35">,</op:operator>
	<decl><name pos:line="1348" pos:column="9">ifnSafeArrayCopy</name></decl><op:operator pos:line="1348" pos:column="25">,</op:operator>
	<decl><name pos:line="1349" pos:column="9">ifnUnRegisterTypeLib</name></decl><op:operator pos:line="1349" pos:column="29">,</op:operator>
	<decl><name pos:line="1350" pos:column="9">ifnSafeArrayPtrOfIndex</name></decl><op:operator pos:line="1350" pos:column="31">,</op:operator>
	<decl><name pos:line="1351" pos:column="9">cfnOleAuto</name></decl>
}</block>;</enum>

<enum pos:line="1354" pos:column="1">enum
<block pos:line="1355" pos:column="1">{
	<decl><name pos:line="1356" pos:column="9">ifnImageList_Destroy</name></decl><op:operator pos:line="1356" pos:column="29">,</op:operator>
	<decl><name pos:line="1357" pos:column="9">ifnImageList_Create</name></decl><op:operator pos:line="1357" pos:column="28">,</op:operator>
	<decl><name pos:line="1358" pos:column="9">ifnImageList_Replace</name></decl><op:operator pos:line="1358" pos:column="29">,</op:operator>
	<decl><name pos:line="1359" pos:column="9">ifnImageList_ReplaceIcon</name></decl><op:operator pos:line="1359" pos:column="33">,</op:operator>
	<decl><name pos:line="1360" pos:column="9">ifnImageList_GetImageCount</name></decl><op:operator pos:line="1360" pos:column="35">,</op:operator>
	<decl><name pos:line="1361" pos:column="9">ifnPropertySheetA</name></decl><op:operator pos:line="1361" pos:column="26">,</op:operator>
	<decl><name pos:line="1362" pos:column="9">ifnPropertySheetW</name></decl><op:operator pos:line="1362" pos:column="26">,</op:operator>
	<decl><name pos:line="1363" pos:column="9">ifnCreateToolbarEx</name></decl><op:operator pos:line="1363" pos:column="27">,</op:operator>
	<decl><name pos:line="1364" pos:column="9">ifnImageList_SetBkColor</name></decl><op:operator pos:line="1364" pos:column="32">,</op:operator>
	<decl><name pos:line="1365" pos:column="9">ifnImageList_GetBkColor</name></decl><op:operator pos:line="1365" pos:column="32">,</op:operator>
	<decl><name pos:line="1366" pos:column="9">ifnImageList_Draw</name></decl><op:operator pos:line="1366" pos:column="26">,</op:operator>
	<decl><name pos:line="1367" pos:column="9">ifnImageList_DrawEx</name></decl><op:operator pos:line="1367" pos:column="28">,</op:operator>
	<decl><name pos:line="1368" pos:column="9">ifnImageList_GetIconSize</name></decl><op:operator pos:line="1368" pos:column="33">,</op:operator>
	<decl><name pos:line="1369" pos:column="9">ifnImageList_SetIconSize</name></decl><op:operator pos:line="1369" pos:column="33">,</op:operator>
	<decl><name pos:line="1370" pos:column="9">ifnImageList_AddMasked</name></decl><op:operator pos:line="1370" pos:column="31">,</op:operator>
	<decl><name pos:line="1371" pos:column="9">ifnInitCommonControls</name></decl><op:operator pos:line="1371" pos:column="30">,</op:operator>
	<decl><name pos:line="1372" pos:column="9">ifnInitCommonControlsEx</name></decl><op:operator pos:line="1372" pos:column="32">,</op:operator>
	<decl><name pos:line="1373" pos:column="9">ifnImageList_LoadImageA</name></decl><op:operator pos:line="1373" pos:column="32">,</op:operator>
	<decl><name pos:line="1374" pos:column="9">ifnImageList_LoadImageW</name></decl><op:operator pos:line="1374" pos:column="32">,</op:operator>
	<decl><name pos:line="1375" pos:column="9">ifnImageList_Add</name></decl><op:operator pos:line="1375" pos:column="25">,</op:operator>
	<decl><name pos:line="1376" pos:column="9">ifnImageList_AddIcon</name></decl><op:operator pos:line="1376" pos:column="29">,</op:operator>
	<decl><name pos:line="1377" pos:column="9">ifnImageList_Merge</name></decl><op:operator pos:line="1377" pos:column="27">,</op:operator>
	<decl><name pos:line="1378" pos:column="9">ifnImageList_GetIcon</name></decl><op:operator pos:line="1378" pos:column="29">,</op:operator>
	<decl><name pos:line="1379" pos:column="9">ifnImageList_SetImageCount</name></decl><op:operator pos:line="1379" pos:column="35">,</op:operator>
	<decl><name pos:line="1380" pos:column="9">ifnImageList_Read</name></decl><op:operator pos:line="1380" pos:column="26">,</op:operator>
	<decl><name pos:line="1381" pos:column="9">ifnImageList_Write</name></decl><op:operator pos:line="1381" pos:column="27">,</op:operator>
	<decl><name pos:line="1382" pos:column="9">ifnImageList_Copy</name></decl><op:operator pos:line="1382" pos:column="26">,</op:operator>
	<decl><name pos:line="1383" pos:column="9">ifnImageList_SetOverlayImage</name></decl><op:operator pos:line="1383" pos:column="37">,</op:operator>
	<decl><name pos:line="1384" pos:column="9">ifnImageList_Remove</name></decl><op:operator pos:line="1384" pos:column="28">,</op:operator>
	<decl><name pos:line="1385" pos:column="9">ifnImageList_BeginDrag</name></decl><op:operator pos:line="1385" pos:column="31">,</op:operator>
	<decl><name pos:line="1386" pos:column="9">ifnImageList_DragEnter</name></decl><op:operator pos:line="1386" pos:column="31">,</op:operator>
	<decl><name pos:line="1387" pos:column="9">ifnImageList_DragLeave</name></decl><op:operator pos:line="1387" pos:column="31">,</op:operator>
	<decl><name pos:line="1388" pos:column="9">ifnImageList_DragMove</name></decl><op:operator pos:line="1388" pos:column="30">,</op:operator>
	<decl><name pos:line="1389" pos:column="9">ifnImageList_EndDrag</name></decl><op:operator pos:line="1389" pos:column="29">,</op:operator>
	<decl><name pos:line="1390" pos:column="9">ifnTrackMouseEvent</name></decl><op:operator pos:line="1390" pos:column="27">,</op:operator>
	
	<decl><name pos:line="1392" pos:column="9">cfnCommctrl</name></decl>
}</block>;</enum>

<enum pos:line="1395" pos:column="1">enum
<block pos:line="1396" pos:column="1">{
	<decl><name pos:line="1397" pos:column="9">ifnHlinkCreateFromMoniker</name></decl><op:operator pos:line="1397" pos:column="34">,</op:operator>
	<decl><name pos:line="1398" pos:column="9">ifnHlinkCreateFromString</name></decl><op:operator pos:line="1398" pos:column="33">,</op:operator>
	<decl><name pos:line="1399" pos:column="9">ifnHlinkCreateFromData</name></decl><op:operator pos:line="1399" pos:column="31">,</op:operator>
	<decl><name pos:line="1400" pos:column="9">ifnHlinkCreateBrowseContext</name></decl><op:operator pos:line="1400" pos:column="36">,</op:operator>
	<decl><name pos:line="1401" pos:column="9">ifnHlinkClone</name></decl><op:operator pos:line="1401" pos:column="22">,</op:operator>
	<decl><name pos:line="1402" pos:column="9">ifnHlinkNavigateToStringReference</name></decl><op:operator pos:line="1402" pos:column="42">,</op:operator>
	<decl><name pos:line="1403" pos:column="9">ifnHlinkOnNavigate</name></decl><op:operator pos:line="1403" pos:column="27">,</op:operator>
	<decl><name pos:line="1404" pos:column="9">ifnHlinkUpdateStackItem</name></decl><op:operator pos:line="1404" pos:column="32">,</op:operator>
	<decl><name pos:line="1405" pos:column="9">ifnHlinkOnRenameDocument</name></decl><op:operator pos:line="1405" pos:column="33">,</op:operator>
	<decl><name pos:line="1406" pos:column="9">ifnHlinkNavigate</name></decl><op:operator pos:line="1406" pos:column="25">,</op:operator>
	<decl><name pos:line="1407" pos:column="9">ifnHlinkResolveMonikerForData</name></decl><op:operator pos:line="1407" pos:column="38">,</op:operator>
	<decl><name pos:line="1408" pos:column="9">ifnHlinkResolveStringForData</name></decl><op:operator pos:line="1408" pos:column="37">,</op:operator>
	<decl><name pos:line="1409" pos:column="9">ifnHlinkParseDisplayName</name></decl><op:operator pos:line="1409" pos:column="33">,</op:operator>
	<decl><name pos:line="1410" pos:column="9">ifnHlinkQueryCreateFromData</name></decl><op:operator pos:line="1410" pos:column="36">,</op:operator>
	<decl><name pos:line="1411" pos:column="9">ifnHlinkSetSpecialReference</name></decl><op:operator pos:line="1411" pos:column="36">,</op:operator>
	<decl><name pos:line="1412" pos:column="9">ifnHlinkGetSpecialReference</name></decl><op:operator pos:line="1412" pos:column="36">,</op:operator>
	<decl><name pos:line="1413" pos:column="9">ifnHlinkCreateShortcut</name></decl><op:operator pos:line="1413" pos:column="31">,</op:operator>
	<decl><name pos:line="1414" pos:column="9">ifnHlinkResolveShortcut</name></decl><op:operator pos:line="1414" pos:column="32">,</op:operator>
	<decl><name pos:line="1415" pos:column="9">ifnHlinkIsShortcut</name></decl><op:operator pos:line="1415" pos:column="27">,</op:operator>
	<decl><name pos:line="1416" pos:column="9">ifnHlinkResolveShortcutToString</name></decl><op:operator pos:line="1416" pos:column="40">,</op:operator>
	<decl><name pos:line="1417" pos:column="9">ifnHlinkCreateShortcutFromString</name></decl><op:operator pos:line="1417" pos:column="41">,</op:operator>
	<decl><name pos:line="1418" pos:column="9">ifnHlinkGetValueFromParams</name></decl><op:operator pos:line="1418" pos:column="35">,</op:operator>
	<decl><name pos:line="1419" pos:column="9">ifnHlinkCreateShortcutFromMoniker</name></decl><op:operator pos:line="1419" pos:column="42">,</op:operator>
	<decl><name pos:line="1420" pos:column="9">ifnHlinkResolveShortcutToMoniker</name></decl><op:operator pos:line="1420" pos:column="41">,</op:operator>
	<decl><name pos:line="1421" pos:column="9">ifnHlinkTranslateURL</name></decl><op:operator pos:line="1421" pos:column="29">,</op:operator>
	<decl><name pos:line="1422" pos:column="9">ifnHlinkCreateExtensionServices</name></decl><op:operator pos:line="1422" pos:column="40">,</op:operator>
	<decl><name pos:line="1423" pos:column="9">ifnHlinkPreprocessMoniker</name></decl><op:operator pos:line="1423" pos:column="34">,</op:operator>
	<decl><name pos:line="1424" pos:column="9">cfnHlink</name></decl>
}</block>;</enum>

<enum pos:line="1427" pos:column="1">enum
<block pos:line="1428" pos:column="1">{
	<decl><name pos:line="1429" pos:column="9">ifnCreateURLMoniker</name></decl><op:operator pos:line="1429" pos:column="28">,</op:operator>
	<decl><name pos:line="1430" pos:column="9">ifnIsValidURL</name></decl><op:operator pos:line="1430" pos:column="22">,</op:operator>
	<decl><name pos:line="1431" pos:column="9">ifnRegisterMediaTypeClass</name></decl><op:operator pos:line="1431" pos:column="34">,</op:operator>
	<decl><name pos:line="1432" pos:column="9">ifnRegisterBindStatusCallback</name></decl><op:operator pos:line="1432" pos:column="38">,</op:operator>
	<decl><name pos:line="1433" pos:column="9">ifnURLOpenBlockingStreamW</name></decl><op:operator pos:line="1433" pos:column="34">,</op:operator>
	<decl><name pos:line="1434" pos:column="9">ifnRevokeBindStatusCallback</name></decl><op:operator pos:line="1434" pos:column="36">,</op:operator>
<cpp:ifdef pos:line="1435" pos:column="1">#<cpp:directive pos:line="1435" pos:column="2">ifdef</cpp:directive> <name pos:line="1435" pos:column="8">UNUSED</name></cpp:ifdef>
	<decl><name pos:line="1436" pos:column="9">ifnURLDownloadToFileW</name></decl><op:operator pos:line="1436" pos:column="30">,</op:operator>
	<decl><name pos:line="1437" pos:column="9">ifnURLDownloadToCacheFileW</name></decl><op:operator pos:line="1437" pos:column="35">,</op:operator>
<cpp:endif pos:line="1438" pos:column="1">#<cpp:directive pos:line="1438" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1438" pos:column="8">// UNUSED</comment>
	<decl><name pos:line="1439" pos:column="9">ifnCoInternetCombineUrl</name></decl><op:operator pos:line="1439" pos:column="32">,</op:operator>
	<decl><name pos:line="1440" pos:column="9">ifnCoInternetGetSession</name></decl><op:operator pos:line="1440" pos:column="32">,</op:operator>
	<decl><name pos:line="1441" pos:column="9">ifnFindMimeFromData</name></decl><op:operator pos:line="1441" pos:column="28">,</op:operator>
	<decl><name pos:line="1442" pos:column="9">ifnCoInternetCreateZoneManager</name></decl><op:operator pos:line="1442" pos:column="39">,</op:operator>
	<decl><name pos:line="1443" pos:column="9">ifnCoInternetParseUrl</name></decl><op:operator pos:line="1443" pos:column="30">,</op:operator>
	<decl><name pos:line="1444" pos:column="9">ifnCreateAsyncBindCtxEx</name></decl><op:operator pos:line="1444" pos:column="32">,</op:operator>
	<decl><name pos:line="1445" pos:column="9">ifnUrlMkGetSessionOption</name></decl><op:operator pos:line="1445" pos:column="33">,</op:operator>
	<decl><name pos:line="1446" pos:column="9">ifnUrlMkSetSessionOption</name></decl><op:operator pos:line="1446" pos:column="33">,</op:operator>
	<decl><name pos:line="1447" pos:column="9">ifnCoInternetCompareUrl</name></decl><op:operator pos:line="1447" pos:column="32">,</op:operator>
	<decl><name pos:line="1448" pos:column="9">ifnCopyStgMedium</name></decl><op:operator pos:line="1448" pos:column="25">,</op:operator>
	<decl><name pos:line="1449" pos:column="9">ifnReleaseBindInfo</name></decl><op:operator pos:line="1449" pos:column="27">,</op:operator>
	<decl><name pos:line="1450" pos:column="9">ifnCoInternetQueryInfo</name></decl><op:operator pos:line="1450" pos:column="31">,</op:operator>
	<decl><name pos:line="1451" pos:column="9">cfnUrlmon</name></decl>
}</block>;</enum>

<enum pos:line="1454" pos:column="1">enum
<block pos:line="1455" pos:column="1">{
	<decl><name pos:line="1456" pos:column="9">ifnMAPIAllocateBuffer</name></decl><op:operator pos:line="1456" pos:column="30">,</op:operator>
	<decl><name pos:line="1457" pos:column="9">ifnMAPIFreeBuffer</name></decl><op:operator pos:line="1457" pos:column="26">,</op:operator>
	<decl><name pos:line="1458" pos:column="9">ifnHrQueryAllRows</name></decl><op:operator pos:line="1458" pos:column="26">,</op:operator>
	<decl><name pos:line="1459" pos:column="9">ifnMAPIAllocateMore</name></decl><op:operator pos:line="1459" pos:column="28">,</op:operator>
	<decl><name pos:line="1460" pos:column="9">ifnMAPILogon</name></decl><op:operator pos:line="1460" pos:column="21">,</op:operator>
	<decl><name pos:line="1461" pos:column="9">ifnMAPILogoff</name></decl><op:operator pos:line="1461" pos:column="22">,</op:operator>
	<decl><name pos:line="1462" pos:column="9">ifnMAPIAddress</name></decl><op:operator pos:line="1462" pos:column="23">,</op:operator>
	<decl><name pos:line="1463" pos:column="9">ifnMAPIResolveName</name></decl><op:operator pos:line="1463" pos:column="27">,</op:operator>
	<decl><name pos:line="1464" pos:column="9">ifnMAPISendMail</name></decl><op:operator pos:line="1464" pos:column="24">,</op:operator>
	<decl><name pos:line="1465" pos:column="9">ifnMAPIInitialize</name></decl><op:operator pos:line="1465" pos:column="26">,</op:operator>
	<decl><name pos:line="1466" pos:column="9">ifnMAPIUninitialize</name></decl><op:operator pos:line="1466" pos:column="28">,</op:operator>
	<decl><name pos:line="1467" pos:column="9">ifnMAPILogonEx</name></decl><op:operator pos:line="1467" pos:column="23">,</op:operator>
	<decl><name pos:line="1468" pos:column="9">ifnMAPIOpenFormMgr</name></decl><op:operator pos:line="1468" pos:column="27">,</op:operator>
	<decl><name pos:line="1469" pos:column="9">ifnMAPIAdminProfiles</name></decl><op:operator pos:line="1469" pos:column="29">,</op:operator>
	<decl><name pos:line="1470" pos:column="9">cfnMapi</name></decl>
}</block>;</enum>

<enum pos:line="1473" pos:column="1">enum
<block pos:line="1474" pos:column="1">{
	<decl><name pos:line="1475" pos:column="9">ifnJetBeginSession</name></decl><op:operator pos:line="1475" pos:column="27">,</op:operator>
	<decl><name pos:line="1476" pos:column="9">ifnJetCloseDatabase</name></decl><op:operator pos:line="1476" pos:column="28">,</op:operator>
	<decl><name pos:line="1477" pos:column="9">ifnJetCloseTable</name></decl><op:operator pos:line="1477" pos:column="25">,</op:operator>
	<decl><name pos:line="1478" pos:column="9">ifnJetEndSession</name></decl><op:operator pos:line="1478" pos:column="25">,</op:operator>
	<decl><name pos:line="1479" pos:column="9">ifnJetGetObjectInfo</name></decl><op:operator pos:line="1479" pos:column="28">,</op:operator>
	<decl><name pos:line="1480" pos:column="9">ifnJetInit</name></decl><op:operator pos:line="1480" pos:column="19">,</op:operator>
	<decl><name pos:line="1481" pos:column="9">ifnJetMove</name></decl><op:operator pos:line="1481" pos:column="19">,</op:operator>
	<decl><name pos:line="1482" pos:column="9">ifnJetOpenDatabase</name></decl><op:operator pos:line="1482" pos:column="27">,</op:operator>
	<decl><name pos:line="1483" pos:column="9">ifnJetRetrieveColumn</name></decl><op:operator pos:line="1483" pos:column="29">,</op:operator>
	<decl><name pos:line="1484" pos:column="9">ifnJetRetrieveProperty</name></decl><op:operator pos:line="1484" pos:column="31">,</op:operator>
	<decl><name pos:line="1485" pos:column="9">ifnJetTerm</name></decl><op:operator pos:line="1485" pos:column="19">,</op:operator>
	<decl><name pos:line="1486" pos:column="9">ifnJetGetTableColumnInfo</name></decl><op:operator pos:line="1486" pos:column="33">,</op:operator>
	<decl><name pos:line="1487" pos:column="9">cfnJet</name></decl>
}</block>;</enum>

<enum pos:line="1490" pos:column="1">enum
<block pos:line="1491" pos:column="1">{
	<decl><name pos:line="1492" pos:column="9">ifnLresultFromObject</name></decl><op:operator pos:line="1492" pos:column="29">,</op:operator>
	<decl><name pos:line="1493" pos:column="9">ifnObjectFromLresult</name></decl><op:operator pos:line="1493" pos:column="29">,</op:operator>
	<decl><name pos:line="1494" pos:column="9">ifnAccessibleObjectFromWindow</name></decl><op:operator pos:line="1494" pos:column="38">,</op:operator>
	<decl><name pos:line="1495" pos:column="9">ifnCreateStdAccessibleObject</name></decl><op:operator pos:line="1495" pos:column="37">,</op:operator>
	<decl><name pos:line="1496" pos:column="9">cfnOleAcc</name></decl>
}</block>;</enum>

<enum pos:line="1499" pos:column="1">enum
<block pos:line="1500" pos:column="1">{
	<decl><name pos:line="1501" pos:column="9">ifnGetAddressByNameA</name></decl><op:operator pos:line="1501" pos:column="29">,</op:operator>
	<decl><name pos:line="1502" pos:column="9">ifnGetAddressByNameW</name></decl><op:operator pos:line="1502" pos:column="29">,</op:operator>
	<decl><name pos:line="1503" pos:column="9">ifnWSAStartup</name></decl><op:operator pos:line="1503" pos:column="22">,</op:operator>
	<decl><name pos:line="1504" pos:column="9">ifnWSACleanup</name></decl><op:operator pos:line="1504" pos:column="22">,</op:operator>
	<decl><name pos:line="1505" pos:column="9">cfnWinsock</name></decl>
}</block>;</enum>

<enum pos:line="1508" pos:column="1">enum
<block pos:line="1509" pos:column="1">{
	<decl><name pos:line="1510" pos:column="9">ifnWNetAddConnection2W</name></decl><op:operator pos:line="1510" pos:column="31">,</op:operator>
	<decl><name pos:line="1511" pos:column="9">ifnWNetAddConnection3W</name></decl><op:operator pos:line="1511" pos:column="31">,</op:operator>
	<decl><name pos:line="1512" pos:column="9">ifnWNetAddConnectionW</name></decl><op:operator pos:line="1512" pos:column="30">,</op:operator>
	<decl><name pos:line="1513" pos:column="9">ifnWNetCancelConnectionW</name></decl><op:operator pos:line="1513" pos:column="33">,</op:operator>
	<decl><name pos:line="1514" pos:column="9">ifnWNetConnectionDialog</name></decl><op:operator pos:line="1514" pos:column="32">,</op:operator>
	<decl><name pos:line="1515" pos:column="9">ifnWNetEnumResourceW</name></decl><op:operator pos:line="1515" pos:column="29">,</op:operator>
	<decl><name pos:line="1516" pos:column="9">ifnWNetGetConnectionW</name></decl><op:operator pos:line="1516" pos:column="30">,</op:operator>
	<decl><name pos:line="1517" pos:column="9">ifnWNetOpenEnumW</name></decl><op:operator pos:line="1517" pos:column="25">,</op:operator>
	<decl><name pos:line="1518" pos:column="9">ifnWNetCloseEnum</name></decl><op:operator pos:line="1518" pos:column="25">,</op:operator>
	<decl><name pos:line="1519" pos:column="9">ifnWNetGetLastErrorW</name></decl><op:operator pos:line="1519" pos:column="29">,</op:operator>
	<decl><name pos:line="1520" pos:column="9">ifnWNetUseConnectionW</name></decl><op:operator pos:line="1520" pos:column="30">,</op:operator>
	<decl><name pos:line="1521" pos:column="9">ifnWNetGetNetworkInformationW</name></decl><op:operator pos:line="1521" pos:column="38">,</op:operator>
	<decl><name pos:line="1522" pos:column="9">ifnWNetAddConnection2A</name></decl><op:operator pos:line="1522" pos:column="31">,</op:operator>
	<decl><name pos:line="1523" pos:column="9">ifnWNetAddConnection3A</name></decl><op:operator pos:line="1523" pos:column="31">,</op:operator>
	<decl><name pos:line="1524" pos:column="9">ifnWNetAddConnectionA</name></decl><op:operator pos:line="1524" pos:column="30">,</op:operator>
	<decl><name pos:line="1525" pos:column="9">ifnWNetCancelConnectionA</name></decl><op:operator pos:line="1525" pos:column="33">,</op:operator>
	<decl><name pos:line="1526" pos:column="9">ifnWNetEnumResourceA</name></decl><op:operator pos:line="1526" pos:column="29">,</op:operator>
	<decl><name pos:line="1527" pos:column="9">ifnWNetGetConnectionA</name></decl><op:operator pos:line="1527" pos:column="30">,</op:operator>
	<decl><name pos:line="1528" pos:column="9">ifnWNetOpenEnumA</name></decl><op:operator pos:line="1528" pos:column="25">,</op:operator>
	<decl><name pos:line="1529" pos:column="9">ifnWNetGetLastErrorA</name></decl><op:operator pos:line="1529" pos:column="29">,</op:operator>
	<decl><name pos:line="1530" pos:column="9">ifnWNetUseConnectionA</name></decl><op:operator pos:line="1530" pos:column="30">,</op:operator>
	<decl><name pos:line="1531" pos:column="9">ifnWNetGetNetworkInformationA</name></decl><op:operator pos:line="1531" pos:column="38">,</op:operator>
	<decl><name pos:line="1532" pos:column="9">ifnWNetGetResourceInformationW</name></decl><op:operator pos:line="1532" pos:column="39">,</op:operator>
	<decl><name pos:line="1533" pos:column="9">ifnWNetGetResourceInformationA</name></decl><op:operator pos:line="1533" pos:column="39">,</op:operator>
	<decl><name pos:line="1534" pos:column="9">cfnMpr</name></decl>
}</block>;</enum>

<enum pos:line="1537" pos:column="1">enum
<block pos:line="1538" pos:column="1">{
	<decl><name pos:line="1539" pos:column="9">ifnInternetCloseHandle</name></decl><op:operator pos:line="1539" pos:column="31">,</op:operator>
	<decl><name pos:line="1540" pos:column="9">ifnInternetWriteFile</name></decl><op:operator pos:line="1540" pos:column="29">,</op:operator>
	<decl><name pos:line="1541" pos:column="9">ifnInternetOpenA</name></decl><op:operator pos:line="1541" pos:column="25">,</op:operator>
	<decl><name pos:line="1542" pos:column="9">ifnInternetOpenW</name></decl><op:operator pos:line="1542" pos:column="25">,</op:operator>
	<decl><name pos:line="1543" pos:column="9">ifnInternetConnectA</name></decl><op:operator pos:line="1543" pos:column="28">,</op:operator>
	<decl><name pos:line="1544" pos:column="9">ifnInternetConnectW</name></decl><op:operator pos:line="1544" pos:column="28">,</op:operator>
	<decl><name pos:line="1545" pos:column="9">ifnFtpOpenFileA</name></decl><op:operator pos:line="1545" pos:column="24">,</op:operator>
	<decl><name pos:line="1546" pos:column="9">ifnFtpGetFileA</name></decl><op:operator pos:line="1546" pos:column="23">,</op:operator>
	<decl><name pos:line="1547" pos:column="9">ifnFtpSetCurrentDirectoryA</name></decl><op:operator pos:line="1547" pos:column="35">,</op:operator>
	<decl><name pos:line="1548" pos:column="9">ifnFtpGetCurrentDirectoryA</name></decl><op:operator pos:line="1548" pos:column="35">,</op:operator>
	<decl><name pos:line="1549" pos:column="9">ifnInternetFindNextFileA</name></decl><op:operator pos:line="1549" pos:column="33">,</op:operator>
	<decl><name pos:line="1550" pos:column="9">ifnFtpFindFirstFileA</name></decl><op:operator pos:line="1550" pos:column="29">,</op:operator>
	<decl><name pos:line="1551" pos:column="9">ifnInternetCombineUrlA</name></decl><op:operator pos:line="1551" pos:column="31">,</op:operator>
	<decl><name pos:line="1552" pos:column="9">ifnGetUrlCacheConfigInfoA</name></decl><op:operator pos:line="1552" pos:column="34">,</op:operator>
	<decl><name pos:line="1553" pos:column="9">ifnInternetCanonicalizeUrlA</name></decl><op:operator pos:line="1553" pos:column="36">,</op:operator>
	<decl><name pos:line="1554" pos:column="9">ifnInternetCanonicalizeUrlW</name></decl><op:operator pos:line="1554" pos:column="36">,</op:operator>
	<decl><name pos:line="1555" pos:column="9">ifnFtpRenameFileA</name></decl><op:operator pos:line="1555" pos:column="26">,</op:operator>
	<decl><name pos:line="1556" pos:column="9">ifnFtpDeleteFileA</name></decl><op:operator pos:line="1556" pos:column="26">,</op:operator>
	<decl><name pos:line="1557" pos:column="9">ifnFtpCreateDirectoryA</name></decl><op:operator pos:line="1557" pos:column="31">,</op:operator>
	<decl><name pos:line="1558" pos:column="9">ifnFtpRemoveDirectoryA</name></decl><op:operator pos:line="1558" pos:column="31">,</op:operator>
	<decl><name pos:line="1559" pos:column="9">ifnInternetCrackUrlA</name></decl><op:operator pos:line="1559" pos:column="29">,</op:operator>
	<decl><name pos:line="1560" pos:column="9">ifnInternetCrackUrlW</name></decl><op:operator pos:line="1560" pos:column="29">,</op:operator>
	<decl><name pos:line="1561" pos:column="9">ifnInternetGetLastResponseInfoW</name></decl><op:operator pos:line="1561" pos:column="40">,</op:operator>
	<decl><name pos:line="1562" pos:column="9">ifnInternetReadFile</name></decl><op:operator pos:line="1562" pos:column="28">,</op:operator>
	<decl><name pos:line="1563" pos:column="9">ifnHttpOpenRequestW</name></decl><op:operator pos:line="1563" pos:column="28">,</op:operator>
	<decl><name pos:line="1564" pos:column="9">ifnHttpOpenRequestA</name></decl><op:operator pos:line="1564" pos:column="28">,</op:operator>
	<decl><name pos:line="1565" pos:column="9">ifnHttpSendRequestW</name></decl><op:operator pos:line="1565" pos:column="28">,</op:operator>
	<decl><name pos:line="1566" pos:column="9">ifnHttpSendRequestA</name></decl><op:operator pos:line="1566" pos:column="28">,</op:operator>
	<decl><name pos:line="1567" pos:column="9">ifnHttpQueryInfoW</name></decl><op:operator pos:line="1567" pos:column="26">,</op:operator>
	<decl><name pos:line="1568" pos:column="9">ifnHttpQueryInfoA</name></decl><op:operator pos:line="1568" pos:column="26">,</op:operator>
	<decl><name pos:line="1569" pos:column="9">ifnInternetGetCookieW</name></decl><op:operator pos:line="1569" pos:column="30">,</op:operator>
	<decl><name pos:line="1570" pos:column="9">ifnInternetSetOptionW</name></decl><op:operator pos:line="1570" pos:column="30">,</op:operator>
	<decl><name pos:line="1571" pos:column="9">ifnInternetSetOptionA</name></decl><op:operator pos:line="1571" pos:column="30">,</op:operator>
	<decl><name pos:line="1572" pos:column="9">ifnCreateUrlCacheEntryW</name></decl><op:operator pos:line="1572" pos:column="32">,</op:operator>
	<decl><name pos:line="1573" pos:column="9">ifnCreateUrlCacheEntryA</name></decl><op:operator pos:line="1573" pos:column="32">,</op:operator>
	<decl><name pos:line="1574" pos:column="9">ifnCommitUrlCacheEntryW</name></decl><op:operator pos:line="1574" pos:column="32">,</op:operator>
	<decl><name pos:line="1575" pos:column="9">ifnCommitUrlCacheEntryA</name></decl><op:operator pos:line="1575" pos:column="32">,</op:operator>
	<decl><name pos:line="1576" pos:column="9">ifnGetUrlCacheEntryInfoW</name></decl><op:operator pos:line="1576" pos:column="33">,</op:operator>
	<decl><name pos:line="1577" pos:column="9">ifnGetUrlCacheEntryInfoA</name></decl><op:operator pos:line="1577" pos:column="33">,</op:operator>
	<decl><name pos:line="1578" pos:column="9">ifnFindFirstUrlCacheEntryExW</name></decl><op:operator pos:line="1578" pos:column="37">,</op:operator>
	<decl><name pos:line="1579" pos:column="9">ifnFindFirstUrlCacheEntryExA</name></decl><op:operator pos:line="1579" pos:column="37">,</op:operator>
	<decl><name pos:line="1580" pos:column="9">ifnFindNextUrlCacheEntryExW</name></decl><op:operator pos:line="1580" pos:column="36">,</op:operator>
	<decl><name pos:line="1581" pos:column="9">ifnFindNextUrlCacheEntryExA</name></decl><op:operator pos:line="1581" pos:column="36">,</op:operator>
	<decl><name pos:line="1582" pos:column="9">ifnFindFirstUrlCacheEntryA</name></decl><op:operator pos:line="1582" pos:column="35">,</op:operator>
	<decl><name pos:line="1583" pos:column="9">ifnFindNextUrlCacheEntryA</name></decl><op:operator pos:line="1583" pos:column="34">,</op:operator>
	<decl><name pos:line="1584" pos:column="9">ifnFindFirstUrlCacheEntryW</name></decl><op:operator pos:line="1584" pos:column="35">,</op:operator>
	<decl><name pos:line="1585" pos:column="9">ifnFindNextUrlCacheEntryW</name></decl><op:operator pos:line="1585" pos:column="34">,</op:operator>
	<decl><name pos:line="1586" pos:column="9">ifnFindCloseUrlCache</name></decl><op:operator pos:line="1586" pos:column="29">,</op:operator>
	<decl><name pos:line="1587" pos:column="9">ifnSetUrlCacheEntryGroupW</name></decl><op:operator pos:line="1587" pos:column="34">,</op:operator>
	<decl><name pos:line="1588" pos:column="9">ifnSetUrlCacheEntryGroupA</name></decl><op:operator pos:line="1588" pos:column="34">,</op:operator>
	<decl><name pos:line="1589" pos:column="9">ifnInternetQueryOptionW</name></decl><op:operator pos:line="1589" pos:column="32">,</op:operator>
	<decl><name pos:line="1590" pos:column="9">ifnInternetQueryOptionA</name></decl><op:operator pos:line="1590" pos:column="32">,</op:operator>
	<decl><name pos:line="1591" pos:column="9">ifnInternetOpenUrlW</name></decl><op:operator pos:line="1591" pos:column="28">,</op:operator>
	<decl><name pos:line="1592" pos:column="9">ifnInternetOpenUrlA</name></decl><op:operator pos:line="1592" pos:column="28">,</op:operator>
	<decl><name pos:line="1593" pos:column="9">ifnInternetGetConnectedState</name></decl><op:operator pos:line="1593" pos:column="37">,</op:operator>
	<decl><name pos:line="1594" pos:column="9">ifnInternetAutodial</name></decl><op:operator pos:line="1594" pos:column="28">,</op:operator>
	<decl><name pos:line="1595" pos:column="9">ifnInternetAutodialHangup</name></decl><op:operator pos:line="1595" pos:column="34">,</op:operator>
	<decl><name pos:line="1596" pos:column="9">ifnInternetErrorDlg</name></decl><op:operator pos:line="1596" pos:column="28">,</op:operator>
	<decl><name pos:line="1597" pos:column="9">ifnInternetGoOnlineA</name></decl><op:operator pos:line="1597" pos:column="29">,</op:operator>
	<decl><name pos:line="1598" pos:column="9">ifnInternetGetConnectedStateExW</name></decl><op:operator pos:line="1598" pos:column="40">,</op:operator>
	<decl><name pos:line="1599" pos:column="9">cfnWininet</name></decl>
}</block>;</enum>

<enum pos:line="1602" pos:column="1">enum
<block pos:line="1603" pos:column="1">{
	<decl><name pos:line="1604" pos:column="9">ifnODMSelectDoc</name></decl><op:operator pos:line="1604" pos:column="24">,</op:operator>
	<decl><name pos:line="1605" pos:column="9">cfnOdma</name></decl>
}</block>;</enum>

<enum pos:line="1608" pos:column="1">enum
<block pos:line="1609" pos:column="1">{
	<decl><name pos:line="1610" pos:column="9">ifnPlaySoundA</name></decl><op:operator pos:line="1610" pos:column="22">,</op:operator>
	<decl><name pos:line="1611" pos:column="9">ifnPlaySoundW</name></decl><op:operator pos:line="1611" pos:column="22">,</op:operator>
	<decl><name pos:line="1612" pos:column="9">ifnwaveOutGetNumDevs</name></decl><op:operator pos:line="1612" pos:column="29">,</op:operator>
	<decl><name pos:line="1613" pos:column="9">cfnWinMM</name></decl>
}</block>;</enum>

<enum pos:line="1616" pos:column="1">enum
<block pos:line="1617" pos:column="1">{
	<decl><name pos:line="1618" pos:column="9">ifnNdrDllGetClassObject</name></decl><op:operator pos:line="1618" pos:column="32">,</op:operator>
	<decl><name pos:line="1619" pos:column="9">ifnNdrDllCanUnloadNow</name></decl><op:operator pos:line="1619" pos:column="30">,</op:operator>
	<decl><name pos:line="1620" pos:column="9">ifnNdrCStdStubBuffer_Release</name></decl><op:operator pos:line="1620" pos:column="37">,</op:operator>
	<decl><name pos:line="1621" pos:column="9">ifnCStdStubBuffer_DebugServerRelease</name></decl><op:operator pos:line="1621" pos:column="45">,</op:operator>
	<decl><name pos:line="1622" pos:column="9">ifnCStdStubBuffer_DebugServerQueryInterface</name></decl><op:operator pos:line="1622" pos:column="52">,</op:operator>
	<decl><name pos:line="1623" pos:column="9">ifnCStdStubBuffer_CountRefs</name></decl><op:operator pos:line="1623" pos:column="36">,</op:operator>
	<decl><name pos:line="1624" pos:column="9">ifnCStdStubBuffer_IsIIDSupported</name></decl><op:operator pos:line="1624" pos:column="41">,</op:operator>
	<decl><name pos:line="1625" pos:column="9">ifnCStdStubBuffer_Invoke</name></decl><op:operator pos:line="1625" pos:column="33">,</op:operator>
	<decl><name pos:line="1626" pos:column="9">ifnCStdStubBuffer_Disconnect</name></decl><op:operator pos:line="1626" pos:column="37">,</op:operator>
	<decl><name pos:line="1627" pos:column="9">ifnCStdStubBuffer_Connect</name></decl><op:operator pos:line="1627" pos:column="34">,</op:operator>
	<decl><name pos:line="1628" pos:column="9">ifnCStdStubBuffer_AddRef</name></decl><op:operator pos:line="1628" pos:column="33">,</op:operator>
	<decl><name pos:line="1629" pos:column="9">ifnCStdStubBuffer_QueryInterface</name></decl><op:operator pos:line="1629" pos:column="41">,</op:operator>
	<decl><name pos:line="1630" pos:column="9">ifnIUnknown_Release_Proxy</name></decl><op:operator pos:line="1630" pos:column="34">,</op:operator>
	<decl><name pos:line="1631" pos:column="9">ifnIUnknown_AddRef_Proxy</name></decl><op:operator pos:line="1631" pos:column="33">,</op:operator>
	<decl><name pos:line="1632" pos:column="9">ifnIUnknown_QueryInterface_Proxy</name></decl><op:operator pos:line="1632" pos:column="41">,</op:operator>
	<decl><name pos:line="1633" pos:column="9">ifnNdrOleFree</name></decl><op:operator pos:line="1633" pos:column="22">,</op:operator>
	<decl><name pos:line="1634" pos:column="9">ifnNdrOleAllocate</name></decl><op:operator pos:line="1634" pos:column="26">,</op:operator>
	<decl><name pos:line="1635" pos:column="9">ifnNdrClientCall</name></decl><op:operator pos:line="1635" pos:column="25">,</op:operator>
	<decl><name pos:line="1636" pos:column="9">cfnRpcrt4</name></decl>
}</block>;</enum>

<enum pos:line="1639" pos:column="1">enum
<block pos:line="1640" pos:column="1">{
	<decl><name pos:line="1641" pos:column="9">ifnMsiGetProductCodeW</name></decl><op:operator pos:line="1641" pos:column="30">,</op:operator>
	<decl><name pos:line="1642" pos:column="9">ifnMsiGetComponentPathW</name></decl><op:operator pos:line="1642" pos:column="32">,</op:operator>
	<decl><name pos:line="1643" pos:column="9">ifnMsiReinstallFeatureW</name></decl><op:operator pos:line="1643" pos:column="32">,</op:operator>
	<decl><name pos:line="1644" pos:column="9">ifnMsiReinstallProductW</name></decl><op:operator pos:line="1644" pos:column="32">,</op:operator>
	<decl><name pos:line="1645" pos:column="9">ifnMsiQueryFeatureStateW</name></decl><op:operator pos:line="1645" pos:column="33">,</op:operator>
	<decl><name pos:line="1646" pos:column="9">ifnMsiQueryProductStateW</name></decl><op:operator pos:line="1646" pos:column="33">,</op:operator>
	<decl><name pos:line="1647" pos:column="9">ifnMsiUseFeatureW</name></decl><op:operator pos:line="1647" pos:column="26">,</op:operator>
	<decl><name pos:line="1648" pos:column="9">ifnMsiGetUserInfoW</name></decl><op:operator pos:line="1648" pos:column="27">,</op:operator>
	<decl><name pos:line="1649" pos:column="9">ifnMsiInstallMissingFileW</name></decl><op:operator pos:line="1649" pos:column="34">,</op:operator>
	<decl><name pos:line="1650" pos:column="9">ifnMsiSetInternalUI</name></decl><op:operator pos:line="1650" pos:column="28">,</op:operator>
	<decl><name pos:line="1651" pos:column="9">ifnMsiInstallProductW</name></decl><op:operator pos:line="1651" pos:column="30">,</op:operator>
	<decl><name pos:line="1652" pos:column="9">ifnMsiEnumComponentQualifiersW</name></decl><op:operator pos:line="1652" pos:column="39">,</op:operator>
	<decl><name pos:line="1653" pos:column="9">ifnMsiProvideQualifiedComponentW</name></decl><op:operator pos:line="1653" pos:column="41">,</op:operator>
	<decl><name pos:line="1654" pos:column="9">ifnMsiVerifyPackageW</name></decl><op:operator pos:line="1654" pos:column="29">,</op:operator>
	<decl><name pos:line="1655" pos:column="9">ifnMsiConfigureFeatureW</name></decl><op:operator pos:line="1655" pos:column="32">,</op:operator>
	<decl><name pos:line="1656" pos:column="9">ifnMsiConfigureProductW</name></decl><op:operator pos:line="1656" pos:column="32">,</op:operator>
	<decl><name pos:line="1657" pos:column="9">ifnMsiConfigureProductExW</name></decl><op:operator pos:line="1657" pos:column="34">,</op:operator>
	<decl><name pos:line="1658" pos:column="9">ifnMsiProvideComponentW</name></decl><op:operator pos:line="1658" pos:column="32">,</op:operator>
	<decl><name pos:line="1659" pos:column="9">ifnMsiInstallMissingComponentW</name></decl><op:operator pos:line="1659" pos:column="39">,</op:operator>
	<decl><name pos:line="1660" pos:column="9">ifnMsiEnableLogW</name></decl><op:operator pos:line="1660" pos:column="25">,</op:operator>
	<decl><name pos:line="1661" pos:column="9">ifnMsiCollectUserInfoW</name></decl><op:operator pos:line="1661" pos:column="31">,</op:operator>
	<decl><name pos:line="1662" pos:column="9">ifnMsiGetProductInfoW</name></decl><op:operator pos:line="1662" pos:column="30">,</op:operator>
	<decl><name pos:line="1663" pos:column="9">ifnMsiSetExternalUIW</name></decl><op:operator pos:line="1663" pos:column="29">,</op:operator>
	<decl><name pos:line="1664" pos:column="9">ifnMsiUseFeatureExW</name></decl><op:operator pos:line="1664" pos:column="28">,</op:operator>
	<decl><name pos:line="1665" pos:column="9">ifnMsiProvideQualifiedComponentExW</name></decl><op:operator pos:line="1665" pos:column="43">,</op:operator>
	<decl><name pos:line="1666" pos:column="9">ifnMsiLocateComponentW</name></decl><op:operator pos:line="1666" pos:column="31">,</op:operator>
	<decl><name pos:line="1667" pos:column="9">ifnMsiEnumComponentQualifiersA</name></decl><op:operator pos:line="1667" pos:column="39">,</op:operator>
	<decl><name pos:line="1668" pos:column="9">ifnMsiEnumClientsW</name></decl><op:operator pos:line="1668" pos:column="27">,</op:operator>
	<decl><name pos:line="1669" pos:column="9">ifnMsiEnumFeaturesW</name></decl><op:operator pos:line="1669" pos:column="28">,</op:operator>
	<decl><name pos:line="1670" pos:column="9">ifnMsiGetFeatureUsageW</name></decl><op:operator pos:line="1670" pos:column="31">,</op:operator>
	<decl><name pos:line="1671" pos:column="9">ifnMsiViewExecute</name></decl><op:operator pos:line="1671" pos:column="26">,</op:operator>
	<decl><name pos:line="1672" pos:column="9">ifnMsiDatabaseOpenViewW</name></decl><op:operator pos:line="1672" pos:column="32">,</op:operator>
	<decl><name pos:line="1673" pos:column="9">ifnMsiOpenDatabaseW</name></decl><op:operator pos:line="1673" pos:column="28">,</op:operator>
	<decl><name pos:line="1674" pos:column="9">ifnMsiCloseHandle</name></decl><op:operator pos:line="1674" pos:column="26">,</op:operator>
	<decl><name pos:line="1675" pos:column="9">ifnMsiRecordGetStringW</name></decl><op:operator pos:line="1675" pos:column="31">,</op:operator>
	<decl><name pos:line="1676" pos:column="9">ifnMsiViewFetch</name></decl><op:operator pos:line="1676" pos:column="24">,</op:operator>
	<decl><name pos:line="1677" pos:column="9">ifnMsiRecordIsNull</name></decl><op:operator pos:line="1677" pos:column="27">,</op:operator>
	<decl><name pos:line="1678" pos:column="9">ifnMsiEnumComponentsW</name></decl><op:operator pos:line="1678" pos:column="30">,</op:operator>
	<decl><name pos:line="1679" pos:column="9">cfnDarwin</name></decl>
}</block>;</enum>

<enum pos:line="1682" pos:column="1">enum
<block pos:line="1683" pos:column="1">{
	<decl><name pos:line="1684" pos:column="9">ifnCertCloseStore</name></decl><op:operator pos:line="1684" pos:column="26">,</op:operator>
	<decl><name pos:line="1685" pos:column="9">ifnCertFreeCertificateContext</name></decl><op:operator pos:line="1685" pos:column="38">,</op:operator>
	<decl><name pos:line="1686" pos:column="9">ifnCertSaveStore</name></decl><op:operator pos:line="1686" pos:column="25">,</op:operator>
	<decl><name pos:line="1687" pos:column="9">ifnCertAddCertificateContextToStore</name></decl><op:operator pos:line="1687" pos:column="44">,</op:operator>
	<decl><name pos:line="1688" pos:column="9">ifnCertOpenStore</name></decl><op:operator pos:line="1688" pos:column="25">,</op:operator>
	<decl><name pos:line="1689" pos:column="9">ifnCertFindCertificateInStore</name></decl><op:operator pos:line="1689" pos:column="38">,</op:operator>
	<decl><name pos:line="1690" pos:column="9">ifnCertAlgIdToOID</name></decl><op:operator pos:line="1690" pos:column="26">,</op:operator>
	<decl><name pos:line="1691" pos:column="9">ifnCryptExportPublicKeyInfo</name></decl><op:operator pos:line="1691" pos:column="36">,</op:operator>
	<decl><name pos:line="1692" pos:column="9">ifnCertGetCertificateContextProperty</name></decl><op:operator pos:line="1692" pos:column="45">,</op:operator>
	<decl><name pos:line="1693" pos:column="9">ifnCryptSIPAddProvider</name></decl><op:operator pos:line="1693" pos:column="31">,</op:operator>
	<decl><name pos:line="1694" pos:column="9">ifnCryptSIPRemoveProvider</name></decl><op:operator pos:line="1694" pos:column="34">,</op:operator>
	<decl><name pos:line="1695" pos:column="9">ifnCertNameToStrW</name></decl><op:operator pos:line="1695" pos:column="26">,</op:operator>
	<decl><name pos:line="1696" pos:column="9">ifnCryptHashCertificate</name></decl><op:operator pos:line="1696" pos:column="32">,</op:operator>
	<decl><name pos:line="1697" pos:column="9">ifnCertOpenSystemStoreA</name></decl><op:operator pos:line="1697" pos:column="32">,</op:operator>
	<decl><name pos:line="1698" pos:column="9">ifnCertGetEnhancedKeyUsage</name></decl><op:operator pos:line="1698" pos:column="35">,</op:operator>
	<decl><name pos:line="1699" pos:column="9">ifnCryptImportPublicKeyInfo</name></decl><op:operator pos:line="1699" pos:column="36">,</op:operator>
	<decl><name pos:line="1700" pos:column="9">ifnCertAddEncodedCertificateToStore</name></decl><op:operator pos:line="1700" pos:column="44">,</op:operator>
	<decl><name pos:line="1701" pos:column="9">ifnCertVerifyTimeValidity</name></decl><op:operator pos:line="1701" pos:column="34">,</op:operator>
	<decl><name pos:line="1702" pos:column="9">ifnCertCompareCertificate</name></decl><op:operator pos:line="1702" pos:column="34">,</op:operator>
	<decl><name pos:line="1703" pos:column="9">ifnCertEnumCertificatesInStore</name></decl><op:operator pos:line="1703" pos:column="39">,</op:operator>
	<decl><name pos:line="1704" pos:column="9">ifnCertDuplicateCertificateContext</name></decl><op:operator pos:line="1704" pos:column="43">,</op:operator>
	<decl><name pos:line="1705" pos:column="9">ifnCertDeleteCertificateFromStore</name></decl><op:operator pos:line="1705" pos:column="42">,</op:operator>
	<decl><name pos:line="1706" pos:column="9">ifnCertGetSubjectCertificateFromStore</name></decl><op:operator pos:line="1706" pos:column="46">,</op:operator>
	<decl><name pos:line="1707" pos:column="9">ifnCertCompareCertificateName</name></decl><op:operator pos:line="1707" pos:column="38">,</op:operator>
	<decl><name pos:line="1708" pos:column="9">ifnCertGetIssuerCertificateFromStore</name></decl><op:operator pos:line="1708" pos:column="45">,</op:operator>
	<decl><name pos:line="1709" pos:column="9">ifnCertVerifySubjectCertificateContext</name></decl><op:operator pos:line="1709" pos:column="47">,</op:operator>
	<decl><name pos:line="1710" pos:column="9">ifnCryptDecodeObject</name></decl><op:operator pos:line="1710" pos:column="29">,</op:operator>
	<decl><name pos:line="1711" pos:column="9">ifnCryptMsgGetParam</name></decl><op:operator pos:line="1711" pos:column="28">,</op:operator>
	<decl><name pos:line="1712" pos:column="9">ifnCryptMsgClose</name></decl><op:operator pos:line="1712" pos:column="25">,</op:operator>
	<decl><name pos:line="1713" pos:column="9">ifnCryptMsgUpdate</name></decl><op:operator pos:line="1713" pos:column="26">,</op:operator>
	<decl><name pos:line="1714" pos:column="9">ifnCryptMsgOpenToDecode</name></decl><op:operator pos:line="1714" pos:column="32">,</op:operator>
	<decl><name pos:line="1715" pos:column="9">ifnCryptImportPublicKeyInfoEx</name></decl><op:operator pos:line="1715" pos:column="38">,</op:operator>
	<decl><name pos:line="1716" pos:column="9">ifnCertComparePublicKeyInfo</name></decl><op:operator pos:line="1716" pos:column="36">,</op:operator>
	<decl><name pos:line="1717" pos:column="9">ifnCertCreateCertificateContext</name></decl><op:operator pos:line="1717" pos:column="40">,</op:operator>
	<decl><name pos:line="1718" pos:column="9">ifnCertFindExtension</name></decl><op:operator pos:line="1718" pos:column="29">,</op:operator>
	<decl><name pos:line="1719" pos:column="9">ifnCryptSignCertificate</name></decl><op:operator pos:line="1719" pos:column="32">,</op:operator>
	<decl><name pos:line="1720" pos:column="9">ifnCryptEncodeObject</name></decl><op:operator pos:line="1720" pos:column="29">,</op:operator>
	<decl><name pos:line="1721" pos:column="9">cfnCrypt32</name></decl>
}</block>;</enum>

<enum pos:line="1724" pos:column="1">enum
<block pos:line="1725" pos:column="1">{
	<decl><name pos:line="1726" pos:column="9">ifnCertFreeCertificateChain</name></decl><op:operator pos:line="1726" pos:column="36">,</op:operator>
	<decl><name pos:line="1727" pos:column="9">ifnCertGetCertificateChain</name></decl><op:operator pos:line="1727" pos:column="35">,</op:operator>
	<decl><name pos:line="1728" pos:column="9">ifnCertVerifyCertificateChainPolicy</name></decl><op:operator pos:line="1728" pos:column="44">,</op:operator>
	<decl><name pos:line="1729" pos:column="9">ifnCertFreeCertificateChainEngine</name></decl><op:operator pos:line="1729" pos:column="42">,</op:operator>
	<decl><name pos:line="1730" pos:column="9">ifnCertCreateCertificateChainEngine</name></decl><op:operator pos:line="1730" pos:column="44">,</op:operator>
	<decl><name pos:line="1731" pos:column="9">ifnCryptQueryObject</name></decl><op:operator pos:line="1731" pos:column="28">,</op:operator>
	<decl><name pos:line="1732" pos:column="9">ifnCertGetNameStringW</name></decl><op:operator pos:line="1732" pos:column="30">,</op:operator>
	<decl><name pos:line="1733" pos:column="9">ifnCryptFindCertificateKeyProvInfo</name></decl><op:operator pos:line="1733" pos:column="43">,</op:operator>
	<decl><name pos:line="1734" pos:column="9">cfnIE5Crypt32</name></decl>
}</block>;</enum>

<enum pos:line="1737" pos:column="1">enum
<block pos:line="1738" pos:column="1">{
	<decl><name pos:line="1739" pos:column="9">ifnWinVerifyTrust</name></decl><op:operator pos:line="1739" pos:column="26">,</op:operator>
	<decl><name pos:line="1740" pos:column="9">ifnWintrustAddActionID</name></decl><op:operator pos:line="1740" pos:column="31">,</op:operator>
	<decl><name pos:line="1741" pos:column="9">ifnWTHelperGetProvCertFromChain</name></decl><op:operator pos:line="1741" pos:column="40">,</op:operator>
	<decl><name pos:line="1742" pos:column="9">ifnWTHelperGetProvSignerFromChain</name></decl><op:operator pos:line="1742" pos:column="42">,</op:operator>
	<decl><name pos:line="1743" pos:column="9">ifnWintrustLoadFunctionPointers</name></decl><op:operator pos:line="1743" pos:column="40">,</op:operator>
	<decl><name pos:line="1744" pos:column="9">ifnWTHelperCertIsSelfSigned</name></decl><op:operator pos:line="1744" pos:column="36">,</op:operator>
	<decl><name pos:line="1745" pos:column="9">ifnWTHelperProvDataFromStateData</name></decl><op:operator pos:line="1745" pos:column="41">,</op:operator>
	<decl><name pos:line="1746" pos:column="9">cfnWintrust</name></decl>
}</block>;</enum>

<enum pos:line="1749" pos:column="1">enum
<block pos:line="1750" pos:column="1">{
	<decl><name pos:line="1751" pos:column="9">ifnCertSelectCertificateA</name></decl><op:operator pos:line="1751" pos:column="34">,</op:operator>
	<decl><name pos:line="1752" pos:column="9">ifnGetFriendlyNameOfCertW</name></decl><op:operator pos:line="1752" pos:column="34">,</op:operator>
	<decl><name pos:line="1753" pos:column="9">ifnCertViewPropertiesA</name></decl><op:operator pos:line="1753" pos:column="31">,</op:operator>
	<decl><name pos:line="1754" pos:column="9">cfnCryptdlg</name></decl>
}</block>;</enum>

<enum pos:line="1757" pos:column="1">enum
<block pos:line="1758" pos:column="1">{
	<decl><name pos:line="1759" pos:column="9">ifnSignerSign</name></decl><op:operator pos:line="1759" pos:column="22">,</op:operator>
	<decl><name pos:line="1760" pos:column="9">ifnSignerTimeStamp</name></decl><op:operator pos:line="1760" pos:column="27">,</op:operator>
	<decl><name pos:line="1761" pos:column="9">cfnSigner</name></decl>
}</block>;</enum>

<enum pos:line="1764" pos:column="1">enum
<block pos:line="1765" pos:column="1">{
	<decl><name pos:line="1766" pos:column="9">ifnSoftpubAuthenticode</name></decl><op:operator pos:line="1766" pos:column="31">,</op:operator>
	<decl><name pos:line="1767" pos:column="9">cfnSoftpub</name></decl>
}</block>;</enum>

<enum pos:line="1770" pos:column="1">enum
<block pos:line="1771" pos:column="1">{
	<decl><name pos:line="1772" pos:column="9">ifnCryptAcquireContextA</name></decl><op:operator pos:line="1772" pos:column="32">,</op:operator>
	<decl><name pos:line="1773" pos:column="9">ifnCryptReleaseContext</name></decl><op:operator pos:line="1773" pos:column="31">,</op:operator>
	<decl><name pos:line="1774" pos:column="9">ifnCheckTokenMembership</name></decl><op:operator pos:line="1774" pos:column="32">,</op:operator>
	<decl><name pos:line="1775" pos:column="9">ifnCryptAcquireContextW</name></decl><op:operator pos:line="1775" pos:column="32">,</op:operator>
	<decl><name pos:line="1776" pos:column="9">cfnAdvapi32</name></decl>
}</block>;</enum>

<enum pos:line="1779" pos:column="1">enum
<block pos:line="1780" pos:column="1">{
	<decl><name pos:line="1781" pos:column="9">ifnDllVbeGetHashOfCode</name></decl><op:operator pos:line="1781" pos:column="31">,</op:operator>
	<decl><name pos:line="1782" pos:column="9">cfnVbe</name></decl>
}</block>;</enum>

<enum pos:line="1785" pos:column="1">enum
<block pos:line="1786" pos:column="1">{
	<decl><name pos:line="1787" pos:column="9">ifnPHevCreateFileInfo</name></decl><op:operator pos:line="1787" pos:column="30">,</op:operator>
	<decl><name pos:line="1788" pos:column="9">ifnWHevParseFile</name></decl><op:operator pos:line="1788" pos:column="25">,</op:operator>
	<decl><name pos:line="1789" pos:column="9">ifnFHevActivateApp</name></decl><op:operator pos:line="1789" pos:column="27">,</op:operator>
	<decl><name pos:line="1790" pos:column="9">ifnHevDestroyFileInfo</name></decl><op:operator pos:line="1790" pos:column="30">,</op:operator>
	<decl><name pos:line="1791" pos:column="9">ifnFHevRegister</name></decl><op:operator pos:line="1791" pos:column="24">,</op:operator>
	<decl><name pos:line="1792" pos:column="9">ifnFHevSetDefaultEditor</name></decl><op:operator pos:line="1792" pos:column="32">,</op:operator>
	<decl><name pos:line="1793" pos:column="9">ifnWHeviAppFromProgId</name></decl><op:operator pos:line="1793" pos:column="30">,</op:operator>
	<decl><name pos:line="1794" pos:column="9">ifnFHevAddToFileInfo</name></decl><op:operator pos:line="1794" pos:column="29">,</op:operator>
	<decl><name pos:line="1795" pos:column="9">ifnHevFGetProgIDFromFile</name></decl><op:operator pos:line="1795" pos:column="33">,</op:operator>
	<decl><name pos:line="1796" pos:column="9">ifnHevFGetCreatorAppIcon</name></decl><op:operator pos:line="1796" pos:column="33">,</op:operator>
	<decl><name pos:line="1797" pos:column="9">ifnHevFGetCreatorAppName</name></decl><op:operator pos:line="1797" pos:column="33">,</op:operator>
	<decl><name pos:line="1798" pos:column="9">ifnHevFQueryDefaultEditor</name></decl><op:operator pos:line="1798" pos:column="34">,</op:operator>
	<decl><name pos:line="1799" pos:column="9">ifnHevFSetExtraData</name></decl><op:operator pos:line="1799" pos:column="28">,</op:operator>
	<decl><name pos:line="1800" pos:column="9">ifnHevFCheckNonMSApp</name></decl><op:operator pos:line="1800" pos:column="29">,</op:operator>
	<decl><name pos:line="1801" pos:column="9">cfnMsoHev</name></decl>
}</block>;</enum>

<enum pos:line="1804" pos:column="1">enum
<block pos:line="1805" pos:column="1">{
	<decl><name pos:line="1806" pos:column="9">ifnSignerSignEx</name></decl><op:operator pos:line="1806" pos:column="24">,</op:operator>
	<decl><name pos:line="1807" pos:column="9">ifnSignerFreeSignerContext</name></decl><op:operator pos:line="1807" pos:column="35">,</op:operator>
	<decl><name pos:line="1808" pos:column="9">ifnSignerTimeStampEx</name></decl><op:operator pos:line="1808" pos:column="29">,</op:operator>
	<decl><name pos:line="1809" pos:column="9">cfnMssign32</name></decl>
}</block>;</enum>

<enum pos:line="1812" pos:column="1">enum
<block pos:line="1813" pos:column="1">{
    <decl><name pos:line="1814" pos:column="5">ifnOleCreateFontIndirect</name></decl><op:operator pos:line="1814" pos:column="29">,</op:operator>
    <decl><name pos:line="1815" pos:column="5">ifnOleCreatePictureIndirect</name></decl><op:operator pos:line="1815" pos:column="32">,</op:operator>
    <decl><name pos:line="1816" pos:column="5">cfnOlepro32</name></decl>
}</block>;</enum>

<enum pos:line="1819" pos:column="1">enum
<block pos:line="1820" pos:column="1">{
	<decl><name pos:line="1821" pos:column="9">ifnCryptUIDlgViewCertificateA</name></decl><op:operator pos:line="1821" pos:column="38">,</op:operator>
	<decl><name pos:line="1822" pos:column="9">ifnCryptUIDlgSelectCertificateA</name></decl><op:operator pos:line="1822" pos:column="40">,</op:operator>
	<decl><name pos:line="1823" pos:column="9">ifnCryptUIDlgViewSignerInfoA</name></decl><op:operator pos:line="1823" pos:column="37">,</op:operator>
	<decl><name pos:line="1824" pos:column="9">cfnCryptui</name></decl>
}</block>;</enum>

<enum pos:line="1827" pos:column="1">enum
<block pos:line="1828" pos:column="1">{
	<decl><name pos:line="1829" pos:column="9">ifnGetPrinterW</name></decl><op:operator pos:line="1829" pos:column="23">,</op:operator>
	<decl><name pos:line="1830" pos:column="9">ifnGetPrinterA</name></decl><op:operator pos:line="1830" pos:column="23">,</op:operator>
	<decl><name pos:line="1831" pos:column="9">ifnDeviceCapabilitiesW</name></decl><op:operator pos:line="1831" pos:column="31">,</op:operator>
	<decl><name pos:line="1832" pos:column="9">ifnDeviceCapabilitiesA</name></decl><op:operator pos:line="1832" pos:column="31">,</op:operator>
	<decl><name pos:line="1833" pos:column="9">ifnOpenPrinterW</name></decl><op:operator pos:line="1833" pos:column="24">,</op:operator>
	<decl><name pos:line="1834" pos:column="9">ifnOpenPrinterA</name></decl><op:operator pos:line="1834" pos:column="24">,</op:operator>
	<decl><name pos:line="1835" pos:column="9">ifnDocumentPropertiesW</name></decl><op:operator pos:line="1835" pos:column="31">,</op:operator>
	<decl><name pos:line="1836" pos:column="9">ifnDocumentPropertiesA</name></decl><op:operator pos:line="1836" pos:column="31">,</op:operator>
	<decl><name pos:line="1837" pos:column="9">ifnEnumPrintersA</name></decl><op:operator pos:line="1837" pos:column="25">,</op:operator>
	<decl><name pos:line="1838" pos:column="9">ifnEnumJobsA</name></decl><op:operator pos:line="1838" pos:column="21">,</op:operator>
	<decl><name pos:line="1839" pos:column="9">ifnGetPrinterDriverA</name></decl><op:operator pos:line="1839" pos:column="29">,</op:operator>
	<decl><name pos:line="1840" pos:column="9">ifnClosePrinter</name></decl><op:operator pos:line="1840" pos:column="24">,</op:operator>
	<decl><name pos:line="1841" pos:column="9">ifnEnumPrintersW</name></decl><op:operator pos:line="1841" pos:column="25">,</op:operator>
	<decl><name pos:line="1842" pos:column="9">ifnEnumJobsW</name></decl><op:operator pos:line="1842" pos:column="21">,</op:operator>
	<decl><name pos:line="1843" pos:column="9">ifnGetPrinterDriverW</name></decl><op:operator pos:line="1843" pos:column="29">,</op:operator>
	<decl><name pos:line="1844" pos:column="9">ifnAddPrinterDriverA</name></decl><op:operator pos:line="1844" pos:column="29">,</op:operator>
	<decl><name pos:line="1845" pos:column="9">ifnAddPrinterDriverW</name></decl><op:operator pos:line="1845" pos:column="29">,</op:operator>
	<decl><name pos:line="1846" pos:column="9">ifnGetPrinterDriverDirectoryA</name></decl><op:operator pos:line="1846" pos:column="38">,</op:operator>
	<decl><name pos:line="1847" pos:column="9">ifnGetPrinterDriverDirectoryW</name></decl><op:operator pos:line="1847" pos:column="38">,</op:operator>
	<decl><name pos:line="1848" pos:column="9">ifnDeletePrinter</name></decl><op:operator pos:line="1848" pos:column="25">,</op:operator>
	<decl><name pos:line="1849" pos:column="9">ifnAddPrinterA</name></decl><op:operator pos:line="1849" pos:column="23">,</op:operator>
	<decl><name pos:line="1850" pos:column="9">ifnAddPrinterW</name></decl><op:operator pos:line="1850" pos:column="23">,</op:operator>
	<decl><name pos:line="1851" pos:column="9">ifnAddPrinterConnectionW</name></decl><op:operator pos:line="1851" pos:column="33">,</op:operator>
	<decl><name pos:line="1852" pos:column="9">cfnWinspool</name></decl>
}</block>;</enum>

<enum pos:line="1855" pos:column="1">enum
<block pos:line="1856" pos:column="1">{
	<decl><name pos:line="1857" pos:column="9">ifnGetLongPathNameA</name></decl><op:operator pos:line="1857" pos:column="28">,</op:operator>
	<decl><name pos:line="1858" pos:column="9">ifnGetLongPathNameW</name></decl><op:operator pos:line="1858" pos:column="28">,</op:operator>
	<decl><name pos:line="1859" pos:column="9">ifnProcessIdToSessionId</name></decl><op:operator pos:line="1859" pos:column="32">,</op:operator>
	<decl><name pos:line="1860" pos:column="9">cfnKernel32</name></decl>
}</block>;</enum>

<enum pos:line="1863" pos:column="1">enum
<block pos:line="1864" pos:column="1">{
	<decl><name pos:line="1865" pos:column="9">ifnPathQuoteSpacesW</name></decl><op:operator pos:line="1865" pos:column="28">,</op:operator>
	<decl><name pos:line="1866" pos:column="9">ifnPathFindFileNameW</name></decl><op:operator pos:line="1866" pos:column="29">,</op:operator>
	<decl><name pos:line="1867" pos:column="9">ifnPathRemoveArgsW</name></decl><op:operator pos:line="1867" pos:column="27">,</op:operator>
	<decl><name pos:line="1868" pos:column="9">ifnPathUnquoteSpacesW</name></decl><op:operator pos:line="1868" pos:column="30">,</op:operator>
	<decl><name pos:line="1869" pos:column="9">ifnPathRemoveFileSpecW</name></decl><op:operator pos:line="1869" pos:column="31">,</op:operator>
	<decl><name pos:line="1870" pos:column="9">ifnPathIsURLW</name></decl><op:operator pos:line="1870" pos:column="22">,</op:operator>
	<decl><name pos:line="1871" pos:column="9">ifnSHOpenRegStreamA</name></decl><op:operator pos:line="1871" pos:column="28">,</op:operator>
	<decl><name pos:line="1872" pos:column="9">ifnSHOpenRegStreamW</name></decl><op:operator pos:line="1872" pos:column="28">,</op:operator>

	<decl><name pos:line="1874" pos:column="9">cfnShlwapi</name></decl>
}</block>;</enum>

<enum pos:line="1877" pos:column="1">enum
<block pos:line="1878" pos:column="1">{
	<decl><name pos:line="1879" pos:column="9">ifnADsOpenObject</name></decl><op:operator pos:line="1879" pos:column="25">,</op:operator>

	<decl><name pos:line="1881" pos:column="9">cfnActiveds</name></decl>
}</block>;</enum>

<enum pos:line="1884" pos:column="1">enum
<block pos:line="1885" pos:column="1">{
	<decl><name pos:line="1886" pos:column="9">ifnGetIWFFPtr</name></decl><op:operator pos:line="1886" pos:column="22">,</op:operator>
	<decl><name pos:line="1887" pos:column="9">cfnWFF</name></decl>
}</block>;</enum>

<enum pos:line="1890" pos:column="1">enum
<block pos:line="1891" pos:column="1">{
   <decl><name pos:line="1892" pos:column="4">ifnNetbios</name></decl><op:operator pos:line="1892" pos:column="14">,</op:operator>
   <decl><name pos:line="1893" pos:column="4">cfnNetapi32</name></decl>
}</block>;</enum>

<enum pos:line="1896" pos:column="1">enum
<block pos:line="1897" pos:column="1">{
	<decl><name pos:line="1898" pos:column="9">ifnWTSQuerySessionInformationW</name></decl><op:operator pos:line="1898" pos:column="39">,</op:operator>
	<decl><name pos:line="1899" pos:column="9">ifnWTSFreeMemory</name></decl><op:operator pos:line="1899" pos:column="25">,</op:operator>
	<decl><name pos:line="1900" pos:column="9">cfnWtsapi32</name></decl>
}</block>;</enum>

<enum pos:line="1903" pos:column="1">enum
<block pos:line="1904" pos:column="1">{
	<decl><name pos:line="1905" pos:column="9">ifnCryptCATAdminCalcHashFromFileHandle</name></decl><op:operator pos:line="1905" pos:column="47">,</op:operator>
	<decl><name pos:line="1906" pos:column="9">cfnMscat32</name></decl>
}</block>;</enum>

<comment type="line" pos:line="1909" pos:column="1">// we don't bother loading any functions out of these modules</comment>
<cpp:define pos:line="1910" pos:column="1">#<cpp:directive pos:line="1910" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1910" pos:column="9">cfnUser</name></cpp:macro> <cpp:value pos:line="1910" pos:column="17">0</cpp:value></cpp:define>
<cpp:define pos:line="1911" pos:column="1">#<cpp:directive pos:line="1911" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1911" pos:column="9">cfnGdi</name></cpp:macro> <cpp:value pos:line="1911" pos:column="16">0</cpp:value></cpp:define>
<cpp:define pos:line="1912" pos:column="1">#<cpp:directive pos:line="1912" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1912" pos:column="9">cfnWinnls</name></cpp:macro> <cpp:value pos:line="1912" pos:column="19">0</cpp:value></cpp:define>
<cpp:define pos:line="1913" pos:column="1">#<cpp:directive pos:line="1913" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1913" pos:column="9">cfnWinmm</name></cpp:macro> <cpp:value pos:line="1913" pos:column="18">0</cpp:value></cpp:define>
<cpp:define pos:line="1914" pos:column="1">#<cpp:directive pos:line="1914" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1914" pos:column="9">cfnRichEdit</name></cpp:macro> <cpp:value pos:line="1914" pos:column="21">0</cpp:value></cpp:define>


<comment type="block" pos:line="1917" pos:column="1">/*	Returns the module handle of the given module imod. Loads it if it is
	not loaded already.  fForceLoad will force a LoadLibrary on the DLL
	even if it is already in memory. */</comment>
<macro><name pos:line="1920" pos:column="1">MSOAPI_</name><argument_list pos:line="1920" pos:column="8">(<argument pos:line="1920" pos:column="9">HINSTANCE</argument>)</argument_list></macro> <macro><name pos:line="1920" pos:column="20">MsoLoadModule</name><argument_list pos:line="1920" pos:column="33">(<argument pos:line="1920" pos:column="34">int imod</argument>, <argument pos:line="1920" pos:column="44">BOOL fForceLoad</argument>)</argument_list></macro><empty_stmt pos:line="1920" pos:column="60">;</empty_stmt>

<macro><name pos:line="1922" pos:column="1">MSOAPIX_</name><argument_list pos:line="1922" pos:column="9">(<argument pos:line="1922" pos:column="10">void</argument>)</argument_list></macro> <macro><name pos:line="1922" pos:column="16">MsoFreeModule</name><argument_list pos:line="1922" pos:column="29">(<argument pos:line="1922" pos:column="30">int imod</argument>)</argument_list></macro><empty_stmt pos:line="1922" pos:column="39">;</empty_stmt>

<macro><name pos:line="1924" pos:column="1">MSOAPI_</name><argument_list pos:line="1924" pos:column="8">(<argument pos:line="1924" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1924" pos:column="15">MsoFModuleLoaded</name><argument_list pos:line="1924" pos:column="31">(<argument pos:line="1924" pos:column="32">int imod</argument>)</argument_list></macro><empty_stmt pos:line="1924" pos:column="41">;</empty_stmt>

<comment type="block" pos:line="1926" pos:column="1">/*	Returns the proc address in the module imod of the function
	szName.  Returns NULL if the module is not found or if the entry
	point does not exist in the module. */</comment>
<macro><name pos:line="1929" pos:column="1">MSOAPI_</name><argument_list pos:line="1929" pos:column="8">(<argument pos:line="1929" pos:column="9">FARPROC</argument>)</argument_list></macro> <macro><name pos:line="1929" pos:column="18">MsoGetProcAddress</name><argument_list pos:line="1929" pos:column="35">(<argument pos:line="1929" pos:column="36">int imod</argument>, <argument pos:line="1929" pos:column="46">const char* szName</argument>)</argument_list></macro><empty_stmt pos:line="1929" pos:column="65">;</empty_stmt>


<comment type="block" pos:line="1932" pos:column="1">/*	This API should be called by the client before MsoFInitOffice to set
	our locale id so that we can load the correct international dll.
	Defaults to the user default locale if app doesn't call this API before. */</comment>
<macro><name pos:line="1935" pos:column="1">MSOAPI_</name><argument_list pos:line="1935" pos:column="8">(<argument pos:line="1935" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="1935" pos:column="15">MsoSetLocale</name><argument_list pos:line="1935" pos:column="27">(<argument pos:line="1935" pos:column="28">LCID dwLCID</argument>)</argument_list></macro><empty_stmt pos:line="1935" pos:column="40">;</empty_stmt>


<cpp:define pos:line="1938" pos:column="1">#<cpp:directive pos:line="1938" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1938" pos:column="9">msobtaNone</name></cpp:macro>			<cpp:value pos:line="1938" pos:column="41">0</cpp:value></cpp:define>
<cpp:define pos:line="1939" pos:column="1">#<cpp:directive pos:line="1939" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1939" pos:column="9">msobtaPreRelease</name></cpp:macro>	<cpp:value pos:line="1939" pos:column="33">1</cpp:value></cpp:define>
<cpp:define pos:line="1940" pos:column="1">#<cpp:directive pos:line="1940" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1940" pos:column="9">msobtaOEM</name></cpp:macro>			<cpp:value pos:line="1940" pos:column="41">2</cpp:value></cpp:define>
<cpp:define pos:line="1941" pos:column="1">#<cpp:directive pos:line="1941" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1941" pos:column="9">msobtaOEMCD</name></cpp:macro>			<cpp:value pos:line="1941" pos:column="41">3</cpp:value></cpp:define>
<cpp:define pos:line="1942" pos:column="1">#<cpp:directive pos:line="1942" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1942" pos:column="9">msobtaOEMFixed</name></cpp:macro>		<cpp:value pos:line="1942" pos:column="33">4</cpp:value></cpp:define>
<cpp:define pos:line="1943" pos:column="1">#<cpp:directive pos:line="1943" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1943" pos:column="9">msobtaUnlock</name></cpp:macro>			<cpp:value pos:line="1943" pos:column="41">5</cpp:value></cpp:define>

<comment type="block" pos:line="1945" pos:column="1">/*	Puts the Office DLL in "beta-mode".  When we're in beta mode, we do
	our beta expiration test in MsoFInitOffice. There are 2 kinds of betas:
	msobtaPreRelease:	look in the intl DLL for a hardcoded expiration date
						(Apps should make this call if they ship a beta after
						mso97.dll RTM, i.e. FE betas)
	msobtaOEM:			apps expire 90 days after first boot
	msobtaOEMCD:		same as msobtaOEM, except setup sets the date -- UNUSED FOR NOW
	msobtaOEMFixed:		same as msobtaPreRelease, except a different string
	msobtaNone:			No effect */</comment>
<macro><name pos:line="1954" pos:column="1">MSOAPIX_</name><argument_list pos:line="1954" pos:column="9">(<argument pos:line="1954" pos:column="10">void</argument>)</argument_list></macro> <macro><name pos:line="1954" pos:column="16">MsoSetBetaMode</name><argument_list pos:line="1954" pos:column="30">(<argument pos:line="1954" pos:column="31">int bta</argument>)</argument_list></macro><empty_stmt pos:line="1954" pos:column="39">;</empty_stmt>

<comment type="block" pos:line="1956" pos:column="1">/* Cover for standard GetTextExtentPointW that:
	1. Uses GetTextExtentPoint32W on Win32 (more accurate)
	2. Fixes Windows bug	when cch is 0.  If cch is 0 then the correct dy 
		is returned and dx will be 0.  Also, if cch is 0 then wz can be NULL. */</comment>
<macro><name pos:line="1960" pos:column="1">MSOAPI_</name><argument_list pos:line="1960" pos:column="8">(<argument pos:line="1960" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1960" pos:column="15">MsoFGetTextExtentPointW</name><argument_list pos:line="1960" pos:column="38">(<argument pos:line="1960" pos:column="39">HDC hdc</argument>, <argument pos:line="1960" pos:column="48">const WCHAR *wz</argument>, <argument pos:line="1960" pos:column="65">int cch</argument>, <argument pos:line="1960" pos:column="74">LPSIZE lpSize</argument>)</argument_list></macro><empty_stmt pos:line="1960" pos:column="88">;</empty_stmt>

<comment type="block" pos:line="1962" pos:column="1">/* Covers for Windows APIs that need to call the W versions if on a 
	Unicode system, else the A version. */</comment>
<macro><name pos:line="1964" pos:column="1">MSOAPI_</name><argument_list pos:line="1964" pos:column="8">(<argument pos:line="1964" pos:column="9">LRESULT</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1964" pos:column="18">MsoDispatchMessage</name><argument_list pos:line="1964" pos:column="36">(<argument><expr pos:line="1964" pos:column="37">const <name pos:line="1964" pos:column="43">MSG</name> <op:operator pos:line="1964" pos:column="47">*</op:operator><name pos:line="1964" pos:column="48">pmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name pos:line="1965" pos:column="1">MSOAPI_</name><argument_list pos:line="1965" pos:column="8">(<argument pos:line="1965" pos:column="9">LRESULT</argument>)</argument_list></macro> <macro><name pos:line="1965" pos:column="18">MsoSendMessage</name><argument_list pos:line="1965" pos:column="32">(<argument pos:line="1965" pos:column="33">HWND hwnd</argument>, <argument pos:line="1965" pos:column="44">UINT msg</argument>, <argument pos:line="1965" pos:column="54">WPARAM wParam</argument>, <argument pos:line="1965" pos:column="69">LPARAM lParam</argument>)</argument_list></macro><empty_stmt pos:line="1965" pos:column="83">;</empty_stmt>
<macro><name pos:line="1966" pos:column="1">MSOAPI_</name><argument_list pos:line="1966" pos:column="8">(<argument pos:line="1966" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1966" pos:column="15">MsoPostMessage</name><argument_list pos:line="1966" pos:column="29">(<argument pos:line="1966" pos:column="30">HWND hwnd</argument>, <argument pos:line="1966" pos:column="41">UINT msg</argument>, <argument pos:line="1966" pos:column="51">WPARAM wParam</argument>, <argument pos:line="1966" pos:column="66">LPARAM lParam</argument>)</argument_list></macro><empty_stmt pos:line="1966" pos:column="80">;</empty_stmt>
<macro><name pos:line="1967" pos:column="1">MSOAPI_</name><argument_list pos:line="1967" pos:column="8">(<argument pos:line="1967" pos:column="9">LRESULT</argument>)</argument_list></macro> <macro><name pos:line="1967" pos:column="18">MsoCallWindowProc</name><argument_list pos:line="1967" pos:column="35">(<argument pos:line="1967" pos:column="36">WNDPROC pPrevWndFunc</argument>, <argument pos:line="1967" pos:column="58">HWND hwnd</argument>, <argument pos:line="1967" pos:column="69">UINT msg</argument>, 
		<argument pos:line="1968" pos:column="17">WPARAM wParam</argument>, <argument pos:line="1968" pos:column="32">LPARAM lParam</argument>)</argument_list></macro><empty_stmt pos:line="1968" pos:column="46">;</empty_stmt>

<macro><name pos:line="1970" pos:column="1">MSOAPIX_</name><argument_list pos:line="1970" pos:column="9">(<argument pos:line="1970" pos:column="10">LONG</argument>)</argument_list></macro> <macro><name pos:line="1970" pos:column="16">MsoGetWindowLong</name><argument_list pos:line="1970" pos:column="32">(<argument pos:line="1970" pos:column="33">HWND hwnd</argument>, <argument pos:line="1970" pos:column="44">int nIndex</argument>)</argument_list></macro><empty_stmt pos:line="1970" pos:column="55">;</empty_stmt>
<macro><name pos:line="1971" pos:column="1">MSOAPI_</name><argument_list pos:line="1971" pos:column="8">(<argument pos:line="1971" pos:column="9">LONG</argument>)</argument_list></macro> <macro><name pos:line="1971" pos:column="15">MsoSetWindowLong</name><argument_list pos:line="1971" pos:column="31">(<argument pos:line="1971" pos:column="32">HWND hwnd</argument>, <argument pos:line="1971" pos:column="43">int nIndex</argument>, <argument pos:line="1971" pos:column="55">LONG dwNewLong</argument>)</argument_list></macro><empty_stmt pos:line="1971" pos:column="70">;</empty_stmt>

<cpp:ifdef pos:line="1973" pos:column="1">#<cpp:directive pos:line="1973" pos:column="2">ifdef</cpp:directive> <name pos:line="1973" pos:column="8">_WIN64</name></cpp:ifdef>
<macro><name pos:line="1974" pos:column="1">MSOAPIX_</name><argument_list pos:line="1974" pos:column="9">(<argument pos:line="1974" pos:column="10">LONG_PTR</argument>)</argument_list></macro> <macro><name pos:line="1974" pos:column="20">MsoGetWindowLongPtr</name><argument_list pos:line="1974" pos:column="39">(<argument pos:line="1974" pos:column="40">HWND hwnd</argument>, <argument pos:line="1974" pos:column="51">int nIndex</argument>)</argument_list></macro><empty_stmt pos:line="1974" pos:column="62">;</empty_stmt>
<macro><name pos:line="1975" pos:column="1">MSOAPIX_</name><argument_list pos:line="1975" pos:column="9">(<argument pos:line="1975" pos:column="10">LONG_PTR</argument>)</argument_list></macro> <macro><name pos:line="1975" pos:column="20">MsoSetWindowLongPtr</name><argument_list pos:line="1975" pos:column="39">(<argument pos:line="1975" pos:column="40">HWND hwnd</argument>, <argument pos:line="1975" pos:column="51">int nIndex</argument>, <argument pos:line="1975" pos:column="63">LONG_PTR dwNewLong</argument>)</argument_list></macro><empty_stmt pos:line="1975" pos:column="82">;</empty_stmt>
<cpp:else pos:line="1976" pos:column="1">#<cpp:directive pos:line="1976" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="1977" pos:column="1">#<cpp:directive pos:line="1977" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1977" pos:column="9">MsoGetWindowLongPtr</name><parameter_list pos:line="1977" pos:column="28">(<param><type><name pos:line="1977" pos:column="29">hwnd</name></type></param>, <param><type><name pos:line="1977" pos:column="35">nIndex</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1977" pos:column="43">MsoGetWindowLong(hwnd, nIndex)</cpp:value></cpp:define>
<cpp:define pos:line="1978" pos:column="1">#<cpp:directive pos:line="1978" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1978" pos:column="9">MsoSetWindowLongPtr</name><parameter_list pos:line="1978" pos:column="28">(<param><type><name pos:line="1978" pos:column="29">hwnd</name></type></param>, <param><type><name pos:line="1978" pos:column="35">nIndex</name></type></param>, <param><type><name pos:line="1978" pos:column="43">dwNewLong</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="1978" pos:column="54">MsoSetWindowLong(hwnd, nIndex, dwNewLong)</cpp:value></cpp:define>
<cpp:endif pos:line="1979" pos:column="1">#<cpp:directive pos:line="1979" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="1979" pos:column="8">// _WIN64</comment>

<cpp:define pos:line="1981" pos:column="1">#<cpp:directive pos:line="1981" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1981" pos:column="9">ETO_MSO_IME_UL_WORKAROUND</name></cpp:macro> <cpp:value pos:line="1981" pos:column="35">0x0800000</cpp:value></cpp:define>
<cpp:define pos:line="1982" pos:column="1">#<cpp:directive pos:line="1982" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1982" pos:column="9">ETO_MSO_NO_GLYPH</name></cpp:macro> <cpp:value pos:line="1982" pos:column="26">0x1000000</cpp:value></cpp:define>
<cpp:define pos:line="1983" pos:column="1">#<cpp:directive pos:line="1983" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1983" pos:column="9">ETO_MSO_DISPLAY_HOTKEY</name></cpp:macro> <cpp:value pos:line="1983" pos:column="32">0x2000000</cpp:value></cpp:define>
<cpp:define pos:line="1984" pos:column="1">#<cpp:directive pos:line="1984" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1984" pos:column="9">ETO_MSO_NO_FONTLINK</name></cpp:macro>	<cpp:value pos:line="1984" pos:column="33">0x20000000</cpp:value></cpp:define>
<cpp:define pos:line="1985" pos:column="1">#<cpp:directive pos:line="1985" pos:column="2">define</cpp:directive>	<cpp:macro><name pos:line="1985" pos:column="9">ETO_MSO_DONT_CALL_UCSCRIBE</name></cpp:macro>	<cpp:value pos:line="1985" pos:column="41">0x40000000</cpp:value></cpp:define>
<cpp:define pos:line="1986" pos:column="1">#<cpp:directive pos:line="1986" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1986" pos:column="9">ETO_MSO_FORCE_ENHMETAFILE</name></cpp:macro> <cpp:value pos:line="1986" pos:column="35">0x80000000</cpp:value></cpp:define>
<macro><name pos:line="1987" pos:column="1">MSOAPI_</name><argument_list pos:line="1987" pos:column="8">(<argument pos:line="1987" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="1987" pos:column="14">MsoGetWindowTextWtz</name><argument_list pos:line="1987" pos:column="33">(<argument pos:line="1987" pos:column="34">HWND hwnd</argument>, <argument pos:line="1987" pos:column="45">WCHAR *wtz</argument>, <argument pos:line="1987" pos:column="57">int cchMax</argument>)</argument_list></macro><empty_stmt pos:line="1987" pos:column="68">;</empty_stmt>
<macro><name pos:line="1988" pos:column="1">MSOAPIX_</name><argument_list pos:line="1988" pos:column="9">(<argument pos:line="1988" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1988" pos:column="16">MsoSetWindowTextWtz</name><argument_list pos:line="1988" pos:column="35">(<argument pos:line="1988" pos:column="36">HWND hwnd</argument>, <argument pos:line="1988" pos:column="47">WCHAR *wtz</argument>)</argument_list></macro><empty_stmt pos:line="1988" pos:column="58">;</empty_stmt>
<macro><name pos:line="1989" pos:column="1">MSOAPI_</name><argument_list pos:line="1989" pos:column="8">(<argument pos:line="1989" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1989" pos:column="15">MsoAppendMenuW</name><argument_list pos:line="1989" pos:column="29">(<argument pos:line="1989" pos:column="30">HMENU hMenu</argument>, <argument pos:line="1989" pos:column="43">UINT uFlags</argument>, <argument pos:line="1989" pos:column="56">UINT uIDNewItem</argument>,
								<argument pos:line="1990" pos:column="65">LPCWSTR lpNewItem</argument>)</argument_list></macro><empty_stmt pos:line="1990" pos:column="83">;</empty_stmt>
<macro><name pos:line="1991" pos:column="1">MSOAPI_</name><argument_list pos:line="1991" pos:column="8">(<argument pos:line="1991" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1991" pos:column="15">MsoInsertMenuW</name><argument_list pos:line="1991" pos:column="29">(<argument pos:line="1991" pos:column="30">HMENU hMenu</argument>, <argument pos:line="1991" pos:column="43">UINT uPosition</argument>, <argument pos:line="1991" pos:column="59">UINT uFlags</argument>,
								<argument pos:line="1992" pos:column="65">UINT uIDNewItem</argument>, <argument pos:line="1992" pos:column="82">LPCWSTR lpNewItem</argument>)</argument_list></macro><empty_stmt pos:line="1992" pos:column="100">;</empty_stmt>

<comment type="block" pos:line="1994" pos:column="1">/*	Return the facename of the system UI (dialog) font in wtzFaceName. */</comment>
<macro><name pos:line="1995" pos:column="1">MSOAPI_</name><argument_list pos:line="1995" pos:column="8">(<argument pos:line="1995" pos:column="9">VOID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1995" pos:column="15">MsoGetSystemUIFont</name><argument_list pos:line="1995" pos:column="33">(<argument><expr><name pos:line="1995" pos:column="34">WCHAR</name> <op:operator pos:line="1995" pos:column="40">*</op:operator><name pos:line="1995" pos:column="41">wtzFaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="1997" pos:column="1">/*	Return TRUE if the user settings indicate that we should not use Tahoma
	and instead use the system UI font.  If we should use the system font 
	and plf is non-NULL and points at a font with facename currently equal 
	to "Tahoma", then overwrite it with the the appropriate system UI 
	font (e.g. "MS Sans Serif" or "MS Dialog") with the same attributes. */</comment>
<macro><name pos:line="2002" pos:column="1">MSOAPI_</name><argument_list pos:line="2002" pos:column="8">(<argument pos:line="2002" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2002" pos:column="15">MsoFOverrideOfficeUIFont</name><argument_list pos:line="2002" pos:column="39">(<argument><expr><name pos:line="2002" pos:column="40">LOGFONT</name> <op:operator pos:line="2002" pos:column="48">*</op:operator><name pos:line="2002" pos:column="49">plf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2004" pos:column="1">/*	Return TRUE if the user settings indicate that we should not use Tahoma
	and instead use the system UI font.  If we should use the system font 
	and the Windows dialog at hwndDlg is using the Tahoma font, then set 
	the font for all controls in the dialog to the default system dialog font.  
	Call this in WM_INITDIALOG for Windows dialogs.
		If this function creates a new font, it returns that font in *phfont.
	In this case, the caller is responsible for deleting the font when the
	dialog is closed. */</comment>
<macro><name pos:line="2012" pos:column="1">MSOAPI_</name><argument_list pos:line="2012" pos:column="8">(<argument pos:line="2012" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2012" pos:column="15">MsoFOverrideOfficeUIWinDlgFont</name><argument_list pos:line="2012" pos:column="45">(<argument pos:line="2012" pos:column="46">HWND hwndDlg</argument>, <argument pos:line="2012" pos:column="60">HFONT *phfont</argument>)</argument_list></macro><empty_stmt pos:line="2012" pos:column="74">;</empty_stmt>

<comment type="block" pos:line="2014" pos:column="1">/* If the LOGFONT at plf is a default system UI font then change *plf 
	to substitute the Tahoma font as appropriate for the system.
	Return TRUE if *plf was changed. */</comment>
<macro><name pos:line="2017" pos:column="1">MSOAPI_</name><argument_list pos:line="2017" pos:column="8">(<argument pos:line="2017" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2017" pos:column="15">MsoFSubstituteTahomaLogfont</name><argument_list pos:line="2017" pos:column="42">(<argument><expr><name pos:line="2017" pos:column="43">LOGFONT</name> <op:operator pos:line="2017" pos:column="51">*</op:operator><name pos:line="2017" pos:column="52">plf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2019" pos:column="1">/*	Some Far East languages need a minimum 9 point UI font size because 
	otherwise the glyphs are unreadable.  On other languages, we want to go 
	no lower than 8 pt (even if buggy system settings return a smaller value).
	This is controlled by a resource.  If the the font at plf describes a 
	smaller size, increase it to the minimum. */</comment>
<macro><name pos:line="2024" pos:column="1">MSOAPI_</name><argument_list pos:line="2024" pos:column="8">(<argument pos:line="2024" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2024" pos:column="15">MsoEnsureMinUIFontSize</name><argument_list pos:line="2024" pos:column="37">(<argument><expr><name pos:line="2024" pos:column="38">LOGFONT</name> <op:operator pos:line="2024" pos:column="46">*</op:operator><name pos:line="2024" pos:column="47">plf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:line="2026" pos:column="1">// Fonts supported by MsoFGetFontSettings</comment>
<enum pos:line="2027" pos:column="1">enum
	<block pos:line="2028" pos:column="9">{
	<decl><name pos:line="2029" pos:column="9">msofntMenu</name></decl><op:operator pos:line="2029" pos:column="19">,</op:operator>
	<decl><name pos:line="2030" pos:column="9">msofntTooltip</name></decl><op:operator pos:line="2030" pos:column="22">,</op:operator>
	}</block>;</enum>

<comment type="block" pos:line="2033" pos:column="1">/* Return font and color info for the font given by 'fnt' (see msofntXXX).
	If fVertical, then the font is rotated 90 degrees if this fnt type
	supports rotation in Office.  If phfont is non-NULL, return the HFONT used 
	for this item.  This font is owned and cached by Office and should not 
	be deleted.  If phbrBk is non-NULL, return a brush used for the 
	background of this item	(owned by Office and should not be deleted).  
	If pcrText is non-NULL,	return the COLOREF used for the text color for 
	this item. Return TRUE if all requested info was returned. */</comment>
<macro><name pos:line="2041" pos:column="1">MSOAPI_</name><argument_list pos:line="2041" pos:column="8">(<argument pos:line="2041" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2041" pos:column="15">MsoFGetFontSettings</name><argument_list pos:line="2041" pos:column="34">(<argument pos:line="2041" pos:column="35">int fnt</argument>, <argument pos:line="2041" pos:column="44">BOOL fVertical</argument>, <argument pos:line="2041" pos:column="60">HFONT *phfont</argument>, 
		<argument pos:line="2042" pos:column="17">HBRUSH *phbrBk</argument>, <argument pos:line="2042" pos:column="33">COLORREF *pcrText</argument>)</argument_list></macro><empty_stmt pos:line="2042" pos:column="51">;</empty_stmt>

<comment type="block" pos:line="2044" pos:column="1">/* If the system suppports NotifyWinEvent, then call it with the given
	parameters (see \otools\inc\win\winable.h). */</comment>
<macro><name pos:line="2046" pos:column="1">MSOAPI_</name><argument_list pos:line="2046" pos:column="8">(<argument pos:line="2046" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="2046" pos:column="15">MsoNotifyWinEvent</name><argument_list pos:line="2046" pos:column="32">(<argument pos:line="2046" pos:column="33">DWORD dwEvent</argument>, <argument pos:line="2046" pos:column="48">HWND hwnd</argument>, <argument pos:line="2046" pos:column="59">LONG idObject</argument>, <argument pos:line="2046" pos:column="74">LONG idChild</argument>)</argument_list></macro><empty_stmt pos:line="2046" pos:column="87">;</empty_stmt>

<comment type="block" pos:line="2048" pos:column="1">/* Return FALSE iff we don't need to call MsoNotifyWinEvent.  This is only an
	optimization to avoid prep work in the caller since calling MsoNotifyWinEvent
	is always safe and fast if nobody is listening. */</comment>
<macro><name pos:line="2051" pos:column="1">MSOAPIX_</name><argument_list pos:line="2051" pos:column="9">(<argument pos:line="2051" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2051" pos:column="16">MsoFNotifyWinEvents</name><argument_list pos:line="2051" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2053" pos:column="1">/* Return TRUE if an Accessibility screen reader is running. */</comment>
<macro><name pos:line="2054" pos:column="1">MSOAPI_</name><argument_list pos:line="2054" pos:column="8">(<argument pos:line="2054" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2054" pos:column="15">MsoFScreenReaderPresent</name><argument_list pos:line="2054" pos:column="38">()</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2056" pos:column="1">/* Call LResultFromObject in oleacc.dll to thunk an IUnknown object into
   an LRESULT to allow for cross-process access.  The wParam is the parameter
   as passed to WM_GETOBJECT. */</comment>
<macro><name pos:line="2059" pos:column="1">MSOAPI_</name><argument_list pos:line="2059" pos:column="8">(<argument pos:line="2059" pos:column="9">LRESULT</argument>)</argument_list></macro> <macro><name pos:line="2059" pos:column="18">MsoLThunkIUnknown</name><argument_list pos:line="2059" pos:column="35">(<argument pos:line="2059" pos:column="36">IUnknown *punk</argument>, <argument pos:line="2059" pos:column="52">WPARAM wParam</argument>)</argument_list></macro><empty_stmt pos:line="2059" pos:column="66">;</empty_stmt>

<comment type="block" pos:line="2061" pos:column="1">/*	Return TRUE if build version of OleAcc.Dll is greater than or equal to
	the version number passed in (in the form A.B.C.D). */</comment>
<macro><name pos:line="2063" pos:column="1">MSOAPIX_</name><argument_list pos:line="2063" pos:column="9">(<argument pos:line="2063" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2063" pos:column="16">MsoFOleAccDllVersion</name><argument_list pos:line="2063" pos:column="36">(<argument pos:line="2063" pos:column="37">short A</argument>, <argument pos:line="2063" pos:column="46">short B</argument>, <argument pos:line="2063" pos:column="55">short C</argument>, <argument pos:line="2063" pos:column="64">short D</argument>)</argument_list></macro><empty_stmt pos:line="2063" pos:column="72">;</empty_stmt>

<comment type="block" pos:line="2065" pos:column="1">/* Put up an alert that says that a help ghosting or shortcut could not 
	be performed because the app is in a bad state. */</comment>
<macro><name pos:line="2067" pos:column="1">MSOAPI_</name><argument_list pos:line="2067" pos:column="8">(<argument pos:line="2067" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2067" pos:column="15">MsoDoGhostingAlert</name><argument_list pos:line="2067" pos:column="33">()</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2069" pos:column="1">/*	Constructs the name of the international dll from the locale passed in.	*/</comment>
<cpp:define pos:line="2070" pos:column="1">#<cpp:directive pos:line="2070" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2070" pos:column="9">MsoGetIntlName</name><parameter_list pos:line="2070" pos:column="23">(<param><type><name pos:line="2070" pos:column="24">wz</name></type></param>)</parameter_list></cpp:macro> \
	<cpp:value pos:line="2071" pos:column="9">MsoQfidToFilename(msoqfidMsoIntlDll, wz)</cpp:value></cpp:define>

<comment type="block" format="doxygen" pos:line="2073" pos:column="1">/****************************************************************************
   MsoNotifyIMEWindowChange

	This function should be called whenever the set of visible IME windows
	changes.	Usually, calling this function in response to IMN_OPENCANDIDATE
	and IMN_CHANGECANDIDATE messages is sufficient. Unfortunately, Office is
	unable to catch these messages itself because they go to the window that
	has focus, not to the top-level window of the application.
		By calling this function, the application allows Office to do useful
	things like move the assistant off of the IME windows.
****************************************************************************/</comment>
<macro><name pos:line="2084" pos:column="1">MSOAPI_</name><argument_list pos:line="2084" pos:column="8">(<argument pos:line="2084" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2084" pos:column="15">MsoNotifyIMEWindowChange</name><argument_list pos:line="2084" pos:column="39">(<argument><expr><name pos:line="2084" pos:column="40">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2086" pos:column="1">/*-----------------------------------------------------------------------------
	MsoWzAppendVer

	Places the current build version into wz of the form (maj.min.rup)
	String is 0 terminated, returns a pointer to the null for subsequent
	append operations.  The buffer is assumed to be long enough for this
	concatination.
-------------------------------------------------------------------- JEFFJO -*/</comment>
<macro><name pos:line="2094" pos:column="1">MSOAPI_</name><argument_list pos:line="2094" pos:column="8">(<argument pos:line="2094" pos:column="9">WCHAR *</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2094" pos:column="18">MsoWzAppendVer</name><argument_list pos:line="2094" pos:column="32">(<argument><expr><name pos:line="2094" pos:column="33">WCHAR</name> <op:operator pos:line="2094" pos:column="39">*</op:operator><name pos:line="2094" pos:column="40">wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen" pos:line="2096" pos:column="1">/****************************************************************************
	MsoFInitDisableUI

	This function must be called to activate the ADMIN disabled UI. It must
	called AFTER calling MsoFCreateStdComponentManager.

	This function will parse the registry for ADMIN disabled keystrokes and
	tcid's. It will register a master component to intercept the offending 
	keystrokes and banish them to the bit bucket.
****************************************************************************/</comment>
<macro><name pos:line="2106" pos:column="1">MSOAPI_</name><argument_list pos:line="2106" pos:column="8">(<argument pos:line="2106" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2106" pos:column="15">MsoFInitDisableUI</name><argument_list pos:line="2106" pos:column="32">(<argument pos:line="2106" pos:column="33">HMSOINST hinst</argument>)</argument_list></macro><empty_stmt pos:line="2106" pos:column="48">;</empty_stmt>

<comment type="block" format="doxygen" pos:line="2108" pos:column="1">/****************************************************************************
	MsoHtmlHelp

	This function is the replacement for WinHelp. It will display the HTMLHelp
	Appbar.
****************************************************************************/</comment>
<macro><name pos:line="2114" pos:column="1">MSOAPI_</name><argument_list pos:line="2114" pos:column="8">(<argument pos:line="2114" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2114" pos:column="15">MsoHtmlHelp</name><argument_list pos:line="2114" pos:column="26">(<argument pos:line="2114" pos:column="27">HWND hwndMain</argument>, <argument pos:line="2114" pos:column="42">LPWSTR lpszHelp</argument>, <argument pos:line="2114" pos:column="59">UINT usCommand</argument>, <argument pos:line="2114" pos:column="75">DWORD dwData</argument>)</argument_list></macro><empty_stmt pos:line="2114" pos:column="88">;</empty_stmt>

<comment type="block" format="doxygen" pos:line="2116" pos:column="1">/****************************************************************************
	MsoHelpSetLeftPane

	Normally MsoHtmlHelp will cause msohelp to launch with the tabs
	extended or not depending on the current assistant state.  This function
	affects the next call to MsoHtmlHelp such that the tabs can be forced to
	be extended or not regardless of the assistant state.  
****************************************************************************/</comment>
<macro><name pos:line="2124" pos:column="1">MSOAPI_</name><argument_list pos:line="2124" pos:column="8">(<argument pos:line="2124" pos:column="9">void</argument>)</argument_list></macro> <macro><name pos:line="2124" pos:column="15">MsoHelpSetLeftPane</name><argument_list pos:line="2124" pos:column="33">(<argument pos:line="2124" pos:column="34">BOOL fShow</argument>)</argument_list></macro><empty_stmt pos:line="2124" pos:column="45">;</empty_stmt>

<comment type="block" pos:line="2126" pos:column="1">/*-------------------------------------------------------------------------*/</comment>

<cpp:define pos:line="2128" pos:column="1">#<cpp:directive pos:line="2128" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2128" pos:column="9">HELP_VBA_COMMAND</name></cpp:macro>   <cpp:value pos:line="2128" pos:column="28">0x10000</cpp:value></cpp:define>

<typedef pos:line="2130" pos:column="1">typedef <type><enum pos:line="2130" pos:column="9">enum
<block pos:line="2131" pos:column="1">{
	<decl><name pos:line="2132" pos:column="9">msoargtSwitch</name></decl><op:operator pos:line="2132" pos:column="22">,</op:operator>
	<decl><name pos:line="2133" pos:column="9">msoargtFile</name></decl><op:operator pos:line="2133" pos:column="20">,</op:operator>
	<decl><name pos:line="2134" pos:column="9">msoargtString</name></decl><op:operator pos:line="2134" pos:column="22">,</op:operator>
	<decl><name pos:line="2135" pos:column="9">msoargtProfile</name></decl><op:operator pos:line="2135" pos:column="23">,</op:operator>
	<decl><name pos:line="2136" pos:column="9">msoargtAutomation</name></decl><op:operator pos:line="2136" pos:column="26">,</op:operator>
	<decl><name pos:line="2137" pos:column="9">msoargtRegserver</name></decl><op:operator pos:line="2137" pos:column="25">,</op:operator>
	<decl><name pos:line="2138" pos:column="9">msoargtUnregserver</name></decl><op:operator pos:line="2138" pos:column="27">,</op:operator>
	<decl><name pos:line="2139" pos:column="9">msoargtSwitchData</name></decl><op:operator pos:line="2139" pos:column="26">,</op:operator>
	<decl><name pos:line="2140" pos:column="9">msoargtEmbedding</name></decl><op:operator pos:line="2140" pos:column="25">,</op:operator>
	<decl><name pos:line="2141" pos:column="9">msoargtSafe</name></decl><op:operator pos:line="2141" pos:column="20">,</op:operator>
	<decl><name pos:line="2142" pos:column="9">msoargtDDE</name></decl><op:operator pos:line="2142" pos:column="19">,</op:operator>
}</block></enum></type> <name pos:line="2143" pos:column="3">ARGT</name>;</typedef>

<typedef pos:line="2145" pos:column="1">typedef <type><struct pos:line="2145" pos:column="9">struct
<block pos:line="2146" pos:column="1">{<public type="default" pos:line="2146" pos:column="2">
	<decl_stmt><decl><type><name pos:line="2147" pos:column="9">ARGT</name></type> <name pos:line="2147" pos:column="14">argt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2148" pos:column="9">int</name></type> <name pos:line="2148" pos:column="13">ch</name></decl>;</decl_stmt>  <comment type="line" pos:line="2148" pos:column="18">// NOTE: don't change this to a CHAR since ARGC is overloaded to handle WCHAR cmdline</comment>
	<union pos:line="2149" pos:column="9">union
		<block pos:line="2150" pos:column="17">{<public type="default" pos:line="2150" pos:column="18">
		<decl_stmt><decl><type><name pos:line="2151" pos:column="17">CHAR</name> <type:modifier pos:line="2151" pos:column="22">*</type:modifier></type><name pos:line="2151" pos:column="23">szData</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2152" pos:column="17">int</name></type> <name pos:line="2152" pos:column="21">fFound</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2153" pos:column="17">WCHAR</name> <type:modifier pos:line="2153" pos:column="23">*</type:modifier></type><name pos:line="2153" pos:column="24">wzData</name></decl>;</decl_stmt>
		</public>}</block>;</union>
</public>}</block></struct></type> <name pos:line="2155" pos:column="3">ARGC</name>;</typedef>

<macro><name pos:line="2157" pos:column="1">MSOAPI_</name><argument_list pos:line="2157" pos:column="8">(<argument pos:line="2157" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="2157" pos:column="14">MsoParseCommandLine</name><argument_list pos:line="2157" pos:column="33">(<argument pos:line="2157" pos:column="34">ARGC *pargc</argument>, <argument pos:line="2157" pos:column="47">unsigned int carg</argument>, <argument pos:line="2157" pos:column="66">CHAR **pszCmdLine</argument>, <argument pos:line="2157" pos:column="85">int fDestructive</argument>)</argument_list></macro><empty_stmt pos:line="2157" pos:column="102">;</empty_stmt>
<macro><name pos:line="2158" pos:column="1">MSOAPI_</name><argument_list pos:line="2158" pos:column="8">(<argument pos:line="2158" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="2158" pos:column="14">MsoParseCommandLineW</name><argument_list pos:line="2158" pos:column="34">(<argument pos:line="2158" pos:column="35">ARGC *pargc</argument>, <argument pos:line="2158" pos:column="48">unsigned int carg</argument>, <argument pos:line="2158" pos:column="67">WCHAR **pszCmdLine</argument>, <argument pos:line="2158" pos:column="87">int fDestructive</argument>)</argument_list></macro><empty_stmt pos:line="2158" pos:column="104">;</empty_stmt>

<comment type="block" format="doxygen" pos:line="2160" pos:column="1">/****************************************************************************
	MsoGetIntlSysSettings

	This API is important to non-US apps, namely MidEast and FarEast.  It takes
	a BOOL param, fRefresh, which will be FALSE most of the time--which is at the 
	init time.  Apps will only set it to TRUE when they think that System settings 
	have been changed.

	BIDI_TODO: It would be a good idea to remove the fRefresh param, and refresh it 
	automatically when WM_SETTINGCHANGE is sent.  Where should we trap it?
****************************************************************************/</comment>
<macro><name pos:line="2171" pos:column="1">MSOAPI_</name><argument_list pos:line="2171" pos:column="8">(<argument pos:line="2171" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="2171" pos:column="16">MsoGetIntlSysSettings</name><argument_list pos:line="2171" pos:column="37">(<argument pos:line="2171" pos:column="38">BOOL fRefresh</argument>)</argument_list></macro><empty_stmt pos:line="2171" pos:column="52">;</empty_stmt>
<macro><name pos:line="2172" pos:column="1">MSOAPI_</name><argument_list pos:line="2172" pos:column="8">(<argument pos:line="2172" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2172" pos:column="15">MsoFEditLangSupported</name><argument_list pos:line="2172" pos:column="36">(<argument pos:line="2172" pos:column="37">WORD lid</argument>)</argument_list></macro><empty_stmt pos:line="2172" pos:column="46">;</empty_stmt>

<cpp:define pos:line="2174" pos:column="1">#<cpp:directive pos:line="2174" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2174" pos:column="9">MSOI_ARABIC_SYSTEM_INSTALLED</name></cpp:macro>		<cpp:value pos:line="2174" pos:column="49">0x00000001</cpp:value></cpp:define>	<comment type="line" pos:line="2174" pos:column="65">// Arabic APIs</comment>
<cpp:define pos:line="2175" pos:column="1">#<cpp:directive pos:line="2175" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2175" pos:column="9">MSOI_ARABIC_FONTS_INSTALLED</name></cpp:macro>			<cpp:value pos:line="2175" pos:column="57">0x00000002</cpp:value></cpp:define>	<comment type="line" pos:line="2175" pos:column="73">// Arabic Fonts</comment>
<cpp:define pos:line="2176" pos:column="1">#<cpp:directive pos:line="2176" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2176" pos:column="9">MSOI_ARABIC_KBD_INSTALLED</name></cpp:macro>			<cpp:value pos:line="2176" pos:column="57">0x00000004</cpp:value></cpp:define>	<comment type="line" pos:line="2176" pos:column="73">// Arabic Keyboards</comment>



<comment type="line" pos:line="2180" pos:column="1">//SOUTHASIA</comment>
<comment type="line" pos:line="2181" pos:column="1">// These uses the higher nibble of the second byte to define for SOUTHASIA.</comment>
<cpp:define pos:line="2182" pos:column="1">#<cpp:directive pos:line="2182" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2182" pos:column="9">MSOI_HINDI_FULLY_INSTALLED</name></cpp:macro>			<cpp:value pos:line="2182" pos:column="57">0x00001000</cpp:value></cpp:define>
<cpp:define pos:line="2183" pos:column="1">#<cpp:directive pos:line="2183" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2183" pos:column="9">MSOI_THAI_FULLY_INSTALLED</name></cpp:macro>			<cpp:value pos:line="2183" pos:column="57">0x00002000</cpp:value></cpp:define>
<cpp:define pos:line="2184" pos:column="1">#<cpp:directive pos:line="2184" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2184" pos:column="9">MSOI_VIETNAMESE_FULLY_INSTALLED</name></cpp:macro>		<cpp:value pos:line="2184" pos:column="49">0x00004000</cpp:value></cpp:define>
<cpp:define pos:line="2185" pos:column="1">#<cpp:directive pos:line="2185" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2185" pos:column="9">MSOI_MSO9SA_RUNNING</name></cpp:macro>                 <cpp:value pos:line="2185" pos:column="45">0x00008000</cpp:value></cpp:define> <comment type="line" pos:line="2185" pos:column="56">// use to mark this MSO version as SA enabled</comment>
<comment type="line" pos:line="2186" pos:column="1">//SOUTHASIA</comment>

<cpp:define pos:line="2188" pos:column="1">#<cpp:directive pos:line="2188" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2188" pos:column="9">MSOI_ARABIC_FULLY_INSTALLED</name></cpp:macro>			<cpp:value pos:line="2188" pos:column="57">(MSOI_ARABIC_SYSTEM_INSTALLED \
											| MSOI_ARABIC_FONTS_INSTALLED \
											| MSOI_ARABIC_KBD_INSTALLED)</cpp:value></cpp:define>
											<comment type="line" pos:line="2191" pos:column="89">// Full Arabic system (0x00000007)</comment>

<cpp:define pos:line="2193" pos:column="1">#<cpp:directive pos:line="2193" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2193" pos:column="9">MSOI_HEBREW_SYSTEM_INSTALLED</name></cpp:macro>		<cpp:value pos:line="2193" pos:column="49">0x00000010</cpp:value></cpp:define>	<comment type="line" pos:line="2193" pos:column="65">// Hebrew APIs</comment>
<cpp:define pos:line="2194" pos:column="1">#<cpp:directive pos:line="2194" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2194" pos:column="9">MSOI_HEBREW_FONTS_INSTALLED</name></cpp:macro>			<cpp:value pos:line="2194" pos:column="57">0x00000020</cpp:value></cpp:define>	<comment type="line" pos:line="2194" pos:column="73">// Hebrew Fonts</comment>
<cpp:define pos:line="2195" pos:column="1">#<cpp:directive pos:line="2195" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2195" pos:column="9">MSOI_HEBREW_KBD_INSTALLED</name></cpp:macro>			<cpp:value pos:line="2195" pos:column="57">0x00000040</cpp:value></cpp:define>	<comment type="line" pos:line="2195" pos:column="73">// Hebrew Keyboard</comment>

<cpp:define pos:line="2197" pos:column="1">#<cpp:directive pos:line="2197" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2197" pos:column="9">MSOI_HEBREW_FULLY_INSTALLED</name></cpp:macro>			<cpp:value pos:line="2197" pos:column="57">(MSOI_HEBREW_SYSTEM_INSTALLED \
											| MSOI_HEBREW_FONTS_INSTALLED \
											| MSOI_HEBREW_KBD_INSTALLED)</cpp:value></cpp:define>
											<comment type="line" pos:line="2200" pos:column="89">// Full Hebrew system (0x00000070)</comment>

<cpp:define pos:line="2202" pos:column="1">#<cpp:directive pos:line="2202" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2202" pos:column="9">MSOI_NT4_RUNNING</name></cpp:macro>					<cpp:value pos:line="2202" pos:column="65">0x00000100</cpp:value></cpp:define>	<comment type="line" pos:line="2202" pos:column="81">// Either Windows NT 4</comment>
<cpp:define pos:line="2203" pos:column="1">#<cpp:directive pos:line="2203" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2203" pos:column="9">MSOI_NT5_RUNNING</name></cpp:macro>					<cpp:value pos:line="2203" pos:column="65">0x00000200</cpp:value></cpp:define>	<comment type="line" pos:line="2203" pos:column="81">// Or Windows NT 5</comment>
<cpp:define pos:line="2204" pos:column="1">#<cpp:directive pos:line="2204" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2204" pos:column="9">MSOI_WIN95_RUNNING</name></cpp:macro>					<cpp:value pos:line="2204" pos:column="65">0x00000400</cpp:value></cpp:define>	<comment type="line" pos:line="2204" pos:column="81">// Or Windows 95</comment>
<cpp:define pos:line="2205" pos:column="1">#<cpp:directive pos:line="2205" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2205" pos:column="9">MSOI_WIN98_RUNNING</name></cpp:macro>					<cpp:value pos:line="2205" pos:column="65">0x00000800</cpp:value></cpp:define>	<comment type="line" pos:line="2205" pos:column="81">// Or Windows 98</comment>

<comment type="line" pos:line="2207" pos:column="1">// Does it support Unicode?</comment>
<macro><name pos:line="2208" pos:column="1">MSOAPI_</name><argument_list pos:line="2208" pos:column="8">(<argument pos:line="2208" pos:column="9">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2208" pos:column="15">MsoFUnicodeCommCtrl</name><argument_list pos:line="2208" pos:column="34">()</argument_list></call></expr>;</expr_stmt>





<comment type="block" pos:line="2214" pos:column="1">/*-----------------------------------------------------------------------
 IV Declarations
 Last Modifiied July 9, 1998
-------------------------------------------------------------- t-benyu -*/</comment>

<comment type="block" pos:line="2219" pos:column="1">/*- MsoIVLogCheck --------------------------------------------

  An API to determine if the current build of office is
  an IV version.

  Input : none
  Return: DWORD, 1  - Yes we are IV
                 0 - Not the IV.
  Memory: no modification
-------------------------------------------------- t-benyu -*/</comment>
<macro><name pos:line="2229" pos:column="1">MSOAPI_</name><argument_list pos:line="2229" pos:column="8">(<argument pos:line="2229" pos:column="9">DWORD</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2229" pos:column="16">MsoIVLogCheck</name><argument_list pos:line="2229" pos:column="29">()</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2231" pos:column="1">/*- MsoIVLogInit ---------------------------------------------

  MSO API to register the test wizard callback function.
 
  Input : pointer to function of type PFCNIVLoggingCallback
  Return: NONE
  Memory: Modifies the 'vgpfnIVLogCallback' variable to the
          value of 'vgpfnIVnewLogCallback' of type
          PFCNIVLoggingCallback 
-------------------------------------------------- t-benyu -*/</comment>
<macro><name pos:line="2241" pos:column="1">MSOAPIX_</name><argument_list pos:line="2241" pos:column="9">(<argument pos:line="2241" pos:column="10">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2241" pos:column="16">MsoIVLogInit</name><argument_list pos:line="2241" pos:column="28">(<argument><expr><name pos:line="2241" pos:column="29">PFCNIVLoggingCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:line="2243" pos:column="1">/* extern declaration for Callback function pointer. 
  Actually declared in office.cpp*/</comment>
<decl_stmt><decl><type><specifier pos:line="2245" pos:column="1">extern</specifier> <name pos:line="2245" pos:column="8">PFCNIVLoggingCallback</name></type> <name pos:line="2245" pos:column="30">vgpfnIVLogCallback</name></decl>;</decl_stmt>

<comment type="block" pos:line="2247" pos:column="1">/*-----------------------------------------------------------------------
 END IV Declarations
-------------------------------------------------------------- t-benyu -*/</comment>


<comment type="block" pos:line="2252" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFNetFile

	Determines if a file name is on the network.

	NOTE:
	Local UNC names (like \\&lt;LocalMachine&gt;\&lt;Share&gt;\&lt;File&gt;)
	are treated as network names.
-------------------------------------------------------------------- ArthurZ -*/</comment>

<macro><name pos:line="2262" pos:column="1">MSOAPIX_</name><argument_list pos:line="2262" pos:column="9">(<argument pos:line="2262" pos:column="10">BOOL</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2262" pos:column="16">MsoFNetFile</name><argument_list pos:line="2262" pos:column="27">(<argument><expr pos:line="2262" pos:column="28">const <name pos:line="2262" pos:column="34">WCHAR</name> <op:operator pos:line="2262" pos:column="40">*</op:operator><name pos:line="2262" pos:column="41">wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<comment type="block" pos:line="2266" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFNetModules

	Determines if there are any EXEs/DLLs loaded across the network.
-------------------------------------------------------------------- ArthurZ -*/</comment>
<macro><name pos:line="2271" pos:column="1">MSOAPI_</name><argument_list pos:line="2271" pos:column="8">(<argument pos:line="2271" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2271" pos:column="15">MsoFNetModules</name><argument_list pos:line="2271" pos:column="29">(<argument pos:line="2271" pos:column="30">BOOL fDisplayMessage</argument>, <argument pos:line="2271" pos:column="52">BOOL fNetDocsOpen</argument>)</argument_list></macro><empty_stmt pos:line="2271" pos:column="70">;</empty_stmt>

<cpp:define pos:line="2273" pos:column="1">#<cpp:directive pos:line="2273" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2273" pos:column="9">fvokNil</name></cpp:macro>     <cpp:value pos:line="2273" pos:column="21">0</cpp:value></cpp:define>
<cpp:define pos:line="2274" pos:column="1">#<cpp:directive pos:line="2274" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2274" pos:column="9">fvokNoIOD</name></cpp:macro>   <cpp:value pos:line="2274" pos:column="21">1</cpp:value></cpp:define>
<macro><name pos:line="2275" pos:column="1">MSOAPI_</name><argument_list pos:line="2275" pos:column="8">(<argument pos:line="2275" pos:column="9">int</argument>)</argument_list></macro> <macro><name pos:line="2275" pos:column="14">MsoFVbaOK</name><argument_list pos:line="2275" pos:column="23">(<argument pos:line="2275" pos:column="24">int *pfCopyDoc</argument>, <argument pos:line="2275" pos:column="40">int fvok</argument>)</argument_list></macro><empty_stmt pos:line="2275" pos:column="49">;</empty_stmt>
<macro><name pos:line="2276" pos:column="1">MSOAPI_</name><argument_list pos:line="2276" pos:column="8">(<argument pos:line="2276" pos:column="9">void</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="2276" pos:column="15">MsoRegisterVbe</name><argument_list pos:line="2276" pos:column="29">(<argument><expr><name pos:line="2276" pos:column="30">void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:line="2278" pos:column="1">#<cpp:directive pos:line="2278" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="2278" pos:column="8">// MSOUSER_H</comment>
</unit>
