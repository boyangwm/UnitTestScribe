<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\QueryParserTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">NUnit</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">Framework</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">Sando</name><op:operator pos:line="2" pos:column="12">.</op:operator><name pos:line="2" pos:column="13">Core</name><op:operator pos:line="2" pos:column="17">.</op:operator><name pos:line="2" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="4" pos:column="1">namespace <name><name pos:line="4" pos:column="11">Sando</name><op:operator pos:line="4" pos:column="16">.</op:operator><name pos:line="4" pos:column="17">Core</name><op:operator pos:line="4" pos:column="21">.</op:operator><name pos:line="4" pos:column="22">UnitTests</name><op:operator pos:line="4" pos:column="31">.</op:operator><name pos:line="4" pos:column="32">Tools</name></name>
<block pos:line="5" pos:column="1">{
    <class><attribute pos:line="6" pos:column="5">[<expr><name pos:line="6" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="7" pos:column="5">public</specifier> class <name pos:line="7" pos:column="18">QueryParserTests</name>
    <block pos:line="8" pos:column="5">{
        <function><type><attribute pos:line="9" pos:column="9">[<expr><name pos:line="9" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="10" pos:column="9">[<expr><call><name pos:line="10" pos:column="10">TestCaseSource</name><argument_list pos:line="10" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="10" pos:column="25">"InvalidQueryTestCases"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="11" pos:column="9">public</specifier> <name pos:line="11" pos:column="16">void</name></type> <name pos:line="11" pos:column="21">GIVEN_QueryParser_WHEN_ParseIsCalled_AND_QueryIsNullOrEmptyStringOrContainsWhiteSpaceOnly_THAN_ValidQueryDescriptionIsReturned</name><parameter_list pos:line="11" pos:column="147">(<param><decl><type><name pos:line="11" pos:column="148">string</name></type> <name pos:line="11" pos:column="155">query</name></decl></param>)</parameter_list>
        <block pos:line="12" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">var</name></type> <name pos:line="13" pos:column="17">sandoQueryParser</name> <init pos:line="13" pos:column="34">= <expr><op:operator pos:line="13" pos:column="36">new</op:operator> <call><name pos:line="13" pos:column="40">SandoQueryParser</name><argument_list pos:line="13" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">var</name></type> <name pos:line="14" pos:column="17">sandoQueryDescription</name> <init pos:line="14" pos:column="39">= <expr><call><name><name pos:line="14" pos:column="41">sandoQueryParser</name><op:operator pos:line="14" pos:column="57">.</op:operator><name pos:line="14" pos:column="58">Parse</name></name><argument_list pos:line="14" pos:column="63">(<argument><expr><name pos:line="14" pos:column="64">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="16" pos:column="13">Assert</name><op:operator pos:line="16" pos:column="19">.</op:operator><name pos:line="16" pos:column="20">IsFalse</name></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name><name pos:line="16" pos:column="28">sandoQueryDescription</name><op:operator pos:line="16" pos:column="49">.</op:operator><name pos:line="16" pos:column="50">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="19" pos:column="9">[<expr><name pos:line="19" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="20" pos:column="9">[<expr><call><name pos:line="20" pos:column="10">TestCaseSource</name><argument_list pos:line="20" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="25">"ValidLocationFiltersTestCases"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">void</name></type> <name pos:line="21" pos:column="21">GIVEN_QueryParser_WHEN_ParseIsCalled_AND_QueryIsLocationString_THAN_ValidQueryDescriptionIsReturned</name><parameter_list pos:line="21" pos:column="120">(<param><decl><type><name pos:line="21" pos:column="121">string</name></type> <name pos:line="21" pos:column="128">query</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="135">string</name></type> <name pos:line="21" pos:column="142">expectedQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">sandoQueryParser</name> <init pos:line="23" pos:column="34">= <expr><op:operator pos:line="23" pos:column="36">new</op:operator> <call><name pos:line="23" pos:column="40">SandoQueryParser</name><argument_list pos:line="23" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="24" pos:column="13">var</name></type> <name pos:line="24" pos:column="17">sandoQueryDescription</name> <init pos:line="24" pos:column="39">= <expr><call><name><name pos:line="24" pos:column="41">sandoQueryParser</name><op:operator pos:line="24" pos:column="57">.</op:operator><name pos:line="24" pos:column="58">Parse</name></name><argument_list pos:line="24" pos:column="63">(<argument><expr><name pos:line="24" pos:column="64">query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Assert</name><op:operator pos:line="26" pos:column="19">.</op:operator><name pos:line="26" pos:column="20">IsTrue</name></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name><name pos:line="26" pos:column="27">sandoQueryDescription</name><op:operator pos:line="26" pos:column="48">.</op:operator><name pos:line="26" pos:column="49">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Assert</name><op:operator pos:line="27" pos:column="19">.</op:operator><name pos:line="27" pos:column="20">AreEqual</name></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">expectedQueryDescription</name></expr></argument>, <argument><expr><call><name><name pos:line="27" pos:column="55">sandoQueryDescription</name><op:operator pos:line="27" pos:column="76">.</op:operator><name pos:line="27" pos:column="77">ToString</name></name><argument_list pos:line="27" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="30" pos:column="9">[<expr><name pos:line="30" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="31" pos:column="9">[<expr><call><name pos:line="31" pos:column="10">TestCaseSource</name><argument_list pos:line="31" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="25">"ValidLiteralQueryTestCases"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">GIVEN_QueryParser_WHEN_ParseIsCalled_AND_QueryIsLiteralString_THAN_ValidQueryDescriptionIsReturned</name><parameter_list pos:line="32" pos:column="119">(<param><decl><type><name pos:line="32" pos:column="120">string</name></type> <name pos:line="32" pos:column="127">query</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="134">string</name></type> <name pos:line="32" pos:column="141">expectedQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">sandoQueryParser</name> <init pos:line="34" pos:column="34">= <expr><op:operator pos:line="34" pos:column="36">new</op:operator> <call><name pos:line="34" pos:column="40">SandoQueryParser</name><argument_list pos:line="34" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">var</name></type> <name pos:line="35" pos:column="17">sandoQueryDescription</name> <init pos:line="35" pos:column="39">= <expr><call><name><name pos:line="35" pos:column="41">sandoQueryParser</name><op:operator pos:line="35" pos:column="57">.</op:operator><name pos:line="35" pos:column="58">Parse</name></name><argument_list pos:line="35" pos:column="63">(<argument><expr><name pos:line="35" pos:column="64">query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Assert</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">IsTrue</name></name><argument_list pos:line="37" pos:column="26">(<argument><expr><name><name pos:line="37" pos:column="27">sandoQueryDescription</name><op:operator pos:line="37" pos:column="48">.</op:operator><name pos:line="37" pos:column="49">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">Assert</name><op:operator pos:line="38" pos:column="19">.</op:operator><name pos:line="38" pos:column="20">AreEqual</name></name><argument_list pos:line="38" pos:column="28">(<argument><expr><name pos:line="38" pos:column="29">expectedQueryDescription</name></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="55">sandoQueryDescription</name><op:operator pos:line="38" pos:column="76">.</op:operator><name pos:line="38" pos:column="77">ToString</name></name><argument_list pos:line="38" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="41" pos:column="9">[<expr><name pos:line="41" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">ParseFileH</name><parameter_list pos:line="42" pos:column="31">()</parameter_list>
        <block pos:line="43" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">sandoQueryParser</name> <init pos:line="44" pos:column="34">= <expr><op:operator pos:line="44" pos:column="36">new</op:operator> <call><name pos:line="44" pos:column="40">SandoQueryParser</name><argument_list pos:line="44" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="45" pos:column="13">var</name></type> <name pos:line="45" pos:column="17">sandoQueryDescription</name> <init pos:line="45" pos:column="39">= <expr><call><name><name pos:line="45" pos:column="41">sandoQueryParser</name><op:operator pos:line="45" pos:column="57">.</op:operator><name pos:line="45" pos:column="58">Parse</name></name><argument_list pos:line="45" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="64">"open file:h"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">Assert</name><op:operator pos:line="47" pos:column="19">.</op:operator><name pos:line="47" pos:column="20">IsTrue</name></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name><name pos:line="47" pos:column="27">sandoQueryDescription</name><op:operator pos:line="47" pos:column="48">.</op:operator><name pos:line="47" pos:column="49">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">Assert</name><op:operator pos:line="48" pos:column="19">.</op:operator><name pos:line="48" pos:column="20">IsTrue</name></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name><name pos:line="48" pos:column="27">sandoQueryDescription</name><op:operator pos:line="48" pos:column="48">.</op:operator><name pos:line="48" pos:column="49">SearchTerms</name><op:operator pos:line="48" pos:column="60">.</op:operator><name pos:line="48" pos:column="61">Count</name></name> <op:operator pos:line="48" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="48" pos:column="70">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        
        <function><type><attribute pos:line="52" pos:column="9">[<expr><name pos:line="52" pos:column="10">Test</name></expr>]</attribute>        
        <specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">ParseWithNegation</name><parameter_list pos:line="53" pos:column="38">()</parameter_list>
        <block pos:line="54" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">var</name></type> <name pos:line="55" pos:column="17">sandoQueryParser</name> <init pos:line="55" pos:column="34">= <expr><op:operator pos:line="55" pos:column="36">new</op:operator> <call><name pos:line="55" pos:column="40">SandoQueryParser</name><argument_list pos:line="55" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">var</name></type> <name pos:line="56" pos:column="17">sandoQueryDescription</name> <init pos:line="56" pos:column="39">= <expr><call><name><name pos:line="56" pos:column="41">sandoQueryParser</name><op:operator pos:line="56" pos:column="57">.</op:operator><name pos:line="56" pos:column="58">Parse</name></name><argument_list pos:line="56" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="64">"reorder search results -test"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="58" pos:column="13">Assert</name><op:operator pos:line="58" pos:column="19">.</op:operator><name pos:line="58" pos:column="20">IsTrue</name></name><argument_list pos:line="58" pos:column="26">(<argument><expr><name><name pos:line="58" pos:column="27">sandoQueryDescription</name><op:operator pos:line="58" pos:column="48">.</op:operator><name pos:line="58" pos:column="49">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">Assert</name><op:operator pos:line="59" pos:column="19">.</op:operator><name pos:line="59" pos:column="20">IsTrue</name></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name><name pos:line="59" pos:column="27">sandoQueryDescription</name><op:operator pos:line="59" pos:column="48">.</op:operator><name pos:line="59" pos:column="49">SearchTerms</name><op:operator pos:line="59" pos:column="60">.</op:operator><name pos:line="59" pos:column="61">Count</name></name> <op:operator pos:line="59" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="59" pos:column="70">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <function><type><attribute pos:line="63" pos:column="9">[<expr><name pos:line="63" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="64" pos:column="9">[<expr><call><name pos:line="64" pos:column="10">TestCaseSource</name><argument_list pos:line="64" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="25">"ValidFileExtensionFiltersTestCases"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="65" pos:column="9">public</specifier> <name pos:line="65" pos:column="16">void</name></type> <name pos:line="65" pos:column="21">GIVEN_QueryParser_WHEN_ParseIsCalled_AND_QueryIsFileExtensionString_THAN_ValidQueryDescriptionIsReturned</name><parameter_list pos:line="65" pos:column="125">(<param><decl><type><name pos:line="65" pos:column="126">string</name></type> <name pos:line="65" pos:column="133">query</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="140">string</name></type> <name pos:line="65" pos:column="147">expectedQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="66" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">sandoQueryParser</name> <init pos:line="67" pos:column="34">= <expr><op:operator pos:line="67" pos:column="36">new</op:operator> <call><name pos:line="67" pos:column="40">SandoQueryParser</name><argument_list pos:line="67" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">var</name></type> <name pos:line="68" pos:column="17">sandoQueryDescription</name> <init pos:line="68" pos:column="39">= <expr><call><name><name pos:line="68" pos:column="41">sandoQueryParser</name><op:operator pos:line="68" pos:column="57">.</op:operator><name pos:line="68" pos:column="58">Parse</name></name><argument_list pos:line="68" pos:column="63">(<argument><expr><name pos:line="68" pos:column="64">query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">Assert</name><op:operator pos:line="70" pos:column="19">.</op:operator><name pos:line="70" pos:column="20">IsTrue</name></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name><name pos:line="70" pos:column="27">sandoQueryDescription</name><op:operator pos:line="70" pos:column="48">.</op:operator><name pos:line="70" pos:column="49">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">Assert</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">AreEqual</name></name><argument_list pos:line="71" pos:column="28">(<argument><expr><name pos:line="71" pos:column="29">expectedQueryDescription</name></expr></argument>, <argument><expr><call><name><name pos:line="71" pos:column="55">sandoQueryDescription</name><op:operator pos:line="71" pos:column="76">.</op:operator><name pos:line="71" pos:column="77">ToString</name></name><argument_list pos:line="71" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="74" pos:column="9">[<expr><name pos:line="74" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="75" pos:column="9">[<expr><call><name pos:line="75" pos:column="10">TestCaseSource</name><argument_list pos:line="75" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="25">"ValidProgramElementTypeFiltersTestCases"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="76" pos:column="9">public</specifier> <name pos:line="76" pos:column="16">void</name></type> <name pos:line="76" pos:column="21">GIVEN_QueryParser_WHEN_ParseIsCalled_AND_QueryIsProgramElementTypeString_THAN_ValidQueryDescriptionIsReturned</name><parameter_list pos:line="76" pos:column="130">(<param><decl><type><name pos:line="76" pos:column="131">string</name></type> <name pos:line="76" pos:column="138">query</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="145">string</name></type> <name pos:line="76" pos:column="152">expectedQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="77" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="78" pos:column="13">var</name></type> <name pos:line="78" pos:column="17">sandoQueryParser</name> <init pos:line="78" pos:column="34">= <expr><op:operator pos:line="78" pos:column="36">new</op:operator> <call><name pos:line="78" pos:column="40">SandoQueryParser</name><argument_list pos:line="78" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">var</name></type> <name pos:line="79" pos:column="17">sandoQueryDescription</name> <init pos:line="79" pos:column="39">= <expr><call><name><name pos:line="79" pos:column="41">sandoQueryParser</name><op:operator pos:line="79" pos:column="57">.</op:operator><name pos:line="79" pos:column="58">Parse</name></name><argument_list pos:line="79" pos:column="63">(<argument><expr><name pos:line="79" pos:column="64">query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">Assert</name><op:operator pos:line="81" pos:column="19">.</op:operator><name pos:line="81" pos:column="20">IsTrue</name></name><argument_list pos:line="81" pos:column="26">(<argument><expr><name><name pos:line="81" pos:column="27">sandoQueryDescription</name><op:operator pos:line="81" pos:column="48">.</op:operator><name pos:line="81" pos:column="49">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="82" pos:column="13">Assert</name><op:operator pos:line="82" pos:column="19">.</op:operator><name pos:line="82" pos:column="20">AreEqual</name></name><argument_list pos:line="82" pos:column="28">(<argument><expr><name pos:line="82" pos:column="29">expectedQueryDescription</name></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="55">sandoQueryDescription</name><op:operator pos:line="82" pos:column="76">.</op:operator><name pos:line="82" pos:column="77">ToString</name></name><argument_list pos:line="82" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="85" pos:column="9">[<expr><name pos:line="85" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="86" pos:column="9">[<expr><call><name pos:line="86" pos:column="10">TestCaseSource</name><argument_list pos:line="86" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="25">"ValidAccessLevelFiltersTestCases"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">void</name></type> <name pos:line="87" pos:column="21">GIVEN_QueryParser_WHEN_ParseIsCalled_AND_QueryIsAccessLevelString_THAN_ValidQueryDescriptionIsReturned</name><parameter_list pos:line="87" pos:column="123">(<param><decl><type><name pos:line="87" pos:column="124">string</name></type> <name pos:line="87" pos:column="131">query</name></decl></param>, <param><decl><type><name pos:line="87" pos:column="138">string</name></type> <name pos:line="87" pos:column="145">expectedQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="88" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">var</name></type> <name pos:line="89" pos:column="17">sandoQueryParser</name> <init pos:line="89" pos:column="34">= <expr><op:operator pos:line="89" pos:column="36">new</op:operator> <call><name pos:line="89" pos:column="40">SandoQueryParser</name><argument_list pos:line="89" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">var</name></type> <name pos:line="90" pos:column="17">sandoQueryDescription</name> <init pos:line="90" pos:column="39">= <expr><call><name><name pos:line="90" pos:column="41">sandoQueryParser</name><op:operator pos:line="90" pos:column="57">.</op:operator><name pos:line="90" pos:column="58">Parse</name></name><argument_list pos:line="90" pos:column="63">(<argument><expr><name pos:line="90" pos:column="64">query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">Assert</name><op:operator pos:line="92" pos:column="19">.</op:operator><name pos:line="92" pos:column="20">IsTrue</name></name><argument_list pos:line="92" pos:column="26">(<argument><expr><name><name pos:line="92" pos:column="27">sandoQueryDescription</name><op:operator pos:line="92" pos:column="48">.</op:operator><name pos:line="92" pos:column="49">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">Assert</name><op:operator pos:line="93" pos:column="19">.</op:operator><name pos:line="93" pos:column="20">AreEqual</name></name><argument_list pos:line="93" pos:column="28">(<argument><expr><name pos:line="93" pos:column="29">expectedQueryDescription</name></expr></argument>, <argument><expr><call><name><name pos:line="93" pos:column="55">sandoQueryDescription</name><op:operator pos:line="93" pos:column="76">.</op:operator><name pos:line="93" pos:column="77">ToString</name></name><argument_list pos:line="93" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="96" pos:column="9">[<expr><name pos:line="96" pos:column="10">Test</name></expr>]</attribute>
        <attribute pos:line="97" pos:column="9">[<expr><call><name pos:line="97" pos:column="10">TestCaseSource</name><argument_list pos:line="97" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="25">"ValidNormalQueryTestCases"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
        <specifier pos:line="98" pos:column="9">public</specifier> <name pos:line="98" pos:column="16">void</name></type> <name pos:line="98" pos:column="21">GIVEN_QueryParser_WHEN_ParseIsCalled_AND_QueryIsNormalString_THAN_ValidQueryDescriptionIsReturned</name><parameter_list pos:line="98" pos:column="118">(<param><decl><type><name pos:line="98" pos:column="119">string</name></type> <name pos:line="98" pos:column="126">query</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="133">string</name></type> <name pos:line="98" pos:column="140">expectedQueryDescription</name></decl></param>)</parameter_list>
        <block pos:line="99" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">sandoQueryParser</name> <init pos:line="100" pos:column="34">= <expr><op:operator pos:line="100" pos:column="36">new</op:operator> <call><name pos:line="100" pos:column="40">SandoQueryParser</name><argument_list pos:line="100" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">var</name></type> <name pos:line="101" pos:column="17">sandoQueryDescription</name> <init pos:line="101" pos:column="39">= <expr><call><name><name pos:line="101" pos:column="41">sandoQueryParser</name><op:operator pos:line="101" pos:column="57">.</op:operator><name pos:line="101" pos:column="58">Parse</name></name><argument_list pos:line="101" pos:column="63">(<argument><expr><name pos:line="101" pos:column="64">query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">Assert</name><op:operator pos:line="103" pos:column="19">.</op:operator><name pos:line="103" pos:column="20">IsTrue</name></name><argument_list pos:line="103" pos:column="26">(<argument><expr><name><name pos:line="103" pos:column="27">sandoQueryDescription</name><op:operator pos:line="103" pos:column="48">.</op:operator><name pos:line="103" pos:column="49">IsValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="104" pos:column="13">Assert</name><op:operator pos:line="104" pos:column="19">.</op:operator><name pos:line="104" pos:column="20">AreEqual</name></name><argument_list pos:line="104" pos:column="28">(<argument><expr><name pos:line="104" pos:column="29">expectedQueryDescription</name></expr></argument>, <argument><expr><call><name><name pos:line="104" pos:column="55">sandoQueryDescription</name><op:operator pos:line="104" pos:column="76">.</op:operator><name pos:line="104" pos:column="77">ToString</name></name><argument_list pos:line="104" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <decl_stmt><decl><type><specifier pos:line="108" pos:column="9">private</specifier> <specifier pos:line="108" pos:column="17">static</specifier> <specifier pos:line="108" pos:column="24">readonly</specifier> <name pos:line="108" pos:column="33">object</name><index pos:line="108" pos:column="39">[]</index></type> <name pos:line="108" pos:column="42">InvalidQueryTestCases</name> <init pos:line="108" pos:column="64">=
            <expr><block pos:line="109" pos:column="13">{
                <expr><lit:literal type="string" pos:line="110" pos:column="17">""</lit:literal></expr>,
                <expr><lit:literal type="string" pos:line="111" pos:column="17">" "</lit:literal></expr>,
                <expr><lit:literal type="string" pos:line="112" pos:column="17">"\t"</lit:literal></expr>,
                <expr><lit:literal type="string" pos:line="113" pos:column="17">"\n"</lit:literal></expr>,
                <expr><lit:literal type="string" pos:line="114" pos:column="17">"\t  \n"</lit:literal></expr>,
                <expr><lit:literal type="string" pos:line="115" pos:column="17">"\"  \""</lit:literal></expr>
            }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="118" pos:column="9">private</specifier> <specifier pos:line="118" pos:column="17">static</specifier> <specifier pos:line="118" pos:column="24">readonly</specifier> <name pos:line="118" pos:column="33">object</name><index pos:line="118" pos:column="39">[]</index></type> <name pos:line="118" pos:column="42">ValidLocationFiltersTestCases</name> <init pos:line="118" pos:column="72">=
            <expr><block pos:line="119" pos:column="13">{
                <expr><op:operator pos:line="120" pos:column="17">new</op:operator> <name><name pos:line="120" pos:column="21">object</name><index pos:line="120" pos:column="27">[]</index></name><block pos:line="120" pos:column="29">{<expr><lit:literal type="string" pos:line="120" pos:column="30">"location:\"C:\\Temp\\Sando\""</lit:literal></expr>,                            <expr><lit:literal type="string" pos:line="120" pos:column="89">"Locations:[\"C:\\Temp\\Sando\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="121" pos:column="17">new</op:operator> <name><name pos:line="121" pos:column="21">object</name><index pos:line="121" pos:column="27">[]</index></name><block pos:line="121" pos:column="29">{<expr><lit:literal type="string" pos:line="121" pos:column="30">"location:D:\\Windows"</lit:literal></expr>,                                    <expr><lit:literal type="string" pos:line="121" pos:column="89">"Locations:[D:\\Windows]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="122" pos:column="17">new</op:operator> <name><name pos:line="122" pos:column="21">object</name><index pos:line="122" pos:column="27">[]</index></name><block pos:line="122" pos:column="29">{<expr><lit:literal type="string" pos:line="122" pos:column="30">"location:\"C:\\Program Files\\Adobe\\*\""</lit:literal></expr>,                <expr><lit:literal type="string" pos:line="122" pos:column="89">"Locations:[\"C:\\Program Files\\Adobe\\*\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="123" pos:column="17">new</op:operator> <name><name pos:line="123" pos:column="21">object</name><index pos:line="123" pos:column="27">[]</index></name><block pos:line="123" pos:column="29">{<expr><lit:literal type="string" pos:line="123" pos:column="30">"location:D*"</lit:literal></expr>,                                             <expr><lit:literal type="string" pos:line="123" pos:column="89">"Locations:[D*]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="124" pos:column="17">new</op:operator> <name><name pos:line="124" pos:column="21">object</name><index pos:line="124" pos:column="27">[]</index></name><block pos:line="124" pos:column="29">{<expr><lit:literal type="string" pos:line="124" pos:column="30">"location:\"C:\\Program Files*\""</lit:literal></expr>,                         <expr><lit:literal type="string" pos:line="124" pos:column="89">"Locations:[\"C:\\Program Files*\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="125" pos:column="17">new</op:operator> <name><name pos:line="125" pos:column="21">object</name><index pos:line="125" pos:column="27">[]</index></name><block pos:line="125" pos:column="29">{<expr><lit:literal type="string" pos:line="125" pos:column="30">"location:C:\\Adobe\\Photoshop(8) location:D"</lit:literal></expr>,             <expr><lit:literal type="string" pos:line="125" pos:column="89">"Locations:[C:\\Adobe\\Photoshop(8),D]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="126" pos:column="17">new</op:operator> <name><name pos:line="126" pos:column="21">object</name><index pos:line="126" pos:column="27">[]</index></name><block pos:line="126" pos:column="29">{<expr><lit:literal type="string" pos:line="126" pos:column="30">"location:\"C:\\*\\Adobe\" location:\"D:\\Photos\\*\""</lit:literal></expr>,    <expr><lit:literal type="string" pos:line="126" pos:column="89">"Locations:[\"C:\\*\\Adobe\",\"D:\\Photos\\*\"]"</lit:literal></expr>}</block></expr>
            }</block></expr></init></decl>;</decl_stmt>
         
        <decl_stmt><decl><type><specifier pos:line="129" pos:column="9">private</specifier> <specifier pos:line="129" pos:column="17">static</specifier> <specifier pos:line="129" pos:column="24">readonly</specifier> <name pos:line="129" pos:column="33">object</name><index pos:line="129" pos:column="39">[]</index></type> <name pos:line="129" pos:column="42">ValidLiteralQueryTestCases</name> <init pos:line="129" pos:column="69">=
            <expr><block pos:line="130" pos:column="13">{
                <expr><op:operator pos:line="131" pos:column="17">new</op:operator> <name><name pos:line="131" pos:column="21">object</name><index pos:line="131" pos:column="27">[]</index></name><block pos:line="131" pos:column="29">{<expr><lit:literal type="string" pos:line="131" pos:column="30">"\"asd^&amp;*#@$%!()_+-=:';[]{}?/&gt;&lt;,.żźćąśęńłó\""</lit:literal></expr>,             <expr><lit:literal type="string" pos:line="131" pos:column="98">"Literal search terms:[\"asd^&amp;*#@$%!()_+-=:';[]{}?/&gt;&lt;,.żźćąśęńłó\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="132" pos:column="17">new</op:operator> <name><name pos:line="132" pos:column="21">object</name><index pos:line="132" pos:column="27">[]</index></name><block pos:line="132" pos:column="29">{<expr><lit:literal type="string" pos:line="132" pos:column="30">"\"sample literal search\""</lit:literal></expr>,                               <expr><lit:literal type="string" pos:line="132" pos:column="89">"Literal search terms:[\"sample literal search\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="133" pos:column="17">new</op:operator> <name><name pos:line="133" pos:column="21">object</name><index pos:line="133" pos:column="27">[]</index></name><block pos:line="133" pos:column="29">{<expr><lit:literal type="string" pos:line="133" pos:column="30">"\"sample literal search with escaped quote \\\"\""</lit:literal></expr>,       <expr><lit:literal type="string" pos:line="133" pos:column="89">"Literal search terms:[\"sample literal search with escaped quote \\\"\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="134" pos:column="17">new</op:operator> <name><name pos:line="134" pos:column="21">object</name><index pos:line="134" pos:column="27">[]</index></name><block pos:line="134" pos:column="29">{<expr><lit:literal type="string" pos:line="134" pos:column="30">"\"\\\"\""</lit:literal></expr>,                                                <expr><lit:literal type="string" pos:line="134" pos:column="89">"Literal search terms:[\"\\\"\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="135" pos:column="17">new</op:operator> <name><name pos:line="135" pos:column="21">object</name><index pos:line="135" pos:column="27">[]</index></name><block pos:line="135" pos:column="29">{<expr><lit:literal type="string" pos:line="135" pos:column="30">"\"var sandoQueryParser = new SandoQueryParser();\""</lit:literal></expr>,      <expr><lit:literal type="string" pos:line="135" pos:column="89">"Literal search terms:[\"var sandoQueryParser = new SandoQueryParser();\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="136" pos:column="17">new</op:operator> <name><name pos:line="136" pos:column="21">object</name><index pos:line="136" pos:column="27">[]</index></name><block pos:line="136" pos:column="29">{<expr><lit:literal type="string" pos:line="136" pos:column="30">"\"var sandoQueryParser\" \"new SandoQueryParser();\""</lit:literal></expr>,    <expr><lit:literal type="string" pos:line="136" pos:column="89">"Literal search terms:[\"var sandoQueryParser\",\"new SandoQueryParser();\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="137" pos:column="17">new</op:operator> <name><name pos:line="137" pos:column="21">object</name><index pos:line="137" pos:column="27">[]</index></name><block pos:line="137" pos:column="29">{<expr><lit:literal type="string" pos:line="137" pos:column="30">"\"name \\\"\" \" sandoQueryParser\" \"new Sando\""</lit:literal></expr>,       <expr><lit:literal type="string" pos:line="137" pos:column="89">"Literal search terms:[\"name \\\"\",\" sandoQueryParser\",\"new Sando\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="138" pos:column="17">new</op:operator> <name><name pos:line="138" pos:column="21">object</name><index pos:line="138" pos:column="27">[]</index></name><block pos:line="138" pos:column="29">{<expr><lit:literal type="string" pos:line="138" pos:column="30">"-\"name\" \" \t\n \""</lit:literal></expr>,                                    <expr><lit:literal type="string" pos:line="138" pos:column="89">"Literal search terms:[-\"name\"]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="139" pos:column="17">new</op:operator> <name><name pos:line="139" pos:column="21">object</name><index pos:line="139" pos:column="27">[]</index></name><block pos:line="139" pos:column="29">{<expr><lit:literal type="string" pos:line="139" pos:column="30">"-\"name \\\"\" \" -sandoQueryParser\" -\"new Sando\""</lit:literal></expr>,    <expr><lit:literal type="string" pos:line="139" pos:column="89">"Literal search terms:[-\"name \\\"\",\" -sandoQueryParser\",-\"new Sando\"]"</lit:literal></expr>}</block></expr>
            }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="142" pos:column="9">private</specifier> <specifier pos:line="142" pos:column="17">static</specifier> <specifier pos:line="142" pos:column="24">readonly</specifier> <name pos:line="142" pos:column="33">object</name><index pos:line="142" pos:column="39">[]</index></type> <name pos:line="142" pos:column="42">ValidFileExtensionFiltersTestCases</name> <init pos:line="142" pos:column="77">=
            <expr><block pos:line="143" pos:column="13">{
                <expr><op:operator pos:line="144" pos:column="17">new</op:operator> <name><name pos:line="144" pos:column="21">object</name><index pos:line="144" pos:column="27">[]</index></name><block pos:line="144" pos:column="29">{<expr><lit:literal type="string" pos:line="144" pos:column="30">"file:cs"</lit:literal></expr>,                 <expr><lit:literal type="string" pos:line="144" pos:column="57">"File extensions:[cs]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="145" pos:column="17">new</op:operator> <name><name pos:line="145" pos:column="21">object</name><index pos:line="145" pos:column="27">[]</index></name><block pos:line="145" pos:column="29">{<expr><lit:literal type="string" pos:line="145" pos:column="30">"file:long_Entension"</lit:literal></expr>,     <expr><lit:literal type="string" pos:line="145" pos:column="57">"File extensions:[long_entension]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="146" pos:column="17">new</op:operator> <name><name pos:line="146" pos:column="21">object</name><index pos:line="146" pos:column="27">[]</index></name><block pos:line="146" pos:column="29">{<expr><lit:literal type="string" pos:line="146" pos:column="30">"-file:.mp3"</lit:literal></expr>,               <expr><lit:literal type="string" pos:line="146" pos:column="58">"File extensions:[-mp3]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="147" pos:column="17">new</op:operator> <name><name pos:line="147" pos:column="21">object</name><index pos:line="147" pos:column="27">[]</index></name><block pos:line="147" pos:column="29">{<expr><lit:literal type="string" pos:line="147" pos:column="30">"file:txt -file:.DAT"</lit:literal></expr>,      <expr><lit:literal type="string" pos:line="147" pos:column="58">"File extensions:[txt,-dat]"</lit:literal></expr>}</block></expr>
            }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="150" pos:column="9">private</specifier> <specifier pos:line="150" pos:column="17">static</specifier> <specifier pos:line="150" pos:column="24">readonly</specifier> <name pos:line="150" pos:column="33">object</name><index pos:line="150" pos:column="39">[]</index></type> <name pos:line="150" pos:column="42">ValidProgramElementTypeFiltersTestCases</name> <init pos:line="150" pos:column="82">=
            <expr><block pos:line="151" pos:column="13">{
                <expr><op:operator pos:line="152" pos:column="17">new</op:operator> <name><name pos:line="152" pos:column="21">object</name><index pos:line="152" pos:column="27">[]</index></name><block pos:line="152" pos:column="29">{<expr><lit:literal type="string" pos:line="152" pos:column="30">"type:Class"</lit:literal></expr>,                  <expr><lit:literal type="string" pos:line="152" pos:column="61">"Program element types:[class]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="153" pos:column="17">new</op:operator> <name><name pos:line="153" pos:column="21">object</name><index pos:line="153" pos:column="27">[]</index></name><block pos:line="153" pos:column="29">{<expr><lit:literal type="string" pos:line="153" pos:column="30">"type:method"</lit:literal></expr>,                 <expr><lit:literal type="string" pos:line="153" pos:column="61">"Program element types:[method]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="154" pos:column="17">new</op:operator> <name><name pos:line="154" pos:column="21">object</name><index pos:line="154" pos:column="27">[]</index></name><block pos:line="154" pos:column="29">{<expr><lit:literal type="string" pos:line="154" pos:column="30">"-type:ENUM type:field"</lit:literal></expr>,       <expr><lit:literal type="string" pos:line="154" pos:column="61">"Program element types:[-enum,field]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="155" pos:column="17">new</op:operator> <name><name pos:line="155" pos:column="21">object</name><index pos:line="155" pos:column="27">[]</index></name><block pos:line="155" pos:column="29">{<expr><lit:literal type="string" pos:line="155" pos:column="30">"type:property -type:struct"</lit:literal></expr>,  <expr><lit:literal type="string" pos:line="155" pos:column="61">"Program element types:[property,-struct]"</lit:literal></expr>}</block></expr>
            }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="158" pos:column="9">private</specifier> <specifier pos:line="158" pos:column="17">static</specifier> <specifier pos:line="158" pos:column="24">readonly</specifier> <name pos:line="158" pos:column="33">object</name><index pos:line="158" pos:column="39">[]</index></type> <name pos:line="158" pos:column="42">ValidAccessLevelFiltersTestCases</name> <init pos:line="158" pos:column="75">=
            <expr><block pos:line="159" pos:column="13">{
                <expr><op:operator pos:line="160" pos:column="17">new</op:operator> <name><name pos:line="160" pos:column="21">object</name><index pos:line="160" pos:column="27">[]</index></name><block pos:line="160" pos:column="29">{<expr><lit:literal type="string" pos:line="160" pos:column="30">"access:public"</lit:literal></expr>,                       <expr><lit:literal type="string" pos:line="160" pos:column="69">"Access levels:[public]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="161" pos:column="17">new</op:operator> <name><name pos:line="161" pos:column="21">object</name><index pos:line="161" pos:column="27">[]</index></name><block pos:line="161" pos:column="29">{<expr><lit:literal type="string" pos:line="161" pos:column="30">"access:private"</lit:literal></expr>,                      <expr><lit:literal type="string" pos:line="161" pos:column="69">"Access levels:[private]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="162" pos:column="17">new</op:operator> <name><name pos:line="162" pos:column="21">object</name><index pos:line="162" pos:column="27">[]</index></name><block pos:line="162" pos:column="29">{<expr><lit:literal type="string" pos:line="162" pos:column="30">"-access:Protected access:internal"</lit:literal></expr>,   <expr><lit:literal type="string" pos:line="162" pos:column="69">"Access levels:[-protected,internal]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="163" pos:column="17">new</op:operator> <name><name pos:line="163" pos:column="21">object</name><index pos:line="163" pos:column="27">[]</index></name><block pos:line="163" pos:column="29">{<expr><lit:literal type="string" pos:line="163" pos:column="30">"access:protected -access:puBLIc"</lit:literal></expr>,     <expr><lit:literal type="string" pos:line="163" pos:column="69">"Access levels:[protected,-public]"</lit:literal></expr>}</block></expr>
            }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="166" pos:column="9">private</specifier> <specifier pos:line="166" pos:column="17">static</specifier> <specifier pos:line="166" pos:column="24">readonly</specifier> <name pos:line="166" pos:column="33">object</name><index pos:line="166" pos:column="39">[]</index></type> <name pos:line="166" pos:column="42">ValidNormalQueryTestCases</name> <init pos:line="166" pos:column="68">=
            <expr><block pos:line="167" pos:column="13">{
                <expr><op:operator pos:line="168" pos:column="17">new</op:operator> <name><name pos:line="168" pos:column="21">object</name><index pos:line="168" pos:column="27">[]</index></name><block pos:line="168" pos:column="29">{<expr><lit:literal type="string" pos:line="168" pos:column="30">"identifier"</lit:literal></expr>,                          <expr><lit:literal type="string" pos:line="168" pos:column="69">"Search terms:[identifier]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="169" pos:column="17">new</op:operator> <name><name pos:line="169" pos:column="21">object</name><index pos:line="169" pos:column="27">[]</index></name><block pos:line="169" pos:column="29">{<expr><lit:literal type="string" pos:line="169" pos:column="30">"open*file"</lit:literal></expr>,                           <expr><lit:literal type="string" pos:line="169" pos:column="69">"Search terms:[open*file,open*,file]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="170" pos:column="17">new</op:operator> <name><name pos:line="170" pos:column="21">object</name><index pos:line="170" pos:column="27">[]</index></name><block pos:line="170" pos:column="29">{<expr><lit:literal type="string" pos:line="170" pos:column="30">"do something special"</lit:literal></expr>,                <expr><lit:literal type="string" pos:line="170" pos:column="69">"Search terms:[do,something,special]"</lit:literal></expr>}</block></expr>,
                <expr><op:operator pos:line="171" pos:column="17">new</op:operator> <name><name pos:line="171" pos:column="21">object</name><index pos:line="171" pos:column="27">[]</index></name><block pos:line="171" pos:column="29">{<expr><lit:literal type="string" pos:line="171" pos:column="30">"every*Single*Word"</lit:literal></expr>,                   <expr><lit:literal type="string" pos:line="171" pos:column="69">"Search terms:[every*Single*Word,every*,Single*,Word]"</lit:literal></expr>}</block></expr>
            }</block></expr></init></decl>;</decl_stmt>
    }</block></class>
}</block></namespace></unit>
