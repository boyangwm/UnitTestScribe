<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\LIBS\Extensions\inc\unipriv.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// unipriv.h -- UniLib private internal header</comment>

<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef</cpp:directive> <name pos:line="3" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">pragma</cpp:directive> once</cpp:pragma>
<cpp:endif pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifndef</cpp:directive> <name pos:line="7" pos:column="9">__UNIPRIV_H__</name></cpp:ifndef>
<cpp:define pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="8" pos:column="9">__UNIPRIV_H__</name></cpp:macro></cpp:define>

<cpp:undef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">undef</cpp:directive> <name pos:line="10" pos:column="8">UASSERT</name></cpp:undef>

<cpp:ifdef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifdef</cpp:directive> <name pos:line="12" pos:column="8">FEATURE_PAL</name></cpp:ifdef>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">__UBREAK__</name></cpp:macro> <cpp:value pos:line="13" pos:column="20">DebugBreak();</cpp:value></cpp:define>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">UASSERT</name><parameter_list pos:line="14" pos:column="16">(<param><type><name pos:line="14" pos:column="17">exp</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="14" pos:column="22">_ASSERTE(exp)</cpp:value></cpp:define>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else</cpp:directive></cpp:else> <comment type="line" pos:line="15" pos:column="7">// FEATURE_PAL</comment>

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef</cpp:directive> <name pos:line="17" pos:column="8">_DEBUG</name></cpp:ifdef>

<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef</cpp:directive> <name pos:line="19" pos:column="8">_X86_</name></cpp:ifdef>
<comment type="line" pos:line="20" pos:column="1">// Avoid inline assembler in macros because it breaks lambdas; can be changed back when dev10 bug 658310 is fixed</comment>
<comment type="line" pos:line="21" pos:column="1">// #define __UBREAK__ _asm { int 3 }</comment>
<cpp:define pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="22" pos:column="9">__UBREAK__</name></cpp:macro> <cpp:value pos:line="22" pos:column="20">DebugBreak();</cpp:value></cpp:define>
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="24" pos:column="9">__UBREAK__</name></cpp:macro> <cpp:value pos:line="24" pos:column="20">DebugBreak();</cpp:value></cpp:define>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="25" pos:column="8">// _X86_</comment>

<cpp:define pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="27" pos:column="9">UASSERT</name><parameter_list pos:line="27" pos:column="16">(<param><type><name pos:line="27" pos:column="17">exp</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="27" pos:column="22">do { if (!(exp)) __UBREAK__; } while (FALSE)</cpp:value></cpp:define>

<cpp:else pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">else</cpp:directive></cpp:else> <comment type="line" pos:line="29" pos:column="7">// _DEBUG</comment>

<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">UASSERT</name><parameter_list pos:line="31" pos:column="16">(<param><type><name pos:line="31" pos:column="17">exp</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="31" pos:column="22">do {} while (false)</cpp:value></cpp:define>

<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="33" pos:column="8">// _DEBUG</comment>

<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="35" pos:column="8">// FEATURE_PAL</comment>

<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="37" pos:column="8">// __UNIPRIV_H__</comment>
</unit>
