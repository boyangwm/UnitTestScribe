<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\WordSplitter.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Contracts</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name><op:operator pos:line="5" pos:column="18">.</op:operator><name pos:line="5" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">ExtensionContracts</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">SplitterContracts</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">WordSplitter</name> <super pos:line="10" pos:column="31">: <name pos:line="10" pos:column="33">IWordSplitter</name></super>
    <block pos:line="11" pos:column="5">{
        <function><type><specifier pos:line="12" pos:column="9">public</specifier> <name pos:line="12" pos:column="16">string</name><index pos:line="12" pos:column="22">[]</index></type> <name pos:line="12" pos:column="25">ExtractWords</name><parameter_list pos:line="12" pos:column="37">(<param><decl><type><name pos:line="12" pos:column="38">string</name></type> <name pos:line="12" pos:column="45">word</name></decl></param>)</parameter_list>
        <block pos:line="13" pos:column="9">{
            <comment type="line" pos:line="14" pos:column="13">//Zhao, for compiled regular expression</comment>
            <comment type="line" pos:line="15" pos:column="13">//word = Regex.Replace(word, @"([A-Z][a-z]+)", "_$1");</comment>
            <expr_stmt><expr><name pos:line="16" pos:column="13">word</name> <op:operator pos:line="16" pos:column="18">=</op:operator> <call><name><name pos:line="16" pos:column="20">_patternChars</name><op:operator pos:line="16" pos:column="33">.</op:operator><name pos:line="16" pos:column="34">Replace</name></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="16" pos:column="48">"_$1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">word</name> <op:operator pos:line="17" pos:column="18">=</op:operator> <call><name pos:line="17" pos:column="20">AddUnderscoreBeforeWordsStartingWithLowerCase</name><argument_list pos:line="17" pos:column="65">(<argument><expr><name pos:line="17" pos:column="66">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:line="18" pos:column="13">//word = Regex.Replace(word, @"([A-Z]+|[0-9]+)", "_$1");</comment>
            <expr_stmt><expr><name pos:line="19" pos:column="13">word</name> <op:operator pos:line="19" pos:column="18">=</op:operator> <call><name><name pos:line="19" pos:column="20">_patternCharDigit</name><op:operator pos:line="19" pos:column="37">.</op:operator><name pos:line="19" pos:column="38">Replace</name></name><argument_list pos:line="19" pos:column="45">(<argument><expr><name pos:line="19" pos:column="46">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="19" pos:column="52">"_$1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="20" pos:column="13">word</name> <op:operator pos:line="20" pos:column="18">=</op:operator> <call><name><name pos:line="20" pos:column="20">word</name><op:operator pos:line="20" pos:column="24">.</op:operator><name pos:line="20" pos:column="25">Replace</name></name><argument_list pos:line="20" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="20" pos:column="33">" _"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="20" pos:column="39">"_"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">var</name></type> <name pos:line="21" pos:column="17">delimiters</name> <init pos:line="21" pos:column="28">= <expr><op:operator pos:line="21" pos:column="30">new</op:operator><index pos:line="21" pos:column="33">[]</index> <block pos:line="21" pos:column="36">{ <expr><lit:literal type="char" pos:line="21" pos:column="38">'_'</lit:literal></expr>, <expr><lit:literal type="char" pos:line="21" pos:column="43">':'</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <return pos:line="22" pos:column="13">return <expr><call><name><name pos:line="22" pos:column="20">word</name><op:operator pos:line="22" pos:column="24">.</op:operator><name pos:line="22" pos:column="25">Split</name></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">delimiters</name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="43">StringSplitOptions</name><op:operator pos:line="22" pos:column="61">.</op:operator><name pos:line="22" pos:column="62">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <comment type="line" pos:line="26" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="27" pos:column="9">/// For those variables that start with lower case, this method extracts them, such</comment>
        <comment type="line" pos:line="28" pos:column="9">/// as matches and offset in the method.</comment>
        <comment type="line" pos:line="29" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="30" pos:column="9">/// &lt;param name="word"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="31" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="32" pos:column="9">private</specifier> <name pos:line="32" pos:column="17">String</name></type> <name pos:line="32" pos:column="24">AddUnderscoreBeforeWordsStartingWithLowerCase</name><parameter_list pos:line="32" pos:column="69">(<param><decl><type><name pos:line="32" pos:column="70">String</name></type> <name pos:line="32" pos:column="77">word</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">matches</name> <init pos:line="34" pos:column="25">= <expr><call><name><name pos:line="34" pos:column="27">_patternCharsLowerCase</name><op:operator pos:line="34" pos:column="49">.</op:operator><name pos:line="34" pos:column="50">Matches</name></name><argument_list pos:line="34" pos:column="57">(<argument><expr><name pos:line="34" pos:column="58">word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">int</name></type> <name pos:line="35" pos:column="17">offset</name> <init pos:line="35" pos:column="24">= <expr><lit:literal type="number" pos:line="35" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="36" pos:column="13">foreach(<init><decl><type><name pos:line="36" pos:column="21">Match</name></type> <name pos:line="36" pos:column="27">match</name> <range pos:line="36" pos:column="33">in <expr><name pos:line="36" pos:column="36">matches</name></expr></range></decl></init>)
            <block pos:line="37" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="38" pos:column="17">int</name></type> <name pos:line="38" pos:column="21">start</name> <init pos:line="38" pos:column="27">= <expr><name><name pos:line="38" pos:column="29">match</name><op:operator pos:line="38" pos:column="34">.</op:operator><name pos:line="38" pos:column="35">Groups</name><index pos:line="38" pos:column="41">[<expr><lit:literal type="number" pos:line="38" pos:column="42">0</lit:literal></expr>]</index></name><op:operator pos:line="38" pos:column="44">.</op:operator><name pos:line="38" pos:column="45">Index</name> <op:operator pos:line="38" pos:column="51">+</op:operator> <name pos:line="38" pos:column="53">offset</name> <op:operator pos:line="38" pos:column="60">+</op:operator> <lit:literal type="number" pos:line="38" pos:column="62">1</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">start</name> <op:operator pos:line="39" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="39" pos:column="30">0</lit:literal> <op:operator pos:line="39" pos:column="32">||</op:operator> <op:operator pos:line="39" pos:column="35">!</op:operator><call><name><name pos:line="39" pos:column="36">word</name><op:operator pos:line="39" pos:column="40">.</op:operator><name pos:line="39" pos:column="41">ToCharArray</name></name><argument_list pos:line="39" pos:column="52">()</argument_list></call><index pos:line="39" pos:column="54">[<expr><name pos:line="39" pos:column="55">start</name> <op:operator pos:line="39" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="39" pos:column="63">1</lit:literal></expr>]</index><op:operator pos:line="39" pos:column="65">.</op:operator><call><name pos:line="39" pos:column="66">Equals</name><argument_list pos:line="39" pos:column="72">(<argument><expr><lit:literal type="char" pos:line="39" pos:column="73">'-'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="39" pos:column="78">
                <block pos:line="40" pos:column="17">{
                    <expr_stmt><expr><name pos:line="41" pos:column="21">word</name> <op:operator pos:line="41" pos:column="26">=</op:operator> <call><name><name pos:line="41" pos:column="28">word</name><op:operator pos:line="41" pos:column="32">.</op:operator><name pos:line="41" pos:column="33">Insert</name></name><argument_list pos:line="41" pos:column="39">(<argument><expr><name pos:line="41" pos:column="40">start</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="41" pos:column="47">"_"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="42" pos:column="21">offset</name><op:operator pos:line="42" pos:column="27">++</op:operator></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="44" pos:column="17">else
                <block pos:line="45" pos:column="17">{
                    <expr_stmt><expr><name pos:line="46" pos:column="21">word</name> <op:operator pos:line="46" pos:column="26">=</op:operator> <call><name><name pos:line="46" pos:column="28">word</name><op:operator pos:line="46" pos:column="32">.</op:operator><name pos:line="46" pos:column="33">Insert</name></name><argument_list pos:line="46" pos:column="39">(<argument><expr><name pos:line="46" pos:column="40">start</name><op:operator pos:line="46" pos:column="45">-</op:operator><lit:literal type="number" pos:line="46" pos:column="46">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="46" pos:column="49">"_"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="47" pos:column="21">offset</name><op:operator pos:line="47" pos:column="27">++</op:operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>
            <return pos:line="50" pos:column="13">return <expr><name pos:line="50" pos:column="20">word</name></expr>;</return>
        }</block></function>



        <function><type><specifier pos:line="55" pos:column="9">public</specifier> <specifier pos:line="55" pos:column="16">static</specifier> <name><name pos:line="55" pos:column="23">List</name><argument_list pos:line="55" pos:column="27">&lt;<argument><name pos:line="55" pos:column="28">string</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="36">ExtractSearchTerms</name><parameter_list pos:line="55" pos:column="54">(<param><decl><type><name pos:line="55" pos:column="55">string</name></type> <name pos:line="55" pos:column="62">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="56" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Contract</name><op:operator pos:line="57" pos:column="21">.</op:operator><name pos:line="57" pos:column="22">Requires</name></name><argument_list pos:line="57" pos:column="30">(<argument><expr><name pos:line="57" pos:column="31">searchTerms</name> <op:operator pos:line="57" pos:column="43">!=</op:operator> <name pos:line="57" pos:column="46">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="52">"WordSplitter:ExtractSearchTerms - searchTerms cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="59" pos:column="13">var</name></type> <name pos:line="59" pos:column="17">matches</name> <init pos:line="59" pos:column="25">= <expr><op:operator pos:line="59" pos:column="27">new</op:operator> <call><name><name pos:line="59" pos:column="31">List</name><argument_list pos:line="59" pos:column="35">&lt;<argument><name pos:line="59" pos:column="36">string</name></argument>&gt;</argument_list></name><argument_list pos:line="59" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name pos:line="61" pos:column="13">searchTerms</name> <op:operator pos:line="61" pos:column="25">=</op:operator> <call><name><name pos:line="61" pos:column="27">searchTerms</name><op:operator pos:line="61" pos:column="38">.</op:operator><name pos:line="61" pos:column="39">Trim</name></name><argument_list pos:line="61" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">(<expr><call><name pos:line="62" pos:column="17">IsUnquotedLiteral</name><argument_list pos:line="62" pos:column="34">(<argument><expr><name pos:line="62" pos:column="35">searchTerms</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="62" pos:column="48">
            <block pos:line="63" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="64" pos:column="17">matches</name><op:operator pos:line="64" pos:column="24">.</op:operator><name pos:line="64" pos:column="25">Add</name></name><argument_list pos:line="64" pos:column="28">(<argument><expr><call><name pos:line="64" pos:column="29">EscapeQuotesAndPathInQuotes</name><argument_list pos:line="64" pos:column="56">(<argument><expr><name pos:line="64" pos:column="57">searchTerms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></then>
            <else pos:line="66" pos:column="13">else <if pos:line="66" pos:column="18">if <condition pos:line="66" pos:column="21">(<expr><call><name><name pos:line="66" pos:column="22">searchTerms</name><op:operator pos:line="66" pos:column="33">.</op:operator><name pos:line="66" pos:column="34">StartsWith</name></name><argument_list pos:line="66" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="45">"\""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="66" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="66" pos:column="54">searchTerms</name><op:operator pos:line="66" pos:column="65">.</op:operator><name pos:line="66" pos:column="66">EndsWith</name></name><argument_list pos:line="66" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="75">"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="66" pos:column="81">
            <block pos:line="67" pos:column="13">{                
                <expr_stmt><expr><call><name><name pos:line="68" pos:column="17">matches</name><op:operator pos:line="68" pos:column="24">.</op:operator><name pos:line="68" pos:column="25">Add</name></name><argument_list pos:line="68" pos:column="28">(<argument><expr><call><name pos:line="68" pos:column="29">EscapeQuotesAndPathInQuotes</name><argument_list pos:line="68" pos:column="56">(<argument><expr><call><name><name pos:line="68" pos:column="57">searchTerms</name><op:operator pos:line="68" pos:column="68">.</op:operator><name pos:line="68" pos:column="69">Substring</name></name><argument_list pos:line="68" pos:column="78">(<argument><expr><lit:literal type="number" pos:line="68" pos:column="79">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="68" pos:column="81">.</op:operator><call><name pos:line="68" pos:column="82">Substring</name><argument_list pos:line="68" pos:column="91">(<argument><expr><lit:literal type="number" pos:line="68" pos:column="92">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="95">searchTerms</name><op:operator pos:line="68" pos:column="106">.</op:operator><name pos:line="68" pos:column="107">Length</name></name> <op:operator pos:line="68" pos:column="114">-</op:operator> <lit:literal type="number" pos:line="68" pos:column="116">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="70" pos:column="13">else
            <block pos:line="71" pos:column="13">{

                <comment type="line" pos:line="73" pos:column="17">//1.handle case where quote is just part of search terms, doesn't work if quote contains double quotes</comment>
                <expr_stmt><expr><name pos:line="74" pos:column="17">searchTerms</name> <op:operator pos:line="74" pos:column="29">=</op:operator> <call><name pos:line="74" pos:column="31">RemoveQuotesFromPattern</name><argument_list pos:line="74" pos:column="54">(<argument><expr><name pos:line="74" pos:column="55">searchTerms</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="68">matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="75" pos:column="17">searchTerms</name> <op:operator pos:line="75" pos:column="29">=</op:operator> <call><name pos:line="75" pos:column="31">RemoveFiletype</name><argument_list pos:line="75" pos:column="45">(<argument><expr><name pos:line="75" pos:column="46">searchTerms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="77" pos:column="17">//2.add unsplit terms</comment>
                <decl_stmt><decl><type><name pos:line="78" pos:column="17">var</name></type> <name pos:line="78" pos:column="21">splitTerms</name> <init pos:line="78" pos:column="32">= <expr><call><name><name pos:line="78" pos:column="34">searchTerms</name><op:operator pos:line="78" pos:column="45">.</op:operator><name pos:line="78" pos:column="46">Split</name></name><argument_list pos:line="78" pos:column="51">(<argument><expr><op:operator pos:line="78" pos:column="52">new</op:operator><index pos:line="78" pos:column="55">[]</index> <block pos:line="78" pos:column="58">{ <expr><lit:literal type="char" pos:line="78" pos:column="60">' '</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="67">StringSplitOptions</name><op:operator pos:line="78" pos:column="85">.</op:operator><name pos:line="78" pos:column="86">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="79" pos:column="17">foreach (<init><decl><type><name pos:line="79" pos:column="26">string</name></type> <name pos:line="79" pos:column="33">term</name> <range pos:line="79" pos:column="38">in <expr><name pos:line="79" pos:column="41">splitTerms</name></expr></range></decl></init>)
                <block pos:line="80" pos:column="17">{
                    <comment type="line" pos:line="81" pos:column="21">//if (term.All(c =&gt; Char.IsUpper(c) || Char.IsLower(c)) || term.All(c =&gt; Char.IsLetter(c) || Char.IsNumber(c) || c.Equals('_')))</comment>
                    <block pos:line="82" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="83" pos:column="25">matches</name><op:operator pos:line="83" pos:column="32">.</op:operator><name pos:line="83" pos:column="33">Add</name></name><argument_list pos:line="83" pos:column="36">(<argument><expr><name pos:line="83" pos:column="37">term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block>
                }</block></foreach>

                <comment type="line" pos:line="87" pos:column="17">//3.do rest...</comment>
                <expr_stmt><expr><name pos:line="88" pos:column="17">searchTerms</name> <op:operator pos:line="88" pos:column="29">=</op:operator> <call><name><name pos:line="88" pos:column="31">Regex</name><op:operator pos:line="88" pos:column="36">.</op:operator><name pos:line="88" pos:column="37">Replace</name></name><argument_list pos:line="88" pos:column="44">(<argument><expr><name pos:line="88" pos:column="45">searchTerms</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="58">Pattern</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="67">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="89" pos:column="17">searchTerms</name> <op:operator pos:line="89" pos:column="29">=</op:operator> <call><name><name pos:line="89" pos:column="31">Regex</name><op:operator pos:line="89" pos:column="36">.</op:operator><name pos:line="89" pos:column="37">Replace</name></name><argument_list pos:line="89" pos:column="44">(<argument><expr><name pos:line="89" pos:column="45">searchTerms</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="58">@"(-{0,1})([A-Z][a-z]+)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="84">" $1$2"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="90" pos:column="17">searchTerms</name> <op:operator pos:line="90" pos:column="29">=</op:operator> <call><name><name pos:line="90" pos:column="31">Regex</name><op:operator pos:line="90" pos:column="36">.</op:operator><name pos:line="90" pos:column="37">Replace</name></name><argument_list pos:line="90" pos:column="44">(<argument><expr><name pos:line="90" pos:column="45">searchTerms</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="58">@"(-{0,1})([A-Z]+|[0-9]+)"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="86">" $1$2"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name pos:line="92" pos:column="17">searchTerms</name> <op:operator pos:line="92" pos:column="29">=</op:operator> <call><name><name pos:line="92" pos:column="31">searchTerms</name><op:operator pos:line="92" pos:column="42">.</op:operator><name pos:line="92" pos:column="43">Replace</name></name><argument_list pos:line="92" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="51">"\""</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="57">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="93" pos:column="17">searchTerms</name> <op:operator pos:line="93" pos:column="29">=</op:operator> <call><name><name pos:line="93" pos:column="31">searchTerms</name><op:operator pos:line="93" pos:column="42">.</op:operator><name pos:line="93" pos:column="43">Replace</name></name><argument_list pos:line="93" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="51">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="56">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="94" pos:column="17">matches</name><op:operator pos:line="94" pos:column="24">.</op:operator><name pos:line="94" pos:column="25">AddRange</name></name><argument_list pos:line="94" pos:column="33">(<argument><expr><call><name><name pos:line="94" pos:column="34">searchTerms</name><op:operator pos:line="94" pos:column="45">.</op:operator><name pos:line="94" pos:column="46">Split</name></name><argument_list pos:line="94" pos:column="51">(<argument><expr><op:operator pos:line="94" pos:column="52">new</op:operator><index pos:line="94" pos:column="55">[]</index> <block pos:line="94" pos:column="58">{ <expr><lit:literal type="char" pos:line="94" pos:column="60">' '</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="67">StringSplitOptions</name><op:operator pos:line="94" pos:column="85">.</op:operator><name pos:line="94" pos:column="86">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <for pos:line="97" pos:column="17">for (<init><decl><type><name pos:line="97" pos:column="22">int</name></type> <name pos:line="97" pos:column="26">i</name> <init pos:line="97" pos:column="28">= <expr><lit:literal type="number" pos:line="97" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="97" pos:column="33">i</name> <op:operator pos:line="97" pos:column="35">&lt;</op:operator> <name><name pos:line="97" pos:column="37">matches</name><op:operator pos:line="97" pos:column="44">.</op:operator><name pos:line="97" pos:column="45">Count</name></name></expr>;</condition> <incr><expr><op:operator pos:line="97" pos:column="52">++</op:operator><name pos:line="97" pos:column="54">i</name></expr></incr>)
                <block pos:line="98" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="99" pos:column="21">var</name></type> <name pos:line="99" pos:column="25">trimmed</name> <init pos:line="99" pos:column="33">= <expr><name><name pos:line="99" pos:column="35">matches</name><index pos:line="99" pos:column="42">[<expr><name pos:line="99" pos:column="43">i</name></expr>]</index></name><op:operator pos:line="99" pos:column="45">.</op:operator><call><name pos:line="99" pos:column="46">Trim</name><argument_list pos:line="99" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="100" pos:column="21">if <condition pos:line="100" pos:column="24">(<expr><op:operator pos:line="100" pos:column="25">!</op:operator><call><name pos:line="100" pos:column="26">IsUnquotedLiteral</name><argument_list pos:line="100" pos:column="43">(<argument><expr><name pos:line="100" pos:column="44">trimmed</name></expr></argument>)</argument_list></call> <op:operator pos:line="100" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="100" pos:column="56">!</op:operator><op:operator pos:line="100" pos:column="57">(</op:operator><call><name><name pos:line="100" pos:column="58">trimmed</name><op:operator pos:line="100" pos:column="65">.</op:operator><name pos:line="100" pos:column="66">StartsWith</name></name><argument_list pos:line="100" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="77">"\""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="100" pos:column="83">&amp;&amp;</op:operator> <call><name><name pos:line="100" pos:column="86">trimmed</name><op:operator pos:line="100" pos:column="93">.</op:operator><name pos:line="100" pos:column="94">EndsWith</name></name><argument_list pos:line="100" pos:column="102">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="103">"\""</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="100" pos:column="108">)</op:operator></expr>)</condition><then pos:line="100" pos:column="110">
                    <block pos:line="101" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="102" pos:column="25">string</name></type> <name pos:line="102" pos:column="32">lower</name> <init pos:line="102" pos:column="38">= <expr><call><name><name pos:line="102" pos:column="40">trimmed</name><op:operator pos:line="102" pos:column="47">.</op:operator><name pos:line="102" pos:column="48">ToLower</name></name><argument_list pos:line="102" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name pos:line="103" pos:column="25">matches</name><index pos:line="103" pos:column="32">[<expr><name pos:line="103" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="103" pos:column="36">=</op:operator> <call><name><name pos:line="103" pos:column="38">Regex</name><op:operator pos:line="103" pos:column="43">.</op:operator><name pos:line="103" pos:column="44">Replace</name></name><argument_list pos:line="103" pos:column="51">(<argument><expr><name pos:line="103" pos:column="52">lower</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="59">@"[ ]{2,}"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="71">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></else></if></else></if>
              
            <return pos:line="108" pos:column="13">return <expr><call><name><name pos:line="108" pos:column="20">matches</name><op:operator pos:line="108" pos:column="27">.</op:operator><name pos:line="108" pos:column="28">Distinct</name></name><argument_list pos:line="108" pos:column="36">()</argument_list></call><op:operator pos:line="108" pos:column="38">.</op:operator><call><name pos:line="108" pos:column="39">ToList</name><argument_list pos:line="108" pos:column="45">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="111" pos:column="9">private</specifier> <specifier pos:line="111" pos:column="17">static</specifier> <name pos:line="111" pos:column="24">string</name></type> <name pos:line="111" pos:column="31">EscapeQuotesAndPathInQuotes</name><parameter_list pos:line="111" pos:column="58">(<param><decl><type><name pos:line="111" pos:column="59">string</name></type> <name pos:line="111" pos:column="66">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="112" pos:column="9">{
            <comment type="line" pos:line="113" pos:column="13">//this could cause problems in C# </comment>
            <comment type="line" pos:line="114" pos:column="13">//if the '\' is not inside of quotes</comment>
            <comment type="line" pos:line="115" pos:column="13">//but the chance is small</comment>
            <comment type="line" pos:line="116" pos:column="13">//searchTerms = searchTerms.Replace("\"", "\\\"");   </comment>
            <comment type="line" pos:line="117" pos:column="13">//searchTerms = searchTerms.Replace(@"\", @"\\");                                 </comment>
            <return pos:line="118" pos:column="13">return <expr><lit:literal type="string" pos:line="118" pos:column="20">"\""</lit:literal> <op:operator pos:line="118" pos:column="25">+</op:operator> <name pos:line="118" pos:column="27">searchTerms</name> <op:operator pos:line="118" pos:column="39">+</op:operator> <lit:literal type="string" pos:line="118" pos:column="41">"\""</lit:literal></expr>;</return>            
        }</block></function>

        <function><type><specifier pos:line="121" pos:column="9">private</specifier> <specifier pos:line="121" pos:column="17">static</specifier> <name pos:line="121" pos:column="24">string</name></type> <name pos:line="121" pos:column="31">RemoveQuotesFromPattern</name><parameter_list pos:line="121" pos:column="54">(<param><decl><type><name pos:line="121" pos:column="55">string</name></type> <name pos:line="121" pos:column="62">searchTerms</name></decl></param>, <param><decl><type><name><name pos:line="121" pos:column="75">List</name><argument_list pos:line="121" pos:column="79">&lt;<argument><name pos:line="121" pos:column="80">string</name></argument>&gt;</argument_list></name></type> <name pos:line="121" pos:column="88">matches</name></decl></param>)</parameter_list>
        <block pos:line="122" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">var</name></type> <name pos:line="123" pos:column="17">matchCollection</name> <init pos:line="123" pos:column="33">= <expr><call><name><name pos:line="123" pos:column="35">Regex</name><op:operator pos:line="123" pos:column="40">.</op:operator><name pos:line="123" pos:column="41">Matches</name></name><argument_list pos:line="123" pos:column="48">(<argument><expr><name pos:line="123" pos:column="49">searchTerms</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="62">QuotesPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="124" pos:column="13">foreach (<init><decl><type><name pos:line="124" pos:column="22">Match</name></type> <name pos:line="124" pos:column="28">match</name> <range pos:line="124" pos:column="34">in <expr><name pos:line="124" pos:column="37">matchCollection</name></expr></range></decl></init>)
            <block pos:line="125" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="126" pos:column="17">string</name></type> <name pos:line="126" pos:column="24">currentMatch</name> <init pos:line="126" pos:column="37">= <expr><name><name pos:line="126" pos:column="39">match</name><op:operator pos:line="126" pos:column="44">.</op:operator><name pos:line="126" pos:column="45">Value</name></name></expr></init></decl>;</decl_stmt><comment type="line" pos:line="126" pos:column="51">//.Trim('"', ' ');</comment>
                <expr_stmt><expr><name pos:line="127" pos:column="17">searchTerms</name> <op:operator pos:line="127" pos:column="29">=</op:operator> <call><name><name pos:line="127" pos:column="31">searchTerms</name><op:operator pos:line="127" pos:column="42">.</op:operator><name pos:line="127" pos:column="43">Replace</name></name><argument_list pos:line="127" pos:column="50">(<argument><expr><name><name pos:line="127" pos:column="51">match</name><op:operator pos:line="127" pos:column="56">.</op:operator><name pos:line="127" pos:column="57">Value</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="127" pos:column="64">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><op:operator pos:line="128" pos:column="21">!</op:operator><call><name><name pos:line="128" pos:column="22">String</name><op:operator pos:line="128" pos:column="28">.</op:operator><name pos:line="128" pos:column="29">IsNullOrWhiteSpace</name></name><argument_list pos:line="128" pos:column="47">(<argument><expr><name pos:line="128" pos:column="48">currentMatch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="128" pos:column="62">
                <block pos:line="129" pos:column="17">{
                    <comment type="line" pos:line="130" pos:column="21">//escape '\'s inside of quotes</comment>
                    <decl_stmt><decl><type><name pos:line="131" pos:column="21">var</name></type> <name pos:line="131" pos:column="25">matchWithEscapedQuotes</name> <init pos:line="131" pos:column="48">= <expr><call><name><name pos:line="131" pos:column="50">currentMatch</name><op:operator pos:line="131" pos:column="62">.</op:operator><name pos:line="131" pos:column="63">Replace</name></name><argument_list pos:line="131" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="71">@"\"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="131" pos:column="77">@"\\"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="132" pos:column="21">matches</name><op:operator pos:line="132" pos:column="28">.</op:operator><name pos:line="132" pos:column="29">Add</name></name><argument_list pos:line="132" pos:column="32">(<argument><expr><name pos:line="132" pos:column="33">currentMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></foreach>

            <return pos:line="136" pos:column="13">return <expr><name pos:line="136" pos:column="20">searchTerms</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="139" pos:column="9">public</specifier> <specifier pos:line="139" pos:column="16">static</specifier> <name pos:line="139" pos:column="23">bool</name></type> <name pos:line="139" pos:column="28">IsUnquotedLiteral</name><parameter_list pos:line="139" pos:column="45">(<param><decl><type><name pos:line="139" pos:column="46">string</name></type> <name pos:line="139" pos:column="53">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="140" pos:column="9">{
            <expr_stmt><expr><name pos:line="141" pos:column="13">searchTerms</name> <op:operator pos:line="141" pos:column="25">=</op:operator> <call><name><name pos:line="141" pos:column="27">searchTerms</name><op:operator pos:line="141" pos:column="38">.</op:operator><name pos:line="141" pos:column="39">Trim</name></name><argument_list pos:line="141" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="142" pos:column="13">if <condition pos:line="142" pos:column="16">(<expr><call><name><name pos:line="142" pos:column="17">searchTerms</name><op:operator pos:line="142" pos:column="28">.</op:operator><name pos:line="142" pos:column="29">StartsWith</name></name><argument_list pos:line="142" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="40">"\""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="142" pos:column="46">&amp;&amp;</op:operator> <call><name><name pos:line="142" pos:column="49">searchTerms</name><op:operator pos:line="142" pos:column="60">.</op:operator><name pos:line="142" pos:column="61">EndsWith</name></name><argument_list pos:line="142" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="70">"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="142" pos:column="76">
                <return pos:line="143" pos:column="17">return <expr><lit:literal type="boolean" pos:line="143" pos:column="24">false</lit:literal></expr>;</return></then></if>
            <comment type="line" pos:line="144" pos:column="13">//searchTerms = RemoveQuotesFromPattern(searchTerms, new List&lt;String&gt;());</comment>
            
            <comment type="line" pos:line="146" pos:column="13">//heuristics to see if this is a literal string, need to be improved</comment>
            <if pos:line="147" pos:column="13">if <condition pos:line="147" pos:column="16">(<expr><call><name><name pos:line="147" pos:column="17">searchTerms</name><op:operator pos:line="147" pos:column="28">.</op:operator><name pos:line="147" pos:column="29">Contains</name></name><argument_list pos:line="147" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="147" pos:column="38">'"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="147" pos:column="43">
                <return pos:line="148" pos:column="17">return <expr><lit:literal type="boolean" pos:line="148" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="149" pos:column="13">if <condition pos:line="149" pos:column="16">(<expr><call><name><name pos:line="149" pos:column="17">searchTerms</name><op:operator pos:line="149" pos:column="28">.</op:operator><name pos:line="149" pos:column="29">Contains</name></name><argument_list pos:line="149" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="149" pos:column="38">'\''</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="149" pos:column="44">
                <return pos:line="150" pos:column="17">return <expr><lit:literal type="boolean" pos:line="150" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="151" pos:column="13">if <condition pos:line="151" pos:column="16">(<expr><call><name><name pos:line="151" pos:column="17">searchTerms</name><op:operator pos:line="151" pos:column="28">.</op:operator><name pos:line="151" pos:column="29">Contains</name></name><argument_list pos:line="151" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="151" pos:column="38">')'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="151" pos:column="43">
                <return pos:line="152" pos:column="17">return <expr><lit:literal type="boolean" pos:line="152" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="153" pos:column="13">if <condition pos:line="153" pos:column="16">(<expr><call><name><name pos:line="153" pos:column="17">searchTerms</name><op:operator pos:line="153" pos:column="28">.</op:operator><name pos:line="153" pos:column="29">Contains</name></name><argument_list pos:line="153" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="153" pos:column="38">'.'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="153" pos:column="43">
                <return pos:line="154" pos:column="17">return <expr><lit:literal type="boolean" pos:line="154" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="155" pos:column="13">if<condition pos:line="155" pos:column="15">(<expr><call><name><name pos:line="155" pos:column="16">searchTerms</name><op:operator pos:line="155" pos:column="27">.</op:operator><name pos:line="155" pos:column="28">Contains</name></name><argument_list pos:line="155" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="155" pos:column="37">'('</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="155" pos:column="42">
                <return pos:line="156" pos:column="17">return <expr><lit:literal type="boolean" pos:line="156" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="157" pos:column="13">if <condition pos:line="157" pos:column="16">(<expr><call><name><name pos:line="157" pos:column="17">searchTerms</name><op:operator pos:line="157" pos:column="28">.</op:operator><name pos:line="157" pos:column="29">Contains</name></name><argument_list pos:line="157" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="157" pos:column="38">'['</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="157" pos:column="43">
                <return pos:line="158" pos:column="17">return <expr><lit:literal type="boolean" pos:line="158" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="159" pos:column="13">if <condition pos:line="159" pos:column="16">(<expr><call><name><name pos:line="159" pos:column="17">searchTerms</name><op:operator pos:line="159" pos:column="28">.</op:operator><name pos:line="159" pos:column="29">Contains</name></name><argument_list pos:line="159" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="159" pos:column="38">']'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="159" pos:column="43">
                <return pos:line="160" pos:column="17">return <expr><lit:literal type="boolean" pos:line="160" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="161" pos:column="13">if <condition pos:line="161" pos:column="16">(<expr><call><name><name pos:line="161" pos:column="17">searchTerms</name><op:operator pos:line="161" pos:column="28">.</op:operator><name pos:line="161" pos:column="29">Contains</name></name><argument_list pos:line="161" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="161" pos:column="38">'+'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="43">
                <return pos:line="162" pos:column="17">return <expr><lit:literal type="boolean" pos:line="162" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="163" pos:column="13">if <condition pos:line="163" pos:column="16">(<expr><call><name><name pos:line="163" pos:column="17">searchTerms</name><op:operator pos:line="163" pos:column="28">.</op:operator><name pos:line="163" pos:column="29">Contains</name></name><argument_list pos:line="163" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="163" pos:column="38">';'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="43">
                <return pos:line="164" pos:column="17">return <expr><lit:literal type="boolean" pos:line="164" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="165" pos:column="13">if <condition pos:line="165" pos:column="16">(<expr><call><name><name pos:line="165" pos:column="17">searchTerms</name><op:operator pos:line="165" pos:column="28">.</op:operator><name pos:line="165" pos:column="29">Contains</name></name><argument_list pos:line="165" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="165" pos:column="38">':'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="165" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="165" pos:column="46">!</op:operator><call><name><name pos:line="165" pos:column="47">searchTerms</name><op:operator pos:line="165" pos:column="58">.</op:operator><name pos:line="165" pos:column="59">Contains</name></name><argument_list pos:line="165" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="68">"filetype:"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="165" pos:column="81">
                <return pos:line="166" pos:column="17">return <expr><lit:literal type="boolean" pos:line="166" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="167" pos:column="13">if <condition pos:line="167" pos:column="16">(<expr><call><name><name pos:line="167" pos:column="17">searchTerms</name><op:operator pos:line="167" pos:column="28">.</op:operator><name pos:line="167" pos:column="29">Contains</name></name><argument_list pos:line="167" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="167" pos:column="38">'='</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="43">
                <return pos:line="168" pos:column="17">return <expr><lit:literal type="boolean" pos:line="168" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="169" pos:column="13">if <condition pos:line="169" pos:column="16">(<expr><call><name><name pos:line="169" pos:column="17">searchTerms</name><op:operator pos:line="169" pos:column="28">.</op:operator><name pos:line="169" pos:column="29">Contains</name></name><argument_list pos:line="169" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="169" pos:column="38">'&gt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="169" pos:column="43">
                <return pos:line="170" pos:column="17">return <expr><lit:literal type="boolean" pos:line="170" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="171" pos:column="13">if <condition pos:line="171" pos:column="16">(<expr><call><name><name pos:line="171" pos:column="17">searchTerms</name><op:operator pos:line="171" pos:column="28">.</op:operator><name pos:line="171" pos:column="29">Contains</name></name><argument_list pos:line="171" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="171" pos:column="38">'&lt;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="171" pos:column="43">
                <return pos:line="172" pos:column="17">return <expr><lit:literal type="boolean" pos:line="172" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="173" pos:column="13">if <condition pos:line="173" pos:column="16">(<expr><call><name><name pos:line="173" pos:column="17">searchTerms</name><op:operator pos:line="173" pos:column="28">.</op:operator><name pos:line="173" pos:column="29">Contains</name></name><argument_list pos:line="173" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="173" pos:column="38">'!'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="173" pos:column="43">
                <return pos:line="174" pos:column="17">return <expr><lit:literal type="boolean" pos:line="174" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="175" pos:column="13">if <condition pos:line="175" pos:column="16">(<expr><call><name><name pos:line="175" pos:column="17">searchTerms</name><op:operator pos:line="175" pos:column="28">.</op:operator><name pos:line="175" pos:column="29">Contains</name></name><argument_list pos:line="175" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="175" pos:column="38">'~'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="175" pos:column="43">
                <return pos:line="176" pos:column="17">return <expr><lit:literal type="boolean" pos:line="176" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="177" pos:column="13">if <condition pos:line="177" pos:column="16">(<expr><call><name><name pos:line="177" pos:column="17">searchTerms</name><op:operator pos:line="177" pos:column="28">.</op:operator><name pos:line="177" pos:column="29">Contains</name></name><argument_list pos:line="177" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="177" pos:column="38">'^'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="177" pos:column="43">
                <return pos:line="178" pos:column="17">return <expr><lit:literal type="boolean" pos:line="178" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="179" pos:column="13">if <condition pos:line="179" pos:column="16">(<expr><call><name><name pos:line="179" pos:column="17">searchTerms</name><op:operator pos:line="179" pos:column="28">.</op:operator><name pos:line="179" pos:column="29">Contains</name></name><argument_list pos:line="179" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="179" pos:column="38">'\\'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="179" pos:column="44">
                <return pos:line="180" pos:column="17">return <expr><lit:literal type="boolean" pos:line="180" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="181" pos:column="13">if <condition pos:line="181" pos:column="16">(<expr><call><name><name pos:line="181" pos:column="17">searchTerms</name><op:operator pos:line="181" pos:column="28">.</op:operator><name pos:line="181" pos:column="29">Contains</name></name><argument_list pos:line="181" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="181" pos:column="38">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="181" pos:column="43">
                <return pos:line="182" pos:column="17">return <expr><lit:literal type="boolean" pos:line="182" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="183" pos:column="13">if <condition pos:line="183" pos:column="16">(<expr><call><name><name pos:line="183" pos:column="17">searchTerms</name><op:operator pos:line="183" pos:column="28">.</op:operator><name pos:line="183" pos:column="29">Contains</name></name><argument_list pos:line="183" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="183" pos:column="38">'&amp;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="183" pos:column="43">
                <return pos:line="184" pos:column="17">return <expr><lit:literal type="boolean" pos:line="184" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="185" pos:column="13">if <condition pos:line="185" pos:column="16">(<expr><call><name><name pos:line="185" pos:column="17">searchTerms</name><op:operator pos:line="185" pos:column="28">.</op:operator><name pos:line="185" pos:column="29">Contains</name></name><argument_list pos:line="185" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="185" pos:column="38">'_'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="185" pos:column="43">
                <return pos:line="186" pos:column="17">return <expr><lit:literal type="boolean" pos:line="186" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="187" pos:column="13">if <condition pos:line="187" pos:column="16">(<expr><call><name><name pos:line="187" pos:column="17">searchTerms</name><op:operator pos:line="187" pos:column="28">.</op:operator><name pos:line="187" pos:column="29">Contains</name></name><argument_list pos:line="187" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="187" pos:column="38">'$'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="187" pos:column="43">
                <return pos:line="188" pos:column="17">return <expr><lit:literal type="boolean" pos:line="188" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="189" pos:column="13">if <condition pos:line="189" pos:column="16">(<expr><call><name><name pos:line="189" pos:column="17">searchTerms</name><op:operator pos:line="189" pos:column="28">.</op:operator><name pos:line="189" pos:column="29">Contains</name></name><argument_list pos:line="189" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="189" pos:column="38">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="43">
                <return pos:line="190" pos:column="17">return <expr><lit:literal type="boolean" pos:line="190" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <if pos:line="191" pos:column="13">if <condition pos:line="191" pos:column="16">(<expr><call><name><name pos:line="191" pos:column="17">searchTerms</name><op:operator pos:line="191" pos:column="28">.</op:operator><name pos:line="191" pos:column="29">Contains</name></name><argument_list pos:line="191" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="38">"-&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="191" pos:column="44">
                <return pos:line="192" pos:column="17">return <expr><lit:literal type="boolean" pos:line="192" pos:column="24">true</lit:literal></expr>;</return></then></if>
            <return pos:line="193" pos:column="13">return <expr><lit:literal type="boolean" pos:line="193" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="196" pos:column="9">public</specifier> <specifier pos:line="196" pos:column="16">static</specifier> <name><name pos:line="196" pos:column="23">SortedSet</name><argument_list pos:line="196" pos:column="32">&lt;<argument><name pos:line="196" pos:column="33">string</name></argument>&gt;</argument_list></name></type> <name pos:line="196" pos:column="41">GetFileExtensions</name><parameter_list pos:line="196" pos:column="58">(<param><decl><type><name pos:line="196" pos:column="59">string</name></type> <name pos:line="196" pos:column="66">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="197" pos:column="9">{
            <comment type="line" pos:line="198" pos:column="13">//2a.add filetype extensions</comment>
            <decl_stmt><decl><type><name pos:line="199" pos:column="13">var</name></type> <name pos:line="199" pos:column="17">matchCollection</name> <init pos:line="199" pos:column="33">= <expr><call><name><name pos:line="199" pos:column="35">Regex</name><op:operator pos:line="199" pos:column="40">.</op:operator><name pos:line="199" pos:column="41">Matches</name></name><argument_list pos:line="199" pos:column="48">(<argument><expr><name pos:line="199" pos:column="49">searchTerms</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="62">FileExtensionPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="200" pos:column="13">var</name></type> <name pos:line="200" pos:column="17">matches</name> <init pos:line="200" pos:column="25">= <expr><op:operator pos:line="200" pos:column="27">new</op:operator> <call><name><name pos:line="200" pos:column="31">SortedSet</name><argument_list pos:line="200" pos:column="40">&lt;<argument><name pos:line="200" pos:column="41">string</name></argument>&gt;</argument_list></name><argument_list pos:line="200" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="201" pos:column="13">searchTerms</name> <op:operator pos:line="201" pos:column="25">=</op:operator> <call><name pos:line="201" pos:column="27">GetMatches</name><argument_list pos:line="201" pos:column="37">(<argument><expr><name pos:line="201" pos:column="38">searchTerms</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="51">matchCollection</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="68">matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="202" pos:column="13">matchCollection</name> <op:operator pos:line="202" pos:column="29">=</op:operator> <call><name><name pos:line="202" pos:column="31">Regex</name><op:operator pos:line="202" pos:column="36">.</op:operator><name pos:line="202" pos:column="37">Matches</name></name><argument_list pos:line="202" pos:column="44">(<argument><expr><name pos:line="202" pos:column="45">searchTerms</name></expr></argument>, <argument><expr><name pos:line="202" pos:column="58">FileExtensionPatternTwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="203" pos:column="13">searchTerms</name> <op:operator pos:line="203" pos:column="25">=</op:operator> <call><name pos:line="203" pos:column="27">GetMatches</name><argument_list pos:line="203" pos:column="37">(<argument><expr><name pos:line="203" pos:column="38">searchTerms</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="51">matchCollection</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="68">matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="204" pos:column="13">return <expr><name pos:line="204" pos:column="20">matches</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="207" pos:column="9">private</specifier> <specifier pos:line="207" pos:column="17">static</specifier> <name pos:line="207" pos:column="24">string</name></type> <name pos:line="207" pos:column="31">GetMatches</name><parameter_list pos:line="207" pos:column="41">(<param><decl><type><name pos:line="207" pos:column="42">string</name></type> <name pos:line="207" pos:column="49">searchTerms</name></decl></param>, <param><decl><type><name pos:line="207" pos:column="62">MatchCollection</name></type> <name pos:line="207" pos:column="78">matchCollection</name></decl></param>, <param><decl><type><name><name pos:line="207" pos:column="95">SortedSet</name><argument_list pos:line="207" pos:column="104">&lt;<argument><name pos:line="207" pos:column="105">string</name></argument>&gt;</argument_list></name></type> <name pos:line="207" pos:column="113">matches</name></decl></param>)</parameter_list>
        <block pos:line="208" pos:column="9">{
            <foreach pos:line="209" pos:column="13">foreach (<init><decl><type><name pos:line="209" pos:column="22">Match</name></type> <name pos:line="209" pos:column="28">match</name> <range pos:line="209" pos:column="34">in <expr><name pos:line="209" pos:column="37">matchCollection</name></expr></range></decl></init>)
            <block pos:line="210" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="211" pos:column="17">string</name></type> <name pos:line="211" pos:column="24">currentMatch</name> <init pos:line="211" pos:column="37">= <expr><name><name pos:line="211" pos:column="39">match</name><op:operator pos:line="211" pos:column="44">.</op:operator><name pos:line="211" pos:column="45">Value</name></name></expr></init></decl>;</decl_stmt><comment type="line" pos:line="211" pos:column="51">//.Trim('"', ' ');</comment>
                <expr_stmt><expr><name pos:line="212" pos:column="17">searchTerms</name> <op:operator pos:line="212" pos:column="29">=</op:operator> <call><name><name pos:line="212" pos:column="31">searchTerms</name><op:operator pos:line="212" pos:column="42">.</op:operator><name pos:line="212" pos:column="43">Replace</name></name><argument_list pos:line="212" pos:column="50">(<argument><expr><name><name pos:line="212" pos:column="51">match</name><op:operator pos:line="212" pos:column="56">.</op:operator><name pos:line="212" pos:column="57">Value</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="212" pos:column="64">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><op:operator pos:line="213" pos:column="21">!</op:operator><call><name><name pos:line="213" pos:column="22">String</name><op:operator pos:line="213" pos:column="28">.</op:operator><name pos:line="213" pos:column="29">IsNullOrWhiteSpace</name></name><argument_list pos:line="213" pos:column="47">(<argument><expr><name pos:line="213" pos:column="48">currentMatch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="213" pos:column="62">
                <block pos:line="214" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="215" pos:column="21">matches</name><op:operator pos:line="215" pos:column="28">.</op:operator><name pos:line="215" pos:column="29">Add</name></name><argument_list pos:line="215" pos:column="32">(<argument><expr><call><name><name pos:line="215" pos:column="33">currentMatch</name><op:operator pos:line="215" pos:column="45">.</op:operator><name pos:line="215" pos:column="46">Substring</name></name><argument_list pos:line="215" pos:column="55">(<argument><expr><call><name><name pos:line="215" pos:column="56">currentMatch</name><op:operator pos:line="215" pos:column="68">.</op:operator><name pos:line="215" pos:column="69">IndexOf</name></name><argument_list pos:line="215" pos:column="76">(<argument><expr><lit:literal type="char" pos:line="215" pos:column="77">':'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="215" pos:column="81">+</op:operator><lit:literal type="number" pos:line="215" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                }</block></then></if>
            }</block></foreach>
            <return pos:line="218" pos:column="13">return <expr><name pos:line="218" pos:column="20">searchTerms</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="221" pos:column="9">public</specifier> <specifier pos:line="221" pos:column="16">static</specifier> <name pos:line="221" pos:column="23">bool</name></type> <name pos:line="221" pos:column="28">InvalidCharactersFound</name><parameter_list pos:line="221" pos:column="50">(<param><decl><type><name pos:line="221" pos:column="51">string</name></type> <name pos:line="221" pos:column="58">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="222" pos:column="9">{

            <expr_stmt><expr><name pos:line="224" pos:column="13">searchTerms</name> <op:operator pos:line="224" pos:column="25">=</op:operator> <call><name><name pos:line="224" pos:column="27">searchTerms</name><op:operator pos:line="224" pos:column="38">.</op:operator><name pos:line="224" pos:column="39">Trim</name></name><argument_list pos:line="224" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="225" pos:column="13">if <condition pos:line="225" pos:column="16">(<expr><call><name><name pos:line="225" pos:column="17">searchTerms</name><op:operator pos:line="225" pos:column="28">.</op:operator><name pos:line="225" pos:column="29">StartsWith</name></name><argument_list pos:line="225" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="40">"\""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="225" pos:column="46">&amp;&amp;</op:operator> <call><name><name pos:line="225" pos:column="49">searchTerms</name><op:operator pos:line="225" pos:column="60">.</op:operator><name pos:line="225" pos:column="61">EndsWith</name></name><argument_list pos:line="225" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="225" pos:column="70">"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="225" pos:column="76">
            <block pos:line="226" pos:column="13">{
                <comment type="line" pos:line="227" pos:column="17">//handle case where quote is whole search term, so anything goes</comment>
                <return pos:line="228" pos:column="17">return <expr><lit:literal type="boolean" pos:line="228" pos:column="24">false</lit:literal></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="231" pos:column="13">searchTerms</name> <op:operator pos:line="231" pos:column="25">=</op:operator> <call><name pos:line="231" pos:column="27">RemoveFiletype</name><argument_list pos:line="231" pos:column="41">(<argument><expr><name pos:line="231" pos:column="42">searchTerms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name pos:line="233" pos:column="13">MatchCollection</name></type> <name pos:line="233" pos:column="29">matchCollection</name> <init pos:line="233" pos:column="45">= <expr><call><name><name pos:line="233" pos:column="47">Regex</name><op:operator pos:line="233" pos:column="52">.</op:operator><name pos:line="233" pos:column="53">Matches</name></name><argument_list pos:line="233" pos:column="60">(<argument><expr><name pos:line="233" pos:column="61">searchTerms</name></expr></argument>, <argument><expr><name pos:line="233" pos:column="74">QuotesPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="234" pos:column="13">foreach(<init><decl><type><name pos:line="234" pos:column="21">Match</name></type> <name pos:line="234" pos:column="27">match</name> <range pos:line="234" pos:column="33">in <expr><name pos:line="234" pos:column="36">matchCollection</name></expr></range></decl></init>)
            <block pos:line="235" pos:column="13">{
                <expr_stmt><expr><name pos:line="236" pos:column="17">searchTerms</name> <op:operator pos:line="236" pos:column="29">=</op:operator> <call><name><name pos:line="236" pos:column="31">searchTerms</name><op:operator pos:line="236" pos:column="42">.</op:operator><name pos:line="236" pos:column="43">Replace</name></name><argument_list pos:line="236" pos:column="50">(<argument><expr><name><name pos:line="236" pos:column="51">match</name><op:operator pos:line="236" pos:column="56">.</op:operator><name pos:line="236" pos:column="57">Value</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="236" pos:column="64">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="238" pos:column="13">searchTerms</name> <op:operator pos:line="238" pos:column="25">=</op:operator> <call><name><name pos:line="238" pos:column="27">searchTerms</name><op:operator pos:line="238" pos:column="38">.</op:operator><name pos:line="238" pos:column="39">Replace</name></name><argument_list pos:line="238" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="238" pos:column="47">"\""</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="238" pos:column="53">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="239" pos:column="13">return <expr><call><name><name pos:line="239" pos:column="20">Regex</name><op:operator pos:line="239" pos:column="25">.</op:operator><name pos:line="239" pos:column="26">IsMatch</name></name><argument_list pos:line="239" pos:column="33">(<argument><expr><name pos:line="239" pos:column="34">searchTerms</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="47">Pattern</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="242" pos:column="9">private</specifier> <specifier pos:line="242" pos:column="17">static</specifier> <name pos:line="242" pos:column="24">string</name></type> <name pos:line="242" pos:column="31">RemoveFiletype</name><parameter_list pos:line="242" pos:column="45">(<param><decl><type><name pos:line="242" pos:column="46">string</name></type> <name pos:line="242" pos:column="53">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="243" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="244" pos:column="13">var</name></type> <name pos:line="244" pos:column="17">collection</name> <init pos:line="244" pos:column="28">= <expr><call><name><name pos:line="244" pos:column="30">Regex</name><op:operator pos:line="244" pos:column="35">.</op:operator><name pos:line="244" pos:column="36">Matches</name></name><argument_list pos:line="244" pos:column="43">(<argument><expr><name pos:line="244" pos:column="44">searchTerms</name></expr></argument>, <argument><expr><name pos:line="244" pos:column="57">FileExtensionPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="245" pos:column="13">foreach (<init><decl><type><name pos:line="245" pos:column="22">Match</name></type> <name pos:line="245" pos:column="28">match</name> <range pos:line="245" pos:column="34">in <expr><name pos:line="245" pos:column="37">collection</name></expr></range></decl></init>)
            <block pos:line="246" pos:column="13">{
                <expr_stmt><expr><name pos:line="247" pos:column="17">searchTerms</name> <op:operator pos:line="247" pos:column="29">=</op:operator> <call><name><name pos:line="247" pos:column="31">searchTerms</name><op:operator pos:line="247" pos:column="42">.</op:operator><name pos:line="247" pos:column="43">Replace</name></name><argument_list pos:line="247" pos:column="50">(<argument><expr><name><name pos:line="247" pos:column="51">match</name><op:operator pos:line="247" pos:column="56">.</op:operator><name pos:line="247" pos:column="57">Value</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="247" pos:column="64">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <expr_stmt><expr><name pos:line="249" pos:column="13">collection</name> <op:operator pos:line="249" pos:column="24">=</op:operator> <call><name><name pos:line="249" pos:column="26">Regex</name><op:operator pos:line="249" pos:column="31">.</op:operator><name pos:line="249" pos:column="32">Matches</name></name><argument_list pos:line="249" pos:column="39">(<argument><expr><name pos:line="249" pos:column="40">searchTerms</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="53">FileExtensionPatternTwo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="250" pos:column="13">foreach (<init><decl><type><name pos:line="250" pos:column="22">Match</name></type> <name pos:line="250" pos:column="28">match</name> <range pos:line="250" pos:column="34">in <expr><name pos:line="250" pos:column="37">collection</name></expr></range></decl></init>)
            <block pos:line="251" pos:column="13">{
                <expr_stmt><expr><name pos:line="252" pos:column="17">searchTerms</name> <op:operator pos:line="252" pos:column="29">=</op:operator> <call><name><name pos:line="252" pos:column="31">searchTerms</name><op:operator pos:line="252" pos:column="42">.</op:operator><name pos:line="252" pos:column="43">Replace</name></name><argument_list pos:line="252" pos:column="50">(<argument><expr><name><name pos:line="252" pos:column="51">match</name><op:operator pos:line="252" pos:column="56">.</op:operator><name pos:line="252" pos:column="57">Value</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="252" pos:column="64">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>

            <return pos:line="255" pos:column="13">return <expr><name pos:line="255" pos:column="20">searchTerms</name></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="258" pos:column="9">private</specifier> <specifier pos:line="258" pos:column="17">const</specifier> <name pos:line="258" pos:column="23">string</name></type> <name pos:line="258" pos:column="30">Pattern</name> <init pos:line="258" pos:column="38">= <expr><lit:literal type="string" pos:line="258" pos:column="40">"[^a-zA-Z0-9_\\s\\*\\-]"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="259" pos:column="9">private</specifier> <specifier pos:line="259" pos:column="17">const</specifier> <name pos:line="259" pos:column="23">string</name></type> <name pos:line="259" pos:column="30">QuotesPattern</name> <init pos:line="259" pos:column="44">= <expr><lit:literal type="string" pos:line="259" pos:column="46">"-{0,1}\"[^\"]+\""</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="260" pos:column="9">private</specifier> <specifier pos:line="260" pos:column="17">const</specifier> <name pos:line="260" pos:column="23">string</name></type> <name pos:line="260" pos:column="30">FileExtensionPattern</name> <init pos:line="260" pos:column="51">= <expr><lit:literal type="string" pos:line="260" pos:column="53">"filetype\\:([a-zA-Z]\\w+)"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="261" pos:column="9">private</specifier> <specifier pos:line="261" pos:column="17">const</specifier> <name pos:line="261" pos:column="23">string</name></type> <name pos:line="261" pos:column="30">FileExtensionPatternTwo</name> <init pos:line="261" pos:column="54">= <expr><lit:literal type="string" pos:line="261" pos:column="56">"filetype\\:([a-zA-Z]+\\Z)"</lit:literal></expr></init></decl>;</decl_stmt>        
        <comment type="line" pos:line="262" pos:column="9">//Zhao Compliled regular express</comment>
        <decl_stmt><decl><type><specifier pos:line="263" pos:column="9">private</specifier> <name pos:line="263" pos:column="17">Regex</name></type> <name pos:line="263" pos:column="23">_patternChars</name> <init pos:line="263" pos:column="37">= <expr><op:operator pos:line="263" pos:column="39">new</op:operator> <call><name pos:line="263" pos:column="43">Regex</name><argument_list pos:line="263" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="263" pos:column="49">@"([A-Z][a-z]+)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="263" pos:column="67">RegexOptions</name><op:operator pos:line="263" pos:column="79">.</op:operator><name pos:line="263" pos:column="80">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="264" pos:column="9">private</specifier> <name pos:line="264" pos:column="17">Regex</name></type> <name pos:line="264" pos:column="23">_patternCharDigit</name> <init pos:line="264" pos:column="41">= <expr><op:operator pos:line="264" pos:column="43">new</op:operator> <call><name pos:line="264" pos:column="47">Regex</name><argument_list pos:line="264" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="264" pos:column="53">@"([A-Z]+|[0-9]+)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="264" pos:column="73">RegexOptions</name><op:operator pos:line="264" pos:column="85">.</op:operator><name pos:line="264" pos:column="86">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="265" pos:column="9">private</specifier> <name pos:line="265" pos:column="17">Regex</name></type> <name pos:line="265" pos:column="23">_patternSpace</name> <init pos:line="265" pos:column="37">= <expr><op:operator pos:line="265" pos:column="39">new</op:operator> <call><name pos:line="265" pos:column="43">Regex</name><argument_list pos:line="265" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="265" pos:column="49">" _"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="265" pos:column="55">RegexOptions</name><op:operator pos:line="265" pos:column="67">.</op:operator><name pos:line="265" pos:column="68">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="266" pos:column="9">private</specifier> <name pos:line="266" pos:column="17">Regex</name></type> <name pos:line="266" pos:column="23">_patternCharsLowerCase</name> <init pos:line="266" pos:column="46">= <expr><op:operator pos:line="266" pos:column="48">new</op:operator> <call><name pos:line="266" pos:column="52">Regex</name><argument_list pos:line="266" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="58">@"([^a-zA-Z][a-z]+)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="266" pos:column="80">RegexOptions</name><op:operator pos:line="266" pos:column="92">.</op:operator><name pos:line="266" pos:column="93">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="268" pos:column="9">public</specifier> <specifier pos:line="268" pos:column="16">static</specifier> <name pos:line="268" pos:column="23">string</name></type> <name pos:line="268" pos:column="30">IsLiteralSearchString</name><parameter_list pos:line="268" pos:column="51">(<param><decl><type><name pos:line="268" pos:column="52">string</name></type> <name pos:line="268" pos:column="59">text</name></decl></param>)</parameter_list>
        <block pos:line="269" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="270" pos:column="13">List</name><argument_list pos:line="270" pos:column="17">&lt;<argument><name pos:line="270" pos:column="18">string</name></argument>&gt;</argument_list></name></type> <name pos:line="270" pos:column="26">matches</name> <init pos:line="270" pos:column="34">= <expr><op:operator pos:line="270" pos:column="36">new</op:operator> <call><name><name pos:line="270" pos:column="40">List</name><argument_list pos:line="270" pos:column="44">&lt;<argument><name pos:line="270" pos:column="45">string</name></argument>&gt;</argument_list></name><argument_list pos:line="270" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="271" pos:column="13">if <condition pos:line="271" pos:column="16">(<expr><call><name pos:line="271" pos:column="17">IsUnquotedLiteral</name><argument_list pos:line="271" pos:column="34">(<argument><expr><name pos:line="271" pos:column="35">text</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="271" pos:column="41">
                <return pos:line="272" pos:column="17">return <expr><name pos:line="272" pos:column="24">text</name></expr>;</return></then>
            <else pos:line="273" pos:column="13">else <if pos:line="273" pos:column="18">if <condition pos:line="273" pos:column="21">(<expr><op:operator pos:line="273" pos:column="22">!</op:operator><call><name pos:line="273" pos:column="23">RemoveQuotesFromPattern</name><argument_list pos:line="273" pos:column="46">(<argument><expr><name pos:line="273" pos:column="47">text</name></expr></argument>, <argument><expr><name pos:line="273" pos:column="53">matches</name></expr></argument>)</argument_list></call><op:operator pos:line="273" pos:column="61">.</op:operator><call><name pos:line="273" pos:column="62">Equals</name><argument_list pos:line="273" pos:column="68">(<argument><expr><name pos:line="273" pos:column="69">text</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="273" pos:column="75">
            <block pos:line="274" pos:column="13">{
                <return pos:line="275" pos:column="17">return <expr><call><name><name pos:line="275" pos:column="24">matches</name><op:operator pos:line="275" pos:column="31">.</op:operator><name pos:line="275" pos:column="32">First</name></name><argument_list pos:line="275" pos:column="37">()</argument_list></call></expr>;</return>
            }</block></then>
            <else pos:line="277" pos:column="13">else <return pos:line="277" pos:column="18">return <expr><name pos:line="277" pos:column="25">null</name></expr>;</return></else></if></else></if>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
