<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\Parser\Parser.UnitTests\TestFiles\xmlMatchedTagsHighlighter.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">//this file is part of notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">//Copyright (C)2003 Don HO &lt;donho@altern.org&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">//This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">//modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">//as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">//version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">//This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="10" pos:column="1">//but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="11" pos:column="1">//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="12" pos:column="1">//GNU General Public License for more details.</comment>
<comment type="line" pos:line="13" pos:column="1">//</comment>
<comment type="line" pos:line="14" pos:column="1">//You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="15" pos:column="1">//along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="16" pos:column="1">//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"xmlMatchedTagsHighlighter.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>

<function><type><name pos:line="22" pos:column="1">int</name></type> <name><name pos:line="22" pos:column="5">XmlMatchedTagsHighlighter</name><op:operator pos:line="22" pos:column="30">::</op:operator><name pos:line="22" pos:column="32">getFirstTokenPosFrom</name></name><parameter_list pos:line="22" pos:column="52">(<param><decl><type><name pos:line="22" pos:column="53">int</name></type> <name pos:line="22" pos:column="57">targetStart</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="70">int</name></type> <name pos:line="22" pos:column="74">targetEnd</name></decl></param>, <param><decl><type><specifier pos:line="22" pos:column="85">const</specifier> <name pos:line="22" pos:column="91">char</name> <type:modifier pos:line="22" pos:column="96">*</type:modifier></type><name pos:line="22" pos:column="97">token</name></decl></param>, <param><decl><type><name><name pos:line="22" pos:column="104">pair</name><argument_list pos:line="22" pos:column="108">&lt;<argument><expr><name pos:line="22" pos:column="109">int</name></expr></argument>, <argument><expr><name pos:line="22" pos:column="114">int</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="22" pos:column="119">&amp;</type:modifier></type> <name pos:line="22" pos:column="121">foundPos</name></decl></param>)</parameter_list>
<block pos:line="23" pos:column="1">{
	<comment type="line" pos:line="24" pos:column="9">//int start = currentPos;</comment>
	<comment type="line" pos:line="25" pos:column="9">//int end = (direction == DIR_LEFT)?0:_pEditView-&gt;getCurrentDocLen();</comment>
	
	<expr_stmt><expr><call><name><name pos:line="27" pos:column="9">_pEditView</name><op:operator pos:line="27" pos:column="19">-&gt;</op:operator><name pos:line="27" pos:column="21">execute</name></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">targetStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="28" pos:column="9">_pEditView</name><op:operator pos:line="28" pos:column="19">-&gt;</op:operator><name pos:line="28" pos:column="21">execute</name></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">targetEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="29" pos:column="9">_pEditView</name><op:operator pos:line="29" pos:column="19">-&gt;</op:operator><name pos:line="29" pos:column="21">execute</name></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name pos:line="29" pos:column="49">SCFIND_REGEXP</name><op:operator pos:line="29" pos:column="62">|</op:operator><name pos:line="29" pos:column="63">SCFIND_POSIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">int</name></type> <name pos:line="30" pos:column="13">posFind</name> <init pos:line="30" pos:column="21">= <expr><call><name><name pos:line="30" pos:column="23">_pEditView</name><op:operator pos:line="30" pos:column="33">-&gt;</op:operator><name pos:line="30" pos:column="35">execute</name></name><argument_list pos:line="30" pos:column="42">(<argument><expr><name pos:line="30" pos:column="43">SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><op:operator pos:line="30" pos:column="63">(</op:operator><name pos:line="30" pos:column="64">WPARAM</name><op:operator pos:line="30" pos:column="70">)</op:operator><call><name pos:line="30" pos:column="71">strlen</name><argument_list pos:line="30" pos:column="77">(<argument><expr><name pos:line="30" pos:column="78">token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="30" pos:column="86">(</op:operator><name pos:line="30" pos:column="87">LPARAM</name><op:operator pos:line="30" pos:column="93">)</op:operator><name pos:line="30" pos:column="94">token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">posFind</name> <op:operator pos:line="31" pos:column="21">!=</op:operator> <op:operator pos:line="31" pos:column="24">-</op:operator><lit:literal type="number" pos:line="31" pos:column="25">1</lit:literal></expr>)</condition><then pos:line="31" pos:column="27">
	<block pos:line="32" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="33" pos:column="17">foundPos</name><op:operator pos:line="33" pos:column="25">.</op:operator><name pos:line="33" pos:column="26">first</name></name> <op:operator pos:line="33" pos:column="32">=</op:operator> <call><name><name pos:line="33" pos:column="34">_pEditView</name><op:operator pos:line="33" pos:column="44">-&gt;</op:operator><name pos:line="33" pos:column="46">execute</name></name><argument_list pos:line="33" pos:column="53">(<argument><expr><name pos:line="33" pos:column="54">SCI_GETTARGETSTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">foundPos</name><op:operator pos:line="34" pos:column="25">.</op:operator><name pos:line="34" pos:column="26">second</name></name> <op:operator pos:line="34" pos:column="33">=</op:operator> <call><name><name pos:line="34" pos:column="35">_pEditView</name><op:operator pos:line="34" pos:column="45">-&gt;</op:operator><name pos:line="34" pos:column="47">execute</name></name><argument_list pos:line="34" pos:column="54">(<argument><expr><name pos:line="34" pos:column="55">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">posFind</name></expr>;</return>
}</block></function>

<function><type><name pos:line="39" pos:column="1">TagCateg</name></type> <name><name pos:line="39" pos:column="10">XmlMatchedTagsHighlighter</name><op:operator pos:line="39" pos:column="35">::</op:operator><name pos:line="39" pos:column="37">getTagCategory</name></name><parameter_list pos:line="39" pos:column="51">(<param><decl><type><name pos:line="39" pos:column="52">XmlMatchedTagsPos</name> <type:modifier pos:line="39" pos:column="70">&amp;</type:modifier></type> <name pos:line="39" pos:column="72">tagsPos</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="81">int</name></type> <name pos:line="39" pos:column="85">curPos</name></decl></param>)</parameter_list>
<block pos:line="40" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="41" pos:column="9">pair</name><argument_list pos:line="41" pos:column="13">&lt;<argument><expr><name pos:line="41" pos:column="14">int</name></expr></argument>, <argument><expr><name pos:line="41" pos:column="19">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="24">foundPos</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="43" pos:column="9">int</name></type> <name pos:line="43" pos:column="13">docLen</name> <init pos:line="43" pos:column="20">= <expr><call><name><name pos:line="43" pos:column="22">_pEditView</name><op:operator pos:line="43" pos:column="32">-&gt;</op:operator><name pos:line="43" pos:column="34">getCurrentDocLen</name></name><argument_list pos:line="43" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="45" pos:column="9">int</name></type> <name pos:line="45" pos:column="13">gtPos</name> <init pos:line="45" pos:column="19">= <expr><call><name pos:line="45" pos:column="21">getFirstTokenPosFrom</name><argument_list pos:line="45" pos:column="41">(<argument><expr><name pos:line="45" pos:column="42">curPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="45" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="45" pos:column="53">"&gt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="58">foundPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">int</name></type> <name pos:line="46" pos:column="13">ltPos</name> <init pos:line="46" pos:column="19">= <expr><call><name pos:line="46" pos:column="21">getFirstTokenPosFrom</name><argument_list pos:line="46" pos:column="41">(<argument><expr><name pos:line="46" pos:column="42">curPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="46" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="46" pos:column="53">"&lt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="58">foundPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">ltPos</name> <op:operator pos:line="47" pos:column="19">!=</op:operator> <op:operator pos:line="47" pos:column="22">-</op:operator><lit:literal type="number" pos:line="47" pos:column="23">1</lit:literal></expr>)</condition><then pos:line="47" pos:column="25">
	<block pos:line="48" pos:column="9">{
		<if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><op:operator pos:line="49" pos:column="21">(</op:operator><name pos:line="49" pos:column="22">gtPos</name> <op:operator pos:line="49" pos:column="28">!=</op:operator> <op:operator pos:line="49" pos:column="31">-</op:operator><lit:literal type="number" pos:line="49" pos:column="32">1</lit:literal><op:operator pos:line="49" pos:column="33">)</op:operator> <op:operator pos:line="49" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="49" pos:column="38">(</op:operator><name pos:line="49" pos:column="39">ltPos</name> <op:operator pos:line="49" pos:column="45">&lt;</op:operator> <name pos:line="49" pos:column="47">gtPos</name><op:operator pos:line="49" pos:column="52">)</op:operator></expr>)</condition><then pos:line="49" pos:column="54">
			<return pos:line="50" pos:column="25">return <expr><name pos:line="50" pos:column="32">outOfTag</name></expr>;</return></then></if>

		<comment type="line" pos:line="52" pos:column="17">// Now we are sure about that we are inside of tag</comment>
		<comment type="line" pos:line="53" pos:column="17">// We'll try to determinate the tag category :</comment>
		<comment type="line" pos:line="54" pos:column="17">// tagOpen : &lt;Tag&gt;, &lt;Tag Attr="1" &gt;</comment>
		<comment type="line" pos:line="55" pos:column="17">// tagClose : &lt;/Tag&gt;</comment>
		<comment type="line" pos:line="56" pos:column="17">// tagSigle : &lt;Tag/&gt;, &lt;Tag Attr="0" /&gt;</comment>
		<decl_stmt><decl><type><name pos:line="57" pos:column="17">int</name></type> <name pos:line="57" pos:column="21">charAfterLt</name> <init pos:line="57" pos:column="33">= <expr><call><name><name pos:line="57" pos:column="35">_pEditView</name><op:operator pos:line="57" pos:column="45">-&gt;</op:operator><name pos:line="57" pos:column="47">execute</name></name><argument_list pos:line="57" pos:column="54">(<argument><expr><name pos:line="57" pos:column="55">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="70">ltPos</name><op:operator pos:line="57" pos:column="75">+</op:operator><lit:literal type="number" pos:line="57" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><op:operator pos:line="58" pos:column="21">!</op:operator><name pos:line="58" pos:column="22">charAfterLt</name></expr>)</condition><then pos:line="58" pos:column="34">
			<return pos:line="59" pos:column="25">return <expr><name pos:line="59" pos:column="32">unknownPb</name></expr>;</return></then></if>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><op:operator pos:line="61" pos:column="21">(</op:operator><name pos:line="61" pos:column="22">char</name><op:operator pos:line="61" pos:column="26">)</op:operator><name pos:line="61" pos:column="27">charAfterLt</name> <op:operator pos:line="61" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="42">' '</lit:literal></expr>)</condition><then pos:line="61" pos:column="46">
			<return pos:line="62" pos:column="25">return <expr><name pos:line="62" pos:column="32">invalidTag</name></expr>;</return></then></if>

		<comment type="line" pos:line="64" pos:column="17">// so now we are sure we have tag sign '&lt;'</comment>
		<comment type="line" pos:line="65" pos:column="17">// We'll see on the right</comment>
		<decl_stmt><decl><type><name pos:line="66" pos:column="17">int</name></type> <name pos:line="66" pos:column="21">gtPosOnR</name> <init pos:line="66" pos:column="30">= <expr><call><name pos:line="66" pos:column="32">getFirstTokenPosFrom</name><argument_list pos:line="66" pos:column="52">(<argument><expr><name pos:line="66" pos:column="53">curPos</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="61">docLen</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="69">"&gt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="74">foundPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="67" pos:column="17">int</name></type> <name pos:line="67" pos:column="21">ltPosOnR</name> <init pos:line="67" pos:column="30">= <expr><call><name pos:line="67" pos:column="32">getFirstTokenPosFrom</name><argument_list pos:line="67" pos:column="52">(<argument><expr><name pos:line="67" pos:column="53">curPos</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="61">docLen</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="69">"&lt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="74">foundPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">gtPosOnR</name> <op:operator pos:line="69" pos:column="30">==</op:operator> <op:operator pos:line="69" pos:column="33">-</op:operator><lit:literal type="number" pos:line="69" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="69" pos:column="36">
			<return pos:line="70" pos:column="25">return <expr><name pos:line="70" pos:column="32">invalidTag</name></expr>;</return></then></if>

		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><op:operator pos:line="72" pos:column="21">(</op:operator><name pos:line="72" pos:column="22">ltPosOnR</name> <op:operator pos:line="72" pos:column="31">!=</op:operator> <op:operator pos:line="72" pos:column="34">-</op:operator><lit:literal type="number" pos:line="72" pos:column="35">1</lit:literal><op:operator pos:line="72" pos:column="36">)</op:operator> <op:operator pos:line="72" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="72" pos:column="41">(</op:operator><name pos:line="72" pos:column="42">ltPosOnR</name> <op:operator pos:line="72" pos:column="51">&lt;</op:operator> <name pos:line="72" pos:column="53">gtPosOnR</name><op:operator pos:line="72" pos:column="61">)</op:operator></expr>)</condition><then pos:line="72" pos:column="63">
			<return pos:line="73" pos:column="25">return <expr><name pos:line="73" pos:column="32">invalidTag</name></expr>;</return></then></if>

		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><op:operator pos:line="75" pos:column="21">(</op:operator><name pos:line="75" pos:column="22">char</name><op:operator pos:line="75" pos:column="26">)</op:operator><name pos:line="75" pos:column="27">charAfterLt</name> <op:operator pos:line="75" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="42">'/'</lit:literal></expr>)</condition><then pos:line="75" pos:column="46">
		<block pos:line="76" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">int</name></type> <name pos:line="77" pos:column="29">char2AfterLt</name> <init pos:line="77" pos:column="42">= <expr><call><name><name pos:line="77" pos:column="44">_pEditView</name><op:operator pos:line="77" pos:column="54">-&gt;</op:operator><name pos:line="77" pos:column="56">execute</name></name><argument_list pos:line="77" pos:column="63">(<argument><expr><name pos:line="77" pos:column="64">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="79">ltPos</name><op:operator pos:line="77" pos:column="84">+</op:operator><lit:literal type="number" pos:line="77" pos:column="85">1</lit:literal><op:operator pos:line="77" pos:column="86">+</op:operator><lit:literal type="number" pos:line="77" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="79" pos:column="25">if <condition pos:line="79" pos:column="28">(<expr><op:operator pos:line="79" pos:column="29">!</op:operator><name pos:line="79" pos:column="30">char2AfterLt</name></expr>)</condition><then pos:line="79" pos:column="43">
				<return pos:line="80" pos:column="33">return <expr><name pos:line="80" pos:column="40">unknownPb</name></expr>;</return></then></if>

			<if pos:line="82" pos:column="25">if <condition pos:line="82" pos:column="28">(<expr><op:operator pos:line="82" pos:column="29">(</op:operator><name pos:line="82" pos:column="30">char</name><op:operator pos:line="82" pos:column="34">)</op:operator><name pos:line="82" pos:column="35">char2AfterLt</name> <op:operator pos:line="82" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="82" pos:column="51">' '</lit:literal></expr>)</condition><then pos:line="82" pos:column="55">
				<return pos:line="83" pos:column="33">return <expr><name pos:line="83" pos:column="40">invalidTag</name></expr>;</return></then></if>

			<expr_stmt><expr><name><name pos:line="85" pos:column="25">tagsPos</name><op:operator pos:line="85" pos:column="32">.</op:operator><name pos:line="85" pos:column="33">tagCloseStart</name></name> <op:operator pos:line="85" pos:column="47">=</op:operator> <name pos:line="85" pos:column="49">ltPos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="86" pos:column="25">tagsPos</name><op:operator pos:line="86" pos:column="32">.</op:operator><name pos:line="86" pos:column="33">tagCloseEnd</name></name> <op:operator pos:line="86" pos:column="45">=</op:operator> <name pos:line="86" pos:column="47">gtPosOnR</name> <op:operator pos:line="86" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="86" pos:column="58">1</lit:literal></expr>;</expr_stmt>
			<return pos:line="87" pos:column="25">return <expr><name pos:line="87" pos:column="32">tagClose</name></expr>;</return>
		}</block></then>
		<else pos:line="89" pos:column="17">else
		<block pos:line="90" pos:column="17">{
			<comment type="line" pos:line="91" pos:column="25">// it's sure for not being a tagClose</comment>
			<comment type="line" pos:line="92" pos:column="25">// So we determinate if it's tagSingle or tagOpen</comment>
			<expr_stmt><expr><name><name pos:line="93" pos:column="25">tagsPos</name><op:operator pos:line="93" pos:column="32">.</op:operator><name pos:line="93" pos:column="33">tagOpenStart</name></name> <op:operator pos:line="93" pos:column="46">=</op:operator> <name pos:line="93" pos:column="48">ltPos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="94" pos:column="25">tagsPos</name><op:operator pos:line="94" pos:column="32">.</op:operator><name pos:line="94" pos:column="33">tagOpenEnd</name></name> <op:operator pos:line="94" pos:column="44">=</op:operator> <name pos:line="94" pos:column="46">gtPosOnR</name> <op:operator pos:line="94" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="94" pos:column="57">1</lit:literal></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="96" pos:column="25">int</name></type> <name pos:line="96" pos:column="29">charBeforeLt</name> <init pos:line="96" pos:column="42">= <expr><call><name><name pos:line="96" pos:column="44">_pEditView</name><op:operator pos:line="96" pos:column="54">-&gt;</op:operator><name pos:line="96" pos:column="56">execute</name></name><argument_list pos:line="96" pos:column="63">(<argument><expr><name pos:line="96" pos:column="64">SCI_GETCHARAT</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="79">gtPosOnR</name><op:operator pos:line="96" pos:column="87">-</op:operator><lit:literal type="number" pos:line="96" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><op:operator pos:line="97" pos:column="29">(</op:operator><name pos:line="97" pos:column="30">char</name><op:operator pos:line="97" pos:column="34">)</op:operator><name pos:line="97" pos:column="35">charBeforeLt</name> <op:operator pos:line="97" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="51">'/'</lit:literal></expr>)</condition><then pos:line="97" pos:column="55">
				<return pos:line="98" pos:column="33">return <expr><name pos:line="98" pos:column="40">inSingleTag</name></expr>;</return></then></if>

			<return pos:line="100" pos:column="25">return <expr><name pos:line="100" pos:column="32">tagOpen</name></expr>;</return>
		}</block></else></if>
	}</block></then></if>
		
	<return pos:line="104" pos:column="9">return <expr><name pos:line="104" pos:column="16">outOfTag</name></expr>;</return>
}</block></function>

<function><type><name pos:line="107" pos:column="1">bool</name></type> <name><name pos:line="107" pos:column="6">XmlMatchedTagsHighlighter</name><op:operator pos:line="107" pos:column="31">::</op:operator><name pos:line="107" pos:column="33">getMatchedTagPos</name></name><parameter_list pos:line="107" pos:column="49">(<param><decl><type><name pos:line="107" pos:column="50">int</name></type> <name pos:line="107" pos:column="54">searchStart</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="67">int</name></type> <name pos:line="107" pos:column="71">searchEnd</name></decl></param>, <param><decl><type><specifier pos:line="107" pos:column="82">const</specifier> <name pos:line="107" pos:column="88">char</name> <type:modifier pos:line="107" pos:column="93">*</type:modifier></type><name pos:line="107" pos:column="94">tag2find</name></decl></param>, <param><decl><type><specifier pos:line="107" pos:column="104">const</specifier> <name pos:line="107" pos:column="110">char</name> <type:modifier pos:line="107" pos:column="115">*</type:modifier></type><name pos:line="107" pos:column="116">oppositeTag2find</name></decl></param>, <param><decl><type><name><name pos:line="107" pos:column="134">vector</name><argument_list pos:line="107" pos:column="140">&lt;<argument><expr><name pos:line="107" pos:column="141">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="107" pos:column="146">oppositeTagFound</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="164">XmlMatchedTagsPos</name> <type:modifier pos:line="107" pos:column="182">&amp;</type:modifier></type> <name pos:line="107" pos:column="184">tagsPos</name></decl></param>)</parameter_list>
<block pos:line="108" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="109" pos:column="9">const</specifier> <name pos:line="109" pos:column="15">bool</name></type> <name pos:line="109" pos:column="20">search2Left</name> <init pos:line="109" pos:column="32">= <expr><lit:literal type="boolean" pos:line="109" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="110" pos:column="9">const</specifier> <name pos:line="110" pos:column="15">bool</name></type> <name pos:line="110" pos:column="20">search2Right</name> <init pos:line="110" pos:column="33">= <expr><lit:literal type="boolean" pos:line="110" pos:column="35">true</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="112" pos:column="9">bool</name></type> <name pos:line="112" pos:column="14">direction</name> <init pos:line="112" pos:column="24">= <expr><name pos:line="112" pos:column="26">searchEnd</name> <op:operator pos:line="112" pos:column="36">&gt;</op:operator> <name pos:line="112" pos:column="38">searchStart</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="114" pos:column="9">pair</name><argument_list pos:line="114" pos:column="13">&lt;<argument><expr><name pos:line="114" pos:column="14">int</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="19">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="114" pos:column="24">foundPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="115" pos:column="9">int</name></type> <name pos:line="115" pos:column="13">ltPosOnR</name> <init pos:line="115" pos:column="22">= <expr><call><name pos:line="115" pos:column="24">getFirstTokenPosFrom</name><argument_list pos:line="115" pos:column="44">(<argument><expr><name pos:line="115" pos:column="45">searchStart</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="58">searchEnd</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="69">tag2find</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="79">foundPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><name pos:line="116" pos:column="13">ltPosOnR</name> <op:operator pos:line="116" pos:column="22">==</op:operator> <op:operator pos:line="116" pos:column="25">-</op:operator><lit:literal type="number" pos:line="116" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="116" pos:column="28">
		<return pos:line="117" pos:column="17">return <expr><lit:literal type="boolean" pos:line="117" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<comment type="line" pos:line="119" pos:column="9">// if the tag is found in non html zone, we skip it</comment>
	<decl_stmt><decl><type><specifier pos:line="120" pos:column="9">const</specifier> <name pos:line="120" pos:column="15">NppGUI</name> <type:modifier pos:line="120" pos:column="22">&amp;</type:modifier></type> <name pos:line="120" pos:column="24">nppGUI</name> <init pos:line="120" pos:column="31">= <expr><op:operator pos:line="120" pos:column="33">(</op:operator><call><name><name pos:line="120" pos:column="34">NppParameters</name><op:operator pos:line="120" pos:column="47">::</op:operator><name pos:line="120" pos:column="49">getInstance</name></name><argument_list pos:line="120" pos:column="60">()</argument_list></call><op:operator pos:line="120" pos:column="62">)</op:operator><op:operator pos:line="120" pos:column="63">-&gt;</op:operator><call><name pos:line="120" pos:column="65">getNppGUI</name><argument_list pos:line="120" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="121" pos:column="9">int</name></type> <name pos:line="121" pos:column="13">idStyle</name> <init pos:line="121" pos:column="21">= <expr><call><name><name pos:line="121" pos:column="23">_pEditView</name><op:operator pos:line="121" pos:column="33">-&gt;</op:operator><name pos:line="121" pos:column="35">execute</name></name><argument_list pos:line="121" pos:column="42">(<argument><expr><name pos:line="121" pos:column="43">SCI_GETSTYLEAT</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="59">ltPosOnR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><op:operator pos:line="122" pos:column="13">!</op:operator><name><name pos:line="122" pos:column="14">nppGUI</name><op:operator pos:line="122" pos:column="20">.</op:operator><name pos:line="122" pos:column="21">_enableHiliteNonHTMLZone</name></name> <op:operator pos:line="122" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="122" pos:column="49">(</op:operator><name pos:line="122" pos:column="50">idStyle</name> <op:operator pos:line="122" pos:column="58">&gt;=</op:operator> <name pos:line="122" pos:column="61">SCE_HJ_START</name> <op:operator pos:line="122" pos:column="74">||</op:operator> <name pos:line="122" pos:column="77">idStyle</name> <op:operator pos:line="122" pos:column="85">==</op:operator> <name pos:line="122" pos:column="88">SCE_H_COMMENT</name><op:operator pos:line="122" pos:column="101">)</op:operator></expr>)</condition><then pos:line="122" pos:column="103">
	<block pos:line="123" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="124" pos:column="17">int</name></type> <name pos:line="124" pos:column="21">start</name> <init pos:line="124" pos:column="27">= <expr><op:operator pos:line="124" pos:column="29">(</op:operator><name pos:line="124" pos:column="30">direction</name> <op:operator pos:line="124" pos:column="40">==</op:operator> <name pos:line="124" pos:column="43">search2Left</name><op:operator pos:line="124" pos:column="54">)</op:operator><op:operator pos:line="124" pos:column="55">?</op:operator><name><name pos:line="124" pos:column="56">foundPos</name><op:operator pos:line="124" pos:column="64">.</op:operator><name pos:line="124" pos:column="65">first</name></name><op:operator pos:line="124" pos:column="70">:</op:operator><name><name pos:line="124" pos:column="71">foundPos</name><op:operator pos:line="124" pos:column="79">.</op:operator><name pos:line="124" pos:column="80">second</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="125" pos:column="17">int</name></type> <name pos:line="125" pos:column="21">end</name> <init pos:line="125" pos:column="25">= <expr><name pos:line="125" pos:column="27">searchEnd</name></expr></init></decl>;</decl_stmt>
		<return pos:line="126" pos:column="17">return <expr><call><name pos:line="126" pos:column="24">getMatchedTagPos</name><argument_list pos:line="126" pos:column="40">(<argument><expr><name pos:line="126" pos:column="41">start</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="48">end</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="53">tag2find</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="63">oppositeTag2find</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="81">oppositeTagFound</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="99">tagsPos</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="129" pos:column="9">TagCateg</name></type> <name pos:line="129" pos:column="18">tc</name> <init pos:line="129" pos:column="21">= <expr><name pos:line="129" pos:column="23">outOfTag</name></expr></init></decl>;</decl_stmt>
	<if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name pos:line="130" pos:column="13">direction</name> <op:operator pos:line="130" pos:column="23">==</op:operator> <name pos:line="130" pos:column="26">search2Left</name></expr>)</condition><then pos:line="130" pos:column="38">
	<block pos:line="131" pos:column="9">{
		<expr_stmt><expr><name pos:line="132" pos:column="17">tc</name> <op:operator pos:line="132" pos:column="20">=</op:operator> <call><name pos:line="132" pos:column="22">getTagCategory</name><argument_list pos:line="132" pos:column="36">(<argument><expr><name pos:line="132" pos:column="37">tagsPos</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="46">ltPosOnR</name><op:operator pos:line="132" pos:column="54">+</op:operator><lit:literal type="number" pos:line="132" pos:column="55">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><name pos:line="134" pos:column="21">tc</name> <op:operator pos:line="134" pos:column="24">!=</op:operator> <name pos:line="134" pos:column="27">tagOpen</name> <op:operator pos:line="134" pos:column="35">&amp;&amp;</op:operator> <name pos:line="134" pos:column="38">tc</name> <op:operator pos:line="134" pos:column="41">!=</op:operator> <name pos:line="134" pos:column="44">inSingleTag</name></expr>)</condition><then pos:line="134" pos:column="56">
 			<return pos:line="135" pos:column="25">return <expr><lit:literal type="boolean" pos:line="135" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><name pos:line="136" pos:column="21">tc</name> <op:operator pos:line="136" pos:column="24">==</op:operator> <name pos:line="136" pos:column="27">inSingleTag</name></expr>)</condition><then pos:line="136" pos:column="39">
		<block pos:line="137" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="138" pos:column="25">int</name></type> <name pos:line="138" pos:column="29">start</name> <init pos:line="138" pos:column="35">= <expr><name><name pos:line="138" pos:column="37">foundPos</name><op:operator pos:line="138" pos:column="45">.</op:operator><name pos:line="138" pos:column="46">first</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="139" pos:column="25">int</name></type> <name pos:line="139" pos:column="29">end</name> <init pos:line="139" pos:column="33">= <expr><name pos:line="139" pos:column="35">searchEnd</name></expr></init></decl>;</decl_stmt>
			<return pos:line="140" pos:column="25">return <expr><call><name pos:line="140" pos:column="32">getMatchedTagPos</name><argument_list pos:line="140" pos:column="48">(<argument><expr><name pos:line="140" pos:column="49">start</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="56">end</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="61">tag2find</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="71">oppositeTag2find</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="89">oppositeTagFound</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="107">tagsPos</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
	}</block></then></if>

	<decl_stmt><decl><type><name><name pos:line="144" pos:column="9">pair</name><argument_list pos:line="144" pos:column="13">&lt;<argument><expr><name pos:line="144" pos:column="14">int</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="19">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="144" pos:column="24">oppositeTagPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="145" pos:column="9">int</name></type> <name pos:line="145" pos:column="13">s</name> <init pos:line="145" pos:column="15">= <expr><name><name pos:line="145" pos:column="17">foundPos</name><op:operator pos:line="145" pos:column="25">.</op:operator><name pos:line="145" pos:column="26">first</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="146" pos:column="9">int</name></type> <name pos:line="146" pos:column="13">e</name> <init pos:line="146" pos:column="15">= <expr><name><name pos:line="146" pos:column="17">tagsPos</name><op:operator pos:line="146" pos:column="24">.</op:operator><name pos:line="146" pos:column="25">tagOpenEnd</name></name></expr></init></decl>;</decl_stmt>
	<if pos:line="147" pos:column="9">if <condition pos:line="147" pos:column="12">(<expr><name pos:line="147" pos:column="13">direction</name> <op:operator pos:line="147" pos:column="23">==</op:operator> <name pos:line="147" pos:column="26">search2Left</name></expr>)</condition><then pos:line="147" pos:column="38">
	<block pos:line="148" pos:column="9">{
		<expr_stmt><expr><name pos:line="149" pos:column="17">s</name> <op:operator pos:line="149" pos:column="19">=</op:operator> <name><name pos:line="149" pos:column="21">foundPos</name><op:operator pos:line="149" pos:column="29">.</op:operator><name pos:line="149" pos:column="30">second</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="150" pos:column="17">e</name> <op:operator pos:line="150" pos:column="19">=</op:operator> <name><name pos:line="150" pos:column="21">tagsPos</name><op:operator pos:line="150" pos:column="28">.</op:operator><name pos:line="150" pos:column="29">tagCloseStart</name></name></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="153" pos:column="9">int</name></type> <name pos:line="153" pos:column="13">ltTag</name> <init pos:line="153" pos:column="19">= <expr><call><name pos:line="153" pos:column="21">getFirstTokenPosFrom</name><argument_list pos:line="153" pos:column="41">(<argument><expr><name pos:line="153" pos:column="42">s</name></expr></argument>, <argument><expr><name pos:line="153" pos:column="45">e</name></expr></argument>, <argument><expr><name pos:line="153" pos:column="48">oppositeTag2find</name></expr></argument>, <argument><expr><name pos:line="153" pos:column="66">oppositeTagPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="155" pos:column="9">if <condition pos:line="155" pos:column="12">(<expr><name pos:line="155" pos:column="13">ltTag</name> <op:operator pos:line="155" pos:column="19">==</op:operator> <op:operator pos:line="155" pos:column="22">-</op:operator><lit:literal type="number" pos:line="155" pos:column="23">1</lit:literal></expr>)</condition><then pos:line="155" pos:column="25">
	<block pos:line="156" pos:column="9">{
		<if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><name pos:line="157" pos:column="21">direction</name> <op:operator pos:line="157" pos:column="31">==</op:operator> <name pos:line="157" pos:column="34">search2Left</name></expr>)</condition><then pos:line="157" pos:column="46">
		<block pos:line="158" pos:column="17">{
			<return pos:line="159" pos:column="25">return <expr><lit:literal type="boolean" pos:line="159" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then>
		<else pos:line="161" pos:column="17">else
		<block pos:line="162" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="163" pos:column="25">tagsPos</name><op:operator pos:line="163" pos:column="32">.</op:operator><name pos:line="163" pos:column="33">tagCloseStart</name></name> <op:operator pos:line="163" pos:column="47">=</op:operator> <name><name pos:line="163" pos:column="49">foundPos</name><op:operator pos:line="163" pos:column="57">.</op:operator><name pos:line="163" pos:column="58">first</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="164" pos:column="25">tagsPos</name><op:operator pos:line="164" pos:column="32">.</op:operator><name pos:line="164" pos:column="33">tagCloseEnd</name></name> <op:operator pos:line="164" pos:column="45">=</op:operator> <name><name pos:line="164" pos:column="47">foundPos</name><op:operator pos:line="164" pos:column="55">.</op:operator><name pos:line="164" pos:column="56">second</name></name></expr>;</expr_stmt>
			<return pos:line="165" pos:column="25">return <expr><lit:literal type="boolean" pos:line="165" pos:column="32">true</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></then>
	<else pos:line="168" pos:column="9">else 
	<block pos:line="169" pos:column="9">{
		<comment type="line" pos:line="170" pos:column="17">// RegExpr is "&lt;tagName[ 	&gt;]", found tag could be a openTag or singleTag</comment>
		<comment type="line" pos:line="171" pos:column="17">// so we should make sure if it's a singleTag</comment>
		<decl_stmt><decl><type><name pos:line="172" pos:column="17">XmlMatchedTagsPos</name></type> <name pos:line="172" pos:column="35">pos</name></decl>;</decl_stmt>
		<if pos:line="173" pos:column="17">if <condition pos:line="173" pos:column="20">(<expr><name pos:line="173" pos:column="21">direction</name> <op:operator pos:line="173" pos:column="31">==</op:operator> <name pos:line="173" pos:column="34">search2Right</name> <op:operator pos:line="173" pos:column="47">&amp;&amp;</op:operator> <call><name pos:line="173" pos:column="50">getTagCategory</name><argument_list pos:line="173" pos:column="64">(<argument><expr><name pos:line="173" pos:column="65">pos</name></expr></argument>,<argument><expr><name pos:line="173" pos:column="69">ltTag</name><op:operator pos:line="173" pos:column="74">+</op:operator><lit:literal type="number" pos:line="173" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="173" pos:column="78">==</op:operator> <name pos:line="173" pos:column="81">inSingleTag</name></expr>)</condition><then pos:line="173" pos:column="93">
		<block pos:line="174" pos:column="17">{
			<for pos:line="175" pos:column="25">for(<init pos:line="175" pos:column="29">;</init><condition pos:line="175" pos:column="30">;</condition><incr/>)
			<block pos:line="176" pos:column="25">{
				<expr_stmt><expr><name pos:line="177" pos:column="33">ltTag</name> <op:operator pos:line="177" pos:column="39">=</op:operator> <call><name pos:line="177" pos:column="41">getFirstTokenPosFrom</name><argument_list pos:line="177" pos:column="61">(<argument><expr><name pos:line="177" pos:column="62">ltTag</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="69">e</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="72">oppositeTag2find</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="90">oppositeTagPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<if pos:line="179" pos:column="33">if <condition pos:line="179" pos:column="36">(<expr><name pos:line="179" pos:column="37">ltTag</name> <op:operator pos:line="179" pos:column="43">==</op:operator> <op:operator pos:line="179" pos:column="46">-</op:operator><lit:literal type="number" pos:line="179" pos:column="47">1</lit:literal></expr>)</condition><then pos:line="179" pos:column="49">
				<block pos:line="180" pos:column="33">{
					<expr_stmt><expr><name><name pos:line="181" pos:column="41">tagsPos</name><op:operator pos:line="181" pos:column="48">.</op:operator><name pos:line="181" pos:column="49">tagCloseStart</name></name> <op:operator pos:line="181" pos:column="63">=</op:operator> <name><name pos:line="181" pos:column="65">foundPos</name><op:operator pos:line="181" pos:column="73">.</op:operator><name pos:line="181" pos:column="74">first</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="182" pos:column="41">tagsPos</name><op:operator pos:line="182" pos:column="48">.</op:operator><name pos:line="182" pos:column="49">tagCloseEnd</name></name> <op:operator pos:line="182" pos:column="61">=</op:operator> <name><name pos:line="182" pos:column="63">foundPos</name><op:operator pos:line="182" pos:column="71">.</op:operator><name pos:line="182" pos:column="72">second</name></name></expr>;</expr_stmt>
					<return pos:line="183" pos:column="41">return <expr><lit:literal type="boolean" pos:line="183" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then>
				<else pos:line="185" pos:column="33">else 
				<block pos:line="186" pos:column="33">{
					<if pos:line="187" pos:column="41">if <condition pos:line="187" pos:column="44">(<expr><call><name pos:line="187" pos:column="45">getTagCategory</name><argument_list pos:line="187" pos:column="59">(<argument><expr><name pos:line="187" pos:column="60">pos</name></expr></argument>,<argument><expr><name pos:line="187" pos:column="64">ltTag</name><op:operator pos:line="187" pos:column="69">+</op:operator><lit:literal type="number" pos:line="187" pos:column="70">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="187" pos:column="73">==</op:operator> <name pos:line="187" pos:column="76">inSingleTag</name></expr>)</condition><then pos:line="187" pos:column="88">
					<block pos:line="188" pos:column="41">{
						<continue pos:line="189" pos:column="49">continue;</continue>
					}</block></then></if>

					<if pos:line="192" pos:column="41">if <condition pos:line="192" pos:column="44">(<expr><op:operator pos:line="192" pos:column="45">!</op:operator><call><name pos:line="192" pos:column="46">isInList</name><argument_list pos:line="192" pos:column="54">(<argument><expr><name pos:line="192" pos:column="55">ltTag</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="62">oppositeTagFound</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="192" pos:column="80">
					<block pos:line="193" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="194" pos:column="49">oppositeTagFound</name><op:operator pos:line="194" pos:column="65">.</op:operator><name pos:line="194" pos:column="66">push_back</name></name><argument_list pos:line="194" pos:column="75">(<argument><expr><name pos:line="194" pos:column="76">ltTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break pos:line="195" pos:column="49">break;</break>
					}</block></then></if>
				}</block></else></if>
			}</block></for>
			<return pos:line="199" pos:column="25">return <expr><call><name pos:line="199" pos:column="32">getMatchedTagPos</name><argument_list pos:line="199" pos:column="48">(<argument><expr><name><name pos:line="199" pos:column="49">foundPos</name><op:operator pos:line="199" pos:column="57">.</op:operator><name pos:line="199" pos:column="58">second</name></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="66">searchEnd</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="77">tag2find</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="87">oppositeTag2find</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="105">oppositeTagFound</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="123">tagsPos</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>


		<if pos:line="203" pos:column="17">if <condition pos:line="203" pos:column="20">(<expr><call><name pos:line="203" pos:column="21">isInList</name><argument_list pos:line="203" pos:column="29">(<argument><expr><name pos:line="203" pos:column="30">ltTag</name></expr></argument>, <argument><expr><name pos:line="203" pos:column="37">oppositeTagFound</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="203" pos:column="55">
		<block pos:line="204" pos:column="17">{
			<for pos:line="205" pos:column="25">for(<init pos:line="205" pos:column="29">;</init><condition pos:line="205" pos:column="30">;</condition><incr/>)
			<block pos:line="206" pos:column="25">{
				<expr_stmt><expr><name pos:line="207" pos:column="33">ltTag</name> <op:operator pos:line="207" pos:column="39">=</op:operator> <call><name pos:line="207" pos:column="41">getFirstTokenPosFrom</name><argument_list pos:line="207" pos:column="61">(<argument><expr><name pos:line="207" pos:column="62">ltTag</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="69">e</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="72">oppositeTag2find</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="90">oppositeTagPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="208" pos:column="33">if <condition pos:line="208" pos:column="36">(<expr><name pos:line="208" pos:column="37">ltTag</name> <op:operator pos:line="208" pos:column="43">==</op:operator> <op:operator pos:line="208" pos:column="46">-</op:operator><lit:literal type="number" pos:line="208" pos:column="47">1</lit:literal></expr>)</condition><then pos:line="208" pos:column="49">
				<block pos:line="209" pos:column="33">{
					<if pos:line="210" pos:column="41">if <condition pos:line="210" pos:column="44">(<expr><name pos:line="210" pos:column="45">direction</name> <op:operator pos:line="210" pos:column="55">==</op:operator> <name pos:line="210" pos:column="58">search2Left</name></expr>)</condition><then pos:line="210" pos:column="70">
					<block pos:line="211" pos:column="41">{
						<return pos:line="212" pos:column="49">return <expr><lit:literal type="boolean" pos:line="212" pos:column="56">true</lit:literal></expr>;</return>
					}</block></then>
					<else pos:line="214" pos:column="41">else
					<block pos:line="215" pos:column="41">{
						<expr_stmt><expr><name><name pos:line="216" pos:column="49">tagsPos</name><op:operator pos:line="216" pos:column="56">.</op:operator><name pos:line="216" pos:column="57">tagCloseStart</name></name> <op:operator pos:line="216" pos:column="71">=</op:operator> <name><name pos:line="216" pos:column="73">foundPos</name><op:operator pos:line="216" pos:column="81">.</op:operator><name pos:line="216" pos:column="82">first</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="217" pos:column="49">tagsPos</name><op:operator pos:line="217" pos:column="56">.</op:operator><name pos:line="217" pos:column="57">tagCloseEnd</name></name> <op:operator pos:line="217" pos:column="69">=</op:operator> <name><name pos:line="217" pos:column="71">foundPos</name><op:operator pos:line="217" pos:column="79">.</op:operator><name pos:line="217" pos:column="80">second</name></name></expr>;</expr_stmt>
					}</block></else></if>
					<return pos:line="219" pos:column="41">return <expr><lit:literal type="boolean" pos:line="219" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then>
				<else pos:line="221" pos:column="33">else <if pos:line="221" pos:column="38">if <condition pos:line="221" pos:column="41">(<expr><op:operator pos:line="221" pos:column="42">!</op:operator><call><name pos:line="221" pos:column="43">isInList</name><argument_list pos:line="221" pos:column="51">(<argument><expr><name pos:line="221" pos:column="52">ltTag</name></expr></argument>, <argument><expr><name pos:line="221" pos:column="59">oppositeTagFound</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="221" pos:column="77">
				<block pos:line="222" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="223" pos:column="41">oppositeTagFound</name><op:operator pos:line="223" pos:column="57">.</op:operator><name pos:line="223" pos:column="58">push_back</name></name><argument_list pos:line="223" pos:column="67">(<argument><expr><name pos:line="223" pos:column="68">ltTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="224" pos:column="41">break;</break>
				}</block></then>
				<else pos:line="226" pos:column="33">else
				<block pos:line="227" pos:column="33">{
					<if pos:line="228" pos:column="41">if <condition pos:line="228" pos:column="44">(<expr><name pos:line="228" pos:column="45">direction</name> <op:operator pos:line="228" pos:column="55">==</op:operator> <name pos:line="228" pos:column="58">search2Left</name></expr>)</condition><then pos:line="228" pos:column="70">
					<block pos:line="229" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="230" pos:column="49">XmlMatchedTagsPos</name></type> <name pos:line="230" pos:column="67">tmpTagsPos</name></decl>;</decl_stmt>
						<expr_stmt><expr><call><name pos:line="231" pos:column="49">getTagCategory</name><argument_list pos:line="231" pos:column="63">(<argument><expr><name pos:line="231" pos:column="64">tmpTagsPos</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="76">ltTag</name><op:operator pos:line="231" pos:column="81">+</op:operator><lit:literal type="number" pos:line="231" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="232" pos:column="49">ltTag</name> <op:operator pos:line="232" pos:column="55">=</op:operator> <name><name pos:line="232" pos:column="57">tmpTagsPos</name><op:operator pos:line="232" pos:column="67">.</op:operator><name pos:line="232" pos:column="68">tagCloseEnd</name></name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if></else></if>
			}</block></for>
		}</block></then>
		<else pos:line="237" pos:column="17">else
		<block pos:line="238" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="239" pos:column="25">oppositeTagFound</name><op:operator pos:line="239" pos:column="41">.</op:operator><name pos:line="239" pos:column="42">push_back</name></name><argument_list pos:line="239" pos:column="51">(<argument><expr><name pos:line="239" pos:column="52">ltTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></else></if>
	<decl_stmt><decl><type><name pos:line="242" pos:column="9">int</name></type> <name pos:line="242" pos:column="13">start</name></decl><op:operator pos:line="242" pos:column="18">,</op:operator> <decl><type ref="prev"/><name pos:line="242" pos:column="20">end</name></decl>;</decl_stmt>
	<if pos:line="243" pos:column="9">if <condition pos:line="243" pos:column="12">(<expr><name pos:line="243" pos:column="13">direction</name> <op:operator pos:line="243" pos:column="23">==</op:operator> <name pos:line="243" pos:column="26">search2Left</name></expr>)</condition><then pos:line="243" pos:column="38">
	<block pos:line="244" pos:column="9">{
		<expr_stmt><expr><name pos:line="245" pos:column="17">start</name> <op:operator pos:line="245" pos:column="23">=</op:operator> <name><name pos:line="245" pos:column="25">foundPos</name><op:operator pos:line="245" pos:column="33">.</op:operator><name pos:line="245" pos:column="34">first</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="246" pos:column="17">end</name> <op:operator pos:line="246" pos:column="21">=</op:operator> <name pos:line="246" pos:column="23">searchEnd</name></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="248" pos:column="9">else
	<block pos:line="249" pos:column="9">{
		<expr_stmt><expr><name pos:line="250" pos:column="17">start</name> <op:operator pos:line="250" pos:column="23">=</op:operator> <name><name pos:line="250" pos:column="25">foundPos</name><op:operator pos:line="250" pos:column="33">.</op:operator><name pos:line="250" pos:column="34">second</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="251" pos:column="17">end</name> <op:operator pos:line="251" pos:column="21">=</op:operator> <name pos:line="251" pos:column="23">searchEnd</name></expr>;</expr_stmt>
	}</block></else></if>

	<return pos:line="254" pos:column="9">return <expr><call><name pos:line="254" pos:column="16">getMatchedTagPos</name><argument_list pos:line="254" pos:column="32">(<argument><expr><name pos:line="254" pos:column="33">start</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="40">end</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="45">tag2find</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="55">oppositeTag2find</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="73">oppositeTagFound</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="91">tagsPos</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="258" pos:column="1">bool</name></type> <name><name pos:line="258" pos:column="6">XmlMatchedTagsHighlighter</name><op:operator pos:line="258" pos:column="31">::</op:operator><name pos:line="258" pos:column="33">getXmlMatchedTagsPos</name></name><parameter_list pos:line="258" pos:column="53">(<param><decl><type><name pos:line="258" pos:column="54">XmlMatchedTagsPos</name> <type:modifier pos:line="258" pos:column="72">&amp;</type:modifier></type> <name pos:line="258" pos:column="74">tagsPos</name></decl></param>)</parameter_list>
<block pos:line="259" pos:column="1">{
	<comment type="line" pos:line="260" pos:column="9">// get word where caret is on</comment>
	<decl_stmt><decl><type><name pos:line="261" pos:column="9">int</name></type> <name pos:line="261" pos:column="13">caretPos</name> <init pos:line="261" pos:column="22">= <expr><call><name><name pos:line="261" pos:column="24">_pEditView</name><op:operator pos:line="261" pos:column="34">-&gt;</op:operator><name pos:line="261" pos:column="36">execute</name></name><argument_list pos:line="261" pos:column="43">(<argument><expr><name pos:line="261" pos:column="44">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<comment type="line" pos:line="263" pos:column="9">// if the tag is found in non html zone (include comment zone), then quit</comment>
	<decl_stmt><decl><type><specifier pos:line="264" pos:column="9">const</specifier> <name pos:line="264" pos:column="15">NppGUI</name> <type:modifier pos:line="264" pos:column="22">&amp;</type:modifier></type> <name pos:line="264" pos:column="24">nppGUI</name> <init pos:line="264" pos:column="31">= <expr><op:operator pos:line="264" pos:column="33">(</op:operator><call><name><name pos:line="264" pos:column="34">NppParameters</name><op:operator pos:line="264" pos:column="47">::</op:operator><name pos:line="264" pos:column="49">getInstance</name></name><argument_list pos:line="264" pos:column="60">()</argument_list></call><op:operator pos:line="264" pos:column="62">)</op:operator><op:operator pos:line="264" pos:column="63">-&gt;</op:operator><call><name pos:line="264" pos:column="65">getNppGUI</name><argument_list pos:line="264" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="265" pos:column="9">int</name></type> <name pos:line="265" pos:column="13">idStyle</name> <init pos:line="265" pos:column="21">= <expr><call><name><name pos:line="265" pos:column="23">_pEditView</name><op:operator pos:line="265" pos:column="33">-&gt;</op:operator><name pos:line="265" pos:column="35">execute</name></name><argument_list pos:line="265" pos:column="42">(<argument><expr><name pos:line="265" pos:column="43">SCI_GETSTYLEAT</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="59">caretPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="266" pos:column="9">if <condition pos:line="266" pos:column="12">(<expr><op:operator pos:line="266" pos:column="13">!</op:operator><name><name pos:line="266" pos:column="14">nppGUI</name><op:operator pos:line="266" pos:column="20">.</op:operator><name pos:line="266" pos:column="21">_enableHiliteNonHTMLZone</name></name> <op:operator pos:line="266" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="266" pos:column="49">(</op:operator><name pos:line="266" pos:column="50">idStyle</name> <op:operator pos:line="266" pos:column="58">&gt;=</op:operator> <name pos:line="266" pos:column="61">SCE_HJ_START</name> <op:operator pos:line="266" pos:column="74">||</op:operator> <name pos:line="266" pos:column="77">idStyle</name> <op:operator pos:line="266" pos:column="85">==</op:operator> <name pos:line="266" pos:column="88">SCE_H_COMMENT</name><op:operator pos:line="266" pos:column="101">)</op:operator></expr>)</condition><then pos:line="266" pos:column="103">
		<return pos:line="267" pos:column="17">return <expr><lit:literal type="boolean" pos:line="267" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="269" pos:column="9">int</name></type> <name pos:line="269" pos:column="13">docLen</name> <init pos:line="269" pos:column="20">= <expr><call><name><name pos:line="269" pos:column="22">_pEditView</name><op:operator pos:line="269" pos:column="32">-&gt;</op:operator><name pos:line="269" pos:column="34">getCurrentDocLen</name></name><argument_list pos:line="269" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="271" pos:column="9">// determinate the nature of current word : tagOpen, tagClose or outOfTag</comment>
	<decl_stmt><decl><type><name pos:line="272" pos:column="9">TagCateg</name></type> <name pos:line="272" pos:column="18">tagCateg</name> <init pos:line="272" pos:column="27">= <expr><call><name pos:line="272" pos:column="29">getTagCategory</name><argument_list pos:line="272" pos:column="43">(<argument><expr><name pos:line="272" pos:column="44">tagsPos</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="53">caretPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="274" pos:column="9">static</specifier> <specifier pos:line="274" pos:column="16">const</specifier> <name pos:line="274" pos:column="22">char</name></type> <name><name pos:line="274" pos:column="27">tagNameChars</name><index pos:line="274" pos:column="39">[]</index></name> <init pos:line="274" pos:column="42">= <expr><lit:literal type="string" pos:line="274" pos:column="44">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_:"</lit:literal></expr></init></decl>;</decl_stmt>

	<switch pos:line="276" pos:column="9">switch <condition pos:line="276" pos:column="16">(<expr><name pos:line="276" pos:column="17">tagCateg</name></expr>)</condition>
	<block pos:line="277" pos:column="9">{
		<case pos:line="278" pos:column="17">case <expr><name pos:line="278" pos:column="22">tagOpen</name></expr> : <comment type="line" pos:line="278" pos:column="32">// if tagOpen search right</comment>
		<block pos:line="279" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="280" pos:column="25">_pEditView</name><op:operator pos:line="280" pos:column="35">-&gt;</op:operator><name pos:line="280" pos:column="37">execute</name></name><argument_list pos:line="280" pos:column="44">(<argument><expr><name pos:line="280" pos:column="45">SCI_SETWORDCHARS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="280" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="280" pos:column="66">(</op:operator><name pos:line="280" pos:column="67">LPARAM</name><op:operator pos:line="280" pos:column="73">)</op:operator><name pos:line="280" pos:column="74">tagNameChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="281" pos:column="25">int</name></type> <name pos:line="281" pos:column="29">startPos</name> <init pos:line="281" pos:column="38">= <expr><call><name><name pos:line="281" pos:column="40">_pEditView</name><op:operator pos:line="281" pos:column="50">-&gt;</op:operator><name pos:line="281" pos:column="52">execute</name></name><argument_list pos:line="281" pos:column="59">(<argument><expr><name pos:line="281" pos:column="60">SCI_WORDSTARTPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="281" pos:column="83">tagsPos</name><op:operator pos:line="281" pos:column="90">.</op:operator><name pos:line="281" pos:column="91">tagOpenStart</name></name><op:operator pos:line="281" pos:column="103">+</op:operator><lit:literal type="number" pos:line="281" pos:column="104">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="281" pos:column="107">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="282" pos:column="25">int</name></type> <name pos:line="282" pos:column="29">endPos</name> <init pos:line="282" pos:column="36">= <expr><call><name><name pos:line="282" pos:column="38">_pEditView</name><op:operator pos:line="282" pos:column="48">-&gt;</op:operator><name pos:line="282" pos:column="50">execute</name></name><argument_list pos:line="282" pos:column="57">(<argument><expr><name pos:line="282" pos:column="58">SCI_WORDENDPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="282" pos:column="79">tagsPos</name><op:operator pos:line="282" pos:column="86">.</op:operator><name pos:line="282" pos:column="87">tagOpenStart</name></name><op:operator pos:line="282" pos:column="99">+</op:operator><lit:literal type="number" pos:line="282" pos:column="100">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="282" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="283" pos:column="25">tagsPos</name><op:operator pos:line="283" pos:column="32">.</op:operator><name pos:line="283" pos:column="33">tagNameEnd</name></name> <op:operator pos:line="283" pos:column="44">=</op:operator> <name pos:line="283" pos:column="46">endPos</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="285" pos:column="25">_pEditView</name><op:operator pos:line="285" pos:column="35">-&gt;</op:operator><name pos:line="285" pos:column="37">execute</name></name><argument_list pos:line="285" pos:column="44">(<argument><expr><name pos:line="285" pos:column="45">SCI_SETCHARSDEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="286" pos:column="25">char</name> <type:modifier pos:line="286" pos:column="30">*</type:modifier></type> <name pos:line="286" pos:column="32">tagName</name> <init pos:line="286" pos:column="40">= <expr><op:operator pos:line="286" pos:column="42">new</op:operator> <name><name pos:line="286" pos:column="46">char</name><index pos:line="286" pos:column="50">[<expr><name pos:line="286" pos:column="51">endPos</name><op:operator pos:line="286" pos:column="57">-</op:operator><name pos:line="286" pos:column="58">startPos</name><op:operator pos:line="286" pos:column="66">+</op:operator><lit:literal type="number" pos:line="286" pos:column="67">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="288" pos:column="25">_pEditView</name><op:operator pos:line="288" pos:column="35">-&gt;</op:operator><name pos:line="288" pos:column="37">getText</name></name><argument_list pos:line="288" pos:column="44">(<argument><expr><name pos:line="288" pos:column="45">tagName</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="54">startPos</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="64">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name><name pos:line="290" pos:column="25">basic_string</name><argument_list pos:line="290" pos:column="37">&lt;<argument><expr><name pos:line="290" pos:column="38">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="290" pos:column="44">closeTag</name> <init pos:line="290" pos:column="53">= <expr><lit:literal type="string" pos:line="290" pos:column="55">"&lt;/"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="291" pos:column="25">closeTag</name> <op:operator pos:line="291" pos:column="34">+=</op:operator> <name pos:line="291" pos:column="37">tagName</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="292" pos:column="25">closeTag</name> <op:operator pos:line="292" pos:column="34">+=</op:operator> <lit:literal type="string" pos:line="292" pos:column="37">"[ 	]*&gt;"</lit:literal></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name><name pos:line="294" pos:column="25">basic_string</name><argument_list pos:line="294" pos:column="37">&lt;<argument><expr><name pos:line="294" pos:column="38">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="294" pos:column="44">openTag</name> <init pos:line="294" pos:column="52">= <expr><lit:literal type="string" pos:line="294" pos:column="54">"&lt;"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="295" pos:column="25">openTag</name> <op:operator pos:line="295" pos:column="33">+=</op:operator> <name pos:line="295" pos:column="36">tagName</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="296" pos:column="25">openTag</name> <op:operator pos:line="296" pos:column="33">+=</op:operator> <lit:literal type="string" pos:line="296" pos:column="36">"[ 	&gt;]"</lit:literal></expr>;</expr_stmt>

			<expr_stmt><expr><op:operator pos:line="298" pos:column="25">delete</op:operator> <index pos:line="298" pos:column="32">[]</index> <name pos:line="298" pos:column="35">tagName</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name><name pos:line="300" pos:column="25">vector</name><argument_list pos:line="300" pos:column="31">&lt;<argument><expr><name pos:line="300" pos:column="32">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="300" pos:column="37">passedTagList</name></decl>;</decl_stmt>
			<return pos:line="301" pos:column="25">return <expr><call><name pos:line="301" pos:column="32">getMatchedTagPos</name><argument_list pos:line="301" pos:column="48">(<argument><expr><name><name pos:line="301" pos:column="49">tagsPos</name><op:operator pos:line="301" pos:column="56">.</op:operator><name pos:line="301" pos:column="57">tagOpenEnd</name></name></expr></argument>, <argument><expr><name pos:line="301" pos:column="69">docLen</name></expr></argument>, <argument><expr><call><name><name pos:line="301" pos:column="77">closeTag</name><op:operator pos:line="301" pos:column="85">.</op:operator><name pos:line="301" pos:column="86">c_str</name></name><argument_list pos:line="301" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="301" pos:column="95">openTag</name><op:operator pos:line="301" pos:column="102">.</op:operator><name pos:line="301" pos:column="103">c_str</name></name><argument_list pos:line="301" pos:column="108">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="301" pos:column="112">passedTagList</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="127">tagsPos</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block>

		</case><case pos:line="304" pos:column="17">case <expr><name pos:line="304" pos:column="22">tagClose</name></expr> : <comment type="line" pos:line="304" pos:column="33">// if tagClose search left</comment>
		<block pos:line="305" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="306" pos:column="25">_pEditView</name><op:operator pos:line="306" pos:column="35">-&gt;</op:operator><name pos:line="306" pos:column="37">execute</name></name><argument_list pos:line="306" pos:column="44">(<argument><expr><name pos:line="306" pos:column="45">SCI_SETWORDCHARS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="306" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="306" pos:column="66">(</op:operator><name pos:line="306" pos:column="67">LPARAM</name><op:operator pos:line="306" pos:column="73">)</op:operator><name pos:line="306" pos:column="74">tagNameChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="307" pos:column="25">int</name></type> <name pos:line="307" pos:column="29">startPos</name> <init pos:line="307" pos:column="38">= <expr><call><name><name pos:line="307" pos:column="40">_pEditView</name><op:operator pos:line="307" pos:column="50">-&gt;</op:operator><name pos:line="307" pos:column="52">execute</name></name><argument_list pos:line="307" pos:column="59">(<argument><expr><name pos:line="307" pos:column="60">SCI_WORDSTARTPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="307" pos:column="83">tagsPos</name><op:operator pos:line="307" pos:column="90">.</op:operator><name pos:line="307" pos:column="91">tagCloseStart</name></name><op:operator pos:line="307" pos:column="104">+</op:operator><lit:literal type="number" pos:line="307" pos:column="105">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="307" pos:column="108">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="308" pos:column="25">int</name></type> <name pos:line="308" pos:column="29">endPos</name> <init pos:line="308" pos:column="36">= <expr><call><name><name pos:line="308" pos:column="38">_pEditView</name><op:operator pos:line="308" pos:column="48">-&gt;</op:operator><name pos:line="308" pos:column="50">execute</name></name><argument_list pos:line="308" pos:column="57">(<argument><expr><name pos:line="308" pos:column="58">SCI_WORDENDPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="308" pos:column="79">tagsPos</name><op:operator pos:line="308" pos:column="86">.</op:operator><name pos:line="308" pos:column="87">tagCloseStart</name></name><op:operator pos:line="308" pos:column="100">+</op:operator><lit:literal type="number" pos:line="308" pos:column="101">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="308" pos:column="104">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name pos:line="310" pos:column="25">_pEditView</name><op:operator pos:line="310" pos:column="35">-&gt;</op:operator><name pos:line="310" pos:column="37">execute</name></name><argument_list pos:line="310" pos:column="44">(<argument><expr><name pos:line="310" pos:column="45">SCI_SETCHARSDEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="311" pos:column="25">char</name> <type:modifier pos:line="311" pos:column="30">*</type:modifier></type> <name pos:line="311" pos:column="32">tagName</name> <init pos:line="311" pos:column="40">= <expr><op:operator pos:line="311" pos:column="42">new</op:operator> <name><name pos:line="311" pos:column="46">char</name><index pos:line="311" pos:column="50">[<expr><name pos:line="311" pos:column="51">endPos</name><op:operator pos:line="311" pos:column="57">-</op:operator><name pos:line="311" pos:column="58">startPos</name><op:operator pos:line="311" pos:column="66">+</op:operator><lit:literal type="number" pos:line="311" pos:column="67">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="312" pos:column="25">_pEditView</name><op:operator pos:line="312" pos:column="35">-&gt;</op:operator><name pos:line="312" pos:column="37">getText</name></name><argument_list pos:line="312" pos:column="44">(<argument><expr><name pos:line="312" pos:column="45">tagName</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="54">startPos</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="64">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name><name pos:line="314" pos:column="25">basic_string</name><argument_list pos:line="314" pos:column="37">&lt;<argument><expr><name pos:line="314" pos:column="38">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="314" pos:column="44">openTag</name> <init pos:line="314" pos:column="52">= <expr><lit:literal type="string" pos:line="314" pos:column="54">"&lt;"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="315" pos:column="25">openTag</name> <op:operator pos:line="315" pos:column="33">+=</op:operator> <name pos:line="315" pos:column="36">tagName</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="316" pos:column="25">openTag</name> <op:operator pos:line="316" pos:column="33">+=</op:operator> <lit:literal type="string" pos:line="316" pos:column="36">"[ 	&gt;]"</lit:literal></expr>;</expr_stmt>

			<decl_stmt><decl><type><name><name pos:line="318" pos:column="25">basic_string</name><argument_list pos:line="318" pos:column="37">&lt;<argument><expr><name pos:line="318" pos:column="38">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="318" pos:column="44">closeTag</name> <init pos:line="318" pos:column="53">= <expr><lit:literal type="string" pos:line="318" pos:column="55">"&lt;/"</lit:literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="319" pos:column="25">closeTag</name> <op:operator pos:line="319" pos:column="34">+=</op:operator> <name pos:line="319" pos:column="37">tagName</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="320" pos:column="25">closeTag</name> <op:operator pos:line="320" pos:column="34">+=</op:operator> <lit:literal type="string" pos:line="320" pos:column="37">"[ 	]*&gt;"</lit:literal></expr>;</expr_stmt>
			
			<expr_stmt><expr><op:operator pos:line="322" pos:column="25">delete</op:operator> <index pos:line="322" pos:column="32">[]</index> <name pos:line="322" pos:column="35">tagName</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name><name pos:line="324" pos:column="25">vector</name><argument_list pos:line="324" pos:column="31">&lt;<argument><expr><name pos:line="324" pos:column="32">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="324" pos:column="37">passedTagList</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="325" pos:column="25">bool</name></type> <name pos:line="325" pos:column="30">isFound</name> <init pos:line="325" pos:column="38">= <expr><call><name pos:line="325" pos:column="40">getMatchedTagPos</name><argument_list pos:line="325" pos:column="56">(<argument><expr><name><name pos:line="325" pos:column="57">tagsPos</name><op:operator pos:line="325" pos:column="64">.</op:operator><name pos:line="325" pos:column="65">tagCloseStart</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="325" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="325" pos:column="83">openTag</name><op:operator pos:line="325" pos:column="90">.</op:operator><name pos:line="325" pos:column="91">c_str</name></name><argument_list pos:line="325" pos:column="96">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="325" pos:column="100">closeTag</name><op:operator pos:line="325" pos:column="108">.</op:operator><name pos:line="325" pos:column="109">c_str</name></name><argument_list pos:line="325" pos:column="114">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="325" pos:column="118">passedTagList</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="133">tagsPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="326" pos:column="25">if <condition pos:line="326" pos:column="28">(<expr><name pos:line="326" pos:column="29">isFound</name></expr>)</condition><then pos:line="326" pos:column="37">
				<expr_stmt><expr><name><name pos:line="327" pos:column="33">tagsPos</name><op:operator pos:line="327" pos:column="40">.</op:operator><name pos:line="327" pos:column="41">tagNameEnd</name></name> <op:operator pos:line="327" pos:column="52">=</op:operator> <name><name pos:line="327" pos:column="54">tagsPos</name><op:operator pos:line="327" pos:column="61">.</op:operator><name pos:line="327" pos:column="62">tagOpenStart</name></name> <op:operator pos:line="327" pos:column="75">+</op:operator> <lit:literal type="number" pos:line="327" pos:column="77">1</lit:literal> <op:operator pos:line="327" pos:column="79">+</op:operator> <op:operator pos:line="327" pos:column="81">(</op:operator><name pos:line="327" pos:column="82">endPos</name> <op:operator pos:line="327" pos:column="89">-</op:operator> <name pos:line="327" pos:column="91">startPos</name><op:operator pos:line="327" pos:column="99">)</op:operator></expr>;</expr_stmt></then></if>

			<return pos:line="329" pos:column="25">return <expr><name pos:line="329" pos:column="32">isFound</name></expr>;</return>
		}</block>

		</case><case pos:line="332" pos:column="17">case <expr><name pos:line="332" pos:column="22">inSingleTag</name></expr> : <comment type="line" pos:line="332" pos:column="36">// if in single tag</comment>
		<block pos:line="333" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="334" pos:column="25">_pEditView</name><op:operator pos:line="334" pos:column="35">-&gt;</op:operator><name pos:line="334" pos:column="37">execute</name></name><argument_list pos:line="334" pos:column="44">(<argument><expr><name pos:line="334" pos:column="45">SCI_SETWORDCHARS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="334" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="334" pos:column="66">(</op:operator><name pos:line="334" pos:column="67">LPARAM</name><op:operator pos:line="334" pos:column="73">)</op:operator><name pos:line="334" pos:column="74">tagNameChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="335" pos:column="25">int</name></type> <name pos:line="335" pos:column="29">endPos</name> <init pos:line="335" pos:column="36">= <expr><call><name><name pos:line="335" pos:column="38">_pEditView</name><op:operator pos:line="335" pos:column="48">-&gt;</op:operator><name pos:line="335" pos:column="50">execute</name></name><argument_list pos:line="335" pos:column="57">(<argument><expr><name pos:line="335" pos:column="58">SCI_WORDENDPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="335" pos:column="79">tagsPos</name><op:operator pos:line="335" pos:column="86">.</op:operator><name pos:line="335" pos:column="87">tagOpenStart</name></name><op:operator pos:line="335" pos:column="99">+</op:operator><lit:literal type="number" pos:line="335" pos:column="100">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="335" pos:column="103">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="336" pos:column="25">tagsPos</name><op:operator pos:line="336" pos:column="32">.</op:operator><name pos:line="336" pos:column="33">tagNameEnd</name></name> <op:operator pos:line="336" pos:column="44">=</op:operator> <name pos:line="336" pos:column="46">endPos</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="337" pos:column="25">_pEditView</name><op:operator pos:line="337" pos:column="35">-&gt;</op:operator><name pos:line="337" pos:column="37">execute</name></name><argument_list pos:line="337" pos:column="44">(<argument><expr><name pos:line="337" pos:column="45">SCI_SETCHARSDEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name pos:line="339" pos:column="25">tagsPos</name><op:operator pos:line="339" pos:column="32">.</op:operator><name pos:line="339" pos:column="33">tagCloseStart</name></name> <op:operator pos:line="339" pos:column="47">=</op:operator> <op:operator pos:line="339" pos:column="49">-</op:operator><lit:literal type="number" pos:line="339" pos:column="50">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="340" pos:column="25">tagsPos</name><op:operator pos:line="340" pos:column="32">.</op:operator><name pos:line="340" pos:column="33">tagCloseEnd</name></name> <op:operator pos:line="340" pos:column="45">=</op:operator> <op:operator pos:line="340" pos:column="47">-</op:operator><lit:literal type="number" pos:line="340" pos:column="48">1</lit:literal></expr>;</expr_stmt>
			<return pos:line="341" pos:column="25">return <expr><lit:literal type="boolean" pos:line="341" pos:column="32">true</lit:literal></expr>;</return>
		}</block>
		</case><default pos:line="343" pos:column="17">default: <comment type="line" pos:line="343" pos:column="26">// if outOfTag, just quit</comment>
			<return pos:line="344" pos:column="25">return <expr><lit:literal type="boolean" pos:line="344" pos:column="32">false</lit:literal></expr>;</return>
		
	</default>}</block></switch>
	<comment type="line" pos:line="347" pos:column="9">//return false;</comment>
}</block></function>

<function><type><name><name pos:line="350" pos:column="1">vector</name><argument_list pos:line="350" pos:column="7">&lt; <argument><expr><name><name pos:line="350" pos:column="9">pair</name><argument_list pos:line="350" pos:column="13">&lt;<argument><expr><name pos:line="350" pos:column="14">int</name></expr></argument>, <argument><expr><name pos:line="350" pos:column="19">int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name pos:line="350" pos:column="26">XmlMatchedTagsHighlighter</name><op:operator pos:line="350" pos:column="51">::</op:operator><name pos:line="350" pos:column="53">getAttributesPos</name></name><parameter_list pos:line="350" pos:column="69">(<param><decl><type><name pos:line="350" pos:column="70">int</name></type> <name pos:line="350" pos:column="74">start</name></decl></param>, <param><decl><type><name pos:line="350" pos:column="81">int</name></type> <name pos:line="350" pos:column="85">end</name></decl></param>)</parameter_list>
<block pos:line="351" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="352" pos:column="9">vector</name><argument_list pos:line="352" pos:column="15">&lt; <argument><expr><name><name pos:line="352" pos:column="17">pair</name><argument_list pos:line="352" pos:column="21">&lt;<argument><expr><name pos:line="352" pos:column="22">int</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="27">int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name pos:line="352" pos:column="34">attributes</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="354" pos:column="9">int</name></type> <name pos:line="354" pos:column="13">bufLen</name> <init pos:line="354" pos:column="20">= <expr><name pos:line="354" pos:column="22">end</name> <op:operator pos:line="354" pos:column="26">-</op:operator> <name pos:line="354" pos:column="28">start</name> <op:operator pos:line="354" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="354" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="355" pos:column="9">char</name> <type:modifier pos:line="355" pos:column="14">*</type:modifier></type><name pos:line="355" pos:column="15">buf</name> <init pos:line="355" pos:column="19">= <expr><op:operator pos:line="355" pos:column="21">new</op:operator> <name><name pos:line="355" pos:column="25">char</name><index pos:line="355" pos:column="29">[<expr><name pos:line="355" pos:column="30">bufLen</name><op:operator pos:line="355" pos:column="36">+</op:operator><lit:literal type="number" pos:line="355" pos:column="37">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="356" pos:column="9">_pEditView</name><op:operator pos:line="356" pos:column="19">-&gt;</op:operator><name pos:line="356" pos:column="21">getText</name></name><argument_list pos:line="356" pos:column="28">(<argument><expr><name pos:line="356" pos:column="29">buf</name></expr></argument>, <argument><expr><name pos:line="356" pos:column="34">start</name></expr></argument>, <argument><expr><name pos:line="356" pos:column="41">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<enum pos:line="358" pos:column="9">enum <block pos:line="358" pos:column="14">{\
		<decl><name pos:line="359" pos:column="17">attr_invalid</name></decl><op:operator pos:line="359" pos:column="29">,</op:operator>\
		<decl><name pos:line="360" pos:column="17">attr_key</name></decl><op:operator pos:line="360" pos:column="25">,</op:operator>\
		<decl><name pos:line="361" pos:column="17">attr_pre_assign</name></decl><op:operator pos:line="361" pos:column="32">,</op:operator>\
		<decl><name pos:line="362" pos:column="17">attr_assign</name></decl><op:operator pos:line="362" pos:column="28">,</op:operator>\
		<decl><name pos:line="363" pos:column="17">attr_string</name></decl><op:operator pos:line="363" pos:column="28">,</op:operator>\
		<decl><name pos:line="364" pos:column="17">attr_value</name></decl><op:operator pos:line="364" pos:column="27">,</op:operator>\
		<decl><name pos:line="365" pos:column="17">attr_valid</name></decl>\
	}</block> <decl><name pos:line="366" pos:column="11">state</name> <init pos:line="366" pos:column="17">= <expr><name pos:line="366" pos:column="19">attr_invalid</name></expr></init></decl>;</enum>

	<decl_stmt><decl><type><name pos:line="368" pos:column="9">int</name></type> <name pos:line="368" pos:column="13">startPos</name> <init pos:line="368" pos:column="22">= <expr><op:operator pos:line="368" pos:column="24">-</op:operator><lit:literal type="number" pos:line="368" pos:column="25">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="369" pos:column="9">int</name></type> <name pos:line="369" pos:column="13">oneMoreChar</name> <init pos:line="369" pos:column="25">= <expr><lit:literal type="number" pos:line="369" pos:column="27">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="370" pos:column="9">int</name></type> <name pos:line="370" pos:column="13">i</name> <init pos:line="370" pos:column="15">= <expr><lit:literal type="number" pos:line="370" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="371" pos:column="9">for (<init pos:line="371" pos:column="14">;</init> <condition><expr><name pos:line="371" pos:column="16">i</name> <op:operator pos:line="371" pos:column="18">&lt;</op:operator> <name pos:line="371" pos:column="20">bufLen</name></expr> ;</condition> <incr><expr><name pos:line="371" pos:column="29">i</name><op:operator pos:line="371" pos:column="30">++</op:operator></expr></incr>)
	<block pos:line="372" pos:column="9">{
		<switch pos:line="373" pos:column="17">switch <condition pos:line="373" pos:column="24">(<expr><name><name pos:line="373" pos:column="25">buf</name><index pos:line="373" pos:column="28">[<expr><name pos:line="373" pos:column="29">i</name></expr>]</index></name></expr>)</condition>
		<block pos:line="374" pos:column="17">{
			<case pos:line="375" pos:column="25">case <expr><lit:literal type="char" pos:line="375" pos:column="30">' '</lit:literal></expr>:
			</case><case pos:line="376" pos:column="25">case <expr><lit:literal type="char" pos:line="376" pos:column="30">'\t'</lit:literal></expr>:
			</case><case pos:line="377" pos:column="25">case <expr><lit:literal type="char" pos:line="377" pos:column="30">'\n'</lit:literal></expr>:
			</case><case pos:line="378" pos:column="25">case <expr><lit:literal type="char" pos:line="378" pos:column="30">'\r'</lit:literal></expr>:
			<block pos:line="379" pos:column="25">{
				<if pos:line="380" pos:column="33">if <condition pos:line="380" pos:column="36">(<expr><name pos:line="380" pos:column="37">state</name> <op:operator pos:line="380" pos:column="43">==</op:operator> <name pos:line="380" pos:column="46">attr_key</name></expr>)</condition><then pos:line="380" pos:column="55">
					<expr_stmt><expr><name pos:line="381" pos:column="41">state</name> <op:operator pos:line="381" pos:column="47">=</op:operator> <name pos:line="381" pos:column="49">attr_pre_assign</name></expr>;</expr_stmt></then>
				<else pos:line="382" pos:column="33">else <if pos:line="382" pos:column="38">if <condition pos:line="382" pos:column="41">(<expr><name pos:line="382" pos:column="42">state</name> <op:operator pos:line="382" pos:column="48">==</op:operator> <name pos:line="382" pos:column="51">attr_value</name></expr>)</condition><then pos:line="382" pos:column="62">
				<block pos:line="383" pos:column="33">{
					<expr_stmt><expr><name pos:line="384" pos:column="41">state</name> <op:operator pos:line="384" pos:column="47">=</op:operator> <name pos:line="384" pos:column="49">attr_valid</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="385" pos:column="41">oneMoreChar</name> <op:operator pos:line="385" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="385" pos:column="55">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block>
			<break pos:line="388" pos:column="25">break;</break>

			</case><case pos:line="390" pos:column="25">case <expr><lit:literal type="char" pos:line="390" pos:column="30">'='</lit:literal></expr>:
			<block pos:line="391" pos:column="25">{
				<if pos:line="392" pos:column="33">if <condition pos:line="392" pos:column="36">(<expr><name pos:line="392" pos:column="37">state</name> <op:operator pos:line="392" pos:column="43">==</op:operator> <name pos:line="392" pos:column="46">attr_key</name> <op:operator pos:line="392" pos:column="55">||</op:operator> <name pos:line="392" pos:column="58">state</name> <op:operator pos:line="392" pos:column="64">==</op:operator> <name pos:line="392" pos:column="67">attr_pre_assign</name></expr>)</condition><then pos:line="392" pos:column="83">
					<expr_stmt><expr><name pos:line="393" pos:column="41">state</name> <op:operator pos:line="393" pos:column="47">=</op:operator> <name pos:line="393" pos:column="49">attr_assign</name></expr>;</expr_stmt></then>
				<else pos:line="394" pos:column="33">else <if pos:line="394" pos:column="38">if <condition pos:line="394" pos:column="41">(<expr><name pos:line="394" pos:column="42">state</name> <op:operator pos:line="394" pos:column="48">==</op:operator> <name pos:line="394" pos:column="51">attr_assign</name> <op:operator pos:line="394" pos:column="63">||</op:operator> <name pos:line="394" pos:column="66">state</name> <op:operator pos:line="394" pos:column="72">==</op:operator> <name pos:line="394" pos:column="75">attr_value</name></expr>)</condition><then pos:line="394" pos:column="86">
					<expr_stmt><expr><name pos:line="395" pos:column="41">state</name> <op:operator pos:line="395" pos:column="47">=</op:operator> <name pos:line="395" pos:column="49">attr_invalid</name></expr>;</expr_stmt></then></if></else></if>
			}</block>
			<break pos:line="397" pos:column="25">break;</break>

			</case><case pos:line="399" pos:column="25">case <expr><lit:literal type="char" pos:line="399" pos:column="30">'"'</lit:literal></expr>:
			<block pos:line="400" pos:column="25">{
				<if pos:line="401" pos:column="33">if <condition pos:line="401" pos:column="36">(<expr><name pos:line="401" pos:column="37">state</name> <op:operator pos:line="401" pos:column="43">==</op:operator> <name pos:line="401" pos:column="46">attr_string</name></expr>)</condition><then pos:line="401" pos:column="58">
				<block pos:line="402" pos:column="33">{
					<expr_stmt><expr><name pos:line="403" pos:column="41">state</name> <op:operator pos:line="403" pos:column="47">=</op:operator> <name pos:line="403" pos:column="49">attr_valid</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="404" pos:column="41">oneMoreChar</name> <op:operator pos:line="404" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="404" pos:column="55">1</lit:literal></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="406" pos:column="33">else <if pos:line="406" pos:column="38">if <condition pos:line="406" pos:column="41">(<expr><name pos:line="406" pos:column="42">state</name> <op:operator pos:line="406" pos:column="48">==</op:operator> <name pos:line="406" pos:column="51">attr_key</name> <op:operator pos:line="406" pos:column="60">||</op:operator> <name pos:line="406" pos:column="63">state</name> <op:operator pos:line="406" pos:column="69">==</op:operator> <name pos:line="406" pos:column="72">attr_pre_assign</name> <op:operator pos:line="406" pos:column="88">||</op:operator> <name pos:line="406" pos:column="91">state</name> <op:operator pos:line="406" pos:column="97">==</op:operator> <name pos:line="406" pos:column="100">attr_value</name></expr>)</condition><then pos:line="406" pos:column="111">
					<expr_stmt><expr><name pos:line="407" pos:column="41">state</name> <op:operator pos:line="407" pos:column="47">=</op:operator> <name pos:line="407" pos:column="49">attr_invalid</name></expr>;</expr_stmt></then>
				<else pos:line="408" pos:column="33">else <if pos:line="408" pos:column="38">if <condition pos:line="408" pos:column="41">(<expr><name pos:line="408" pos:column="42">state</name> <op:operator pos:line="408" pos:column="48">==</op:operator> <name pos:line="408" pos:column="51">attr_assign</name></expr>)</condition><then pos:line="408" pos:column="63">
					<expr_stmt><expr><name pos:line="409" pos:column="41">state</name> <op:operator pos:line="409" pos:column="47">=</op:operator> <name pos:line="409" pos:column="49">attr_string</name></expr>;</expr_stmt></then></if></else></if></else></if>
			}</block>
			<break pos:line="411" pos:column="25">break;</break>

			</case><default pos:line="413" pos:column="25">default:
			<block pos:line="414" pos:column="25">{
				<if pos:line="415" pos:column="33">if <condition pos:line="415" pos:column="36">(<expr><name pos:line="415" pos:column="37">state</name> <op:operator pos:line="415" pos:column="43">==</op:operator> <name pos:line="415" pos:column="46">attr_invalid</name></expr>)</condition><then pos:line="415" pos:column="59">
				<block pos:line="416" pos:column="33">{
					<expr_stmt><expr><name pos:line="417" pos:column="41">state</name> <op:operator pos:line="417" pos:column="47">=</op:operator> <name pos:line="417" pos:column="49">attr_key</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="418" pos:column="41">startPos</name> <op:operator pos:line="418" pos:column="50">=</op:operator> <name pos:line="418" pos:column="52">i</name></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="420" pos:column="33">else <if pos:line="420" pos:column="38">if <condition pos:line="420" pos:column="41">(<expr><name pos:line="420" pos:column="42">state</name> <op:operator pos:line="420" pos:column="48">==</op:operator> <name pos:line="420" pos:column="51">attr_pre_assign</name></expr>)</condition><then pos:line="420" pos:column="67">
					<expr_stmt><expr><name pos:line="421" pos:column="41">state</name> <op:operator pos:line="421" pos:column="47">=</op:operator> <name pos:line="421" pos:column="49">attr_invalid</name></expr>;</expr_stmt></then>
				<else pos:line="422" pos:column="33">else <if pos:line="422" pos:column="38">if <condition pos:line="422" pos:column="41">(<expr><name pos:line="422" pos:column="42">state</name> <op:operator pos:line="422" pos:column="48">==</op:operator> <name pos:line="422" pos:column="51">attr_assign</name></expr>)</condition><then pos:line="422" pos:column="63">
					<expr_stmt><expr><name pos:line="423" pos:column="41">state</name> <op:operator pos:line="423" pos:column="47">=</op:operator> <name pos:line="423" pos:column="49">attr_value</name></expr>;</expr_stmt></then></if></else></if></else></if>
			}</block>
		</default>}</block></switch>

		<if pos:line="427" pos:column="17">if <condition pos:line="427" pos:column="20">(<expr><name pos:line="427" pos:column="21">state</name> <op:operator pos:line="427" pos:column="27">==</op:operator> <name pos:line="427" pos:column="30">attr_valid</name></expr>)</condition><then pos:line="427" pos:column="41">
		<block pos:line="428" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="429" pos:column="25">attributes</name><op:operator pos:line="429" pos:column="35">.</op:operator><name pos:line="429" pos:column="36">push_back</name></name><argument_list pos:line="429" pos:column="45">(<argument><expr><call><name><name pos:line="429" pos:column="46">pair</name><argument_list pos:line="429" pos:column="50">&lt;<argument><expr><name pos:line="429" pos:column="51">int</name></expr></argument>, <argument><expr><name pos:line="429" pos:column="56">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="429" pos:column="60">(<argument><expr><name pos:line="429" pos:column="61">start</name><op:operator pos:line="429" pos:column="66">+</op:operator><name pos:line="429" pos:column="67">startPos</name></expr></argument>, <argument><expr><name pos:line="429" pos:column="77">start</name><op:operator pos:line="429" pos:column="82">+</op:operator><name pos:line="429" pos:column="83">i</name><op:operator pos:line="429" pos:column="84">+</op:operator><name pos:line="429" pos:column="85">oneMoreChar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="430" pos:column="25">state</name> <op:operator pos:line="430" pos:column="31">=</op:operator> <name pos:line="430" pos:column="33">attr_invalid</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="433" pos:column="9">if <condition pos:line="433" pos:column="12">(<expr><name pos:line="433" pos:column="13">state</name> <op:operator pos:line="433" pos:column="19">==</op:operator> <name pos:line="433" pos:column="22">attr_value</name></expr>)</condition><then pos:line="433" pos:column="33">
		<expr_stmt><expr><call><name><name pos:line="434" pos:column="17">attributes</name><op:operator pos:line="434" pos:column="27">.</op:operator><name pos:line="434" pos:column="28">push_back</name></name><argument_list pos:line="434" pos:column="37">(<argument><expr><call><name><name pos:line="434" pos:column="38">pair</name><argument_list pos:line="434" pos:column="42">&lt;<argument><expr><name pos:line="434" pos:column="43">int</name></expr></argument>, <argument><expr><name pos:line="434" pos:column="48">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="434" pos:column="52">(<argument><expr><name pos:line="434" pos:column="53">start</name><op:operator pos:line="434" pos:column="58">+</op:operator><name pos:line="434" pos:column="59">startPos</name></expr></argument>, <argument><expr><name pos:line="434" pos:column="69">start</name><op:operator pos:line="434" pos:column="74">+</op:operator><name pos:line="434" pos:column="75">i</name><op:operator pos:line="434" pos:column="76">-</op:operator><lit:literal type="number" pos:line="434" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><op:operator pos:line="436" pos:column="9">delete</op:operator> <index pos:line="436" pos:column="16">[]</index> <name pos:line="436" pos:column="19">buf</name></expr>;</expr_stmt>
	<return pos:line="437" pos:column="9">return <expr><name pos:line="437" pos:column="16">attributes</name></expr>;</return>
}</block></function>



<function><type><name pos:line="442" pos:column="1">void</name></type> <name><name pos:line="442" pos:column="6">XmlMatchedTagsHighlighter</name><op:operator pos:line="442" pos:column="31">::</op:operator><name pos:line="442" pos:column="33">tagMatch</name></name><parameter_list pos:line="442" pos:column="41">(<param><decl><type><name pos:line="442" pos:column="42">bool</name></type> <name pos:line="442" pos:column="47">doHiliteAttr</name></decl></param>)</parameter_list> 
<block pos:line="443" pos:column="1">{
	<comment type="line" pos:line="444" pos:column="9">// Clean up all marks of previous action</comment>
	<expr_stmt><expr><call><name><name pos:line="445" pos:column="9">_pEditView</name><op:operator pos:line="445" pos:column="19">-&gt;</op:operator><name pos:line="445" pos:column="21">clearIndicator</name></name><argument_list pos:line="445" pos:column="35">(<argument><expr><name pos:line="445" pos:column="36">SCE_UNIVERSAL_TAGMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="446" pos:column="9">_pEditView</name><op:operator pos:line="446" pos:column="19">-&gt;</op:operator><name pos:line="446" pos:column="21">clearIndicator</name></name><argument_list pos:line="446" pos:column="35">(<argument><expr><name pos:line="446" pos:column="36">SCE_UNIVERSAL_TAGATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="448" pos:column="9">// Detect the current lang type. It works only with html and xml</comment>
	<decl_stmt><decl><type><name pos:line="449" pos:column="9">LangType</name></type> <name pos:line="449" pos:column="18">lang</name> <init pos:line="449" pos:column="23">= <expr><op:operator pos:line="449" pos:column="25">(</op:operator><call><name><name pos:line="449" pos:column="26">_pEditView</name><op:operator pos:line="449" pos:column="36">-&gt;</op:operator><name pos:line="449" pos:column="38">getCurrentBuffer</name></name><argument_list pos:line="449" pos:column="54">()</argument_list></call><op:operator pos:line="449" pos:column="56">)</op:operator><op:operator pos:line="449" pos:column="57">-&gt;</op:operator><call><name pos:line="449" pos:column="59">getLangType</name><argument_list pos:line="449" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="451" pos:column="9">if <condition pos:line="451" pos:column="12">(<expr><name pos:line="451" pos:column="13">lang</name> <op:operator pos:line="451" pos:column="18">!=</op:operator> <name pos:line="451" pos:column="21">L_XML</name> <op:operator pos:line="451" pos:column="27">&amp;&amp;</op:operator> <name pos:line="451" pos:column="30">lang</name> <op:operator pos:line="451" pos:column="35">!=</op:operator> <name pos:line="451" pos:column="38">L_HTML</name> <op:operator pos:line="451" pos:column="45">&amp;&amp;</op:operator> <name pos:line="451" pos:column="48">lang</name> <op:operator pos:line="451" pos:column="53">!=</op:operator> <name pos:line="451" pos:column="56">L_PHP</name> <op:operator pos:line="451" pos:column="62">&amp;&amp;</op:operator> <name pos:line="451" pos:column="65">lang</name> <op:operator pos:line="451" pos:column="70">!=</op:operator> <name pos:line="451" pos:column="73">L_ASP</name> <op:operator pos:line="451" pos:column="79">&amp;&amp;</op:operator> <name pos:line="451" pos:column="82">lang</name> <op:operator pos:line="451" pos:column="87">!=</op:operator> <name pos:line="451" pos:column="90">L_JSP</name></expr>)</condition><then pos:line="451" pos:column="96">
		<return pos:line="452" pos:column="17">return;</return></then></if>

	<comment type="line" pos:line="454" pos:column="9">// Get the original targets and search options to restore after tag matching operation</comment>
	<decl_stmt><decl><type><name pos:line="455" pos:column="9">int</name></type> <name pos:line="455" pos:column="13">originalStartPos</name> <init pos:line="455" pos:column="30">= <expr><call><name><name pos:line="455" pos:column="32">_pEditView</name><op:operator pos:line="455" pos:column="42">-&gt;</op:operator><name pos:line="455" pos:column="44">execute</name></name><argument_list pos:line="455" pos:column="51">(<argument><expr><name pos:line="455" pos:column="52">SCI_GETTARGETSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="456" pos:column="9">int</name></type> <name pos:line="456" pos:column="13">originalEndPos</name> <init pos:line="456" pos:column="28">= <expr><call><name><name pos:line="456" pos:column="30">_pEditView</name><op:operator pos:line="456" pos:column="40">-&gt;</op:operator><name pos:line="456" pos:column="42">execute</name></name><argument_list pos:line="456" pos:column="49">(<argument><expr><name pos:line="456" pos:column="50">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="457" pos:column="9">int</name></type> <name pos:line="457" pos:column="13">originalSearchFlags</name> <init pos:line="457" pos:column="33">= <expr><call><name><name pos:line="457" pos:column="35">_pEditView</name><op:operator pos:line="457" pos:column="45">-&gt;</op:operator><name pos:line="457" pos:column="47">execute</name></name><argument_list pos:line="457" pos:column="54">(<argument><expr><name pos:line="457" pos:column="55">SCI_GETSEARCHFLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="459" pos:column="9">XmlMatchedTagsPos</name></type> <name pos:line="459" pos:column="27">xmlTags</name></decl>;</decl_stmt>

    <comment type="line" pos:line="461" pos:column="5">// Detect if it's a xml/html tag. If yes, Colour it!</comment>
	<if pos:line="462" pos:column="9">if <condition pos:line="462" pos:column="12">(<expr><call><name pos:line="462" pos:column="13">getXmlMatchedTagsPos</name><argument_list pos:line="462" pos:column="33">(<argument><expr><name pos:line="462" pos:column="34">xmlTags</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="462" pos:column="43">
	<block pos:line="463" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="464" pos:column="17">_pEditView</name><op:operator pos:line="464" pos:column="27">-&gt;</op:operator><name pos:line="464" pos:column="29">execute</name></name><argument_list pos:line="464" pos:column="36">(<argument><expr><name pos:line="464" pos:column="37">SCI_SETINDICATORCURRENT</name></expr></argument>, <argument><expr><name pos:line="464" pos:column="62">SCE_UNIVERSAL_TAGMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="465" pos:column="17">int</name></type> <name pos:line="465" pos:column="21">openTagTailLen</name> <init pos:line="465" pos:column="36">= <expr><lit:literal type="number" pos:line="465" pos:column="38">2</lit:literal></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="467" pos:column="17">// Colourising the close tag firstly</comment>
		<if pos:line="468" pos:column="17">if <condition pos:line="468" pos:column="20">(<expr><op:operator pos:line="468" pos:column="21">(</op:operator><name><name pos:line="468" pos:column="22">xmlTags</name><op:operator pos:line="468" pos:column="29">.</op:operator><name pos:line="468" pos:column="30">tagCloseStart</name></name> <op:operator pos:line="468" pos:column="44">!=</op:operator> <op:operator pos:line="468" pos:column="47">-</op:operator><lit:literal type="number" pos:line="468" pos:column="48">1</lit:literal><op:operator pos:line="468" pos:column="49">)</op:operator> <op:operator pos:line="468" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="468" pos:column="54">(</op:operator><name><name pos:line="468" pos:column="55">xmlTags</name><op:operator pos:line="468" pos:column="62">.</op:operator><name pos:line="468" pos:column="63">tagCloseEnd</name></name> <op:operator pos:line="468" pos:column="75">!=</op:operator> <op:operator pos:line="468" pos:column="78">-</op:operator><lit:literal type="number" pos:line="468" pos:column="79">1</lit:literal><op:operator pos:line="468" pos:column="80">)</op:operator></expr>)</condition><then pos:line="468" pos:column="82">
		<block pos:line="469" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="470" pos:column="25">_pEditView</name><op:operator pos:line="470" pos:column="35">-&gt;</op:operator><name pos:line="470" pos:column="37">execute</name></name><argument_list pos:line="470" pos:column="44">(<argument><expr><name pos:line="470" pos:column="45">SCI_INDICATORFILLRANGE</name></expr></argument>,  <argument><expr><name><name pos:line="470" pos:column="70">xmlTags</name><op:operator pos:line="470" pos:column="77">.</op:operator><name pos:line="470" pos:column="78">tagCloseStart</name></name></expr></argument>, <argument><expr><name><name pos:line="470" pos:column="93">xmlTags</name><op:operator pos:line="470" pos:column="100">.</op:operator><name pos:line="470" pos:column="101">tagCloseEnd</name></name> <op:operator pos:line="470" pos:column="113">-</op:operator> <name><name pos:line="470" pos:column="115">xmlTags</name><op:operator pos:line="470" pos:column="122">.</op:operator><name pos:line="470" pos:column="123">tagCloseStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="471" pos:column="25">// tag close is present, so it's not single tag</comment>
			<expr_stmt><expr><name pos:line="472" pos:column="25">openTagTailLen</name> <op:operator pos:line="472" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="472" pos:column="42">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="475" pos:column="17">// Colourising the open tag</comment>
		<expr_stmt><expr><call><name><name pos:line="476" pos:column="17">_pEditView</name><op:operator pos:line="476" pos:column="27">-&gt;</op:operator><name pos:line="476" pos:column="29">execute</name></name><argument_list pos:line="476" pos:column="36">(<argument><expr><name pos:line="476" pos:column="37">SCI_INDICATORFILLRANGE</name></expr></argument>,  <argument><expr><name><name pos:line="476" pos:column="62">xmlTags</name><op:operator pos:line="476" pos:column="69">.</op:operator><name pos:line="476" pos:column="70">tagOpenStart</name></name></expr></argument>, <argument><expr><name><name pos:line="476" pos:column="84">xmlTags</name><op:operator pos:line="476" pos:column="91">.</op:operator><name pos:line="476" pos:column="92">tagNameEnd</name></name> <op:operator pos:line="476" pos:column="103">-</op:operator> <name><name pos:line="476" pos:column="105">xmlTags</name><op:operator pos:line="476" pos:column="112">.</op:operator><name pos:line="476" pos:column="113">tagOpenStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="477" pos:column="17">_pEditView</name><op:operator pos:line="477" pos:column="27">-&gt;</op:operator><name pos:line="477" pos:column="29">execute</name></name><argument_list pos:line="477" pos:column="36">(<argument><expr><name pos:line="477" pos:column="37">SCI_INDICATORFILLRANGE</name></expr></argument>,  <argument><expr><name><name pos:line="477" pos:column="62">xmlTags</name><op:operator pos:line="477" pos:column="69">.</op:operator><name pos:line="477" pos:column="70">tagOpenEnd</name></name> <op:operator pos:line="477" pos:column="81">-</op:operator> <name pos:line="477" pos:column="83">openTagTailLen</name></expr></argument>, <argument><expr><name pos:line="477" pos:column="99">openTagTailLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        
        <comment type="line" pos:line="480" pos:column="9">// Colouising its attributs</comment>
        <if pos:line="481" pos:column="9">if <condition pos:line="481" pos:column="12">(<expr><name pos:line="481" pos:column="13">doHiliteAttr</name></expr>)</condition><then pos:line="481" pos:column="26">
		<block pos:line="482" pos:column="17">{
			<decl_stmt><decl><type><name><name pos:line="483" pos:column="25">vector</name><argument_list pos:line="483" pos:column="31">&lt; <argument><expr><name><name pos:line="483" pos:column="33">pair</name><argument_list pos:line="483" pos:column="37">&lt;<argument><expr><name pos:line="483" pos:column="38">int</name></expr></argument>, <argument><expr><name pos:line="483" pos:column="43">int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name pos:line="483" pos:column="50">attributes</name> <init pos:line="483" pos:column="61">= <expr><call><name pos:line="483" pos:column="63">getAttributesPos</name><argument_list pos:line="483" pos:column="79">(<argument><expr><name><name pos:line="483" pos:column="80">xmlTags</name><op:operator pos:line="483" pos:column="87">.</op:operator><name pos:line="483" pos:column="88">tagNameEnd</name></name></expr></argument>, <argument><expr><name><name pos:line="483" pos:column="100">xmlTags</name><op:operator pos:line="483" pos:column="107">.</op:operator><name pos:line="483" pos:column="108">tagOpenEnd</name></name> <op:operator pos:line="483" pos:column="119">-</op:operator> <name pos:line="483" pos:column="121">openTagTailLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="484" pos:column="25">_pEditView</name><op:operator pos:line="484" pos:column="35">-&gt;</op:operator><name pos:line="484" pos:column="37">execute</name></name><argument_list pos:line="484" pos:column="44">(<argument><expr><name pos:line="484" pos:column="45">SCI_SETINDICATORCURRENT</name></expr></argument>,  <argument><expr><name pos:line="484" pos:column="71">SCE_UNIVERSAL_TAGATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for pos:line="485" pos:column="25">for (<init><decl><type><name pos:line="485" pos:column="30">size_t</name></type> <name pos:line="485" pos:column="37">i</name> <init pos:line="485" pos:column="39">= <expr><lit:literal type="number" pos:line="485" pos:column="41">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="485" pos:column="45">i</name> <op:operator pos:line="485" pos:column="47">&lt;</op:operator> <call><name><name pos:line="485" pos:column="49">attributes</name><op:operator pos:line="485" pos:column="59">.</op:operator><name pos:line="485" pos:column="60">size</name></name><argument_list pos:line="485" pos:column="64">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="485" pos:column="69">i</name><op:operator pos:line="485" pos:column="70">++</op:operator></expr></incr>)
			<block pos:line="486" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="487" pos:column="33">_pEditView</name><op:operator pos:line="487" pos:column="43">-&gt;</op:operator><name pos:line="487" pos:column="45">execute</name></name><argument_list pos:line="487" pos:column="52">(<argument><expr><name pos:line="487" pos:column="53">SCI_INDICATORFILLRANGE</name></expr></argument>,  <argument><expr><name><name pos:line="487" pos:column="78">attributes</name><index pos:line="487" pos:column="88">[<expr><name pos:line="487" pos:column="89">i</name></expr>]</index></name><op:operator pos:line="487" pos:column="91">.</op:operator><name pos:line="487" pos:column="92">first</name></expr></argument>, <argument><expr><name><name pos:line="487" pos:column="99">attributes</name><index pos:line="487" pos:column="109">[<expr><name pos:line="487" pos:column="110">i</name></expr>]</index></name><op:operator pos:line="487" pos:column="112">.</op:operator><name pos:line="487" pos:column="113">second</name> <op:operator pos:line="487" pos:column="120">-</op:operator> <name><name pos:line="487" pos:column="122">attributes</name><index pos:line="487" pos:column="132">[<expr><name pos:line="487" pos:column="133">i</name></expr>]</index></name><op:operator pos:line="487" pos:column="135">.</op:operator><name pos:line="487" pos:column="136">first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
        }</block></then></if>

        <comment type="line" pos:line="491" pos:column="9">// Colouising indent guide line position</comment>
		<if pos:line="492" pos:column="17">if <condition pos:line="492" pos:column="20">(<expr><call><name><name pos:line="492" pos:column="21">_pEditView</name><op:operator pos:line="492" pos:column="31">-&gt;</op:operator><name pos:line="492" pos:column="33">isShownIndentGuide</name></name><argument_list pos:line="492" pos:column="51">()</argument_list></call></expr>)</condition><then pos:line="492" pos:column="54">
		<block pos:line="493" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="494" pos:column="25">int</name></type> <name pos:line="494" pos:column="29">columnAtCaret</name>  <init pos:line="494" pos:column="44">= <expr><call><name pos:line="494" pos:column="46">int</name><argument_list pos:line="494" pos:column="49">(<argument><expr><call><name><name pos:line="494" pos:column="50">_pEditView</name><op:operator pos:line="494" pos:column="60">-&gt;</op:operator><name pos:line="494" pos:column="62">execute</name></name><argument_list pos:line="494" pos:column="69">(<argument><expr><name pos:line="494" pos:column="70">SCI_GETCOLUMN</name></expr></argument>, <argument><expr><name><name pos:line="494" pos:column="85">xmlTags</name><op:operator pos:line="494" pos:column="92">.</op:operator><name pos:line="494" pos:column="93">tagOpenStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="495" pos:column="25">int</name></type> <name pos:line="495" pos:column="29">columnOpposite</name> <init pos:line="495" pos:column="44">= <expr><call><name pos:line="495" pos:column="46">int</name><argument_list pos:line="495" pos:column="49">(<argument><expr><call><name><name pos:line="495" pos:column="50">_pEditView</name><op:operator pos:line="495" pos:column="60">-&gt;</op:operator><name pos:line="495" pos:column="62">execute</name></name><argument_list pos:line="495" pos:column="69">(<argument><expr><name pos:line="495" pos:column="70">SCI_GETCOLUMN</name></expr></argument>, <argument><expr><name><name pos:line="495" pos:column="85">xmlTags</name><op:operator pos:line="495" pos:column="92">.</op:operator><name pos:line="495" pos:column="93">tagCloseStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="497" pos:column="25">int</name></type> <name pos:line="497" pos:column="29">lineAtCaret</name>  <init pos:line="497" pos:column="42">= <expr><call><name pos:line="497" pos:column="44">int</name><argument_list pos:line="497" pos:column="47">(<argument><expr><call><name><name pos:line="497" pos:column="48">_pEditView</name><op:operator pos:line="497" pos:column="58">-&gt;</op:operator><name pos:line="497" pos:column="60">execute</name></name><argument_list pos:line="497" pos:column="67">(<argument><expr><name pos:line="497" pos:column="68">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="497" pos:column="90">xmlTags</name><op:operator pos:line="497" pos:column="97">.</op:operator><name pos:line="497" pos:column="98">tagOpenStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="498" pos:column="25">int</name></type> <name pos:line="498" pos:column="29">lineOpposite</name> <init pos:line="498" pos:column="42">= <expr><call><name pos:line="498" pos:column="44">int</name><argument_list pos:line="498" pos:column="47">(<argument><expr><call><name><name pos:line="498" pos:column="48">_pEditView</name><op:operator pos:line="498" pos:column="58">-&gt;</op:operator><name pos:line="498" pos:column="60">execute</name></name><argument_list pos:line="498" pos:column="67">(<argument><expr><name pos:line="498" pos:column="68">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="498" pos:column="90">xmlTags</name><op:operator pos:line="498" pos:column="97">.</op:operator><name pos:line="498" pos:column="98">tagCloseStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="500" pos:column="25">if <condition pos:line="500" pos:column="28">(<expr><name><name pos:line="500" pos:column="29">xmlTags</name><op:operator pos:line="500" pos:column="36">.</op:operator><name pos:line="500" pos:column="37">tagCloseStart</name></name> <op:operator pos:line="500" pos:column="51">!=</op:operator> <op:operator pos:line="500" pos:column="54">-</op:operator><lit:literal type="number" pos:line="500" pos:column="55">1</lit:literal> <op:operator pos:line="500" pos:column="57">&amp;&amp;</op:operator> <name pos:line="500" pos:column="60">lineAtCaret</name> <op:operator pos:line="500" pos:column="72">!=</op:operator> <name pos:line="500" pos:column="75">lineOpposite</name></expr>)</condition><then pos:line="500" pos:column="88">
			<block pos:line="501" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="502" pos:column="33">_pEditView</name><op:operator pos:line="502" pos:column="43">-&gt;</op:operator><name pos:line="502" pos:column="45">execute</name></name><argument_list pos:line="502" pos:column="52">(<argument><expr><name pos:line="502" pos:column="53">SCI_BRACEHIGHLIGHT</name></expr></argument>, <argument><expr><name><name pos:line="502" pos:column="73">xmlTags</name><op:operator pos:line="502" pos:column="80">.</op:operator><name pos:line="502" pos:column="81">tagOpenStart</name></name></expr></argument>, <argument><expr><name><name pos:line="502" pos:column="95">xmlTags</name><op:operator pos:line="502" pos:column="102">.</op:operator><name pos:line="502" pos:column="103">tagCloseEnd</name></name><op:operator pos:line="502" pos:column="114">-</op:operator><lit:literal type="number" pos:line="502" pos:column="115">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="503" pos:column="33">_pEditView</name><op:operator pos:line="503" pos:column="43">-&gt;</op:operator><name pos:line="503" pos:column="45">execute</name></name><argument_list pos:line="503" pos:column="52">(<argument><expr><name pos:line="503" pos:column="53">SCI_SETHIGHLIGHTGUIDE</name></expr></argument>, <argument><expr><op:operator pos:line="503" pos:column="76">(</op:operator><name pos:line="503" pos:column="77">columnAtCaret</name> <op:operator pos:line="503" pos:column="91">&lt;</op:operator> <name pos:line="503" pos:column="93">columnOpposite</name><op:operator pos:line="503" pos:column="107">)</op:operator><op:operator pos:line="503" pos:column="108">?</op:operator><name pos:line="503" pos:column="109">columnAtCaret</name><op:operator pos:line="503" pos:column="122">:</op:operator><name pos:line="503" pos:column="123">columnOpposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>

	<comment type="line" pos:line="508" pos:column="9">// restore the original targets and search options to avoid the conflit with search/replace function</comment>
	<expr_stmt><expr><call><name><name pos:line="509" pos:column="9">_pEditView</name><op:operator pos:line="509" pos:column="19">-&gt;</op:operator><name pos:line="509" pos:column="21">execute</name></name><argument_list pos:line="509" pos:column="28">(<argument><expr><name pos:line="509" pos:column="29">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="509" pos:column="49">originalStartPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="510" pos:column="9">_pEditView</name><op:operator pos:line="510" pos:column="19">-&gt;</op:operator><name pos:line="510" pos:column="21">execute</name></name><argument_list pos:line="510" pos:column="28">(<argument><expr><name pos:line="510" pos:column="29">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="510" pos:column="47">originalEndPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="511" pos:column="9">_pEditView</name><op:operator pos:line="511" pos:column="19">-&gt;</op:operator><name pos:line="511" pos:column="21">execute</name></name><argument_list pos:line="511" pos:column="28">(<argument><expr><name pos:line="511" pos:column="29">SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name pos:line="511" pos:column="49">originalSearchFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
