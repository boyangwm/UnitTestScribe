<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\SparseCoOccurrenceMatrixTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">NUnit</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Framework</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">UnitTests</name><op:operator pos:line="8" pos:column="31">.</op:operator><name pos:line="8" pos:column="32">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><attribute pos:line="10" pos:column="5">[<expr><name pos:line="10" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="11" pos:column="5">public</specifier> class <name pos:line="11" pos:column="18">SparseCoOccurrenceMatrixTests</name> <super pos:line="11" pos:column="48">: <name pos:line="11" pos:column="50">RandomStringBasedTests</name></super>
    <block pos:line="12" pos:column="5">{


        <function><type><attribute pos:line="15" pos:column="9">[<expr><name pos:line="15" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="16" pos:column="9">public</specifier> <name pos:line="16" pos:column="16">void</name></type> <name pos:line="16" pos:column="21">AddMultipleWords</name><parameter_list pos:line="16" pos:column="37">()</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">matrix</name> <init pos:line="18" pos:column="24">= <expr><op:operator pos:line="18" pos:column="26">new</op:operator> <call><name pos:line="18" pos:column="30">SparseCoOccurrenceMatrix</name><argument_list pos:line="18" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">words</name> <init pos:line="19" pos:column="23">= <expr><call><name><name pos:line="19" pos:column="25">this</name><op:operator pos:line="19" pos:column="29">.</op:operator><name pos:line="19" pos:column="30">GenerateRandomWordList</name></name><argument_list pos:line="19" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="19" pos:column="53">30</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">matrix</name><op:operator pos:line="20" pos:column="19">.</op:operator><name pos:line="20" pos:column="20">HandleCoOcurrentWordsSync</name></name><argument_list pos:line="20" pos:column="45">(<argument><expr><name pos:line="20" pos:column="46">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="21" pos:column="13">for (<init><decl><type><name pos:line="21" pos:column="18">int</name></type> <name pos:line="21" pos:column="22">i</name> <init pos:line="21" pos:column="24">= <expr><lit:literal type="number" pos:line="21" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="21" pos:column="29">i</name> <op:operator pos:line="21" pos:column="31">&lt;</op:operator> <name><name pos:line="21" pos:column="33">words</name><op:operator pos:line="21" pos:column="38">.</op:operator><name pos:line="21" pos:column="39">Count</name></name> <op:operator pos:line="21" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="21" pos:column="47">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="21" pos:column="50">i</name> <op:operator pos:line="21" pos:column="52">++</op:operator></expr></incr> )
            <block pos:line="22" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="23" pos:column="17">var</name></type> <name pos:line="23" pos:column="21">word1</name> <init pos:line="23" pos:column="27">= <expr><call><name><name pos:line="23" pos:column="29">words</name><op:operator pos:line="23" pos:column="34">.</op:operator><name pos:line="23" pos:column="35">ElementAt</name></name><argument_list pos:line="23" pos:column="44">(<argument><expr><name pos:line="23" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="24" pos:column="17">var</name></type> <name pos:line="24" pos:column="21">word2</name> <init pos:line="24" pos:column="27">= <expr><call><name><name pos:line="24" pos:column="29">words</name><op:operator pos:line="24" pos:column="34">.</op:operator><name pos:line="24" pos:column="35">ElementAt</name></name><argument_list pos:line="24" pos:column="44">(<argument><expr><name pos:line="24" pos:column="45">i</name> <op:operator pos:line="24" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="24" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="25" pos:column="17">Assert</name><op:operator pos:line="25" pos:column="23">.</op:operator><name pos:line="25" pos:column="24">IsTrue</name></name><argument_list pos:line="25" pos:column="30">(<argument><expr><call><name><name pos:line="25" pos:column="31">matrix</name><op:operator pos:line="25" pos:column="37">.</op:operator><name pos:line="25" pos:column="38">GetCoOccurrenceCount</name></name><argument_list pos:line="25" pos:column="58">(<argument><expr><name pos:line="25" pos:column="59">word1</name></expr></argument>, <argument><expr><name pos:line="25" pos:column="66">word2</name></expr></argument>)</argument_list></call> <op:operator pos:line="25" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="25" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <for pos:line="28" pos:column="13">for (<init><decl><type><name pos:line="28" pos:column="18">int</name></type> <name pos:line="28" pos:column="22">i</name> <init pos:line="28" pos:column="24">= <expr><lit:literal type="number" pos:line="28" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="28" pos:column="29">i</name> <op:operator pos:line="28" pos:column="31">&lt;</op:operator> <name><name pos:line="28" pos:column="33">words</name><op:operator pos:line="28" pos:column="38">.</op:operator><name pos:line="28" pos:column="39">Count</name></name> <op:operator pos:line="28" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="28" pos:column="47">5</lit:literal></expr>;</condition> <incr><expr><name pos:line="28" pos:column="50">i</name> <op:operator pos:line="28" pos:column="52">++</op:operator></expr></incr>)
            <block pos:line="29" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="30" pos:column="17">var</name></type> <name pos:line="30" pos:column="21">word1</name> <init pos:line="30" pos:column="27">= <expr><call><name><name pos:line="30" pos:column="29">words</name><op:operator pos:line="30" pos:column="34">.</op:operator><name pos:line="30" pos:column="35">ElementAt</name></name><argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="31" pos:column="17">var</name></type> <name pos:line="31" pos:column="21">word2</name> <init pos:line="31" pos:column="27">= <expr><call><name><name pos:line="31" pos:column="29">words</name><op:operator pos:line="31" pos:column="34">.</op:operator><name pos:line="31" pos:column="35">ElementAt</name></name><argument_list pos:line="31" pos:column="44">(<argument><expr><name pos:line="31" pos:column="45">i</name> <op:operator pos:line="31" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="31" pos:column="49">4</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">Assert</name><op:operator pos:line="32" pos:column="23">.</op:operator><name pos:line="32" pos:column="24">IsTrue</name></name><argument_list pos:line="32" pos:column="30">(<argument><expr><call><name><name pos:line="32" pos:column="31">matrix</name><op:operator pos:line="32" pos:column="37">.</op:operator><name pos:line="32" pos:column="38">GetCoOccurrenceCount</name></name><argument_list pos:line="32" pos:column="58">(<argument><expr><name pos:line="32" pos:column="59">word1</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="66">word2</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="32" pos:column="76">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        

        <function><type><attribute pos:line="38" pos:column="9">[<expr><name pos:line="38" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">AddMultipleWordsMultipleTimes</name><parameter_list pos:line="39" pos:column="50">()</parameter_list>
        <block pos:line="40" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">matrix</name> <init pos:line="41" pos:column="24">= <expr><op:operator pos:line="41" pos:column="26">new</op:operator> <call><name pos:line="41" pos:column="30">SparseCoOccurrenceMatrix</name><argument_list pos:line="41" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">words</name> <init pos:line="42" pos:column="23">= <expr><call><name><name pos:line="42" pos:column="25">this</name><op:operator pos:line="42" pos:column="29">.</op:operator><name pos:line="42" pos:column="30">GenerateRandomWordList</name></name><argument_list pos:line="42" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="42" pos:column="53">30</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">matrix</name><op:operator pos:line="43" pos:column="19">.</op:operator><name pos:line="43" pos:column="20">HandleCoOcurrentWordsSync</name></name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">var</name></type> <name pos:line="44" pos:column="17">words2</name> <init pos:line="44" pos:column="24">= <expr><call><name><name pos:line="44" pos:column="26">this</name><op:operator pos:line="44" pos:column="30">.</op:operator><name pos:line="44" pos:column="31">GenerateRandomWordList</name></name><argument_list pos:line="44" pos:column="53">(<argument><expr><lit:literal type="number" pos:line="44" pos:column="54">30</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">matrix</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">HandleCoOcurrentWordsSync</name></name><argument_list pos:line="45" pos:column="45">(<argument><expr><name pos:line="45" pos:column="46">words2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:line="47" pos:column="13">for (<init><decl><type><name pos:line="47" pos:column="18">int</name></type> <name pos:line="47" pos:column="22">i</name> <init pos:line="47" pos:column="24">= <expr><lit:literal type="number" pos:line="47" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="47" pos:column="29">i</name> <op:operator pos:line="47" pos:column="31">&lt;</op:operator> <name><name pos:line="47" pos:column="33">words</name><op:operator pos:line="47" pos:column="38">.</op:operator><name pos:line="47" pos:column="39">Count</name></name> <op:operator pos:line="47" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="47" pos:column="47">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="47" pos:column="50">i</name><op:operator pos:line="47" pos:column="51">++</op:operator></expr></incr>)
            <block pos:line="48" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="49" pos:column="17">var</name></type> <name pos:line="49" pos:column="21">word1</name> <init pos:line="49" pos:column="27">= <expr><call><name><name pos:line="49" pos:column="29">words</name><op:operator pos:line="49" pos:column="34">.</op:operator><name pos:line="49" pos:column="35">ElementAt</name></name><argument_list pos:line="49" pos:column="44">(<argument><expr><name pos:line="49" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="50" pos:column="17">var</name></type> <name pos:line="50" pos:column="21">word2</name> <init pos:line="50" pos:column="27">= <expr><call><name><name pos:line="50" pos:column="29">words</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">ElementAt</name></name><argument_list pos:line="50" pos:column="44">(<argument><expr><name pos:line="50" pos:column="45">i</name> <op:operator pos:line="50" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="50" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="51" pos:column="17">Assert</name><op:operator pos:line="51" pos:column="23">.</op:operator><name pos:line="51" pos:column="24">IsTrue</name></name><argument_list pos:line="51" pos:column="30">(<argument><expr><call><name><name pos:line="51" pos:column="31">matrix</name><op:operator pos:line="51" pos:column="37">.</op:operator><name pos:line="51" pos:column="38">GetCoOccurrenceCount</name></name><argument_list pos:line="51" pos:column="58">(<argument><expr><name pos:line="51" pos:column="59">word1</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="66">word2</name></expr></argument>)</argument_list></call> <op:operator pos:line="51" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="51" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <for pos:line="54" pos:column="13">for (<init><decl><type><name pos:line="54" pos:column="18">int</name></type> <name pos:line="54" pos:column="22">i</name> <init pos:line="54" pos:column="24">= <expr><lit:literal type="number" pos:line="54" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="54" pos:column="29">i</name> <op:operator pos:line="54" pos:column="31">&lt;</op:operator> <name><name pos:line="54" pos:column="33">words2</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">Count</name></name> <op:operator pos:line="54" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="54" pos:column="48">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="54" pos:column="51">i</name><op:operator pos:line="54" pos:column="52">++</op:operator></expr></incr>)
            <block pos:line="55" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="56" pos:column="17">var</name></type> <name pos:line="56" pos:column="21">word1</name> <init pos:line="56" pos:column="27">= <expr><call><name><name pos:line="56" pos:column="29">words2</name><op:operator pos:line="56" pos:column="35">.</op:operator><name pos:line="56" pos:column="36">ElementAt</name></name><argument_list pos:line="56" pos:column="45">(<argument><expr><name pos:line="56" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="57" pos:column="17">var</name></type> <name pos:line="57" pos:column="21">word2</name> <init pos:line="57" pos:column="27">= <expr><call><name><name pos:line="57" pos:column="29">words2</name><op:operator pos:line="57" pos:column="35">.</op:operator><name pos:line="57" pos:column="36">ElementAt</name></name><argument_list pos:line="57" pos:column="45">(<argument><expr><name pos:line="57" pos:column="46">i</name> <op:operator pos:line="57" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="57" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="58" pos:column="17">Assert</name><op:operator pos:line="58" pos:column="23">.</op:operator><name pos:line="58" pos:column="24">IsTrue</name></name><argument_list pos:line="58" pos:column="30">(<argument><expr><call><name><name pos:line="58" pos:column="31">matrix</name><op:operator pos:line="58" pos:column="37">.</op:operator><name pos:line="58" pos:column="38">GetCoOccurrenceCount</name></name><argument_list pos:line="58" pos:column="58">(<argument><expr><name pos:line="58" pos:column="59">word1</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="66">word2</name></expr></argument>)</argument_list></call> <op:operator pos:line="58" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="58" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <for pos:line="61" pos:column="13">for (<init><decl><type><name pos:line="61" pos:column="18">int</name></type> <name pos:line="61" pos:column="22">i</name> <init pos:line="61" pos:column="24">= <expr><lit:literal type="number" pos:line="61" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="61" pos:column="29">i</name> <op:operator pos:line="61" pos:column="31">&lt;</op:operator> <name><name pos:line="61" pos:column="33">words</name><op:operator pos:line="61" pos:column="38">.</op:operator><name pos:line="61" pos:column="39">Count</name></name></expr>;</condition> <incr><expr><name pos:line="61" pos:column="46">i</name><op:operator pos:line="61" pos:column="47">++</op:operator></expr></incr>)
            <block pos:line="62" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="63" pos:column="17">var</name></type> <name pos:line="63" pos:column="21">word1</name> <init pos:line="63" pos:column="27">= <expr><call><name><name pos:line="63" pos:column="29">words</name><op:operator pos:line="63" pos:column="34">.</op:operator><name pos:line="63" pos:column="35">ElementAt</name></name><argument_list pos:line="63" pos:column="44">(<argument><expr><name pos:line="63" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="64" pos:column="17">var</name></type> <name pos:line="64" pos:column="21">word2</name> <init pos:line="64" pos:column="27">= <expr><call><name><name pos:line="64" pos:column="29">words2</name><op:operator pos:line="64" pos:column="35">.</op:operator><name pos:line="64" pos:column="36">ElementAt</name></name><argument_list pos:line="64" pos:column="45">(<argument><expr><name pos:line="64" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="65" pos:column="17">Assert</name><op:operator pos:line="65" pos:column="23">.</op:operator><name pos:line="65" pos:column="24">IsTrue</name></name><argument_list pos:line="65" pos:column="30">(<argument><expr><call><name><name pos:line="65" pos:column="31">matrix</name><op:operator pos:line="65" pos:column="37">.</op:operator><name pos:line="65" pos:column="38">GetCoOccurrenceCount</name></name><argument_list pos:line="65" pos:column="58">(<argument><expr><name pos:line="65" pos:column="59">word1</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="66">word2</name></expr></argument>)</argument_list></call> <op:operator pos:line="65" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="65" pos:column="76">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><attribute pos:line="69" pos:column="9">[<expr><name pos:line="69" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="70" pos:column="9">public</specifier> <name pos:line="70" pos:column="16">void</name></type> <name pos:line="70" pos:column="21">GetAllEntriesFast</name><parameter_list pos:line="70" pos:column="38">()</parameter_list>
        <block pos:line="71" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">matrix</name> <init pos:line="72" pos:column="24">= <expr><op:operator pos:line="72" pos:column="26">new</op:operator> <call><name pos:line="72" pos:column="30">SparseCoOccurrenceMatrix</name><argument_list pos:line="72" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">words</name> <init pos:line="73" pos:column="23">= <expr><call><name pos:line="73" pos:column="25">GenerateRandomWordList</name><argument_list pos:line="73" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="48">30</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">matrix</name><op:operator pos:line="74" pos:column="19">.</op:operator><name pos:line="74" pos:column="20">HandleCoOcurrentWordsSync</name></name><argument_list pos:line="74" pos:column="45">(<argument><expr><name pos:line="74" pos:column="46">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">var</name></type> <name pos:line="75" pos:column="17">entries</name> <init pos:line="75" pos:column="25">= <expr><call><name><name pos:line="75" pos:column="27">matrix</name><op:operator pos:line="75" pos:column="33">.</op:operator><name pos:line="75" pos:column="34">GetEntries</name></name><argument_list pos:line="75" pos:column="44">(<argument><expr><lambda><name pos:line="75" pos:column="45">n</name> <op:operator pos:line="75" pos:column="47">=&gt;</op:operator> <lit:literal type="boolean" pos:line="75" pos:column="50">true</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
