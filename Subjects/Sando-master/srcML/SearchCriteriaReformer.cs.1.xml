<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Indexer\Indexer\Searching\Criteria\SearchCriteriaReformer.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Logging</name><op:operator pos:line="5" pos:column="25">.</op:operator><name pos:line="5" pos:column="26">Events</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">QueryRefomers</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Tools</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">DependencyInjection</name></name>;</using>

<namespace pos:line="10" pos:column="1">namespace <name><name pos:line="10" pos:column="11">Sando</name><op:operator pos:line="10" pos:column="16">.</op:operator><name pos:line="10" pos:column="17">Indexer</name><op:operator pos:line="10" pos:column="24">.</op:operator><name pos:line="10" pos:column="25">Searching</name><op:operator pos:line="10" pos:column="34">.</op:operator><name pos:line="10" pos:column="35">Criteria</name></name>
<block pos:line="11" pos:column="1">{
    <class><specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">SearchCriteriaReformer</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">const</specifier> <name pos:line="14" pos:column="23">int</name></type> <name pos:line="14" pos:column="27">TERM_MINIMUM_LENGTH</name> <init pos:line="14" pos:column="47">= <expr><lit:literal type="number" pos:line="14" pos:column="49">2</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="16" pos:column="9">public</specifier> <specifier pos:line="16" pos:column="16">static</specifier> <name pos:line="16" pos:column="23">void</name></type> <name pos:line="16" pos:column="28">ReformSearchCriteria</name><parameter_list pos:line="16" pos:column="48">(<param><decl><type><name pos:line="16" pos:column="49">SimpleSearchCriteria</name></type> <name pos:line="16" pos:column="70">criteria</name></decl></param>)</parameter_list>
        <block pos:line="17" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">var</name></type> <name pos:line="18" pos:column="17">specialTerms</name> <init pos:line="18" pos:column="30">= <expr><call><name pos:line="18" pos:column="32">GetSpecialTerms</name><argument_list pos:line="18" pos:column="47">(<argument><expr><name><name pos:line="18" pos:column="48">criteria</name><op:operator pos:line="18" pos:column="56">.</op:operator><name pos:line="18" pos:column="57">SearchTerms</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">var</name></type> <name pos:line="19" pos:column="17">terms</name> <init pos:line="19" pos:column="23">= <expr><call><name><name pos:line="19" pos:column="25">criteria</name><op:operator pos:line="19" pos:column="33">.</op:operator><name pos:line="19" pos:column="34">SearchTerms</name><op:operator pos:line="19" pos:column="45">.</op:operator><name pos:line="19" pos:column="46">Where</name></name><argument_list pos:line="19" pos:column="51">(<argument><expr><lambda><name pos:line="19" pos:column="52">t</name> <op:operator pos:line="19" pos:column="54">=&gt;</op:operator> <op:operator pos:line="19" pos:column="57">!</op:operator><call><name><name pos:line="19" pos:column="58">t</name><op:operator pos:line="19" pos:column="59">.</op:operator><name pos:line="19" pos:column="60">StartsWith</name></name><argument_list pos:line="19" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="71">"\""</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="19" pos:column="76">||</op:operator><op:operator pos:line="19" pos:column="78">!</op:operator><call><name><name pos:line="19" pos:column="79">t</name><op:operator pos:line="19" pos:column="80">.</op:operator><name pos:line="19" pos:column="81">EndsWith</name></name><argument_list pos:line="19" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="19" pos:column="90">"\""</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="19" pos:column="96">.</op:operator>
                <call><name pos:line="20" pos:column="17">Select</name><argument_list pos:line="20" pos:column="23">(<argument><expr><lambda><name pos:line="20" pos:column="24">t</name> <op:operator pos:line="20" pos:column="26">=&gt;</op:operator> <call><name><name pos:line="20" pos:column="29">t</name><op:operator pos:line="20" pos:column="30">.</op:operator><name pos:line="20" pos:column="31">NormalizeText</name></name><argument_list pos:line="20" pos:column="44">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="20" pos:column="47">.</op:operator><call><name pos:line="20" pos:column="48">Where</name><argument_list pos:line="20" pos:column="53">(<argument><expr><lambda><name pos:line="20" pos:column="54">t</name> <op:operator pos:line="20" pos:column="56">=&gt;</op:operator> <op:operator pos:line="20" pos:column="59">!</op:operator><call><name><name pos:line="20" pos:column="60">String</name><op:operator pos:line="20" pos:column="66">.</op:operator><name pos:line="20" pos:column="67">IsNullOrWhiteSpace</name></name><argument_list pos:line="20" pos:column="85">(<argument><expr><name pos:line="20" pos:column="86">t</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="20" pos:column="89">.</op:operator>
                    <call><name pos:line="21" pos:column="21">Distinct</name><argument_list pos:line="21" pos:column="29">()</argument_list></call><op:operator pos:line="21" pos:column="31">.</op:operator><call><name pos:line="21" pos:column="32">ToList</name><argument_list pos:line="21" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">var</name></type> <name pos:line="22" pos:column="17">originalTerms</name> <init pos:line="22" pos:column="31">= <expr><call><name><name pos:line="22" pos:column="33">terms</name><op:operator pos:line="22" pos:column="38">.</op:operator><name pos:line="22" pos:column="39">ToList</name></name><argument_list pos:line="22" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="23" pos:column="13">var</name></type> <name pos:line="23" pos:column="17">dictionarySplittedTerms</name> <init pos:line="23" pos:column="41">= <expr><call><name><name pos:line="23" pos:column="43">terms</name><op:operator pos:line="23" pos:column="48">.</op:operator><name pos:line="23" pos:column="49">SelectMany</name></name>
                    <argument_list pos:line="24" pos:column="21">(<argument><expr><call><name><name pos:line="24" pos:column="22">ServiceLocator</name><op:operator pos:line="24" pos:column="36">.</op:operator><name><name pos:line="24" pos:column="37">Resolve</name><argument_list pos:line="24" pos:column="44">&lt;<argument><name pos:line="24" pos:column="45">DictionaryBasedSplitter</name></argument>&gt;</argument_list></name></name><argument_list pos:line="24" pos:column="69">()</argument_list></call><op:operator pos:line="24" pos:column="71">.</op:operator>
                        <name pos:line="25" pos:column="25">ExtractWords</name></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="38">.</op:operator><call><name pos:line="25" pos:column="39">Where</name><argument_list pos:line="25" pos:column="44">(<argument><expr><lambda><name pos:line="25" pos:column="45">t</name> <op:operator pos:line="25" pos:column="47">=&gt;</op:operator> <name><name pos:line="25" pos:column="50">t</name><op:operator pos:line="25" pos:column="51">.</op:operator><name pos:line="25" pos:column="52">Length</name></name> <op:operator pos:line="25" pos:column="59">&gt;=</op:operator> <name pos:line="25" pos:column="62">TERM_MINIMUM_LENGTH</name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="82">.</op:operator><call><name pos:line="25" pos:column="83">ToList</name><argument_list pos:line="25" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">terms</name><op:operator pos:line="27" pos:column="18">.</op:operator><name pos:line="27" pos:column="19">AddRange</name></name><argument_list pos:line="27" pos:column="27">(<argument><expr><call><name><name pos:line="27" pos:column="28">dictionarySplittedTerms</name><op:operator pos:line="27" pos:column="51">.</op:operator><name pos:line="27" pos:column="52">Except</name></name><argument_list pos:line="27" pos:column="58">(<argument><expr><name pos:line="27" pos:column="59">terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">var</name></type> <name pos:line="28" pos:column="17">queries</name> <init pos:line="28" pos:column="25">= <expr><call><name pos:line="28" pos:column="27">GetReformedQuery</name><argument_list pos:line="28" pos:column="43">(<argument><expr><call><name><name pos:line="28" pos:column="44">terms</name><op:operator pos:line="28" pos:column="49">.</op:operator><name pos:line="28" pos:column="50">Distinct</name></name><argument_list pos:line="28" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="28" pos:column="61">.</op:operator><call><name pos:line="28" pos:column="62">ToList</name><argument_list pos:line="28" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name><name pos:line="29" pos:column="17">queries</name><op:operator pos:line="29" pos:column="24">.</op:operator><name pos:line="29" pos:column="25">Count</name></name> <op:operator pos:line="29" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="29" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="29" pos:column="35">
            <block pos:line="30" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="31" pos:column="17">LogEvents</name><op:operator pos:line="31" pos:column="26">.</op:operator><name pos:line="31" pos:column="27">AddSearchTermsToOriginal</name></name><argument_list pos:line="31" pos:column="51">(<argument><expr><call><name><name pos:line="31" pos:column="52">queries</name><op:operator pos:line="31" pos:column="59">.</op:operator><name pos:line="31" pos:column="60">First</name></name><argument_list pos:line="31" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="32" pos:column="17">var</name></type> <name pos:line="32" pos:column="21">query</name> <init pos:line="32" pos:column="27">= <expr><call><name><name pos:line="32" pos:column="29">queries</name><op:operator pos:line="32" pos:column="36">.</op:operator><name pos:line="32" pos:column="37">First</name></name><argument_list pos:line="32" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="33" pos:column="17">terms</name><op:operator pos:line="33" pos:column="22">.</op:operator><name pos:line="33" pos:column="23">AddRange</name></name><argument_list pos:line="33" pos:column="31">(<argument><expr><call><name><name pos:line="33" pos:column="32">query</name><op:operator pos:line="33" pos:column="37">.</op:operator><name pos:line="33" pos:column="38">WordsAfterReform</name><op:operator pos:line="33" pos:column="54">.</op:operator><name pos:line="33" pos:column="55">Except</name></name><argument_list pos:line="33" pos:column="61">(<argument><expr><name pos:line="33" pos:column="62">terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="34" pos:column="17">criteria</name><op:operator pos:line="34" pos:column="25">.</op:operator><name pos:line="34" pos:column="26">Explanation</name></name> <op:operator pos:line="34" pos:column="38">=</op:operator> <call><name pos:line="34" pos:column="40">GetExplanation</name><argument_list pos:line="34" pos:column="54">(<argument><expr><name pos:line="34" pos:column="55">query</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="62">originalTerms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="35" pos:column="17">criteria</name><op:operator pos:line="35" pos:column="25">.</op:operator><name pos:line="35" pos:column="26">Reformed</name></name> <op:operator pos:line="35" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="35" pos:column="37">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="36" pos:column="17">criteria</name><op:operator pos:line="36" pos:column="25">.</op:operator><name pos:line="36" pos:column="26">RecommendedQueries</name></name> <op:operator pos:line="36" pos:column="45">=</op:operator> <call><name><name pos:line="36" pos:column="47">queries</name><op:operator pos:line="36" pos:column="54">.</op:operator><name pos:line="36" pos:column="55">GetRange</name></name><argument_list pos:line="36" pos:column="63">(<argument><expr><lit:literal type="number" pos:line="36" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="67">queries</name><op:operator pos:line="36" pos:column="74">.</op:operator><name pos:line="36" pos:column="75">Count</name></name> <op:operator pos:line="36" pos:column="81">-</op:operator> <lit:literal type="number" pos:line="36" pos:column="83">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="85">.</op:operator>
                    <call><name pos:line="37" pos:column="21">Select</name><argument_list pos:line="37" pos:column="27">(<argument><expr><lambda><name pos:line="37" pos:column="28">n</name> <op:operator pos:line="37" pos:column="30">=&gt;</op:operator> <name><name pos:line="37" pos:column="33">n</name><op:operator pos:line="37" pos:column="34">.</op:operator><name pos:line="37" pos:column="35">QueryString</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="47">.</op:operator><call><name pos:line="37" pos:column="48">AsQueryable</name><argument_list pos:line="37" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name><name pos:line="38" pos:column="21">queries</name><op:operator pos:line="38" pos:column="28">.</op:operator><name pos:line="38" pos:column="29">Count</name></name> <op:operator pos:line="38" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="38" pos:column="37">1</lit:literal></expr>)</condition><then pos:line="38" pos:column="39">
                <block pos:line="39" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="40" pos:column="21">LogEvents</name><op:operator pos:line="40" pos:column="30">.</op:operator><name pos:line="40" pos:column="31">IssueRecommendedQueries</name></name><argument_list pos:line="40" pos:column="54">(<argument><expr><call><name><name pos:line="40" pos:column="55">queries</name><op:operator pos:line="40" pos:column="62">.</op:operator><name pos:line="40" pos:column="63">GetRange</name></name><argument_list pos:line="40" pos:column="71">(<argument><expr><lit:literal type="number" pos:line="40" pos:column="72">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="75">queries</name><op:operator pos:line="40" pos:column="82">.</op:operator><name pos:line="40" pos:column="83">Count</name></name> <op:operator pos:line="40" pos:column="89">-</op:operator> <lit:literal type="number" pos:line="40" pos:column="91">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="93">.</op:operator>
                        <call><name pos:line="41" pos:column="25">ToArray</name><argument_list pos:line="41" pos:column="32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else pos:line="44" pos:column="13">else
            <block pos:line="45" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="46" pos:column="17">criteria</name><op:operator pos:line="46" pos:column="25">.</op:operator><name pos:line="46" pos:column="26">Explanation</name></name> <op:operator pos:line="46" pos:column="38">=</op:operator> <name><name pos:line="46" pos:column="40">String</name><op:operator pos:line="46" pos:column="46">.</op:operator><name pos:line="46" pos:column="47">Empty</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="47" pos:column="17">criteria</name><op:operator pos:line="47" pos:column="25">.</op:operator><name pos:line="47" pos:column="26">Reformed</name></name> <op:operator pos:line="47" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="47" pos:column="37">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="48" pos:column="17">criteria</name><op:operator pos:line="48" pos:column="25">.</op:operator><name pos:line="48" pos:column="26">RecommendedQueries</name></name> <op:operator pos:line="48" pos:column="45">=</op:operator> <call><name><name pos:line="48" pos:column="47">Enumerable</name><op:operator pos:line="48" pos:column="57">.</op:operator><name><name pos:line="48" pos:column="58">Empty</name><argument_list pos:line="48" pos:column="63">&lt;<argument><name pos:line="48" pos:column="64">String</name></argument>&gt;</argument_list></name></name><argument_list pos:line="48" pos:column="71">()</argument_list></call><op:operator pos:line="48" pos:column="73">.</op:operator><call><name pos:line="48" pos:column="74">AsQueryable</name><argument_list pos:line="48" pos:column="85">()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name pos:line="50" pos:column="13">terms</name><op:operator pos:line="50" pos:column="18">.</op:operator><name pos:line="50" pos:column="19">AddRange</name></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">specialTerms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="51" pos:column="13">criteria</name><op:operator pos:line="51" pos:column="21">.</op:operator><name pos:line="51" pos:column="22">SearchTerms</name></name> <op:operator pos:line="51" pos:column="34">=</op:operator> <call><name pos:line="51" pos:column="36">ConvertToSortedSet</name><argument_list pos:line="51" pos:column="54">(<argument><expr><name pos:line="51" pos:column="55">terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="54" pos:column="9">private</specifier> <specifier pos:line="54" pos:column="17">static</specifier> <name pos:line="54" pos:column="24">String</name><index pos:line="54" pos:column="30">[]</index></type> <name pos:line="54" pos:column="33">GetSpecialTerms</name><parameter_list pos:line="54" pos:column="48">(<param><decl><type><name><name pos:line="54" pos:column="49">IEnumerable</name><argument_list pos:line="54" pos:column="60">&lt;<argument><name pos:line="54" pos:column="61">string</name></argument>&gt;</argument_list></name></type> <name pos:line="54" pos:column="69">searchTerms</name></decl></param>)</parameter_list>
        <block pos:line="55" pos:column="9">{
            <return pos:line="56" pos:column="13">return <expr><call><name><name pos:line="56" pos:column="20">searchTerms</name><op:operator pos:line="56" pos:column="31">.</op:operator><name pos:line="56" pos:column="32">Where</name></name><argument_list pos:line="56" pos:column="37">(<argument><expr><lambda><name pos:line="56" pos:column="38">t</name> <op:operator pos:line="56" pos:column="40">=&gt;</op:operator> <op:operator pos:line="56" pos:column="43">!</op:operator><call><name><name pos:line="56" pos:column="44">t</name><op:operator pos:line="56" pos:column="45">.</op:operator><name pos:line="56" pos:column="46">NormalizeText</name></name><argument_list pos:line="56" pos:column="59">()</argument_list></call><op:operator pos:line="56" pos:column="61">.</op:operator><call><name pos:line="56" pos:column="62">Equals</name><argument_list pos:line="56" pos:column="68">(<argument><expr><name pos:line="56" pos:column="69">t</name></expr></argument>, 
                <argument><expr><name><name pos:line="57" pos:column="17">StringComparison</name><op:operator pos:line="57" pos:column="33">.</op:operator><name pos:line="57" pos:column="34">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="62">.</op:operator><call><name pos:line="57" pos:column="63">ToArray</name><argument_list pos:line="57" pos:column="70">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="60" pos:column="9">private</specifier> <specifier pos:line="60" pos:column="17">static</specifier> <name><name pos:line="60" pos:column="24">SortedSet</name><argument_list pos:line="60" pos:column="33">&lt;<argument><name pos:line="60" pos:column="34">String</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="42">ConvertToSortedSet</name><parameter_list pos:line="60" pos:column="60">(<param><decl><type><name><name pos:line="60" pos:column="61">IEnumerable</name><argument_list pos:line="60" pos:column="72">&lt;<argument><name pos:line="60" pos:column="73">string</name></argument>&gt;</argument_list></name></type> <name pos:line="60" pos:column="81">list</name></decl></param>)</parameter_list>
        <block pos:line="61" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">var</name></type> <name pos:line="62" pos:column="17">set</name> <init pos:line="62" pos:column="21">= <expr><op:operator pos:line="62" pos:column="23">new</op:operator> <call><name><name pos:line="62" pos:column="27">SortedSet</name><argument_list pos:line="62" pos:column="36">&lt;<argument><name pos:line="62" pos:column="37">string</name></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="63" pos:column="13">foreach (<init><decl><type><name pos:line="63" pos:column="22">var</name></type> <name pos:line="63" pos:column="26">s</name> <range pos:line="63" pos:column="28">in <expr><name pos:line="63" pos:column="31">list</name></expr></range></decl></init>)
            <block pos:line="64" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="65" pos:column="17">set</name><op:operator pos:line="65" pos:column="20">.</op:operator><name pos:line="65" pos:column="21">Add</name></name><argument_list pos:line="65" pos:column="24">(<argument><expr><name pos:line="65" pos:column="25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="67" pos:column="13">return <expr><name pos:line="67" pos:column="20">set</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="71" pos:column="9">private</specifier> <specifier pos:line="71" pos:column="17">static</specifier> <name pos:line="71" pos:column="24">String</name></type> <name pos:line="71" pos:column="31">GetExplanation</name><parameter_list pos:line="71" pos:column="45">(<param><decl><type><name pos:line="71" pos:column="46">IReformedQuery</name></type> <name pos:line="71" pos:column="61">query</name></decl></param>, <param><decl><type><name><name pos:line="71" pos:column="68">List</name><argument_list pos:line="71" pos:column="72">&lt;<argument><name pos:line="71" pos:column="73">String</name></argument>&gt;</argument_list></name></type> <name pos:line="71" pos:column="81">originalTerms</name></decl></param>)</parameter_list>
        <block pos:line="72" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="73" pos:column="13">var</name></type> <name pos:line="73" pos:column="17">appended</name> <init pos:line="73" pos:column="26">= <expr><lit:literal type="boolean" pos:line="73" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">var</name></type> <name pos:line="74" pos:column="17">sb</name> <init pos:line="74" pos:column="20">= <expr><op:operator pos:line="74" pos:column="22">new</op:operator> <call><name pos:line="74" pos:column="26">StringBuilder</name><argument_list pos:line="74" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">sb</name><op:operator pos:line="75" pos:column="15">.</op:operator><name pos:line="75" pos:column="16">Append</name></name><argument_list pos:line="75" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="23">"Added search term(s):"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="76" pos:column="13">foreach (<init><decl><type><name pos:line="76" pos:column="22">var</name></type> <name pos:line="76" pos:column="26">term</name> <range pos:line="76" pos:column="31">in <expr><call><name><name pos:line="76" pos:column="34">query</name><op:operator pos:line="76" pos:column="39">.</op:operator><name pos:line="76" pos:column="40">ReformedWords</name><op:operator pos:line="76" pos:column="53">.</op:operator><name pos:line="76" pos:column="54">Where</name></name><argument_list pos:line="76" pos:column="59">(<argument><expr><lambda><name pos:line="76" pos:column="60">term</name> <op:operator pos:line="76" pos:column="65">=&gt;</op:operator> <op:operator pos:line="76" pos:column="68">!</op:operator><call><name><name pos:line="76" pos:column="69">originalTerms</name><op:operator pos:line="76" pos:column="82">.</op:operator><name pos:line="76" pos:column="83">Contains</name></name><argument_list pos:line="76" pos:column="91">(<argument><expr><name><name pos:line="76" pos:column="92">term</name><op:operator pos:line="76" pos:column="96">.</op:operator><name pos:line="76" pos:column="97">NewTerm</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="77" pos:column="13">{
                <expr_stmt><expr><name pos:line="78" pos:column="17">appended</name> <op:operator pos:line="78" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="78" pos:column="28">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="79" pos:column="17">sb</name><op:operator pos:line="79" pos:column="19">.</op:operator><name pos:line="79" pos:column="20">Append</name></name><argument_list pos:line="79" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="27">" "</lit:literal> <op:operator pos:line="79" pos:column="31">+</op:operator> <name><name pos:line="79" pos:column="33">term</name><op:operator pos:line="79" pos:column="37">.</op:operator><name pos:line="79" pos:column="38">NewTerm</name></name> <op:operator pos:line="79" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="79" pos:column="48">", "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="81" pos:column="13">return <expr><name pos:line="81" pos:column="20">appended</name> <op:operator pos:line="81" pos:column="29">?</op:operator> <call><name><name pos:line="81" pos:column="31">sb</name><op:operator pos:line="81" pos:column="33">.</op:operator><name pos:line="81" pos:column="34">ToString</name></name><argument_list pos:line="81" pos:column="42">()</argument_list></call><op:operator pos:line="81" pos:column="44">.</op:operator><call><name pos:line="81" pos:column="45">TrimEnd</name><argument_list pos:line="81" pos:column="52">(<argument><expr><op:operator pos:line="81" pos:column="53">new</op:operator> <name><name pos:line="81" pos:column="57">char</name><index pos:line="81" pos:column="61">[]</index></name><block pos:line="81" pos:column="63">{<expr><lit:literal type="char" pos:line="81" pos:column="64">','</lit:literal></expr><op:operator pos:line="81" pos:column="67">,</op:operator> <expr><lit:literal type="char" pos:line="81" pos:column="69">' '</lit:literal></expr>}</block></expr></argument>)</argument_list></call> <op:operator pos:line="81" pos:column="75">+</op:operator> <lit:literal type="string" pos:line="81" pos:column="77">". "</lit:literal> <op:operator pos:line="81" pos:column="82">:</op:operator> <name><name pos:line="81" pos:column="84">String</name><op:operator pos:line="81" pos:column="90">.</op:operator><name pos:line="81" pos:column="91">Empty</name></name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="84" pos:column="9">private</specifier> <specifier pos:line="84" pos:column="17">static</specifier> <name><name pos:line="84" pos:column="24">IEnumerable</name><argument_list pos:line="84" pos:column="35">&lt;<argument><name pos:line="84" pos:column="36">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="84" pos:column="52">GetReformedQuery</name><parameter_list pos:line="84" pos:column="68">(<param><decl><type><name><name pos:line="84" pos:column="69">IEnumerable</name><argument_list pos:line="84" pos:column="80">&lt;<argument><name pos:line="84" pos:column="81">string</name></argument>&gt;</argument_list></name></type> <name pos:line="84" pos:column="89">words</name></decl></param>)</parameter_list>
        <block pos:line="85" pos:column="9">{
            <expr_stmt><expr><name pos:line="86" pos:column="13">words</name> <op:operator pos:line="86" pos:column="19">=</op:operator> <call><name><name pos:line="86" pos:column="21">words</name><op:operator pos:line="86" pos:column="26">.</op:operator><name pos:line="86" pos:column="27">ToList</name></name><argument_list pos:line="86" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">var</name></type> <name pos:line="87" pos:column="17">reformer</name> <init pos:line="87" pos:column="26">= <expr><call><name><name pos:line="87" pos:column="28">ServiceLocator</name><op:operator pos:line="87" pos:column="42">.</op:operator><name><name pos:line="87" pos:column="43">Resolve</name><argument_list pos:line="87" pos:column="50">&lt;<argument><name pos:line="87" pos:column="51">QueryReformerManager</name></argument>&gt;</argument_list></name></name><argument_list pos:line="87" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="88" pos:column="13">return <expr><call><name><name pos:line="88" pos:column="20">reformer</name><op:operator pos:line="88" pos:column="28">.</op:operator><name pos:line="88" pos:column="29">ReformTermsSynchronously</name></name><argument_list pos:line="88" pos:column="53">(<argument><expr><name pos:line="88" pos:column="54">words</name></expr></argument>)</argument_list></call><op:operator pos:line="88" pos:column="60">.</op:operator><call><name pos:line="88" pos:column="61">Where</name><argument_list pos:line="88" pos:column="66">(<argument><expr><lambda><name pos:line="88" pos:column="67">r</name> <op:operator pos:line="88" pos:column="69">=&gt;</op:operator> <call><name><name pos:line="88" pos:column="72">r</name><op:operator pos:line="88" pos:column="73">.</op:operator><name pos:line="88" pos:column="74">ReformedWords</name><op:operator pos:line="88" pos:column="87">.</op:operator><name pos:line="88" pos:column="88">Any</name></name><argument_list pos:line="88" pos:column="91">(<argument><expr><lambda><name pos:line="88" pos:column="92">w</name> <op:operator pos:line="88" pos:column="94">=&gt;</op:operator> 
                <name><name pos:line="89" pos:column="17">w</name><op:operator pos:line="89" pos:column="18">.</op:operator><name pos:line="89" pos:column="19">Category</name></name> <op:operator pos:line="89" pos:column="28">!=</op:operator> <name><name pos:line="89" pos:column="31">TermChangeCategory</name><op:operator pos:line="89" pos:column="49">.</op:operator><name pos:line="89" pos:column="50">NOT_CHANGED</name></name></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="89" pos:column="63">.</op:operator><call><name pos:line="89" pos:column="64">ToList</name><argument_list pos:line="89" pos:column="70">()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
