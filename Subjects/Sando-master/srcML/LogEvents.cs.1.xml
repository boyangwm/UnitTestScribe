<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Logging\EVENTS\LogEvents.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">ExtensionContracts</name><op:operator pos:line="6" pos:column="31">.</op:operator><name pos:line="6" pos:column="32">ResultsReordererContracts</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Logging</name><op:operator pos:line="8" pos:column="29">.</op:operator><name pos:line="8" pos:column="30">Events</name></name>
<block pos:line="9" pos:column="1">{
	<class><specifier pos:line="10" pos:column="9">public</specifier> <specifier pos:line="10" pos:column="16">partial</specifier> class <name pos:line="10" pos:column="30">LogEvents</name>
	<block pos:line="11" pos:column="9">{
        <function><type><specifier pos:line="12" pos:column="9">public</specifier> <specifier pos:line="12" pos:column="16">static</specifier> <name pos:line="12" pos:column="23">void</name></type> <name pos:line="12" pos:column="28">TestLogging</name><parameter_list pos:line="12" pos:column="39">(<param><decl><type><name pos:line="12" pos:column="40">Object</name></type> <name pos:line="12" pos:column="47">sender</name></decl></param>)</parameter_list>
        <block pos:line="13" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="14" pos:column="36">.</op:operator><name pos:line="14" pos:column="37">WriteInfoLogMessage</name></name><argument_list pos:line="14" pos:column="56">(<argument><expr><call><name><name pos:line="14" pos:column="57">sender</name><op:operator pos:line="14" pos:column="63">.</op:operator><name pos:line="14" pos:column="64">GetType</name></name><argument_list pos:line="14" pos:column="71">()</argument_list></call><op:operator pos:line="14" pos:column="73">.</op:operator><call><name pos:line="14" pos:column="74">ToString</name><argument_list pos:line="14" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="14" pos:column="86">"Message from the logger"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="15" pos:column="13">if<condition pos:line="15" pos:column="15">(<expr><name pos:line="15" pos:column="16">sender</name> <op:operator pos:line="15" pos:column="23">as</op:operator> <name pos:line="15" pos:column="26">string</name> <op:operator pos:line="15" pos:column="33">!=</op:operator><name pos:line="15" pos:column="35">null</name></expr>)</condition><then pos:line="15" pos:column="40">
                <expr_stmt><expr><call><name><name pos:line="16" pos:column="17">DefaultLogEventHandlers</name><op:operator pos:line="16" pos:column="40">.</op:operator><name pos:line="16" pos:column="41">WriteInfoLogMessage</name></name><argument_list pos:line="16" pos:column="60">(<argument><expr><call><name><name pos:line="16" pos:column="61">sender</name><op:operator pos:line="16" pos:column="67">.</op:operator><name pos:line="16" pos:column="68">GetType</name></name><argument_list pos:line="16" pos:column="75">()</argument_list></call><op:operator pos:line="16" pos:column="77">.</op:operator><call><name pos:line="16" pos:column="78">ToString</name><argument_list pos:line="16" pos:column="86">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="90">sender</name> <op:operator pos:line="16" pos:column="97">as</op:operator> <name pos:line="16" pos:column="100">string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>

        <cpp:region pos:line="19" pos:column="9">#<cpp:directive pos:line="19" pos:column="10">region</cpp:directive> ParserEvents</cpp:region>

        <function><type><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">static</specifier> <name pos:line="21" pos:column="23">void</name></type> <name pos:line="21" pos:column="28">ParserFileNotFoundInArchiveError</name><parameter_list pos:line="21" pos:column="60">(<param><decl><type><name pos:line="21" pos:column="61">Object</name></type> <name pos:line="21" pos:column="68">sender</name></decl></param>, <param><decl><type><name pos:line="21" pos:column="76">string</name></type> <name pos:line="21" pos:column="83">fileName</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="23" pos:column="36">.</op:operator><name pos:line="23" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="23" pos:column="57">(<argument><expr><call><name><name pos:line="23" pos:column="58">sender</name><op:operator pos:line="23" pos:column="64">.</op:operator><name pos:line="23" pos:column="65">GetType</name></name><argument_list pos:line="23" pos:column="72">()</argument_list></call><op:operator pos:line="23" pos:column="74">.</op:operator><call><name pos:line="23" pos:column="75">ToString</name><argument_list pos:line="23" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="23" pos:column="87">"File not found in archive: "</lit:literal> <op:operator pos:line="23" pos:column="117">+</op:operator> <name pos:line="23" pos:column="119">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="26" pos:column="9">public</specifier> <specifier pos:line="26" pos:column="16">static</specifier> <name pos:line="26" pos:column="23">void</name></type> <name pos:line="26" pos:column="28">ParserGenericFileError</name><parameter_list pos:line="26" pos:column="50">(<param><decl><type><name pos:line="26" pos:column="51">Object</name></type> <name pos:line="26" pos:column="58">sender</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="66">string</name></type> <name pos:line="26" pos:column="73">fileName</name></decl></param>)</parameter_list>
        <block pos:line="27" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="28" pos:column="36">.</op:operator><name pos:line="28" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="28" pos:column="57">(<argument><expr><call><name><name pos:line="28" pos:column="58">sender</name><op:operator pos:line="28" pos:column="64">.</op:operator><name pos:line="28" pos:column="65">GetType</name></name><argument_list pos:line="28" pos:column="72">()</argument_list></call><op:operator pos:line="28" pos:column="74">.</op:operator><call><name pos:line="28" pos:column="75">ToString</name><argument_list pos:line="28" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="28" pos:column="87">"The file could not be read: "</lit:literal> <op:operator pos:line="28" pos:column="118">+</op:operator> <name pos:line="28" pos:column="120">fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><specifier pos:line="31" pos:column="17">public</specifier> <specifier pos:line="31" pos:column="24">static</specifier> <name pos:line="31" pos:column="31">void</name></type> <name pos:line="31" pos:column="36">ParserGenericException</name><parameter_list pos:line="31" pos:column="58">(<param><decl><type><name pos:line="31" pos:column="59">Object</name></type> <name pos:line="31" pos:column="66">sender</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="74">Exception</name></type> <name pos:line="31" pos:column="84">exception</name></decl></param>)</parameter_list>
		<block pos:line="32" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="33" pos:column="25">DefaultLogEventHandlers</name><op:operator pos:line="33" pos:column="48">.</op:operator><name pos:line="33" pos:column="49">WriteErrorLogMessage</name></name><argument_list pos:line="33" pos:column="69">(<argument><expr><call><name><name pos:line="33" pos:column="70">sender</name><op:operator pos:line="33" pos:column="76">.</op:operator><name pos:line="33" pos:column="77">GetType</name></name><argument_list pos:line="33" pos:column="84">()</argument_list></call><op:operator pos:line="33" pos:column="86">.</op:operator><call><name pos:line="33" pos:column="87">ToString</name><argument_list pos:line="33" pos:column="95">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="99">""</lit:literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="103">exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <cpp:endregion pos:line="36" pos:column="9">#<cpp:directive pos:line="36" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="38" pos:column="9">#<cpp:directive pos:line="38" pos:column="10">region</cpp:directive> UIEvents</cpp:region>

        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <specifier pos:line="40" pos:column="16">static</specifier> <name pos:line="40" pos:column="23">void</name></type> <name pos:line="40" pos:column="28">InvalidCharactersInQuery</name><parameter_list pos:line="40" pos:column="52">(<param><decl><type><name pos:line="40" pos:column="53">Object</name></type> <name pos:line="40" pos:column="60">sender</name></decl></param>)</parameter_list>
        <block pos:line="41" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">DataCollectionLogEventHandlers</name><op:operator pos:line="42" pos:column="43">.</op:operator><name pos:line="42" pos:column="44">WriteInfoLogMessage</name></name><argument_list pos:line="42" pos:column="63">(<argument><expr><call><name><name pos:line="42" pos:column="64">sender</name><op:operator pos:line="42" pos:column="70">.</op:operator><name pos:line="42" pos:column="71">GetType</name></name><argument_list pos:line="42" pos:column="78">()</argument_list></call><op:operator pos:line="42" pos:column="80">.</op:operator><call><name pos:line="42" pos:column="81">ToString</name><argument_list pos:line="42" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="42" pos:column="93">"Query Error: Invalid characters found in query, search aborted."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="45" pos:column="9">public</specifier> <specifier pos:line="45" pos:column="16">static</specifier> <name pos:line="45" pos:column="23">void</name></type> <name pos:line="45" pos:column="28">HighlightingNpe</name><parameter_list pos:line="45" pos:column="43">(<param><decl><type><name pos:line="45" pos:column="44">Object</name></type> <name pos:line="45" pos:column="51">sender</name></decl></param>)</parameter_list>
        <block pos:line="46" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">DataCollectionLogEventHandlers</name><op:operator pos:line="47" pos:column="43">.</op:operator><name pos:line="47" pos:column="44">WriteInfoLogMessage</name></name><argument_list pos:line="47" pos:column="63">(<argument><expr><call><name><name pos:line="47" pos:column="64">sender</name><op:operator pos:line="47" pos:column="70">.</op:operator><name pos:line="47" pos:column="71">GetType</name></name><argument_list pos:line="47" pos:column="78">()</argument_list></call><op:operator pos:line="47" pos:column="80">.</op:operator><call><name pos:line="47" pos:column="81">ToString</name><argument_list pos:line="47" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="47" pos:column="93">"Problem during query highlighting: A result was generated that has no summary."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="50" pos:column="9">public</specifier> <specifier pos:line="50" pos:column="16">static</specifier> <name pos:line="50" pos:column="23">void</name></type> <name pos:line="50" pos:column="28">SelectingRecommendationItem</name><parameter_list pos:line="50" pos:column="55">(<param><decl><type><name pos:line="50" pos:column="56">Object</name></type> <name pos:line="50" pos:column="63">sender</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="71">int</name></type> <name pos:line="50" pos:column="75">rank</name></decl></param>)</parameter_list>
        <block pos:line="51" pos:column="9">{
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name pos:line="52" pos:column="29">rank</name> <op:operator pos:line="52" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="52" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="52" pos:column="38">
			<block pos:line="53" pos:column="25">{
                <if pos:line="54" pos:column="17">if<condition pos:line="54" pos:column="19">(<expr><name pos:line="54" pos:column="20">sender</name><op:operator pos:line="54" pos:column="26">!=</op:operator><name pos:line="54" pos:column="28">null</name></expr>)</condition><then pos:line="54" pos:column="33">
				    <expr_stmt><expr><call><name><name pos:line="55" pos:column="37">DataCollectionLogEventHandlers</name><op:operator pos:line="55" pos:column="67">.</op:operator><name pos:line="55" pos:column="68">WriteInfoLogMessage</name></name><argument_list pos:line="55" pos:column="87">(<argument><expr><call><name><name pos:line="55" pos:column="88">sender</name><op:operator pos:line="55" pos:column="94">.</op:operator><name pos:line="55" pos:column="95">GetType</name></name><argument_list pos:line="55" pos:column="102">()</argument_list></call><op:operator pos:line="55" pos:column="104">.</op:operator><call><name pos:line="55" pos:column="105">ToString</name><argument_list pos:line="55" pos:column="113">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="117">"Recommendation item selected: SelectedRecommendationRank="</lit:literal> <op:operator pos:line="55" pos:column="177">+</op:operator> <name pos:line="55" pos:column="179">rank</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="59" pos:column="9">public</specifier> <specifier pos:line="59" pos:column="16">static</specifier> <name pos:line="59" pos:column="23">void</name></type> <name pos:line="59" pos:column="28">SelectingCodeSearchResult</name><parameter_list pos:line="59" pos:column="53">(<param><decl><type><name pos:line="59" pos:column="54">Object</name></type> <name pos:line="59" pos:column="61">sender</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="69">int</name></type> <name pos:line="59" pos:column="73">rank</name></decl></param>)</parameter_list>
        <block pos:line="60" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="61" pos:column="13">DataCollectionLogEventHandlers</name><op:operator pos:line="61" pos:column="43">.</op:operator><name pos:line="61" pos:column="44">WriteInfoLogMessage</name></name><argument_list pos:line="61" pos:column="63">(<argument><expr><call><name><name pos:line="61" pos:column="64">sender</name><op:operator pos:line="61" pos:column="70">.</op:operator><name pos:line="61" pos:column="71">GetType</name></name><argument_list pos:line="61" pos:column="78">()</argument_list></call><op:operator pos:line="61" pos:column="80">.</op:operator><call><name pos:line="61" pos:column="81">ToString</name><argument_list pos:line="61" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="93">"User single-clicked a result: SingleClickedResultRank="</lit:literal> <op:operator pos:line="61" pos:column="150">+</op:operator> <name pos:line="61" pos:column="152">rank</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="64" pos:column="9">public</specifier> <specifier pos:line="64" pos:column="16">static</specifier> <name pos:line="64" pos:column="23">void</name></type> <name pos:line="64" pos:column="28">OpeningCodeSearchResult</name><parameter_list pos:line="64" pos:column="51">(<param><decl><type><name pos:line="64" pos:column="52">CodeSearchResult</name></type> <name pos:line="64" pos:column="69">result</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="77">int</name></type> <name pos:line="64" pos:column="81">rank</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="87">string</name></type> <name pos:line="64" pos:column="94">queryMatchDescription</name></decl></param>)</parameter_list>
        <block pos:line="65" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">string</name></type> <name pos:line="66" pos:column="20">lang</name> <init pos:line="66" pos:column="25">= <expr><lit:literal type="string" pos:line="66" pos:column="27">"OtherLang"</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">var</name></type> <name pos:line="67" pos:column="17">resultFile</name> <init pos:line="67" pos:column="28">= <expr><name><name pos:line="67" pos:column="30">result</name><op:operator pos:line="67" pos:column="36">.</op:operator><name pos:line="67" pos:column="37">FileName</name></name></expr></init></decl>;</decl_stmt>
            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><call><name><name pos:line="68" pos:column="17">resultFile</name><op:operator pos:line="68" pos:column="27">.</op:operator><name pos:line="68" pos:column="28">EndsWith</name></name><argument_list pos:line="68" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="37">".cs"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="68" pos:column="44"> <expr_stmt><expr><name pos:line="68" pos:column="45">lang</name> <op:operator pos:line="68" pos:column="50">=</op:operator> <lit:literal type="string" pos:line="68" pos:column="52">"C#"</lit:literal></expr>;</expr_stmt></then></if>
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><call><name><name pos:line="69" pos:column="17">resultFile</name><op:operator pos:line="69" pos:column="27">.</op:operator><name pos:line="69" pos:column="28">EndsWith</name></name><argument_list pos:line="69" pos:column="36">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="37">".cpp"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="69" pos:column="45">||</op:operator> <call><name><name pos:line="69" pos:column="48">resultFile</name><op:operator pos:line="69" pos:column="58">.</op:operator><name pos:line="69" pos:column="59">EndsWith</name></name><argument_list pos:line="69" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="68">".c"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="69" pos:column="74">||</op:operator> <call><name><name pos:line="69" pos:column="77">resultFile</name><op:operator pos:line="69" pos:column="87">.</op:operator><name pos:line="69" pos:column="88">EndsWith</name></name><argument_list pos:line="69" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="97">".h"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="69" pos:column="103">||</op:operator> <call><name><name pos:line="69" pos:column="106">resultFile</name><op:operator pos:line="69" pos:column="116">.</op:operator><name pos:line="69" pos:column="117">EndsWith</name></name><argument_list pos:line="69" pos:column="125">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="126">".cc"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="69" pos:column="133"> <expr_stmt><expr><name pos:line="69" pos:column="134">lang</name> <op:operator pos:line="69" pos:column="139">=</op:operator> <lit:literal type="string" pos:line="69" pos:column="141">"C++"</lit:literal></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">DataCollectionLogEventHandlers</name><op:operator pos:line="70" pos:column="43">.</op:operator><name pos:line="70" pos:column="44">WriteInfoLogMessage</name></name><argument_list pos:line="70" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="64">"FileOpener"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="78">"User double-clicked a result: TypeOfResult="</lit:literal> <op:operator pos:line="70" pos:column="124">+</op:operator>  <call><name><name pos:line="70" pos:column="127">result</name><op:operator pos:line="70" pos:column="133">.</op:operator><name pos:line="70" pos:column="134">ProgramElementType</name><op:operator pos:line="70" pos:column="152">.</op:operator><name pos:line="70" pos:column="153">ToString</name></name><argument_list pos:line="70" pos:column="161">()</argument_list></call> <op:operator pos:line="70" pos:column="164">+</op:operator>
																	<lit:literal type="string" pos:line="71" pos:column="137">", QueryToResultSimilarityDescription="</lit:literal> <op:operator pos:line="71" pos:column="177">+</op:operator> <name pos:line="71" pos:column="179">queryMatchDescription</name> <op:operator pos:line="71" pos:column="201">+</op:operator>
																	<lit:literal type="string" pos:line="72" pos:column="137">", ResultLanguage="</lit:literal> <op:operator pos:line="72" pos:column="157">+</op:operator> <name pos:line="72" pos:column="159">lang</name> <op:operator pos:line="72" pos:column="164">+</op:operator> 
																	<lit:literal type="string" pos:line="73" pos:column="137">", ResultLuceneScore="</lit:literal> <op:operator pos:line="73" pos:column="160">+</op:operator> <name><name pos:line="73" pos:column="162">result</name><op:operator pos:line="73" pos:column="168">.</op:operator><name pos:line="73" pos:column="169">Score</name></name> <op:operator pos:line="73" pos:column="175">+</op:operator> 
																	<lit:literal type="string" pos:line="74" pos:column="137">", DoubleClickedResultRank="</lit:literal> <op:operator pos:line="74" pos:column="166">+</op:operator> <name pos:line="74" pos:column="168">rank</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="77" pos:column="9">public</specifier> <specifier pos:line="77" pos:column="16">static</specifier> <name pos:line="77" pos:column="23">void</name></type> <name pos:line="77" pos:column="28">SolutionOpened</name><parameter_list pos:line="77" pos:column="42">(<param><decl><type><name pos:line="77" pos:column="43">Object</name></type> <name pos:line="77" pos:column="50">sender</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="58">string</name></type> <name pos:line="77" pos:column="65">solutionName</name></decl></param>)</parameter_list>
        <block pos:line="78" pos:column="9">{
			<expr_stmt><expr><call><name><name pos:line="79" pos:column="25">DataCollectionLogEventHandlers</name><op:operator pos:line="79" pos:column="55">.</op:operator><name pos:line="79" pos:column="56">UploadLogFiles</name></name><argument_list pos:line="79" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">DataCollectionLogEventHandlers</name><op:operator pos:line="80" pos:column="43">.</op:operator><name pos:line="80" pos:column="44">WriteInfoLogMessage</name></name><argument_list pos:line="80" pos:column="63">(<argument><expr><call><name><name pos:line="80" pos:column="64">sender</name><op:operator pos:line="80" pos:column="70">.</op:operator><name pos:line="80" pos:column="71">GetType</name></name><argument_list pos:line="80" pos:column="78">()</argument_list></call><op:operator pos:line="80" pos:column="80">.</op:operator><call><name pos:line="80" pos:column="81">ToString</name><argument_list pos:line="80" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="80" pos:column="93">"Solution opened: SolutionHash="</lit:literal> <op:operator pos:line="80" pos:column="126">+</op:operator> <call><name><name pos:line="80" pos:column="128">solutionName</name><op:operator pos:line="80" pos:column="140">.</op:operator><name pos:line="80" pos:column="141">GetHashCode</name></name><argument_list pos:line="80" pos:column="152">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="83" pos:column="9">public</specifier> <specifier pos:line="83" pos:column="16">static</specifier> <name pos:line="83" pos:column="23">void</name></type> <name pos:line="83" pos:column="28">UIGenericError</name><parameter_list pos:line="83" pos:column="42">(<param><decl><type><name pos:line="83" pos:column="43">Object</name></type> <name pos:line="83" pos:column="50">sender</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="58">Exception</name></type> <name pos:line="83" pos:column="68">ex</name></decl></param>)</parameter_list>
        <block pos:line="84" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="85" pos:column="36">.</op:operator><name pos:line="85" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="85" pos:column="57">(<argument><expr><call><name><name pos:line="85" pos:column="58">sender</name><op:operator pos:line="85" pos:column="64">.</op:operator><name pos:line="85" pos:column="65">GetType</name></name><argument_list pos:line="85" pos:column="72">()</argument_list></call><op:operator pos:line="85" pos:column="74">.</op:operator><call><name pos:line="85" pos:column="75">ToString</name><argument_list pos:line="85" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="85" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="88" pos:column="9">public</specifier> <specifier pos:line="88" pos:column="16">static</specifier> <name pos:line="88" pos:column="23">void</name></type> <name pos:line="88" pos:column="28">UISandoSearchingError</name><parameter_list pos:line="88" pos:column="49">(<param><decl><type><name pos:line="88" pos:column="50">Object</name></type> <name pos:line="88" pos:column="57">sender</name></decl></param>, <param><decl><type><name pos:line="88" pos:column="65">Exception</name></type> <name pos:line="88" pos:column="75">ex</name></decl></param>)</parameter_list>
        <block pos:line="89" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="90" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="90" pos:column="36">.</op:operator><name pos:line="90" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="90" pos:column="57">(<argument><expr><call><name><name pos:line="90" pos:column="58">sender</name><op:operator pos:line="90" pos:column="64">.</op:operator><name pos:line="90" pos:column="65">GetType</name></name><argument_list pos:line="90" pos:column="72">()</argument_list></call><op:operator pos:line="90" pos:column="74">.</op:operator><call><name pos:line="90" pos:column="75">ToString</name><argument_list pos:line="90" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="93" pos:column="9">public</specifier> <specifier pos:line="93" pos:column="16">static</specifier> <name pos:line="93" pos:column="23">void</name></type> <name pos:line="93" pos:column="28">UIRespondToSolutionOpeningError</name><parameter_list pos:line="93" pos:column="59">(<param><decl><type><name pos:line="93" pos:column="60">Object</name></type> <name pos:line="93" pos:column="67">sender</name></decl></param>, <param><decl><type><name pos:line="93" pos:column="75">Exception</name></type> <name pos:line="93" pos:column="85">ex</name></decl></param>)</parameter_list>
        <block pos:line="94" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="95" pos:column="36">.</op:operator><name pos:line="95" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="95" pos:column="57">(<argument><expr><call><name><name pos:line="95" pos:column="58">sender</name><op:operator pos:line="95" pos:column="64">.</op:operator><name pos:line="95" pos:column="65">GetType</name></name><argument_list pos:line="95" pos:column="72">()</argument_list></call><op:operator pos:line="95" pos:column="74">.</op:operator><call><name pos:line="95" pos:column="75">ToString</name><argument_list pos:line="95" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="98" pos:column="9">public</specifier> <specifier pos:line="98" pos:column="16">static</specifier> <name pos:line="98" pos:column="23">void</name></type> <name pos:line="98" pos:column="28">UISolutionOpeningError</name><parameter_list pos:line="98" pos:column="50">(<param><decl><type><name pos:line="98" pos:column="51">Object</name></type> <name pos:line="98" pos:column="58">sender</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="66">Exception</name></type> <name pos:line="98" pos:column="76">ex</name></decl></param>)</parameter_list>
        <block pos:line="99" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="100" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="100" pos:column="36">.</op:operator><name pos:line="100" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="100" pos:column="57">(<argument><expr><call><name><name pos:line="100" pos:column="58">sender</name><op:operator pos:line="100" pos:column="64">.</op:operator><name pos:line="100" pos:column="65">GetType</name></name><argument_list pos:line="100" pos:column="72">()</argument_list></call><op:operator pos:line="100" pos:column="74">.</op:operator><call><name pos:line="100" pos:column="75">ToString</name><argument_list pos:line="100" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="103" pos:column="9">public</specifier> <specifier pos:line="103" pos:column="16">static</specifier> <name pos:line="103" pos:column="23">void</name></type> <name pos:line="103" pos:column="28">UISolutionClosingError</name><parameter_list pos:line="103" pos:column="50">(<param><decl><type><name pos:line="103" pos:column="51">Object</name></type> <name pos:line="103" pos:column="58">sender</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="66">Exception</name></type> <name pos:line="103" pos:column="76">ex</name></decl></param>)</parameter_list>
        <block pos:line="104" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="105" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="105" pos:column="36">.</op:operator><name pos:line="105" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="105" pos:column="57">(<argument><expr><call><name><name pos:line="105" pos:column="58">sender</name><op:operator pos:line="105" pos:column="64">.</op:operator><name pos:line="105" pos:column="65">GetType</name></name><argument_list pos:line="105" pos:column="72">()</argument_list></call><op:operator pos:line="105" pos:column="74">.</op:operator><call><name pos:line="105" pos:column="75">ToString</name><argument_list pos:line="105" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="108" pos:column="9">public</specifier> <specifier pos:line="108" pos:column="16">static</specifier> <name pos:line="108" pos:column="23">void</name></type> <name pos:line="108" pos:column="28">UISandoWindowActivationError</name><parameter_list pos:line="108" pos:column="56">(<param><decl><type><name pos:line="108" pos:column="57">Object</name></type> <name pos:line="108" pos:column="64">sender</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="72">Exception</name></type> <name pos:line="108" pos:column="82">ex</name></decl></param>)</parameter_list>
        <block pos:line="109" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="110" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="110" pos:column="36">.</op:operator><name pos:line="110" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="110" pos:column="57">(<argument><expr><call><name><name pos:line="110" pos:column="58">sender</name><op:operator pos:line="110" pos:column="64">.</op:operator><name pos:line="110" pos:column="65">GetType</name></name><argument_list pos:line="110" pos:column="72">()</argument_list></call><op:operator pos:line="110" pos:column="74">.</op:operator><call><name pos:line="110" pos:column="75">ToString</name><argument_list pos:line="110" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="110" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="113" pos:column="9">public</specifier> <specifier pos:line="113" pos:column="16">static</specifier> <name pos:line="113" pos:column="23">void</name></type> <name pos:line="113" pos:column="28">UISandoInitializationError</name><parameter_list pos:line="113" pos:column="54">(<param><decl><type><name pos:line="113" pos:column="55">Object</name></type> <name pos:line="113" pos:column="62">sender</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="70">Exception</name></type> <name pos:line="113" pos:column="80">ex</name></decl></param>)</parameter_list>
        <block pos:line="114" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="115" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="115" pos:column="36">.</op:operator><name pos:line="115" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="115" pos:column="57">(<argument><expr><call><name><name pos:line="115" pos:column="58">sender</name><op:operator pos:line="115" pos:column="64">.</op:operator><name pos:line="115" pos:column="65">GetType</name></name><argument_list pos:line="115" pos:column="72">()</argument_list></call><op:operator pos:line="115" pos:column="74">.</op:operator><call><name pos:line="115" pos:column="75">ToString</name><argument_list pos:line="115" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="115" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><specifier pos:line="118" pos:column="17">public</specifier> <specifier pos:line="118" pos:column="24">static</specifier> <name pos:line="118" pos:column="31">void</name></type> <name pos:line="118" pos:column="36">UISandoBeginInitialization</name><parameter_list pos:line="118" pos:column="62">(<param><decl><type><name pos:line="118" pos:column="63">Object</name></type> <name pos:line="118" pos:column="70">sender</name></decl></param>)</parameter_list>
        <block pos:line="119" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="120" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="120" pos:column="36">.</op:operator><name pos:line="120" pos:column="37">WriteInfoLogMessage</name></name><argument_list pos:line="120" pos:column="56">(<argument><expr><call><name><name pos:line="120" pos:column="57">sender</name><op:operator pos:line="120" pos:column="63">.</op:operator><name pos:line="120" pos:column="64">GetType</name></name><argument_list pos:line="120" pos:column="71">()</argument_list></call><op:operator pos:line="120" pos:column="73">.</op:operator><call><name pos:line="120" pos:column="74">ToString</name><argument_list pos:line="120" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="86">"Sando initialization started"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="123" pos:column="9">public</specifier> <specifier pos:line="123" pos:column="16">static</specifier> <name pos:line="123" pos:column="23">void</name></type> <name pos:line="123" pos:column="28">UIIndexUpdateError</name><parameter_list pos:line="123" pos:column="46">(<param><decl><type><name pos:line="123" pos:column="47">Object</name></type> <name pos:line="123" pos:column="54">sender</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="62">Exception</name></type> <name pos:line="123" pos:column="72">ex</name></decl></param>)</parameter_list>
        <block pos:line="124" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="125" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="125" pos:column="36">.</op:operator><name pos:line="125" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="125" pos:column="57">(<argument><expr><call><name><name pos:line="125" pos:column="58">sender</name><op:operator pos:line="125" pos:column="64">.</op:operator><name pos:line="125" pos:column="65">GetType</name></name><argument_list pos:line="125" pos:column="72">()</argument_list></call><op:operator pos:line="125" pos:column="74">.</op:operator><call><name pos:line="125" pos:column="75">ToString</name><argument_list pos:line="125" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="125" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="128" pos:column="9">public</specifier> <specifier pos:line="128" pos:column="16">static</specifier> <name pos:line="128" pos:column="23">void</name></type> <name pos:line="128" pos:column="28">UIOpenFileError</name><parameter_list pos:line="128" pos:column="43">(<param><decl><type><name pos:line="128" pos:column="44">Object</name></type> <name pos:line="128" pos:column="51">sender</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="59">Exception</name></type> <name pos:line="128" pos:column="69">ex</name></decl></param>)</parameter_list>
        <block pos:line="129" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="130" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="130" pos:column="36">.</op:operator><name pos:line="130" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="130" pos:column="57">(<argument><expr><call><name><name pos:line="130" pos:column="58">sender</name><op:operator pos:line="130" pos:column="64">.</op:operator><name pos:line="130" pos:column="65">GetType</name></name><argument_list pos:line="130" pos:column="72">()</argument_list></call><op:operator pos:line="130" pos:column="74">.</op:operator><call><name pos:line="130" pos:column="75">ToString</name><argument_list pos:line="130" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="130" pos:column="91">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<function><type><specifier pos:line="133" pos:column="17">public</specifier> <specifier pos:line="133" pos:column="24">static</specifier> <name pos:line="133" pos:column="31">void</name></type> <name pos:line="133" pos:column="36">UIMonitoringStopped</name><parameter_list pos:line="133" pos:column="55">(<param><decl><type><name pos:line="133" pos:column="56">Object</name></type> <name pos:line="133" pos:column="63">sender</name></decl></param>)</parameter_list>
		<block pos:line="134" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="135" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="135" pos:column="36">.</op:operator><name pos:line="135" pos:column="37">WriteInfoLogMessage</name></name><argument_list pos:line="135" pos:column="56">(<argument><expr><call><name><name pos:line="135" pos:column="57">sender</name><op:operator pos:line="135" pos:column="63">.</op:operator><name pos:line="135" pos:column="64">GetType</name></name><argument_list pos:line="135" pos:column="71">()</argument_list></call><op:operator pos:line="135" pos:column="73">.</op:operator><call><name pos:line="135" pos:column="74">ToString</name><argument_list pos:line="135" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="135" pos:column="86">"Monitoring stopped"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <cpp:endregion pos:line="138" pos:column="9">#<cpp:directive pos:line="138" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="140" pos:column="9">#<cpp:directive pos:line="140" pos:column="10">region</cpp:directive> IndexerEvents</cpp:region>

        <function><type><specifier pos:line="142" pos:column="9">public</specifier> <specifier pos:line="142" pos:column="16">static</specifier> <name pos:line="142" pos:column="23">void</name></type> <name pos:line="142" pos:column="28">PreSearchQueryAnalysis</name><parameter_list pos:line="142" pos:column="50">(<param><decl><type><name pos:line="142" pos:column="51">Object</name></type> <name pos:line="142" pos:column="58">sender</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="66">string</name></type> <name pos:line="142" pos:column="73">queryDescription</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="91">double</name></type> <name pos:line="142" pos:column="98">diceCoeff</name></decl></param>)</parameter_list>
        <block pos:line="143" pos:column="9">{
			<expr_stmt><expr><call><name><name pos:line="144" pos:column="25">DataCollectionLogEventHandlers</name><op:operator pos:line="144" pos:column="55">.</op:operator><name pos:line="144" pos:column="56">WriteInfoLogMessage</name></name><argument_list pos:line="144" pos:column="75">(<argument><expr><call><name><name pos:line="144" pos:column="76">sender</name><op:operator pos:line="144" pos:column="82">.</op:operator><name pos:line="144" pos:column="83">GetType</name></name><argument_list pos:line="144" pos:column="90">()</argument_list></call><op:operator pos:line="144" pos:column="92">.</op:operator><call><name pos:line="144" pos:column="93">ToString</name><argument_list pos:line="144" pos:column="101">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="144" pos:column="105">"Query submitted by user: QueryDescription="</lit:literal> <op:operator pos:line="144" pos:column="150">+</op:operator> <name pos:line="144" pos:column="152">queryDescription</name> <op:operator pos:line="144" pos:column="169">+</op:operator> <lit:literal type="string" pos:line="144" pos:column="171">" ; DiceCoefficientToPreviousQuery="</lit:literal> <op:operator pos:line="144" pos:column="208">+</op:operator> <name pos:line="144" pos:column="210">diceCoeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="147" pos:column="17">public</specifier> <specifier pos:line="147" pos:column="24">static</specifier> <name pos:line="147" pos:column="31">void</name></type> <name pos:line="147" pos:column="36">PreSearch</name><parameter_list pos:line="147" pos:column="45">(<param><decl><type><name pos:line="147" pos:column="46">Object</name></type> <name pos:line="147" pos:column="53">sender</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="61">double</name></type> <name pos:line="147" pos:column="68">maxidf</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="76">double</name></type> <name pos:line="147" pos:column="83">avgidf</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="91">double</name></type> <name pos:line="147" pos:column="98">avgsqc</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="106">double</name></type> <name pos:line="147" pos:column="113">avgvar</name></decl></param>)</parameter_list>
		<block pos:line="148" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="149" pos:column="25">DataCollectionLogEventHandlers</name><op:operator pos:line="149" pos:column="55">.</op:operator><name pos:line="149" pos:column="56">WriteInfoLogMessage</name></name><argument_list pos:line="149" pos:column="75">(<argument><expr><call><name><name pos:line="149" pos:column="76">sender</name><op:operator pos:line="149" pos:column="82">.</op:operator><name pos:line="149" pos:column="83">GetType</name></name><argument_list pos:line="149" pos:column="90">()</argument_list></call><op:operator pos:line="149" pos:column="92">.</op:operator><call><name pos:line="149" pos:column="93">ToString</name><argument_list pos:line="149" pos:column="101">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="149" pos:column="105">"Pre retrieval metrics: MaxIDF="</lit:literal> <op:operator pos:line="149" pos:column="138">+</op:operator> <name pos:line="149" pos:column="140">maxidf</name> <op:operator pos:line="149" pos:column="147">+</op:operator> <lit:literal type="string" pos:line="149" pos:column="149">", AvgIDF="</lit:literal> <op:operator pos:line="149" pos:column="161">+</op:operator> <name pos:line="149" pos:column="163">avgidf</name> <op:operator pos:line="149" pos:column="170">+</op:operator> <lit:literal type="string" pos:line="149" pos:column="172">", AvgSQC="</lit:literal> <op:operator pos:line="149" pos:column="184">+</op:operator> <name pos:line="149" pos:column="186">avgsqc</name> <op:operator pos:line="149" pos:column="193">+</op:operator> <lit:literal type="string" pos:line="149" pos:column="195">", AvgVAR="</lit:literal> <op:operator pos:line="149" pos:column="207">+</op:operator> <name pos:line="149" pos:column="209">avgvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><specifier pos:line="152" pos:column="9">public</specifier> <specifier pos:line="152" pos:column="16">static</specifier> <name pos:line="152" pos:column="23">void</name></type> <name pos:line="152" pos:column="28">PostSearch</name><parameter_list pos:line="152" pos:column="38">(<param><decl><type><name pos:line="152" pos:column="39">Object</name></type> <name pos:line="152" pos:column="46">sender</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="54">int</name></type> <name pos:line="152" pos:column="58">numOfResults</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="72">int</name></type> <name pos:line="152" pos:column="76">maxNumOfResults</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="93">double</name></type> <name pos:line="152" pos:column="100">avgscore</name></decl></param>, <param><decl><type><name pos:line="152" pos:column="110">double</name></type> <name pos:line="152" pos:column="117">stddevscore</name></decl></param>)</parameter_list>
        <block pos:line="153" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="154" pos:column="13">DataCollectionLogEventHandlers</name><op:operator pos:line="154" pos:column="43">.</op:operator><name pos:line="154" pos:column="44">WriteInfoLogMessage</name></name><argument_list pos:line="154" pos:column="63">(<argument><expr><call><name><name pos:line="154" pos:column="64">sender</name><op:operator pos:line="154" pos:column="70">.</op:operator><name pos:line="154" pos:column="71">GetType</name></name><argument_list pos:line="154" pos:column="78">()</argument_list></call><op:operator pos:line="154" pos:column="80">.</op:operator><call><name pos:line="154" pos:column="81">ToString</name><argument_list pos:line="154" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="154" pos:column="93">"Sando returned results: NumberOfResults="</lit:literal> <op:operator pos:line="154" pos:column="136">+</op:operator> <name pos:line="154" pos:column="138">numOfResults</name> <op:operator pos:line="154" pos:column="151">+</op:operator> <lit:literal type="string" pos:line="154" pos:column="153">", MaxNumberOfResultsPossible="</lit:literal> <op:operator pos:line="154" pos:column="185">+</op:operator> <name pos:line="154" pos:column="187">maxNumOfResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="155" pos:column="25">DataCollectionLogEventHandlers</name><op:operator pos:line="155" pos:column="55">.</op:operator><name pos:line="155" pos:column="56">WriteInfoLogMessage</name></name><argument_list pos:line="155" pos:column="75">(<argument><expr><call><name><name pos:line="155" pos:column="76">sender</name><op:operator pos:line="155" pos:column="82">.</op:operator><name pos:line="155" pos:column="83">GetType</name></name><argument_list pos:line="155" pos:column="90">()</argument_list></call><op:operator pos:line="155" pos:column="92">.</op:operator><call><name pos:line="155" pos:column="93">ToString</name><argument_list pos:line="155" pos:column="101">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="155" pos:column="105">"Post retrieval metrics: AvgScore="</lit:literal> <op:operator pos:line="155" pos:column="141">+</op:operator> <name pos:line="155" pos:column="143">avgscore</name> <op:operator pos:line="155" pos:column="152">+</op:operator> <lit:literal type="string" pos:line="155" pos:column="154">", StdDevScore="</lit:literal> <op:operator pos:line="155" pos:column="171">+</op:operator> <name pos:line="155" pos:column="173">stddevscore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>

        <function><type><specifier pos:line="159" pos:column="9">public</specifier> <specifier pos:line="159" pos:column="16">static</specifier> <name pos:line="159" pos:column="23">void</name></type> <name pos:line="159" pos:column="28">IndexLockObtainFailed</name><parameter_list pos:line="159" pos:column="49">(<param><decl><type><name pos:line="159" pos:column="50">Object</name></type> <name pos:line="159" pos:column="57">sender</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="65">Exception</name></type> <name pos:line="159" pos:column="75">lockFailedEx</name></decl></param>)</parameter_list>
        <block pos:line="160" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="161" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="161" pos:column="36">.</op:operator><name pos:line="161" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="161" pos:column="57">(<argument><expr><call><name><name pos:line="161" pos:column="58">sender</name><op:operator pos:line="161" pos:column="64">.</op:operator><name pos:line="161" pos:column="65">GetType</name></name><argument_list pos:line="161" pos:column="72">()</argument_list></call><op:operator pos:line="161" pos:column="74">.</op:operator><call><name pos:line="161" pos:column="75">ToString</name><argument_list pos:line="161" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="161" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="161" pos:column="91">lockFailedEx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="164" pos:column="9">public</specifier> <specifier pos:line="164" pos:column="16">static</specifier> <name pos:line="164" pos:column="23">void</name></type> <name pos:line="164" pos:column="28">IndexCorruptError</name><parameter_list pos:line="164" pos:column="45">(<param><decl><type><name pos:line="164" pos:column="46">Object</name></type> <name pos:line="164" pos:column="53">sender</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="61">Exception</name></type> <name pos:line="164" pos:column="71">corruptIndexEx</name></decl></param>)</parameter_list>
        <block pos:line="165" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="166" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="166" pos:column="36">.</op:operator><name pos:line="166" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="166" pos:column="57">(<argument><expr><call><name><name pos:line="166" pos:column="58">sender</name><op:operator pos:line="166" pos:column="64">.</op:operator><name pos:line="166" pos:column="65">GetType</name></name><argument_list pos:line="166" pos:column="72">()</argument_list></call><op:operator pos:line="166" pos:column="74">.</op:operator><call><name pos:line="166" pos:column="75">ToString</name><argument_list pos:line="166" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="166" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="91">corruptIndexEx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="169" pos:column="9">public</specifier> <specifier pos:line="169" pos:column="16">static</specifier> <name pos:line="169" pos:column="23">void</name></type> <name pos:line="169" pos:column="28">IndexIOError</name><parameter_list pos:line="169" pos:column="40">(<param><decl><type><name pos:line="169" pos:column="41">Object</name></type> <name pos:line="169" pos:column="48">sender</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="56">Exception</name></type> <name pos:line="169" pos:column="66">ioEx</name></decl></param>)</parameter_list>
        <block pos:line="170" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="171" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="171" pos:column="36">.</op:operator><name pos:line="171" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="171" pos:column="57">(<argument><expr><call><name><name pos:line="171" pos:column="58">sender</name><op:operator pos:line="171" pos:column="64">.</op:operator><name pos:line="171" pos:column="65">GetType</name></name><argument_list pos:line="171" pos:column="72">()</argument_list></call><op:operator pos:line="171" pos:column="74">.</op:operator><call><name pos:line="171" pos:column="75">ToString</name><argument_list pos:line="171" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="171" pos:column="87">""</lit:literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="91">ioEx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <cpp:endregion pos:line="174" pos:column="9">#<cpp:directive pos:line="174" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="176" pos:column="9">#<cpp:directive pos:line="176" pos:column="10">region</cpp:directive> S3Events</cpp:region>

        <function><type><specifier pos:line="178" pos:column="9">public</specifier> <specifier pos:line="178" pos:column="16">static</specifier> <name pos:line="178" pos:column="23">void</name></type> <name pos:line="178" pos:column="28">NoS3UploadDueToChance</name><parameter_list pos:line="178" pos:column="49">(<param><decl><type><name pos:line="178" pos:column="50">Object</name></type> <name pos:line="178" pos:column="57">sender</name></decl></param>, <param><decl><type><name pos:line="178" pos:column="65">int</name></type> <name pos:line="178" pos:column="69">rand</name></decl></param>)</parameter_list>
        <block pos:line="179" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="180" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="180" pos:column="36">.</op:operator><name pos:line="180" pos:column="37">WriteInfoLogMessage</name></name><argument_list pos:line="180" pos:column="56">(<argument><expr><call><name><name pos:line="180" pos:column="57">sender</name><op:operator pos:line="180" pos:column="63">.</op:operator><name pos:line="180" pos:column="64">GetType</name></name><argument_list pos:line="180" pos:column="71">()</argument_list></call><op:operator pos:line="180" pos:column="73">.</op:operator><call><name pos:line="180" pos:column="74">ToString</name><argument_list pos:line="180" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="180" pos:column="86">"Rolled a "</lit:literal> <op:operator pos:line="180" pos:column="98">+</op:operator> <call><name><name pos:line="180" pos:column="100">rand</name><op:operator pos:line="180" pos:column="104">.</op:operator><name pos:line="180" pos:column="105">ToString</name></name><argument_list pos:line="180" pos:column="113">()</argument_list></call> <op:operator pos:line="180" pos:column="116">+</op:operator> <lit:literal type="string" pos:line="180" pos:column="118">" (0). No S3 upload this VS run"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="183" pos:column="9">public</specifier> <specifier pos:line="183" pos:column="16">static</specifier> <name pos:line="183" pos:column="23">void</name></type> <name pos:line="183" pos:column="28">S3Error</name><parameter_list pos:line="183" pos:column="35">(<param><decl><type><name pos:line="183" pos:column="36">Object</name></type> <name pos:line="183" pos:column="43">sender</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="51">Exception</name></type> <name pos:line="183" pos:column="61">awsException</name></decl></param>)</parameter_list>
		<block pos:line="184" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="185" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="185" pos:column="36">.</op:operator><name pos:line="185" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="185" pos:column="57">(<argument><expr><call><name><name pos:line="185" pos:column="58">sender</name><op:operator pos:line="185" pos:column="64">.</op:operator><name pos:line="185" pos:column="65">GetType</name></name><argument_list pos:line="185" pos:column="72">()</argument_list></call><op:operator pos:line="185" pos:column="74">.</op:operator><call><name pos:line="185" pos:column="75">ToString</name><argument_list pos:line="185" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="185" pos:column="87">"AWS Error occurred when writing an object"</lit:literal></expr></argument>, <argument><expr><name pos:line="185" pos:column="132">awsException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="188" pos:column="17">public</specifier> <specifier pos:line="188" pos:column="24">static</specifier> <name pos:line="188" pos:column="31">void</name></type> <name pos:line="188" pos:column="36">S3NoCredentials</name><parameter_list pos:line="188" pos:column="51">(<param><decl><type><name pos:line="188" pos:column="52">Object</name></type> <name pos:line="188" pos:column="59">sender</name></decl></param>)</parameter_list>
		<block pos:line="189" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="190" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="190" pos:column="36">.</op:operator><name pos:line="190" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="190" pos:column="57">(<argument><expr><call><name><name pos:line="190" pos:column="58">sender</name><op:operator pos:line="190" pos:column="64">.</op:operator><name pos:line="190" pos:column="65">GetType</name></name><argument_list pos:line="190" pos:column="72">()</argument_list></call><op:operator pos:line="190" pos:column="74">.</op:operator><call><name pos:line="190" pos:column="75">ToString</name><argument_list pos:line="190" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="190" pos:column="87">"Cannot load S3 credentials. Log collecting is aborted."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="193" pos:column="17">public</specifier> <specifier pos:line="193" pos:column="24">static</specifier> <name pos:line="193" pos:column="31">void</name></type> <name pos:line="193" pos:column="36">S3UploadStarted</name><parameter_list pos:line="193" pos:column="51">(<param><decl><type><name pos:line="193" pos:column="52">Object</name></type> <name pos:line="193" pos:column="59">sender</name></decl></param>, <param><decl><type><name pos:line="193" pos:column="67">string</name></type> <name pos:line="193" pos:column="74">filePath</name></decl></param>)</parameter_list>
		<block pos:line="194" pos:column="17">{
            <expr_stmt><expr><call><name><name pos:line="195" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="195" pos:column="36">.</op:operator><name pos:line="195" pos:column="37">WriteInfoLogMessage</name></name><argument_list pos:line="195" pos:column="56">(<argument><expr><call><name><name pos:line="195" pos:column="57">sender</name><op:operator pos:line="195" pos:column="63">.</op:operator><name pos:line="195" pos:column="64">GetType</name></name><argument_list pos:line="195" pos:column="71">()</argument_list></call><op:operator pos:line="195" pos:column="73">.</op:operator><call><name pos:line="195" pos:column="74">ToString</name><argument_list pos:line="195" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="195" pos:column="86">"Beginning to put file="</lit:literal> <op:operator pos:line="195" pos:column="111">+</op:operator> <name pos:line="195" pos:column="113">filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <cpp:endregion pos:line="198" pos:column="9">#<cpp:directive pos:line="198" pos:column="10">endregion</cpp:directive></cpp:endregion>

        <cpp:region pos:line="200" pos:column="9">#<cpp:directive pos:line="200" pos:column="10">region</cpp:directive> SwumEvents</cpp:region>

        <function><type><specifier pos:line="202" pos:column="9">public</specifier> <specifier pos:line="202" pos:column="16">static</specifier> <name pos:line="202" pos:column="23">void</name></type> <name pos:line="202" pos:column="28">SwumErrorCreatingSwum</name><parameter_list pos:line="202" pos:column="49">(<param><decl><type><name pos:line="202" pos:column="50">Object</name></type> <name pos:line="202" pos:column="57">sender</name></decl></param>, <param><decl><type><name pos:line="202" pos:column="65">string</name></type> <name pos:line="202" pos:column="72">sourcePath</name></decl></param>, <param><decl><type><name pos:line="202" pos:column="84">Exception</name></type> <name pos:line="202" pos:column="94">ex</name></decl></param>)</parameter_list>
        <block pos:line="203" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="204" pos:column="36">.</op:operator><name pos:line="204" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="204" pos:column="57">(<argument><expr><call><name><name pos:line="204" pos:column="58">sender</name><op:operator pos:line="204" pos:column="64">.</op:operator><name pos:line="204" pos:column="65">GetType</name></name><argument_list pos:line="204" pos:column="72">()</argument_list></call><op:operator pos:line="204" pos:column="74">.</op:operator><call><name pos:line="204" pos:column="75">ToString</name><argument_list pos:line="204" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="204" pos:column="87">"Error creating SWUM on file: "</lit:literal> <op:operator pos:line="204" pos:column="119">+</op:operator> <name pos:line="204" pos:column="121">sourcePath</name></expr></argument>, <argument><expr><name pos:line="204" pos:column="133">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="207" pos:column="9">public</specifier> <specifier pos:line="207" pos:column="16">static</specifier> <name pos:line="207" pos:column="23">void</name></type> <name pos:line="207" pos:column="28">SwumErrorGeneratingSrcML</name><parameter_list pos:line="207" pos:column="52">(<param><decl><type><name pos:line="207" pos:column="53">Object</name></type> <name pos:line="207" pos:column="60">sender</name></decl></param>, <param><decl><type><name pos:line="207" pos:column="68">string</name></type> <name pos:line="207" pos:column="75">sourcePath</name></decl></param>)</parameter_list>
        <block pos:line="208" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="209" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="209" pos:column="36">.</op:operator><name pos:line="209" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="209" pos:column="57">(<argument><expr><call><name><name pos:line="209" pos:column="58">sender</name><op:operator pos:line="209" pos:column="64">.</op:operator><name pos:line="209" pos:column="65">GetType</name></name><argument_list pos:line="209" pos:column="72">()</argument_list></call><op:operator pos:line="209" pos:column="74">.</op:operator><call><name pos:line="209" pos:column="75">ToString</name><argument_list pos:line="209" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="209" pos:column="87">"Error converting file to SrcML, no file unit found: "</lit:literal> <op:operator pos:line="209" pos:column="142">+</op:operator> <name pos:line="209" pos:column="144">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="212" pos:column="9">public</specifier> <specifier pos:line="212" pos:column="16">static</specifier> <name pos:line="212" pos:column="23">void</name></type> <name pos:line="212" pos:column="28">SwumFileNotFoundInArchive</name><parameter_list pos:line="212" pos:column="53">(<param><decl><type><name pos:line="212" pos:column="54">Object</name></type> <name pos:line="212" pos:column="61">sender</name></decl></param>, <param><decl><type><name pos:line="212" pos:column="69">string</name></type> <name pos:line="212" pos:column="76">sourcePath</name></decl></param>)</parameter_list>
        <block pos:line="213" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="214" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="214" pos:column="36">.</op:operator><name pos:line="214" pos:column="37">WriteErrorLogMessage</name></name><argument_list pos:line="214" pos:column="57">(<argument><expr><call><name><name pos:line="214" pos:column="58">sender</name><op:operator pos:line="214" pos:column="64">.</op:operator><name pos:line="214" pos:column="65">GetType</name></name><argument_list pos:line="214" pos:column="72">()</argument_list></call><op:operator pos:line="214" pos:column="74">.</op:operator><call><name pos:line="214" pos:column="75">ToString</name><argument_list pos:line="214" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="214" pos:column="87">"File not found in archive: "</lit:literal> <op:operator pos:line="214" pos:column="117">+</op:operator> <name pos:line="214" pos:column="119">sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="217" pos:column="9">public</specifier> <specifier pos:line="217" pos:column="16">static</specifier> <name pos:line="217" pos:column="23">void</name></type> <name pos:line="217" pos:column="28">SwumCacheFileNotExist</name><parameter_list pos:line="217" pos:column="49">(<param><decl><type><name pos:line="217" pos:column="50">Object</name></type> <name pos:line="217" pos:column="57">sender</name></decl></param>, <param><decl><type><name pos:line="217" pos:column="65">string</name></type> <name pos:line="217" pos:column="72">cachePath</name></decl></param>)</parameter_list>
        <block pos:line="218" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="219" pos:column="13">DefaultLogEventHandlers</name><op:operator pos:line="219" pos:column="36">.</op:operator><name pos:line="219" pos:column="37">WriteInfoLogMessage</name></name><argument_list pos:line="219" pos:column="56">(<argument><expr><call><name><name pos:line="219" pos:column="57">sender</name><op:operator pos:line="219" pos:column="63">.</op:operator><name pos:line="219" pos:column="64">GetType</name></name><argument_list pos:line="219" pos:column="71">()</argument_list></call><op:operator pos:line="219" pos:column="73">.</op:operator><call><name pos:line="219" pos:column="74">ToString</name><argument_list pos:line="219" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="219" pos:column="86">"Cache file does not exist: "</lit:literal> <op:operator pos:line="219" pos:column="116">+</op:operator> <name pos:line="219" pos:column="118">cachePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

		<cpp:endregion pos:line="222" pos:column="17">#<cpp:directive pos:line="222" pos:column="18">endregion</cpp:directive></cpp:endregion>

    }</block></class>
}</block></namespace>
</unit>
