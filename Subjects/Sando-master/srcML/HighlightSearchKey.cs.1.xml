<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\UI\UI\View\Search\Converters\HighlightSearchKey.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Globalization</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Windows</name><op:operator pos:line="6" pos:column="21">.</op:operator><name pos:line="6" pos:column="22">Data</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Windows</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Windows</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Documents</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">System</name><op:operator pos:line="9" pos:column="13">.</op:operator><name pos:line="9" pos:column="14">Windows</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">Media</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">Core</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">Tools</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">ExtensionContracts</name><op:operator pos:line="11" pos:column="31">.</op:operator><name pos:line="11" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Core</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">Logging</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Events</name></name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name><name pos:line="14" pos:column="11">Sando</name><op:operator pos:line="14" pos:column="16">.</op:operator><name pos:line="14" pos:column="17">UI</name><op:operator pos:line="14" pos:column="19">.</op:operator><name pos:line="14" pos:column="20">View</name><op:operator pos:line="14" pos:column="24">.</op:operator><name pos:line="14" pos:column="25">Search</name><op:operator pos:line="14" pos:column="31">.</op:operator><name pos:line="14" pos:column="32">Converters</name></name> <block pos:line="14" pos:column="43">{
    <class><attribute pos:line="15" pos:column="5">[<expr><call><name pos:line="15" pos:column="6">ValueConversion</name><argument_list pos:line="15" pos:column="21">(<argument><expr><call><name pos:line="15" pos:column="22">typeof</name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">IHighlightRawInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="49">typeof</name><argument_list pos:line="15" pos:column="55">(<argument><expr><name pos:line="15" pos:column="56">object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</attribute>
    <specifier pos:line="16" pos:column="5">public</specifier> class <name pos:line="16" pos:column="18">HighlightSearchKey</name> <super pos:line="16" pos:column="37">: <name pos:line="16" pos:column="39">IValueConverter</name></super> <block pos:line="16" pos:column="55">{

         <function><type><specifier pos:line="18" pos:column="10">private</specifier> <name pos:line="18" pos:column="18">InlineItemLine</name><index pos:line="18" pos:column="32">[]</index></type> <name pos:line="18" pos:column="35">AddLineNumber</name><parameter_list pos:line="18" pos:column="48">(<param><decl><type><name pos:line="18" pos:column="49">IHighlightRawInfo</name></type> <name pos:line="18" pos:column="67">infor</name></decl></param>, <param><decl><type><name><name pos:line="18" pos:column="74">InlineItemLine</name><index pos:line="18" pos:column="88">[]</index></name></type> <name pos:line="18" pos:column="91">lines</name></decl></param>)</parameter_list>
         <block pos:line="19" pos:column="10">{
             <decl_stmt><decl><type><name pos:line="20" pos:column="14">var</name></type> <name pos:line="20" pos:column="18">startLine</name> <init pos:line="20" pos:column="28">= <expr><name><name pos:line="20" pos:column="30">infor</name><op:operator pos:line="20" pos:column="35">.</op:operator><name pos:line="20" pos:column="36">StartLineNumber</name></name></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name pos:line="21" pos:column="14">int</name></type> <name pos:line="21" pos:column="18">i</name> <init pos:line="21" pos:column="20">= <expr><lit:literal type="number" pos:line="21" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name pos:line="22" pos:column="14">var</name></type> <name pos:line="22" pos:column="18">offsets</name> <init pos:line="22" pos:column="26">= <expr><name><name pos:line="22" pos:column="28">infor</name><op:operator pos:line="22" pos:column="33">.</op:operator><name pos:line="22" pos:column="34">Offsets</name></name> <op:operator pos:line="22" pos:column="42">??</op:operator> <call><name><name pos:line="22" pos:column="45">lines</name><op:operator pos:line="22" pos:column="50">.</op:operator><name pos:line="22" pos:column="51">Select</name></name><argument_list pos:line="22" pos:column="57">(<argument><expr><lambda><name pos:line="22" pos:column="58">n</name> <op:operator pos:line="22" pos:column="60">=&gt;</op:operator> <name pos:line="22" pos:column="63">i</name> <op:operator pos:line="22" pos:column="65">++</op:operator></lambda></expr></argument>)</argument_list></call><op:operator pos:line="22" pos:column="68">.</op:operator><call><name pos:line="22" pos:column="69">ToArray</name><argument_list pos:line="22" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
             <decl_stmt><decl><type><name pos:line="23" pos:column="14">var</name></type> <name pos:line="23" pos:column="18">offsetIndex</name> <init pos:line="23" pos:column="30">= <expr><lit:literal type="number" pos:line="23" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>

             <decl_stmt><decl><type><name pos:line="25" pos:column="14">int</name></type> <name pos:line="25" pos:column="18">num</name> <init pos:line="25" pos:column="22">= <expr><lit:literal type="number" pos:line="25" pos:column="24">0</lit:literal></expr></init><op:operator pos:line="25" pos:column="25">,</op:operator> <name pos:line="25" pos:column="27">preNum</name> <init pos:line="25" pos:column="34">= <expr><lit:literal type="number" pos:line="25" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
             <foreach pos:line="26" pos:column="14">foreach (<init><decl><type><name pos:line="26" pos:column="23">var</name></type> <name pos:line="26" pos:column="27">line</name> <range pos:line="26" pos:column="32">in <expr><name pos:line="26" pos:column="35">lines</name></expr></range></decl></init>)
             <block pos:line="27" pos:column="14">{
                 <if pos:line="28" pos:column="18">if <condition pos:line="28" pos:column="21">(<expr><call><name><name pos:line="28" pos:column="22">offsets</name><op:operator pos:line="28" pos:column="29">.</op:operator><name pos:line="28" pos:column="30">Count</name></name><argument_list pos:line="28" pos:column="35">()</argument_list></call> <op:operator pos:line="28" pos:column="38">&gt;</op:operator> <name pos:line="28" pos:column="40">offsetIndex</name></expr>)</condition><then pos:line="28" pos:column="52">
                 <block pos:line="29" pos:column="18">{
                     <expr_stmt><expr><name pos:line="30" pos:column="22">num</name> <op:operator pos:line="30" pos:column="26">=</op:operator> <name pos:line="30" pos:column="28">startLine</name> <op:operator pos:line="30" pos:column="38">+</op:operator> <call><name><name pos:line="30" pos:column="40">offsets</name><op:operator pos:line="30" pos:column="47">.</op:operator><name pos:line="30" pos:column="48">ElementAt</name></name><argument_list pos:line="30" pos:column="57">(<argument><expr><name pos:line="30" pos:column="58">offsetIndex</name><op:operator pos:line="30" pos:column="69">++</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><name pos:line="31" pos:column="22">preNum</name> <op:operator pos:line="31" pos:column="29">=</op:operator> <name pos:line="31" pos:column="31">num</name></expr>;</expr_stmt>
                 }</block></then>
                 <else pos:line="33" pos:column="18">else
                 <block pos:line="34" pos:column="18">{
                     <expr_stmt><expr><name pos:line="35" pos:column="22">num</name> <op:operator pos:line="35" pos:column="26">=</op:operator> <name pos:line="35" pos:column="28">preNum</name> <op:operator pos:line="35" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="35" pos:column="37">1</lit:literal></expr>;</expr_stmt>
                     <expr_stmt><expr><name pos:line="36" pos:column="22">preNum</name> <op:operator pos:line="36" pos:column="29">=</op:operator> <name pos:line="36" pos:column="31">num</name></expr>;</expr_stmt>
                 }</block></else></if>
                <expr_stmt><expr><call><name><name pos:line="38" pos:column="17">line</name><op:operator pos:line="38" pos:column="21">.</op:operator><name pos:line="38" pos:column="22">AddBeginning</name></name><argument_list pos:line="38" pos:column="34">(<argument><expr><call><name pos:line="38" pos:column="35">CreateRun</name><argument_list pos:line="38" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="45">"\t"</lit:literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="51">regularWeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="39" pos:column="17">line</name><op:operator pos:line="39" pos:column="21">.</op:operator><name pos:line="39" pos:column="22">AddBeginning</name></name><argument_list pos:line="39" pos:column="34">(<argument><expr><call><name pos:line="39" pos:column="35">CreateLineNumberHyperLink</name><argument_list pos:line="39" pos:column="60">(<argument><expr><name pos:line="39" pos:column="61">num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             }</block></foreach>
             <return pos:line="41" pos:column="14">return <expr><name pos:line="41" pos:column="21">lines</name></expr>;</return>
         }</block></function>

        <function><type><specifier pos:line="44" pos:column="9">private</specifier> <name pos:line="44" pos:column="17">Inline</name></type> <name pos:line="44" pos:column="24">CreateLineNumberHyperLink</name><parameter_list pos:line="44" pos:column="49">(<param><decl><type><name pos:line="44" pos:column="50">int</name></type> <name pos:line="44" pos:column="54">number</name></decl></param>)</parameter_list>
        <block pos:line="45" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="46" pos:column="13">var</name></type> <name pos:line="46" pos:column="17">run</name> <init pos:line="46" pos:column="21">= <expr><call><name pos:line="46" pos:column="23">CreateRun</name><argument_list pos:line="46" pos:column="32">(<argument><expr><call><name><name pos:line="46" pos:column="33">number</name><op:operator pos:line="46" pos:column="39">.</op:operator><name pos:line="46" pos:column="40">ToString</name></name><argument_list pos:line="46" pos:column="48">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="46" pos:column="52">regularWeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">run</name><op:operator pos:line="47" pos:column="16">.</op:operator><name pos:line="47" pos:column="17">Foreground</name></name> <op:operator pos:line="47" pos:column="28">=</op:operator> <name><name pos:line="47" pos:column="30">Brushes</name><op:operator pos:line="47" pos:column="37">.</op:operator><name pos:line="47" pos:column="38">CadetBlue</name></name></expr>;</expr_stmt>
            <return pos:line="48" pos:column="13">return <expr><name pos:line="48" pos:column="20">run</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="51" pos:column="9">private</specifier> <name pos:line="51" pos:column="17">string</name><index pos:line="51" pos:column="23">[]</index></type> <name pos:line="51" pos:column="26">RemoveHeadTailEmptyStrings</name><parameter_list pos:line="51" pos:column="52">(<param><decl><type><name><name pos:line="51" pos:column="53">IEnumerable</name><argument_list pos:line="51" pos:column="64">&lt;<argument><name pos:line="51" pos:column="65">string</name></argument>&gt;</argument_list></name></type> <name pos:line="51" pos:column="73">lines</name></decl></param>)</parameter_list>
        <block pos:line="52" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">var</name></type> <name pos:line="53" pos:column="17">list</name> <init pos:line="53" pos:column="22">= <expr><call><name><name pos:line="53" pos:column="24">lines</name><op:operator pos:line="53" pos:column="29">.</op:operator><name pos:line="53" pos:column="30">ToList</name></name><argument_list pos:line="53" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="54" pos:column="13">while <condition pos:line="54" pos:column="19">(<expr><call><name><name pos:line="54" pos:column="20">list</name><op:operator pos:line="54" pos:column="24">.</op:operator><name pos:line="54" pos:column="25">Any</name></name><argument_list pos:line="54" pos:column="28">()</argument_list></call> <op:operator pos:line="54" pos:column="31">&amp;&amp;</op:operator> <call><name><name pos:line="54" pos:column="34">string</name><op:operator pos:line="54" pos:column="40">.</op:operator><name pos:line="54" pos:column="41">IsNullOrWhiteSpace</name></name><argument_list pos:line="54" pos:column="59">(<argument><expr><call><name><name pos:line="54" pos:column="60">list</name><op:operator pos:line="54" pos:column="64">.</op:operator><name pos:line="54" pos:column="65">First</name></name><argument_list pos:line="54" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:line="55" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="56" pos:column="17">list</name><op:operator pos:line="56" pos:column="21">.</op:operator><name pos:line="56" pos:column="22">RemoveAt</name></name><argument_list pos:line="56" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="56" pos:column="31">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <while pos:line="59" pos:column="13">while <condition pos:line="59" pos:column="19">(<expr><call><name><name pos:line="59" pos:column="20">list</name><op:operator pos:line="59" pos:column="24">.</op:operator><name pos:line="59" pos:column="25">Any</name></name><argument_list pos:line="59" pos:column="28">()</argument_list></call> <op:operator pos:line="59" pos:column="31">&amp;&amp;</op:operator> <call><name><name pos:line="59" pos:column="34">string</name><op:operator pos:line="59" pos:column="40">.</op:operator><name pos:line="59" pos:column="41">IsNullOrWhiteSpace</name></name><argument_list pos:line="59" pos:column="59">(<argument><expr><call><name><name pos:line="59" pos:column="60">list</name><op:operator pos:line="59" pos:column="64">.</op:operator><name pos:line="59" pos:column="65">Last</name></name><argument_list pos:line="59" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:line="60" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="61" pos:column="17">list</name><op:operator pos:line="61" pos:column="21">.</op:operator><name pos:line="61" pos:column="22">RemoveAt</name></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name><name pos:line="61" pos:column="31">list</name><op:operator pos:line="61" pos:column="35">.</op:operator><name pos:line="61" pos:column="36">Count</name></name> <op:operator pos:line="61" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="61" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return pos:line="63" pos:column="13">return <expr><call><name><name pos:line="63" pos:column="20">list</name><op:operator pos:line="63" pos:column="24">.</op:operator><name pos:line="63" pos:column="25">ToArray</name></name><argument_list pos:line="63" pos:column="32">()</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="67" pos:column="9">private</specifier> <name pos:line="67" pos:column="17">string</name></type> <name pos:line="67" pos:column="24">RemoveHeadAndTailNewLine</name><parameter_list pos:line="67" pos:column="48">(<param><decl><type><name pos:line="67" pos:column="49">string</name></type> <name pos:line="67" pos:column="56">text</name></decl></param>)</parameter_list>
        <block pos:line="68" pos:column="9">{
            <while pos:line="69" pos:column="13">while <condition pos:line="69" pos:column="19">(<expr><call><name><name pos:line="69" pos:column="20">text</name><op:operator pos:line="69" pos:column="24">.</op:operator><name pos:line="69" pos:column="25">Any</name></name><argument_list pos:line="69" pos:column="28">()</argument_list></call> <op:operator pos:line="69" pos:column="31">&amp;&amp;</op:operator> <op:operator pos:line="69" pos:column="34">(</op:operator><call><name><name pos:line="69" pos:column="35">text</name><op:operator pos:line="69" pos:column="39">.</op:operator><name pos:line="69" pos:column="40">First</name></name><argument_list pos:line="69" pos:column="45">()</argument_list></call><op:operator pos:line="69" pos:column="47">.</op:operator><call><name pos:line="69" pos:column="48">Equals</name><argument_list pos:line="69" pos:column="54">(<argument><expr><lit:literal type="char" pos:line="69" pos:column="55">'\r'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="69" pos:column="61">||</op:operator> <call><name><name pos:line="69" pos:column="64">text</name><op:operator pos:line="69" pos:column="68">.</op:operator><name pos:line="69" pos:column="69">First</name></name><argument_list pos:line="69" pos:column="74">()</argument_list></call><op:operator pos:line="69" pos:column="76">.</op:operator><call><name pos:line="69" pos:column="77">Equals</name><argument_list pos:line="69" pos:column="83">(<argument><expr><lit:literal type="char" pos:line="69" pos:column="84">'\n'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="69" pos:column="89">)</op:operator></expr>)</condition>
            <block pos:line="70" pos:column="13">{
                <expr_stmt><expr><name pos:line="71" pos:column="17">text</name> <op:operator pos:line="71" pos:column="22">=</op:operator> <call><name><name pos:line="71" pos:column="24">text</name><op:operator pos:line="71" pos:column="28">.</op:operator><name pos:line="71" pos:column="29">Substring</name></name><argument_list pos:line="71" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="71" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <while pos:line="73" pos:column="13">while <condition pos:line="73" pos:column="19">(<expr><call><name><name pos:line="73" pos:column="20">text</name><op:operator pos:line="73" pos:column="24">.</op:operator><name pos:line="73" pos:column="25">Any</name></name><argument_list pos:line="73" pos:column="28">()</argument_list></call> <op:operator pos:line="73" pos:column="31">&amp;&amp;</op:operator> <op:operator pos:line="73" pos:column="34">(</op:operator><call><name><name pos:line="73" pos:column="35">text</name><op:operator pos:line="73" pos:column="39">.</op:operator><name pos:line="73" pos:column="40">Last</name></name><argument_list pos:line="73" pos:column="44">()</argument_list></call><op:operator pos:line="73" pos:column="46">.</op:operator><call><name pos:line="73" pos:column="47">Equals</name><argument_list pos:line="73" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="73" pos:column="54">'\r'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="60">||</op:operator> <call><name><name pos:line="73" pos:column="63">text</name><op:operator pos:line="73" pos:column="67">.</op:operator><name pos:line="73" pos:column="68">Last</name></name><argument_list pos:line="73" pos:column="72">()</argument_list></call><op:operator pos:line="73" pos:column="74">.</op:operator><call><name pos:line="73" pos:column="75">Equals</name><argument_list pos:line="73" pos:column="81">(<argument><expr><lit:literal type="char" pos:line="73" pos:column="82">'\n'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="87">)</op:operator></expr>)</condition>
            <block pos:line="74" pos:column="13">{
                <expr_stmt><expr><name pos:line="75" pos:column="17">text</name> <op:operator pos:line="75" pos:column="22">=</op:operator> <call><name><name pos:line="75" pos:column="24">text</name><op:operator pos:line="75" pos:column="28">.</op:operator><name pos:line="75" pos:column="29">Substring</name></name><argument_list pos:line="75" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="75" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="42">text</name><op:operator pos:line="75" pos:column="46">.</op:operator><name pos:line="75" pos:column="47">Length</name></name> <op:operator pos:line="75" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="75" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return pos:line="77" pos:column="13">return <expr><name pos:line="77" pos:column="20">text</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="81" pos:column="9">public</specifier> <name pos:line="81" pos:column="16">Object</name></type> <name pos:line="81" pos:column="23">Convert</name><parameter_list pos:line="81" pos:column="30">(<param><decl><type><name pos:line="81" pos:column="31">Object</name></type> <name pos:line="81" pos:column="38">inforValue</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="50">Type</name></type> <name pos:line="81" pos:column="55">targetType</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="67">object</name></type> <name pos:line="81" pos:column="74">parameter</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="85">CultureInfo</name></type> <name pos:line="81" pos:column="97">culture</name></decl></param>)</parameter_list>
        <block pos:line="82" pos:column="9">{

            <decl_stmt><decl><type><name pos:line="84" pos:column="13">var</name></type> <name pos:line="84" pos:column="17">emptyLineOffsets</name> <init pos:line="84" pos:column="34">= <expr><op:operator pos:line="84" pos:column="36">new</op:operator> <call><name><name pos:line="84" pos:column="40">List</name><argument_list pos:line="84" pos:column="44">&lt;<argument><name pos:line="84" pos:column="45">int</name></argument>&gt;</argument_list></name><argument_list pos:line="84" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="85" pos:column="13">var</name></type> <name pos:line="85" pos:column="17">value</name> <init pos:line="85" pos:column="23">= <expr><op:operator pos:line="85" pos:column="25">(</op:operator><op:operator pos:line="85" pos:column="26">(</op:operator><name pos:line="85" pos:column="27">IHighlightRawInfo</name><op:operator pos:line="85" pos:column="44">)</op:operator><name pos:line="85" pos:column="45">inforValue</name><op:operator pos:line="85" pos:column="55">)</op:operator><op:operator pos:line="85" pos:column="56">.</op:operator><name pos:line="85" pos:column="57">Text</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="86" pos:column="13">var</name></type> <name pos:line="86" pos:column="17">span</name> <init pos:line="86" pos:column="22">= <expr><op:operator pos:line="86" pos:column="24">new</op:operator> <call><name pos:line="86" pos:column="28">Span</name><argument_list pos:line="86" pos:column="32">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">var</name></type> <name pos:line="87" pos:column="17">originalSpan</name> <init pos:line="87" pos:column="30">= <expr><op:operator pos:line="87" pos:column="32">new</op:operator> <call><name pos:line="87" pos:column="36">Span</name><argument_list pos:line="87" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try pos:line="88" pos:column="13">try
            <block pos:line="89" pos:column="13">{
                <expr_stmt><expr><name pos:line="90" pos:column="17">originalSpan</name> <op:operator pos:line="90" pos:column="30">=</op:operator> <op:operator pos:line="90" pos:column="32">new</op:operator> <call><name pos:line="90" pos:column="36">Span</name><argument_list pos:line="90" pos:column="40">(<argument><expr><op:operator pos:line="90" pos:column="41">new</op:operator> <call><name pos:line="90" pos:column="45">Run</name><argument_list pos:line="90" pos:column="48">(<argument><expr><call><name><name pos:line="90" pos:column="49">value</name><op:operator pos:line="90" pos:column="54">.</op:operator><name pos:line="90" pos:column="55">Replace</name></name><argument_list pos:line="90" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="63">"|~E~|"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="72">String</name><op:operator pos:line="90" pos:column="78">.</op:operator><name pos:line="90" pos:column="79">Empty</name></name></expr></argument>)</argument_list></call><op:operator pos:line="90" pos:column="85">.</op:operator><call><name pos:line="90" pos:column="86">Replace</name><argument_list pos:line="90" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="94">"|~S~|"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="103">String</name><op:operator pos:line="90" pos:column="109">.</op:operator><name pos:line="90" pos:column="110">Empty</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch pos:line="92" pos:column="13">catch <parameter_list pos:line="92" pos:column="19">(<param><decl><type><name pos:line="92" pos:column="20">NullReferenceException</name></type> <name pos:line="92" pos:column="43">npe</name></decl></param>)</parameter_list>
            <block pos:line="93" pos:column="13">{
                <comment type="line" pos:line="94" pos:column="17">//ignore for now, return empty summary</comment>
                <comment type="line" pos:line="95" pos:column="17">//if we see too many of these in the log we'll start fixing it</comment>
                <expr_stmt><expr><call><name><name pos:line="96" pos:column="17">LogEvents</name><op:operator pos:line="96" pos:column="26">.</op:operator><name pos:line="96" pos:column="27">HighlightingNpe</name></name><argument_list pos:line="96" pos:column="42">(<argument><expr><name pos:line="96" pos:column="43">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <try pos:line="99" pos:column="13">try
            <block pos:line="100" pos:column="13">{
                
                <comment type="line" pos:line="102" pos:column="17">// return null;</comment>
                <if pos:line="103" pos:column="17">if <condition pos:line="103" pos:column="20">(<expr><name pos:line="103" pos:column="21">value</name> <op:operator pos:line="103" pos:column="27">==</op:operator> <name pos:line="103" pos:column="30">null</name></expr>)</condition><then pos:line="103" pos:column="35">
                <block pos:line="104" pos:column="17">{
                    <return pos:line="105" pos:column="21">return <expr><name pos:line="105" pos:column="28">null</name></expr>;</return>
                }</block></then></if>

                <decl_stmt><decl><type><name pos:line="108" pos:column="17">var</name></type> <name pos:line="108" pos:column="21">input</name> <init pos:line="108" pos:column="27">= <expr><name pos:line="108" pos:column="29">value</name> <op:operator pos:line="108" pos:column="35">as</op:operator> <name pos:line="108" pos:column="38">string</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="109" pos:column="17">string</name><index pos:line="109" pos:column="23">[]</index></type> <name pos:line="109" pos:column="26">lines</name> <init pos:line="109" pos:column="32">= <expr><call><name><name pos:line="109" pos:column="34">input</name><op:operator pos:line="109" pos:column="39">.</op:operator><name pos:line="109" pos:column="40">SplitToLines</name></name><argument_list pos:line="109" pos:column="52">()</argument_list></call><op:operator pos:line="109" pos:column="54">.</op:operator><call><name pos:line="109" pos:column="55">Select</name><argument_list pos:line="109" pos:column="61">(<argument><expr><name pos:line="109" pos:column="62">RemoveHeadAndTailNewLine</name></expr></argument>)</argument_list></call><op:operator pos:line="109" pos:column="87">.</op:operator><call><name pos:line="109" pos:column="88">ToArray</name><argument_list pos:line="109" pos:column="95">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="110" pos:column="17">lines</name> <op:operator pos:line="110" pos:column="23">=</op:operator> <call><name pos:line="110" pos:column="25">RemoveHeadTailEmptyStrings</name><argument_list pos:line="110" pos:column="51">(<argument><expr><name pos:line="110" pos:column="52">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name pos:line="111" pos:column="17">var</name></type> <name pos:line="111" pos:column="21">keyTemp</name> <init pos:line="111" pos:column="29">= <expr><op:operator pos:line="111" pos:column="31">new</op:operator> <call><name><name pos:line="111" pos:column="35">List</name><argument_list pos:line="111" pos:column="39">&lt;<argument><name pos:line="111" pos:column="40">string</name></argument>&gt;</argument_list></name><argument_list pos:line="111" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="112" pos:column="17">var</name></type> <name pos:line="112" pos:column="21">offset</name> <init pos:line="112" pos:column="28">= <expr><lit:literal type="number" pos:line="112" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>

                <foreach pos:line="114" pos:column="17">foreach (<init><decl><type><name pos:line="114" pos:column="26">string</name></type> <name pos:line="114" pos:column="33">line</name> <range pos:line="114" pos:column="38">in <expr><name pos:line="114" pos:column="41">lines</name></expr></range></decl></init>)
                <block pos:line="115" pos:column="17">{
                    <if pos:line="116" pos:column="21">if <condition pos:line="116" pos:column="24">(<expr><call><name><name pos:line="116" pos:column="25">String</name><op:operator pos:line="116" pos:column="31">.</op:operator><name pos:line="116" pos:column="32">IsNullOrWhiteSpace</name></name><argument_list pos:line="116" pos:column="50">(<argument><expr><name pos:line="116" pos:column="51">line</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="57">
                    <block pos:line="117" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="118" pos:column="25">emptyLineOffsets</name><op:operator pos:line="118" pos:column="41">.</op:operator><name pos:line="118" pos:column="42">Add</name></name><argument_list pos:line="118" pos:column="45">(<argument><expr><name pos:line="118" pos:column="46">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="120" pos:column="21">offset</name><op:operator pos:line="120" pos:column="27">++</op:operator></expr>;</expr_stmt>

                    <if pos:line="122" pos:column="21">if <condition pos:line="122" pos:column="24">(<expr><call><name><name pos:line="122" pos:column="25">line</name><op:operator pos:line="122" pos:column="29">.</op:operator><name pos:line="122" pos:column="30">Contains</name></name><argument_list pos:line="122" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="39">"|~S~|"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="48">
                    <block pos:line="123" pos:column="21">{

                        <decl_stmt><decl><type><name pos:line="125" pos:column="25">string</name></type> <name pos:line="125" pos:column="32">findKey</name> <init pos:line="125" pos:column="40">= <expr><call><name><name pos:line="125" pos:column="42">string</name><op:operator pos:line="125" pos:column="48">.</op:operator><name pos:line="125" pos:column="49">Copy</name></name><argument_list pos:line="125" pos:column="53">(<argument><expr><name pos:line="125" pos:column="54">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <while pos:line="127" pos:column="25">while <condition pos:line="127" pos:column="31">(<expr><call><name><name pos:line="127" pos:column="32">findKey</name><op:operator pos:line="127" pos:column="39">.</op:operator><name pos:line="127" pos:column="40">IndexOf</name></name><argument_list pos:line="127" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="48">"|~S~|"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="57">&gt;=</op:operator> <lit:literal type="number" pos:line="127" pos:column="60">0</lit:literal></expr>)</condition>
                        <block pos:line="128" pos:column="25">{
                            <decl_stmt><decl><type><name pos:line="129" pos:column="29">int</name></type> <name pos:line="129" pos:column="33">first</name> <init pos:line="129" pos:column="39">= <expr><call><name><name pos:line="129" pos:column="41">findKey</name><op:operator pos:line="129" pos:column="48">.</op:operator><name pos:line="129" pos:column="49">IndexOf</name></name><argument_list pos:line="129" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="57">"|~S~|"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="129" pos:column="66">+</op:operator> <lit:literal type="string" pos:line="129" pos:column="68">"|~S~|"</lit:literal><op:operator pos:line="129" pos:column="75">.</op:operator><name pos:line="129" pos:column="76">Length</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="130" pos:column="29">int</name></type> <name pos:line="130" pos:column="33">last</name> <init pos:line="130" pos:column="38">= <expr><call><name><name pos:line="130" pos:column="40">findKey</name><op:operator pos:line="130" pos:column="47">.</op:operator><name pos:line="130" pos:column="48">IndexOf</name></name><argument_list pos:line="130" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="56">"|~E~|"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt><decl><type><name pos:line="132" pos:column="29">string</name></type> <name pos:line="132" pos:column="36">key_candidate</name> <init pos:line="132" pos:column="50">= <expr><call><name><name pos:line="132" pos:column="52">findKey</name><op:operator pos:line="132" pos:column="59">.</op:operator><name pos:line="132" pos:column="60">Substring</name></name><argument_list pos:line="132" pos:column="69">(<argument><expr><name pos:line="132" pos:column="70">first</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="77">last</name> <op:operator pos:line="132" pos:column="82">-</op:operator> <name pos:line="132" pos:column="84">first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt><decl><type><name pos:line="134" pos:column="29">bool</name></type> <name pos:line="134" pos:column="34">removed</name> <init pos:line="134" pos:column="42">= <expr><lit:literal type="boolean" pos:line="134" pos:column="44">false</lit:literal></expr></init></decl>;</decl_stmt>
                            <if pos:line="135" pos:column="29">if <condition pos:line="135" pos:column="32">(<expr><call><name><name pos:line="135" pos:column="33">key_candidate</name><op:operator pos:line="135" pos:column="46">.</op:operator><name pos:line="135" pos:column="47">StartsWith</name></name><argument_list pos:line="135" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="58">"|~S~|"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="67">
                            <block pos:line="136" pos:column="29">{
                                <expr_stmt><expr><name pos:line="137" pos:column="33">removed</name> <op:operator pos:line="137" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="137" pos:column="43">true</lit:literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name pos:line="138" pos:column="33">key_candidate</name> <op:operator pos:line="138" pos:column="47">=</op:operator> <call><name><name pos:line="138" pos:column="49">key_candidate</name><op:operator pos:line="138" pos:column="62">.</op:operator><name pos:line="138" pos:column="63">Remove</name></name><argument_list pos:line="138" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="70">"|~S~|"</lit:literal><op:operator pos:line="138" pos:column="77">.</op:operator><name pos:line="138" pos:column="78">Length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>


                            <if pos:line="142" pos:column="29">if <condition pos:line="142" pos:column="32">(<expr><op:operator pos:line="142" pos:column="33">!</op:operator><call><name><name pos:line="142" pos:column="34">keyTemp</name><op:operator pos:line="142" pos:column="41">.</op:operator><name pos:line="142" pos:column="42">Contains</name></name><argument_list pos:line="142" pos:column="50">(<argument><expr><name pos:line="142" pos:column="51">key_candidate</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="142" pos:column="66">
                                <expr_stmt><expr><call><name><name pos:line="143" pos:column="33">keyTemp</name><op:operator pos:line="143" pos:column="40">.</op:operator><name pos:line="143" pos:column="41">Add</name></name><argument_list pos:line="143" pos:column="44">(<argument><expr><name pos:line="143" pos:column="45">key_candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                            <comment type="line" pos:line="145" pos:column="29">//Remove the searched string</comment>
                            <decl_stmt><decl><type><name pos:line="146" pos:column="29">int</name></type> <name pos:line="146" pos:column="33">lengthRemove</name> <init pos:line="146" pos:column="46">= <expr><name pos:line="146" pos:column="48">last</name> <op:operator pos:line="146" pos:column="53">-</op:operator> <name pos:line="146" pos:column="55">first</name> <op:operator pos:line="146" pos:column="61">+</op:operator> <lit:literal type="number" pos:line="146" pos:column="63">2</lit:literal> <op:operator pos:line="146" pos:column="65">*</op:operator> <lit:literal type="string" pos:line="146" pos:column="67">"|~S~|"</lit:literal><op:operator pos:line="146" pos:column="74">.</op:operator><name pos:line="146" pos:column="75">Length</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name pos:line="147" pos:column="29">findKey</name> <op:operator pos:line="147" pos:column="37">=</op:operator> <call><name><name pos:line="147" pos:column="39">findKey</name><op:operator pos:line="147" pos:column="46">.</op:operator><name pos:line="147" pos:column="47">Remove</name></name><argument_list pos:line="147" pos:column="53">(<argument><expr><name pos:line="147" pos:column="54">first</name> <op:operator pos:line="147" pos:column="60">-</op:operator> <lit:literal type="string" pos:line="147" pos:column="62">"|~S~|"</lit:literal><op:operator pos:line="147" pos:column="69">.</op:operator><name pos:line="147" pos:column="70">Length</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="78">lengthRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if pos:line="148" pos:column="29">if <condition pos:line="148" pos:column="32">(<expr><name pos:line="148" pos:column="33">removed</name></expr>)</condition><then pos:line="148" pos:column="41">
                                <expr_stmt><expr><name pos:line="149" pos:column="33">findKey</name> <op:operator pos:line="149" pos:column="41">=</op:operator> <call><name><name pos:line="149" pos:column="43">findKey</name><op:operator pos:line="149" pos:column="50">.</op:operator><name pos:line="149" pos:column="51">Insert</name></name><argument_list pos:line="149" pos:column="57">(<argument><expr><name pos:line="149" pos:column="58">first</name> <op:operator pos:line="149" pos:column="64">-</op:operator> <lit:literal type="string" pos:line="149" pos:column="66">"|~S~|"</lit:literal><op:operator pos:line="149" pos:column="73">.</op:operator><name pos:line="149" pos:column="74">Length</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="149" pos:column="82">"|~S~|"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                        }</block></while>

                        <decl_stmt><decl><type><name pos:line="152" pos:column="25">string</name><index pos:line="152" pos:column="31">[]</index></type> <name pos:line="152" pos:column="34">key</name> <init pos:line="152" pos:column="38">= <expr><call><name><name pos:line="152" pos:column="40">keyTemp</name><op:operator pos:line="152" pos:column="47">.</op:operator><name pos:line="152" pos:column="48">ToArray</name></name><argument_list pos:line="152" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="153" pos:column="25">string</name><index pos:line="153" pos:column="31">[]</index></type> <name pos:line="153" pos:column="34">temp</name> <init pos:line="153" pos:column="39">= <expr><call><name><name pos:line="153" pos:column="41">line</name><op:operator pos:line="153" pos:column="45">.</op:operator><name pos:line="153" pos:column="46">Split</name></name><argument_list pos:line="153" pos:column="51">(<argument><expr><op:operator pos:line="153" pos:column="52">new</op:operator><index pos:line="153" pos:column="55">[]</index> <block pos:line="153" pos:column="58">{ <expr><lit:literal type="string" pos:line="153" pos:column="60">"|~S~|"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="153" pos:column="69">"|~E~|"</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="80">StringSplitOptions</name><op:operator pos:line="153" pos:column="98">.</op:operator><name pos:line="153" pos:column="99">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <foreach pos:line="155" pos:column="25">foreach (<init><decl><type><name pos:line="155" pos:column="34">string</name></type> <name pos:line="155" pos:column="41">item</name> <range pos:line="155" pos:column="46">in <expr><name pos:line="155" pos:column="49">temp</name></expr></range></decl></init>)
                        <block pos:line="156" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="157" pos:column="29">span</name><op:operator pos:line="157" pos:column="33">.</op:operator><name pos:line="157" pos:column="34">Inlines</name><op:operator pos:line="157" pos:column="41">.</op:operator><name pos:line="157" pos:column="42">Add</name></name><argument_list pos:line="157" pos:column="45">(<argument><expr><call><name pos:line="157" pos:column="46">IsSearchKey</name><argument_list pos:line="157" pos:column="57">(<argument><expr><name pos:line="157" pos:column="58">item</name></expr></argument>, <argument><expr><name pos:line="157" pos:column="64">key</name></expr></argument>)</argument_list></call>
                                <op:operator pos:line="158" pos:column="33">?</op:operator> <call><name pos:line="158" pos:column="35">CreateRun</name><argument_list pos:line="158" pos:column="44">(<argument><expr><name pos:line="158" pos:column="45">item</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="51">highlightedWeight</name></expr></argument>, <argument><expr><call><name><name pos:line="158" pos:column="70">SearchViewControl</name><op:operator pos:line="158" pos:column="87">.</op:operator><name pos:line="158" pos:column="88">GetHistoryTextColor</name></name><argument_list pos:line="158" pos:column="107">()</argument_list></call></expr></argument>)</argument_list></call>
                                    <op:operator pos:line="159" pos:column="37">:</op:operator> <call><name pos:line="159" pos:column="39">CreateRun</name><argument_list pos:line="159" pos:column="48">(<argument><expr><name pos:line="159" pos:column="49">item</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="55">regularWeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></foreach>
                    }</block></then>
                    <else pos:line="162" pos:column="21">else
                        <expr_stmt><expr><call><name><name pos:line="163" pos:column="25">span</name><op:operator pos:line="163" pos:column="29">.</op:operator><name pos:line="163" pos:column="30">Inlines</name><op:operator pos:line="163" pos:column="37">.</op:operator><name pos:line="163" pos:column="38">Add</name></name><argument_list pos:line="163" pos:column="41">(<argument><expr><call><name pos:line="163" pos:column="42">CreateRun</name><argument_list pos:line="163" pos:column="51">(<argument><expr><name pos:line="163" pos:column="52">line</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="58">regularWeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                    <expr_stmt><expr><call><name><name pos:line="164" pos:column="21">span</name><op:operator pos:line="164" pos:column="25">.</op:operator><name pos:line="164" pos:column="26">Inlines</name><op:operator pos:line="164" pos:column="33">.</op:operator><name pos:line="164" pos:column="34">Add</name></name><argument_list pos:line="164" pos:column="37">(<argument><expr><call><name pos:line="164" pos:column="38">CreateRun</name><argument_list pos:line="164" pos:column="47">(<argument><expr><name><name pos:line="164" pos:column="48">Environment</name><op:operator pos:line="164" pos:column="59">.</op:operator><name pos:line="164" pos:column="60">NewLine</name></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="69">regularWeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <return pos:line="166" pos:column="17">return <expr><call><name pos:line="166" pos:column="24">ClearSpan</name><argument_list pos:line="166" pos:column="33">(<argument><expr><op:operator pos:line="166" pos:column="34">(</op:operator><name pos:line="166" pos:column="35">IHighlightRawInfo</name><op:operator pos:line="166" pos:column="52">)</op:operator><name pos:line="166" pos:column="53">inforValue</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="65">span</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="71">emptyLineOffsets</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch pos:line="168" pos:column="13">catch <parameter_list pos:line="168" pos:column="19">(<param><decl><type><name pos:line="168" pos:column="20">Exception</name></type> <name pos:line="168" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="169" pos:column="13">{
                <return pos:line="170" pos:column="17">return <expr><name pos:line="170" pos:column="24">originalSpan</name></expr>;</return>
            }</block></catch></try>
        }</block></function>

        <decl_stmt><decl><type><name pos:line="174" pos:column="9">FontWeight</name></type> <name pos:line="174" pos:column="20">highlightedWeight</name> <init pos:line="174" pos:column="38">= <expr><name><name pos:line="174" pos:column="40">FontWeights</name><op:operator pos:line="174" pos:column="51">.</op:operator><name pos:line="174" pos:column="52">UltraBold</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="175" pos:column="9">FontWeight</name></type> <name pos:line="175" pos:column="20">regularWeight</name> <init pos:line="175" pos:column="34">= <expr><name><name pos:line="175" pos:column="36">FontWeights</name><op:operator pos:line="175" pos:column="47">.</op:operator><name pos:line="175" pos:column="48">Medium</name></name></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="177" pos:column="9">private</specifier> <name pos:line="177" pos:column="17">Run</name></type> <name pos:line="177" pos:column="21">CreateRun</name><parameter_list pos:line="177" pos:column="30">(<param><decl><type><name pos:line="177" pos:column="31">String</name></type> <name pos:line="177" pos:column="38">text</name></decl></param>, <param><decl><type><name pos:line="177" pos:column="44">FontWeight</name></type> <name pos:line="177" pos:column="55">fontWeight</name></decl></param>, <param><decl><type><name pos:line="177" pos:column="67">Brush</name></type> <name pos:line="177" pos:column="73">color</name> <init pos:line="177" pos:column="79">= <expr><name pos:line="177" pos:column="81">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="178" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="179" pos:column="13">var</name></type> <name pos:line="179" pos:column="17">brush</name> <init pos:line="179" pos:column="23">= <expr><call><name pos:line="179" pos:column="25">GetForeground</name><argument_list pos:line="179" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="180" pos:column="13">if <condition pos:line="180" pos:column="16">(<expr><name pos:line="180" pos:column="17">color</name> <op:operator pos:line="180" pos:column="23">!=</op:operator> <name pos:line="180" pos:column="26">null</name></expr>)</condition><then pos:line="180" pos:column="31">
                <expr_stmt><expr><name pos:line="181" pos:column="17">brush</name> <op:operator pos:line="181" pos:column="23">=</op:operator> <name pos:line="181" pos:column="25">color</name></expr>;</expr_stmt></then></if>            
            <return pos:line="182" pos:column="13">return <expr><op:operator pos:line="182" pos:column="20">new</op:operator> <call><name pos:line="182" pos:column="24">Run</name><argument_list pos:line="182" pos:column="27">(<argument><expr><name pos:line="182" pos:column="28">text</name></expr></argument>)</argument_list></call> <block pos:line="182" pos:column="34">{ <expr><name pos:line="182" pos:column="36">FontWeight</name> <op:operator pos:line="182" pos:column="47">=</op:operator> <name pos:line="182" pos:column="49">fontWeight</name></expr><op:operator pos:line="182" pos:column="59">,</op:operator> <expr><name pos:line="182" pos:column="61">FontFamily</name> <op:operator pos:line="182" pos:column="72">=</op:operator> <op:operator pos:line="182" pos:column="74">new</op:operator> <call><name pos:line="182" pos:column="78">FontFamily</name><argument_list pos:line="182" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="89">"Courier"</lit:literal></expr></argument>)</argument_list></call></expr><op:operator pos:line="182" pos:column="99">,</op:operator> <expr><name pos:line="182" pos:column="101">Foreground</name> <op:operator pos:line="182" pos:column="112">=</op:operator> <name pos:line="182" pos:column="114">brush</name></expr>}</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="185" pos:column="9">private</specifier> <specifier pos:line="185" pos:column="17">static</specifier> <name pos:line="185" pos:column="24">Brush</name></type> <name pos:line="185" pos:column="30">GetForeground</name><parameter_list pos:line="185" pos:column="43">()</parameter_list>
        <block pos:line="186" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="187" pos:column="13">var</name></type> <name pos:line="187" pos:column="17">key</name> <init pos:line="187" pos:column="21">= <expr><name><name pos:line="187" pos:column="23">Microsoft</name><op:operator pos:line="187" pos:column="32">.</op:operator><name pos:line="187" pos:column="33">VisualStudio</name><op:operator pos:line="187" pos:column="45">.</op:operator><name pos:line="187" pos:column="46">Shell</name><op:operator pos:line="187" pos:column="51">.</op:operator><name pos:line="187" pos:column="52">VsBrushes</name><op:operator pos:line="187" pos:column="61">.</op:operator><name pos:line="187" pos:column="62">ToolWindowTextKey</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="188" pos:column="13">var</name></type> <name pos:line="188" pos:column="17">brush</name> <init pos:line="188" pos:column="23">= <expr><op:operator pos:line="188" pos:column="25">(</op:operator><name pos:line="188" pos:column="26">Brush</name><op:operator pos:line="188" pos:column="31">)</op:operator> <name><name pos:line="188" pos:column="33">Application</name><op:operator pos:line="188" pos:column="44">.</op:operator><name pos:line="188" pos:column="45">Current</name><op:operator pos:line="188" pos:column="52">.</op:operator><name pos:line="188" pos:column="53">Resources</name><index pos:line="188" pos:column="62">[<expr><name pos:line="188" pos:column="63">key</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <return pos:line="189" pos:column="13">return <expr><name pos:line="189" pos:column="20">brush</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="192" pos:column="9">private</specifier> <name pos:line="192" pos:column="17">bool</name></type> <name pos:line="192" pos:column="22">IsSearchKey</name><parameter_list pos:line="192" pos:column="33">(<param><decl><type><name pos:line="192" pos:column="34">string</name></type> <name pos:line="192" pos:column="41">input</name></decl></param>, <param><decl><type><name><name pos:line="192" pos:column="48">string</name><index pos:line="192" pos:column="54">[]</index></name></type> <name pos:line="192" pos:column="57">keyset</name></decl></param>)</parameter_list> <block pos:line="192" pos:column="65">{
            <foreach pos:line="193" pos:column="13">foreach(<init><decl><type><name pos:line="193" pos:column="21">string</name></type> <name pos:line="193" pos:column="28">item</name> <range pos:line="193" pos:column="33">in <expr><name pos:line="193" pos:column="36">keyset</name></expr></range></decl></init>) <block pos:line="193" pos:column="44">{
                <if pos:line="194" pos:column="17">if<condition pos:line="194" pos:column="19">(<expr><call><name><name pos:line="194" pos:column="20">input</name><op:operator pos:line="194" pos:column="25">.</op:operator><name pos:line="194" pos:column="26">Equals</name></name><argument_list pos:line="194" pos:column="32">(<argument><expr><name pos:line="194" pos:column="33">item</name></expr></argument>, <argument><expr><name><name pos:line="194" pos:column="39">StringComparison</name><op:operator pos:line="194" pos:column="55">.</op:operator><name pos:line="194" pos:column="56">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="194" pos:column="84">
                    <return pos:line="195" pos:column="21">return <expr><lit:literal type="boolean" pos:line="195" pos:column="28">true</lit:literal></expr>;</return></then></if>
            }</block></foreach>
            <return pos:line="197" pos:column="13">return <expr><lit:literal type="boolean" pos:line="197" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="200" pos:column="9">private</specifier> <name pos:line="200" pos:column="17">Span</name></type> <name pos:line="200" pos:column="22">ClearSpan</name><parameter_list pos:line="200" pos:column="31">(<param><decl><type><name pos:line="200" pos:column="32">IHighlightRawInfo</name></type> <name pos:line="200" pos:column="50">inforValue</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="62">Span</name></type> <name pos:line="200" pos:column="67">span</name></decl></param>, <param><decl><type><name><name pos:line="200" pos:column="73">IEnumerable</name><argument_list pos:line="200" pos:column="84">&lt;<argument><name pos:line="200" pos:column="85">int</name></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="90">emptyLineOffsets</name></decl></param>)</parameter_list>
        <block pos:line="201" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="202" pos:column="13">var</name></type> <name pos:line="202" pos:column="17">runs</name> <init pos:line="202" pos:column="22">= <expr><call><name pos:line="202" pos:column="24">RemoveEmptyLines</name><argument_list pos:line="202" pos:column="40">(<argument><expr><name pos:line="202" pos:column="41">inforValue</name></expr></argument>, <argument><expr><call><name><name pos:line="202" pos:column="53">span</name><op:operator pos:line="202" pos:column="57">.</op:operator><name pos:line="202" pos:column="58">Inlines</name><op:operator pos:line="202" pos:column="65">.</op:operator><name><name pos:line="202" pos:column="66">Cast</name><argument_list pos:line="202" pos:column="70">&lt;<argument><name pos:line="202" pos:column="71">Run</name></argument>&gt;</argument_list></name></name><argument_list pos:line="202" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="202" pos:column="79">emptyLineOffsets</name></expr></argument>)</argument_list></call><op:operator pos:line="202" pos:column="96">.</op:operator><call><name pos:line="202" pos:column="97">ToArray</name><argument_list pos:line="202" pos:column="104">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="203" pos:column="13">span</name><op:operator pos:line="203" pos:column="17">.</op:operator><name pos:line="203" pos:column="18">Inlines</name><op:operator pos:line="203" pos:column="25">.</op:operator><name pos:line="203" pos:column="26">Clear</name></name><argument_list pos:line="203" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="204" pos:column="13">span</name><op:operator pos:line="204" pos:column="17">.</op:operator><name pos:line="204" pos:column="18">Inlines</name><op:operator pos:line="204" pos:column="25">.</op:operator><name pos:line="204" pos:column="26">AddRange</name></name><argument_list pos:line="204" pos:column="34">(<argument><expr><name pos:line="204" pos:column="35">runs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="205" pos:column="13">return <expr><name pos:line="205" pos:column="20">span</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="208" pos:column="9">private</specifier> <name><name pos:line="208" pos:column="17">IEnumerable</name><argument_list pos:line="208" pos:column="28">&lt;<argument><name pos:line="208" pos:column="29">Inline</name></argument>&gt;</argument_list></name></type> <name pos:line="208" pos:column="37">RemoveEmptyLines</name><parameter_list pos:line="208" pos:column="53">(<param><decl><type><name pos:line="208" pos:column="54">IHighlightRawInfo</name></type> <name pos:line="208" pos:column="72">inforValue</name></decl></param>, <param><decl><type><name><name pos:line="208" pos:column="84">IEnumerable</name><argument_list pos:line="208" pos:column="95">&lt;<argument><name pos:line="208" pos:column="96">Run</name></argument>&gt;</argument_list></name></type> <name pos:line="208" pos:column="101">terms</name></decl></param>, 
            <param><decl><type><name><name pos:line="209" pos:column="13">IEnumerable</name><argument_list pos:line="209" pos:column="24">&lt;<argument><name pos:line="209" pos:column="25">int</name></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="30">emptyLineOffsets</name></decl></param>)</parameter_list>
        <block pos:line="210" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="211" pos:column="13">var</name></type> <name pos:line="211" pos:column="17">items</name> <init pos:line="211" pos:column="23">= <expr><op:operator pos:line="211" pos:column="25">new</op:operator> <call><name><name pos:line="211" pos:column="29">List</name><argument_list pos:line="211" pos:column="33">&lt;<argument><name pos:line="211" pos:column="34">Inline</name></argument>&gt;</argument_list></name><argument_list pos:line="211" pos:column="41">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="213" pos:column="13">var</name></type> <name pos:line="213" pos:column="17">lines</name> <init pos:line="213" pos:column="23">= <expr><call><name pos:line="213" pos:column="25">BreakToRunLines</name><argument_list pos:line="213" pos:column="40">(<argument><expr><name pos:line="213" pos:column="41">terms</name></expr></argument>)</argument_list></call><op:operator pos:line="213" pos:column="47">.</op:operator><call><name pos:line="213" pos:column="48">Select</name><argument_list pos:line="213" pos:column="54">(<argument><expr><lambda><name pos:line="213" pos:column="55">l</name> <op:operator pos:line="213" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="213" pos:column="60">l</name><op:operator pos:line="213" pos:column="61">.</op:operator><name pos:line="213" pos:column="62">RemoveEmptyRun</name></name><argument_list pos:line="213" pos:column="76">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="213" pos:column="79">.</op:operator><call><name pos:line="213" pos:column="80">ToArray</name><argument_list pos:line="213" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="214" pos:column="13">lines</name> <op:operator pos:line="214" pos:column="19">=</op:operator> <call><name><name pos:line="214" pos:column="21">lines</name><op:operator pos:line="214" pos:column="26">.</op:operator><name pos:line="214" pos:column="27">Where</name></name><argument_list pos:line="214" pos:column="32">(<argument><expr><lambda><name pos:line="214" pos:column="33">l</name> <op:operator pos:line="214" pos:column="35">=&gt;</op:operator> <op:operator pos:line="214" pos:column="38">!</op:operator><call><name><name pos:line="214" pos:column="39">l</name><op:operator pos:line="214" pos:column="40">.</op:operator><name pos:line="214" pos:column="41">IsEmpty</name></name><argument_list pos:line="214" pos:column="48">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="214" pos:column="51">.</op:operator><call><name pos:line="214" pos:column="52">ToArray</name><argument_list pos:line="214" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="215" pos:column="13">lines</name> <op:operator pos:line="215" pos:column="19">=</op:operator> <call><name pos:line="215" pos:column="21">AddEmptyLines</name><argument_list pos:line="215" pos:column="34">(<argument><expr><call><name><name pos:line="215" pos:column="35">lines</name><op:operator pos:line="215" pos:column="40">.</op:operator><name pos:line="215" pos:column="41">ToList</name></name><argument_list pos:line="215" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="215" pos:column="51">emptyLineOffsets</name></expr></argument>)</argument_list></call><op:operator pos:line="215" pos:column="68">.</op:operator><call><name pos:line="215" pos:column="69">ToArray</name><argument_list pos:line="215" pos:column="76">()</argument_list></call></expr>;</expr_stmt>

            <if pos:line="217" pos:column="13">if <condition pos:line="217" pos:column="16">(<expr><name><name pos:line="217" pos:column="17">inforValue</name><op:operator pos:line="217" pos:column="27">.</op:operator><name pos:line="217" pos:column="28">IndOption</name></name> <op:operator pos:line="217" pos:column="38">==</op:operator> <name><name pos:line="217" pos:column="41">IndentionOption</name><op:operator pos:line="217" pos:column="56">.</op:operator><name pos:line="217" pos:column="57">NoIndention</name></name></expr>)</condition><then pos:line="217" pos:column="69">
            <block pos:line="218" pos:column="13">{
                <expr_stmt><expr><name pos:line="219" pos:column="17">lines</name> <op:operator pos:line="219" pos:column="23">=</op:operator> <call><name><name pos:line="219" pos:column="25">lines</name><op:operator pos:line="219" pos:column="30">.</op:operator><name pos:line="219" pos:column="31">Select</name></name><argument_list pos:line="219" pos:column="37">(<argument><expr><lambda><name pos:line="219" pos:column="38">l</name> <op:operator pos:line="219" pos:column="40">=&gt;</op:operator> <call><name><name pos:line="219" pos:column="43">l</name><op:operator pos:line="219" pos:column="44">.</op:operator><name pos:line="219" pos:column="45">RemoveHeadingWhiteSpace</name></name><argument_list pos:line="219" pos:column="68">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="219" pos:column="71">.</op:operator><call><name pos:line="219" pos:column="72">ToArray</name><argument_list pos:line="219" pos:column="79">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="222" pos:column="13">lines</name> <op:operator pos:line="222" pos:column="19">=</op:operator> <call><name pos:line="222" pos:column="21">AddLineNumber</name><argument_list pos:line="222" pos:column="34">(<argument><expr><name pos:line="222" pos:column="35">inforValue</name></expr></argument>, <argument><expr><call><name pos:line="222" pos:column="47">RemoveHeadingAndTrailingEmptyLines</name><argument_list pos:line="222" pos:column="81">(<argument><expr><call><name pos:line="222" pos:column="82">AlignIndention</name><argument_list pos:line="222" pos:column="96">(<argument><expr><name pos:line="222" pos:column="97">lines</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="104">inforValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <foreach pos:line="223" pos:column="13">foreach (<init><decl><type><name pos:line="223" pos:column="22">var</name></type> <name pos:line="223" pos:column="26">line</name> <range pos:line="223" pos:column="31">in <expr><name pos:line="223" pos:column="34">lines</name></expr></range></decl></init>)
            <block pos:line="224" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="225" pos:column="17">items</name><op:operator pos:line="225" pos:column="22">.</op:operator><name pos:line="225" pos:column="23">AddRange</name></name><argument_list pos:line="225" pos:column="31">(<argument><expr><call><name><name pos:line="225" pos:column="32">line</name><op:operator pos:line="225" pos:column="36">.</op:operator><name pos:line="225" pos:column="37">GetItems</name></name><argument_list pos:line="225" pos:column="45">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="226" pos:column="17">items</name><op:operator pos:line="226" pos:column="22">.</op:operator><name pos:line="226" pos:column="23">Add</name></name><argument_list pos:line="226" pos:column="26">(<argument><expr><call><name pos:line="226" pos:column="27">CreateRun</name><argument_list pos:line="226" pos:column="36">(<argument><expr><name><name pos:line="226" pos:column="37">Environment</name><op:operator pos:line="226" pos:column="48">.</op:operator><name pos:line="226" pos:column="49">NewLine</name></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="58">regularWeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="228" pos:column="13">return <expr><name pos:line="228" pos:column="20">items</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="231" pos:column="9">private</specifier> <name><name pos:line="231" pos:column="17">IEnumerable</name><argument_list pos:line="231" pos:column="28">&lt;<argument><name pos:line="231" pos:column="29">InlineItemLine</name></argument>&gt;</argument_list></name></type> <name pos:line="231" pos:column="45">AddEmptyLines</name><parameter_list pos:line="231" pos:column="58">(<param><decl><type><name><name pos:line="231" pos:column="59">List</name><argument_list pos:line="231" pos:column="63">&lt;<argument><name pos:line="231" pos:column="64">InlineItemLine</name></argument>&gt;</argument_list></name></type> <name pos:line="231" pos:column="80">lines</name></decl></param>, <param><decl><type><name><name pos:line="231" pos:column="87">IEnumerable</name><argument_list pos:line="231" pos:column="98">&lt;<argument><name pos:line="231" pos:column="99">int</name></argument>&gt;</argument_list></name></type> <name pos:line="231" pos:column="104">emptyLineOffsets</name></decl></param>)</parameter_list>
        <block pos:line="232" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="233" pos:column="13">var</name></type> <name pos:line="233" pos:column="17">indexes</name> <init pos:line="233" pos:column="25">= <expr><call><name><name pos:line="233" pos:column="27">emptyLineOffsets</name><op:operator pos:line="233" pos:column="43">.</op:operator><name pos:line="233" pos:column="44">OrderBy</name></name><argument_list pos:line="233" pos:column="51">(<argument><expr><lambda><name pos:line="233" pos:column="52">o</name> <op:operator pos:line="233" pos:column="54">=&gt;</op:operator> <name pos:line="233" pos:column="57">o</name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="234" pos:column="13">foreach (<init><decl><type><name pos:line="234" pos:column="22">var</name></type> <name pos:line="234" pos:column="26">index</name> <range pos:line="234" pos:column="32">in <expr><name pos:line="234" pos:column="35">indexes</name></expr></range></decl></init>)
            <block pos:line="235" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="236" pos:column="17">var</name></type> <name pos:line="236" pos:column="21">line</name> <init pos:line="236" pos:column="26">= <expr><op:operator pos:line="236" pos:column="28">new</op:operator> <call><name pos:line="236" pos:column="32">InlineItemLine</name><argument_list pos:line="236" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="237" pos:column="17">line</name><op:operator pos:line="237" pos:column="21">.</op:operator><name pos:line="237" pos:column="22">AddItem</name></name><argument_list pos:line="237" pos:column="29">(<argument><expr><call><name pos:line="237" pos:column="30">CreateRun</name><argument_list pos:line="237" pos:column="39">(<argument><expr><name><name pos:line="237" pos:column="40">String</name><op:operator pos:line="237" pos:column="46">.</op:operator><name pos:line="237" pos:column="47">Empty</name></name></expr></argument>, <argument><expr><name pos:line="237" pos:column="54">regularWeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="238" pos:column="17">lines</name><op:operator pos:line="238" pos:column="22">.</op:operator><name pos:line="238" pos:column="23">Insert</name></name><argument_list pos:line="238" pos:column="29">(<argument><expr><name pos:line="238" pos:column="30">index</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="37">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="240" pos:column="13">return <expr><name pos:line="240" pos:column="20">lines</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="243" pos:column="9">private</specifier> <name pos:line="243" pos:column="17">InlineItemLine</name><index pos:line="243" pos:column="31">[]</index></type> <name pos:line="243" pos:column="34">RemoveHeadingAndTrailingEmptyLines</name><parameter_list pos:line="243" pos:column="68">(<param><decl><type><name><name pos:line="243" pos:column="69">IEnumerable</name><argument_list pos:line="243" pos:column="80">&lt;<argument><name pos:line="243" pos:column="81">InlineItemLine</name></argument>&gt;</argument_list></name></type> <name pos:line="243" pos:column="97">lines</name></decl></param>)</parameter_list>
        <block pos:line="244" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="245" pos:column="13">var</name></type> <name pos:line="245" pos:column="17">list</name> <init pos:line="245" pos:column="22">= <expr><call><name><name pos:line="245" pos:column="24">lines</name><op:operator pos:line="245" pos:column="29">.</op:operator><name pos:line="245" pos:column="30">ToList</name></name><argument_list pos:line="245" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while pos:line="246" pos:column="13">while <condition pos:line="246" pos:column="19">(<expr><call><name><name pos:line="246" pos:column="20">list</name><op:operator pos:line="246" pos:column="24">.</op:operator><name pos:line="246" pos:column="25">Any</name></name><argument_list pos:line="246" pos:column="28">()</argument_list></call> <op:operator pos:line="246" pos:column="31">&amp;&amp;</op:operator> <call><name><name pos:line="246" pos:column="34">String</name><op:operator pos:line="246" pos:column="40">.</op:operator><name pos:line="246" pos:column="41">IsNullOrWhiteSpace</name></name><argument_list pos:line="246" pos:column="59">(<argument><expr><call><name><name pos:line="246" pos:column="60">list</name><op:operator pos:line="246" pos:column="64">.</op:operator><name pos:line="246" pos:column="65">First</name></name><argument_list pos:line="246" pos:column="70">()</argument_list></call><op:operator pos:line="246" pos:column="72">.</op:operator><call><name pos:line="246" pos:column="73">GetLine</name><argument_list pos:line="246" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:line="247" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="248" pos:column="17">list</name><op:operator pos:line="248" pos:column="21">.</op:operator><name pos:line="248" pos:column="22">RemoveAt</name></name><argument_list pos:line="248" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="248" pos:column="31">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <while pos:line="250" pos:column="13">while <condition pos:line="250" pos:column="19">(<expr><call><name><name pos:line="250" pos:column="20">list</name><op:operator pos:line="250" pos:column="24">.</op:operator><name pos:line="250" pos:column="25">Any</name></name><argument_list pos:line="250" pos:column="28">()</argument_list></call> <op:operator pos:line="250" pos:column="31">&amp;&amp;</op:operator> <call><name><name pos:line="250" pos:column="34">String</name><op:operator pos:line="250" pos:column="40">.</op:operator><name pos:line="250" pos:column="41">IsNullOrWhiteSpace</name></name><argument_list pos:line="250" pos:column="59">(<argument><expr><call><name><name pos:line="250" pos:column="60">list</name><op:operator pos:line="250" pos:column="64">.</op:operator><name pos:line="250" pos:column="65">Last</name></name><argument_list pos:line="250" pos:column="69">()</argument_list></call><op:operator pos:line="250" pos:column="71">.</op:operator><call><name pos:line="250" pos:column="72">GetLine</name><argument_list pos:line="250" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:line="251" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="252" pos:column="17">list</name><op:operator pos:line="252" pos:column="21">.</op:operator><name pos:line="252" pos:column="22">RemoveAt</name></name><argument_list pos:line="252" pos:column="30">(<argument><expr><name><name pos:line="252" pos:column="31">list</name><op:operator pos:line="252" pos:column="35">.</op:operator><name pos:line="252" pos:column="36">Count</name></name> <op:operator pos:line="252" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="252" pos:column="44">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return pos:line="254" pos:column="13">return <expr><call><name><name pos:line="254" pos:column="20">list</name><op:operator pos:line="254" pos:column="24">.</op:operator><name pos:line="254" pos:column="25">ToArray</name></name><argument_list pos:line="254" pos:column="32">()</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="258" pos:column="9">private</specifier> <name><name pos:line="258" pos:column="17">IEnumerable</name><argument_list pos:line="258" pos:column="28">&lt;<argument><name pos:line="258" pos:column="29">InlineItemLine</name></argument>&gt;</argument_list></name></type> <name pos:line="258" pos:column="45">AlignIndention</name><parameter_list pos:line="258" pos:column="59">(<param><decl><type><name><name pos:line="258" pos:column="60">InlineItemLine</name><index pos:line="258" pos:column="74">[]</index></name></type> <name pos:line="258" pos:column="77">lines</name></decl></param>, <param><decl><type><name pos:line="258" pos:column="84">IHighlightRawInfo</name></type> <name pos:line="258" pos:column="102">info</name></decl></param>)</parameter_list>
        <block pos:line="259" pos:column="9">{
            <if pos:line="260" pos:column="13">if <condition pos:line="260" pos:column="16">(<expr><call><name><name pos:line="260" pos:column="17">lines</name><op:operator pos:line="260" pos:column="22">.</op:operator><name pos:line="260" pos:column="23">Any</name></name><argument_list pos:line="260" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="260" pos:column="29">
            <block pos:line="261" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="262" pos:column="17">var</name></type> <name pos:line="262" pos:column="21">lastHead</name> <init pos:line="262" pos:column="30">= <expr><call><name><name pos:line="262" pos:column="32">lines</name><op:operator pos:line="262" pos:column="37">.</op:operator><name pos:line="262" pos:column="38">Last</name></name><argument_list pos:line="262" pos:column="42">()</argument_list></call><op:operator pos:line="262" pos:column="44">.</op:operator><call><name pos:line="262" pos:column="45">GetHeadingWhiteSpace</name><argument_list pos:line="262" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="263" pos:column="17">var</name></type> <name pos:line="263" pos:column="21">firstHead</name> <init pos:line="263" pos:column="31">= <expr><call><name><name pos:line="263" pos:column="33">lines</name><op:operator pos:line="263" pos:column="38">.</op:operator><name pos:line="263" pos:column="39">First</name></name><argument_list pos:line="263" pos:column="44">()</argument_list></call><op:operator pos:line="263" pos:column="46">.</op:operator><call><name pos:line="263" pos:column="47">GetHeadingWhiteSpace</name><argument_list pos:line="263" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="264" pos:column="17">if <condition pos:line="264" pos:column="20">(<expr><call><name><name pos:line="264" pos:column="21">firstHead</name><op:operator pos:line="264" pos:column="30">.</op:operator><name pos:line="264" pos:column="31">Equals</name></name><argument_list pos:line="264" pos:column="37">(<argument><expr><name><name pos:line="264" pos:column="38">string</name><op:operator pos:line="264" pos:column="44">.</op:operator><name pos:line="264" pos:column="45">Empty</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="264" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="264" pos:column="55">!</op:operator><call><name><name pos:line="264" pos:column="56">lastHead</name><op:operator pos:line="264" pos:column="64">.</op:operator><name pos:line="264" pos:column="65">Equals</name></name><argument_list pos:line="264" pos:column="71">(<argument><expr><name><name pos:line="264" pos:column="72">string</name><op:operator pos:line="264" pos:column="78">.</op:operator><name pos:line="264" pos:column="79">Empty</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="264" pos:column="86">
                <block pos:line="265" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="266" pos:column="21">lines</name><op:operator pos:line="266" pos:column="26">.</op:operator><name pos:line="266" pos:column="27">First</name></name><argument_list pos:line="266" pos:column="32">()</argument_list></call><op:operator pos:line="266" pos:column="34">.</op:operator><call><name pos:line="266" pos:column="35">AddBeginning</name><argument_list pos:line="266" pos:column="47">(<argument><expr><call><name pos:line="266" pos:column="48">CreateRun</name><argument_list pos:line="266" pos:column="57">(<argument><expr><name pos:line="266" pos:column="58">lastHead</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="68">regularWeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <return pos:line="269" pos:column="13">return <expr><name pos:line="269" pos:column="20">lines</name></expr>;</return>
        }</block></function>


        <class><specifier pos:line="273" pos:column="9">private</specifier> class <name pos:line="273" pos:column="23">InlineItemLine</name>
        <block pos:line="274" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="275" pos:column="13">private</specifier> <name><name pos:line="275" pos:column="21">List</name><argument_list pos:line="275" pos:column="25">&lt;<argument><name pos:line="275" pos:column="26">Inline</name></argument>&gt;</argument_list></name></type> <name pos:line="275" pos:column="34">items</name></decl>;</decl_stmt>
             
            <constructor><specifier pos:line="277" pos:column="13">public</specifier> <name pos:line="277" pos:column="20">InlineItemLine</name><parameter_list pos:line="277" pos:column="34">()</parameter_list>
            <block pos:line="278" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="279" pos:column="17">this</name><op:operator pos:line="279" pos:column="21">.</op:operator><name pos:line="279" pos:column="22">items</name></name> <op:operator pos:line="279" pos:column="28">=</op:operator> <op:operator pos:line="279" pos:column="30">new</op:operator> <call><name><name pos:line="279" pos:column="34">List</name><argument_list pos:line="279" pos:column="38">&lt;<argument><name pos:line="279" pos:column="39">Inline</name></argument>&gt;</argument_list></name><argument_list pos:line="279" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="282" pos:column="13">public</specifier> <name pos:line="282" pos:column="20">void</name></type> <name pos:line="282" pos:column="25">AddItem</name><parameter_list pos:line="282" pos:column="32">(<param><decl><type><name pos:line="282" pos:column="33">Inline</name></type> <name pos:line="282" pos:column="40">run</name></decl></param>)</parameter_list>
            <block pos:line="283" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="284" pos:column="17">this</name><op:operator pos:line="284" pos:column="21">.</op:operator><name pos:line="284" pos:column="22">items</name><op:operator pos:line="284" pos:column="27">.</op:operator><name pos:line="284" pos:column="28">Add</name></name><argument_list pos:line="284" pos:column="31">(<argument><expr><name pos:line="284" pos:column="32">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            
            <function><type><specifier pos:line="288" pos:column="13">public</specifier> <name pos:line="288" pos:column="20">InlineItemLine</name></type> <name pos:line="288" pos:column="35">RemoveEmptyRun</name><parameter_list pos:line="288" pos:column="49">()</parameter_list>
            <block pos:line="289" pos:column="13">{
                <expr_stmt><expr><name pos:line="290" pos:column="17">items</name> <op:operator pos:line="290" pos:column="23">=</op:operator> <call><name><name pos:line="290" pos:column="25">items</name><op:operator pos:line="290" pos:column="30">.</op:operator><name pos:line="290" pos:column="31">Where</name></name><argument_list pos:line="290" pos:column="36">(<argument><expr><lambda><name pos:line="290" pos:column="37">r</name> <op:operator pos:line="290" pos:column="39">=&gt;</op:operator> <op:operator pos:line="290" pos:column="42">!</op:operator><call><name><name pos:line="290" pos:column="43">String</name><op:operator pos:line="290" pos:column="49">.</op:operator><name pos:line="290" pos:column="50">IsNullOrWhiteSpace</name></name><argument_list pos:line="290" pos:column="68">(<argument><expr><call><name pos:line="290" pos:column="69">GetItemText</name><argument_list pos:line="290" pos:column="80">(<argument><expr><name pos:line="290" pos:column="81">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="290" pos:column="85">.</op:operator><call><name pos:line="290" pos:column="86">ToList</name><argument_list pos:line="290" pos:column="92">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="291" pos:column="17">return <expr><name pos:line="291" pos:column="24">this</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="294" pos:column="13">public</specifier> <name><name pos:line="294" pos:column="20">IEnumerable</name><argument_list pos:line="294" pos:column="31">&lt;<argument><name pos:line="294" pos:column="32">Inline</name></argument>&gt;</argument_list></name></type> <name pos:line="294" pos:column="40">GetItems</name><parameter_list pos:line="294" pos:column="48">()</parameter_list>
            <block pos:line="295" pos:column="13">{
                <return pos:line="296" pos:column="17">return <expr><name pos:line="296" pos:column="24">items</name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="299" pos:column="13">public</specifier> <name pos:line="299" pos:column="20">bool</name></type> <name pos:line="299" pos:column="25">IsEmpty</name><parameter_list pos:line="299" pos:column="32">()</parameter_list>
            <block pos:line="300" pos:column="13">{
                <return pos:line="301" pos:column="17">return <expr><op:operator pos:line="301" pos:column="24">!</op:operator><call><name><name pos:line="301" pos:column="25">items</name><op:operator pos:line="301" pos:column="30">.</op:operator><name pos:line="301" pos:column="31">Any</name></name><argument_list pos:line="301" pos:column="34">()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="304" pos:column="13">private</specifier> <name pos:line="304" pos:column="21">string</name></type> <name pos:line="304" pos:column="28">GetItemText</name><parameter_list pos:line="304" pos:column="39">(<param><decl><type><name pos:line="304" pos:column="40">Inline</name></type> <name pos:line="304" pos:column="47">item</name></decl></param>)</parameter_list>
            <block pos:line="305" pos:column="13">{
                <return pos:line="306" pos:column="17">return <expr><name pos:line="306" pos:column="24">item</name> <op:operator pos:line="306" pos:column="29">is</op:operator> <name pos:line="306" pos:column="32">Run</name> <op:operator pos:line="306" pos:column="36">?</op:operator> <op:operator pos:line="306" pos:column="38">(</op:operator><name pos:line="306" pos:column="39">item</name> <op:operator pos:line="306" pos:column="44">as</op:operator> <name pos:line="306" pos:column="47">Run</name><op:operator pos:line="306" pos:column="50">)</op:operator><op:operator pos:line="306" pos:column="51">.</op:operator><name pos:line="306" pos:column="52">Text</name> <op:operator pos:line="306" pos:column="57">:</op:operator> <name><name pos:line="306" pos:column="59">string</name><op:operator pos:line="306" pos:column="65">.</op:operator><name pos:line="306" pos:column="66">Empty</name></name></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="309" pos:column="13">public</specifier> <name pos:line="309" pos:column="20">string</name></type> <name pos:line="309" pos:column="27">GetLine</name><parameter_list pos:line="309" pos:column="34">()</parameter_list>
            <block pos:line="310" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="311" pos:column="17">var</name></type> <name pos:line="311" pos:column="21">sb</name> <init pos:line="311" pos:column="24">= <expr><op:operator pos:line="311" pos:column="26">new</op:operator> <call><name pos:line="311" pos:column="30">StringBuilder</name><argument_list pos:line="311" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="312" pos:column="17">foreach (<init><decl><type><name pos:line="312" pos:column="26">var</name></type> <name pos:line="312" pos:column="30">item</name> <range pos:line="312" pos:column="35">in <expr><name pos:line="312" pos:column="38">items</name></expr></range></decl></init>)
                <block pos:line="313" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="314" pos:column="21">sb</name><op:operator pos:line="314" pos:column="23">.</op:operator><name pos:line="314" pos:column="24">Append</name></name><argument_list pos:line="314" pos:column="30">(<argument><expr><call><name pos:line="314" pos:column="31">GetItemText</name><argument_list pos:line="314" pos:column="42">(<argument><expr><name pos:line="314" pos:column="43">item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <return pos:line="316" pos:column="17">return <expr><call><name><name pos:line="316" pos:column="24">sb</name><op:operator pos:line="316" pos:column="26">.</op:operator><name pos:line="316" pos:column="27">ToString</name></name><argument_list pos:line="316" pos:column="35">()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="319" pos:column="13">public</specifier> <name pos:line="319" pos:column="20">string</name></type> <name pos:line="319" pos:column="27">GetHeadingWhiteSpace</name><parameter_list pos:line="319" pos:column="47">()</parameter_list>
            <block pos:line="320" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="321" pos:column="17">var</name></type> <name pos:line="321" pos:column="21">line</name> <init pos:line="321" pos:column="26">= <expr><call><name pos:line="321" pos:column="28">GetLine</name><argument_list pos:line="321" pos:column="35">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="322" pos:column="17">var</name></type> <name pos:line="322" pos:column="21">headSpaceLength</name> <init pos:line="322" pos:column="37">= <expr><call><name><name pos:line="322" pos:column="39">line</name><op:operator pos:line="322" pos:column="43">.</op:operator><name pos:line="322" pos:column="44">IndexOf</name></name><argument_list pos:line="322" pos:column="51">(<argument><expr><call><name><name pos:line="322" pos:column="52">line</name><op:operator pos:line="322" pos:column="56">.</op:operator><name pos:line="322" pos:column="57">TrimStart</name></name><argument_list pos:line="322" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="322" pos:column="70">StringComparison</name><op:operator pos:line="322" pos:column="86">.</op:operator><name pos:line="322" pos:column="87">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="323" pos:column="17">return <expr><call><name><name pos:line="323" pos:column="24">line</name><op:operator pos:line="323" pos:column="28">.</op:operator><name pos:line="323" pos:column="29">Substring</name></name><argument_list pos:line="323" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="323" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><name pos:line="323" pos:column="42">headSpaceLength</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="326" pos:column="13">public</specifier> <name pos:line="326" pos:column="20">void</name></type> <name pos:line="326" pos:column="25">AddBeginning</name><parameter_list pos:line="326" pos:column="37">(<param><decl><type><name pos:line="326" pos:column="38">Inline</name></type> <name pos:line="326" pos:column="45">item</name></decl></param>)</parameter_list>
            <block pos:line="327" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="328" pos:column="17">items</name><op:operator pos:line="328" pos:column="22">.</op:operator><name pos:line="328" pos:column="23">Insert</name></name><argument_list pos:line="328" pos:column="29">(<argument><expr><lit:literal type="number" pos:line="328" pos:column="30">0</lit:literal></expr></argument>, <argument><expr><name pos:line="328" pos:column="33">item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="331" pos:column="13">public</specifier> <name pos:line="331" pos:column="20">InlineItemLine</name></type> <name pos:line="331" pos:column="35">RemoveHeadingWhiteSpace</name><parameter_list pos:line="331" pos:column="58">()</parameter_list>
            <block pos:line="332" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="333" pos:column="17">var</name></type> <name pos:line="333" pos:column="21">newLine</name> <init pos:line="333" pos:column="29">= <expr><op:operator pos:line="333" pos:column="31">new</op:operator> <call><name pos:line="333" pos:column="35">InlineItemLine</name><argument_list pos:line="333" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="334" pos:column="17">var</name></type> <name pos:line="334" pos:column="21">startIndex</name> <init pos:line="334" pos:column="32">= <expr><call><name><name pos:line="334" pos:column="34">items</name><op:operator pos:line="334" pos:column="39">.</op:operator><name pos:line="334" pos:column="40">FindIndex</name></name><argument_list pos:line="334" pos:column="49">(<argument><expr><lambda><name pos:line="334" pos:column="50">i</name> <op:operator pos:line="334" pos:column="52">=&gt;</op:operator> <op:operator pos:line="334" pos:column="55">!</op:operator><call><name><name pos:line="334" pos:column="56">String</name><op:operator pos:line="334" pos:column="62">.</op:operator><name pos:line="334" pos:column="63">IsNullOrWhiteSpace</name></name><argument_list pos:line="334" pos:column="81">(<argument><expr><call><name pos:line="334" pos:column="82">GetItemText</name><argument_list pos:line="334" pos:column="93">(<argument><expr><name pos:line="334" pos:column="94">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="335" pos:column="17">if <condition pos:line="335" pos:column="20">(<expr><name pos:line="335" pos:column="21">startIndex</name> <op:operator pos:line="335" pos:column="32">&lt;</op:operator> <name><name pos:line="335" pos:column="34">items</name><op:operator pos:line="335" pos:column="39">.</op:operator><name pos:line="335" pos:column="40">Count</name></name></expr>)</condition><then pos:line="335" pos:column="46">
                <block pos:line="336" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="337" pos:column="21">newLine</name><op:operator pos:line="337" pos:column="28">.</op:operator><name pos:line="337" pos:column="29">items</name><op:operator pos:line="337" pos:column="34">.</op:operator><name pos:line="337" pos:column="35">AddRange</name></name><argument_list pos:line="337" pos:column="43">(<argument><expr><call><name><name pos:line="337" pos:column="44">items</name><op:operator pos:line="337" pos:column="49">.</op:operator><name pos:line="337" pos:column="50">GetRange</name></name><argument_list pos:line="337" pos:column="58">(<argument><expr><name pos:line="337" pos:column="59">startIndex</name></expr></argument>, <argument><expr><name><name pos:line="337" pos:column="71">items</name><op:operator pos:line="337" pos:column="76">.</op:operator><name pos:line="337" pos:column="77">Count</name></name> <op:operator pos:line="337" pos:column="83">-</op:operator> <name pos:line="337" pos:column="85">startIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="338" pos:column="21">var</name></type> <name pos:line="338" pos:column="25">first</name> <init pos:line="338" pos:column="31">= <expr><call><name><name pos:line="338" pos:column="33">newLine</name><op:operator pos:line="338" pos:column="40">.</op:operator><name pos:line="338" pos:column="41">items</name><op:operator pos:line="338" pos:column="46">.</op:operator><name pos:line="338" pos:column="47">First</name></name><argument_list pos:line="338" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="339" pos:column="21">newLine</name><op:operator pos:line="339" pos:column="28">.</op:operator><name pos:line="339" pos:column="29">items</name><op:operator pos:line="339" pos:column="34">.</op:operator><name pos:line="339" pos:column="35">RemoveAt</name></name><argument_list pos:line="339" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="339" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="340" pos:column="21">newLine</name><op:operator pos:line="340" pos:column="28">.</op:operator><name pos:line="340" pos:column="29">items</name><op:operator pos:line="340" pos:column="34">.</op:operator><name pos:line="340" pos:column="35">Insert</name></name><argument_list pos:line="340" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="340" pos:column="42">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="340" pos:column="45">CloneFormat</name><argument_list pos:line="340" pos:column="56">(<argument><expr><op:operator pos:line="340" pos:column="57">(</op:operator><name pos:line="340" pos:column="58">Run</name><op:operator pos:line="340" pos:column="61">)</op:operator><name pos:line="340" pos:column="62">first</name></expr></argument>, <argument><expr><call><name pos:line="340" pos:column="69">GetItemText</name><argument_list pos:line="340" pos:column="80">(<argument><expr><name pos:line="340" pos:column="81">first</name></expr></argument>)</argument_list></call><op:operator pos:line="340" pos:column="87">.</op:operator><call><name pos:line="340" pos:column="88">TrimStart</name><argument_list pos:line="340" pos:column="97">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return pos:line="342" pos:column="17">return <expr><name pos:line="342" pos:column="24">newLine</name></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="346" pos:column="9">private</specifier> <name><name pos:line="346" pos:column="17">IEnumerable</name><argument_list pos:line="346" pos:column="28">&lt;<argument><name pos:line="346" pos:column="29">InlineItemLine</name></argument>&gt;</argument_list></name></type> <name pos:line="346" pos:column="45">BreakToRunLines</name><parameter_list pos:line="346" pos:column="60">(<param><decl><type><name><name pos:line="346" pos:column="61">IEnumerable</name><argument_list pos:line="346" pos:column="72">&lt;<argument><name pos:line="346" pos:column="73">Run</name></argument>&gt;</argument_list></name></type> <name pos:line="346" pos:column="78">runs</name></decl></param>)</parameter_list>
        <block pos:line="347" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="348" pos:column="13">var</name></type> <name pos:line="348" pos:column="17">lines</name> <init pos:line="348" pos:column="23">= <expr><op:operator pos:line="348" pos:column="25">new</op:operator> <call><name><name pos:line="348" pos:column="29">List</name><argument_list pos:line="348" pos:column="33">&lt;<argument><name pos:line="348" pos:column="34">InlineItemLine</name></argument>&gt;</argument_list></name><argument_list pos:line="348" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="349" pos:column="13">var</name></type> <name pos:line="349" pos:column="17">currentLine</name> <init pos:line="349" pos:column="29">= <expr><op:operator pos:line="349" pos:column="31">new</op:operator> <call><name pos:line="349" pos:column="35">InlineItemLine</name><argument_list pos:line="349" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="350" pos:column="13">foreach (<init><decl><type><name pos:line="350" pos:column="22">var</name></type> <name pos:line="350" pos:column="26">run</name> <range pos:line="350" pos:column="30">in <expr><name pos:line="350" pos:column="33">runs</name></expr></range></decl></init>)
            <block pos:line="351" pos:column="13">{
                <if pos:line="352" pos:column="17">if <condition pos:line="352" pos:column="20">(<expr><call><name><name pos:line="352" pos:column="21">run</name><op:operator pos:line="352" pos:column="24">.</op:operator><name pos:line="352" pos:column="25">Text</name><op:operator pos:line="352" pos:column="29">.</op:operator><name pos:line="352" pos:column="30">Contains</name></name><argument_list pos:line="352" pos:column="38">(<argument><expr><name><name pos:line="352" pos:column="39">Environment</name><op:operator pos:line="352" pos:column="50">.</op:operator><name pos:line="352" pos:column="51">NewLine</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="352" pos:column="60">
                <block pos:line="353" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="354" pos:column="21">var</name></type> <name pos:line="354" pos:column="25">parts</name> <init pos:line="354" pos:column="31">= <expr><call><name><name pos:line="354" pos:column="33">run</name><op:operator pos:line="354" pos:column="36">.</op:operator><name pos:line="354" pos:column="37">Text</name><op:operator pos:line="354" pos:column="41">.</op:operator><name pos:line="354" pos:column="42">SplitToLines</name></name><argument_list pos:line="354" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="355" pos:column="21">foreach (<init><decl><type><name pos:line="355" pos:column="30">var</name></type> <name pos:line="355" pos:column="34">part</name> <range pos:line="355" pos:column="39">in <expr><name pos:line="355" pos:column="42">parts</name></expr></range></decl></init>)
                    <block pos:line="356" pos:column="21">{
                        <if pos:line="357" pos:column="25">if<condition pos:line="357" pos:column="27">(<expr><op:operator pos:line="357" pos:column="28">!</op:operator><call><name><name pos:line="357" pos:column="29">string</name><op:operator pos:line="357" pos:column="35">.</op:operator><name pos:line="357" pos:column="36">IsNullOrEmpty</name></name><argument_list pos:line="357" pos:column="49">(<argument><expr><name pos:line="357" pos:column="50">part</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="357" pos:column="56">
                            <expr_stmt><expr><call><name><name pos:line="358" pos:column="29">currentLine</name><op:operator pos:line="358" pos:column="40">.</op:operator><name pos:line="358" pos:column="41">AddItem</name></name><argument_list pos:line="358" pos:column="48">(<argument><expr><call><name pos:line="358" pos:column="49">CloneFormat</name><argument_list pos:line="358" pos:column="60">(<argument><expr><name pos:line="358" pos:column="61">run</name></expr></argument>, <argument><expr><name pos:line="358" pos:column="66">part</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                        <expr_stmt><expr><call><name><name pos:line="359" pos:column="25">lines</name><op:operator pos:line="359" pos:column="30">.</op:operator><name pos:line="359" pos:column="31">Add</name></name><argument_list pos:line="359" pos:column="34">(<argument><expr><name pos:line="359" pos:column="35">currentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name pos:line="360" pos:column="25">currentLine</name> <op:operator pos:line="360" pos:column="37">=</op:operator> <op:operator pos:line="360" pos:column="39">new</op:operator> <call><name pos:line="360" pos:column="43">InlineItemLine</name><argument_list pos:line="360" pos:column="57">()</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                }</block></then>
                <else pos:line="363" pos:column="17">else
                <block pos:line="364" pos:column="17">{
                    <expr_stmt><expr><call><name><name pos:line="365" pos:column="21">currentLine</name><op:operator pos:line="365" pos:column="32">.</op:operator><name pos:line="365" pos:column="33">AddItem</name></name><argument_list pos:line="365" pos:column="40">(<argument><expr><name pos:line="365" pos:column="41">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></foreach>
            <expr_stmt><expr><call><name><name pos:line="368" pos:column="13">lines</name><op:operator pos:line="368" pos:column="18">.</op:operator><name pos:line="368" pos:column="19">Add</name></name><argument_list pos:line="368" pos:column="22">(<argument><expr><name pos:line="368" pos:column="23">currentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="369" pos:column="13">return <expr><call><name><name pos:line="369" pos:column="20">lines</name><op:operator pos:line="369" pos:column="25">.</op:operator><name pos:line="369" pos:column="26">ToArray</name></name><argument_list pos:line="369" pos:column="33">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="372" pos:column="9">private</specifier> <specifier pos:line="372" pos:column="17">static</specifier> <name pos:line="372" pos:column="24">Run</name></type> <name pos:line="372" pos:column="28">CloneFormat</name><parameter_list pos:line="372" pos:column="39">(<param><decl><type><name pos:line="372" pos:column="40">Run</name></type> <name pos:line="372" pos:column="44">original</name></decl></param>, <param><decl><type><name pos:line="372" pos:column="54">string</name></type> <name pos:line="372" pos:column="61">text</name></decl></param>)</parameter_list>
        <block pos:line="373" pos:column="9">{
            <return pos:line="374" pos:column="13">return <expr><op:operator pos:line="374" pos:column="20">new</op:operator> <call><name pos:line="374" pos:column="24">Run</name><argument_list pos:line="374" pos:column="27">(<argument><expr><name pos:line="374" pos:column="28">text</name></expr></argument>)</argument_list></call><block pos:line="374" pos:column="33">{<expr><name pos:line="374" pos:column="34">AllowDrop</name> <op:operator pos:line="374" pos:column="44">=</op:operator> <name><name pos:line="374" pos:column="46">original</name><op:operator pos:line="374" pos:column="54">.</op:operator><name pos:line="374" pos:column="55">AllowDrop</name></name></expr><op:operator pos:line="374" pos:column="64">,</op:operator> <expr><name pos:line="374" pos:column="66">BaselineAlignment</name> <op:operator pos:line="374" pos:column="84">=</op:operator> <name><name pos:line="374" pos:column="86">original</name><op:operator pos:line="374" pos:column="94">.</op:operator><name pos:line="374" pos:column="95">BaselineAlignment</name></name></expr><op:operator pos:line="374" pos:column="112">,</op:operator>
                <expr><name pos:line="375" pos:column="17">Background</name> <op:operator pos:line="375" pos:column="28">=</op:operator> <name><name pos:line="375" pos:column="30">original</name><op:operator pos:line="375" pos:column="38">.</op:operator><name pos:line="375" pos:column="39">Background</name></name></expr><op:operator pos:line="375" pos:column="49">,</op:operator> <expr><name pos:line="375" pos:column="51">FontSize</name> <op:operator pos:line="375" pos:column="60">=</op:operator> <name><name pos:line="375" pos:column="62">original</name><op:operator pos:line="375" pos:column="70">.</op:operator><name pos:line="375" pos:column="71">FontSize</name></name></expr><op:operator pos:line="375" pos:column="79">,</op:operator> <expr><name pos:line="375" pos:column="81">FontFamily</name> <op:operator pos:line="375" pos:column="92">=</op:operator> <name><name pos:line="375" pos:column="94">original</name><op:operator pos:line="375" pos:column="102">.</op:operator><name pos:line="375" pos:column="103">FontFamily</name></name></expr><op:operator pos:line="375" pos:column="113">,</op:operator>
                    <expr><name pos:line="376" pos:column="21">Foreground</name> <op:operator pos:line="376" pos:column="32">=</op:operator> <name><name pos:line="376" pos:column="34">original</name><op:operator pos:line="376" pos:column="42">.</op:operator><name pos:line="376" pos:column="43">Foreground</name></name></expr><op:operator pos:line="376" pos:column="53">,</op:operator> <expr><name pos:line="376" pos:column="55">FontWeight</name> <op:operator pos:line="376" pos:column="66">=</op:operator> <name><name pos:line="376" pos:column="68">original</name><op:operator pos:line="376" pos:column="76">.</op:operator><name pos:line="376" pos:column="77">FontWeight</name></name></expr><op:operator pos:line="376" pos:column="87">,</op:operator> <expr><name pos:line="376" pos:column="89">FontStyle</name> <op:operator pos:line="376" pos:column="99">=</op:operator> <name><name pos:line="376" pos:column="101">original</name><op:operator pos:line="376" pos:column="109">.</op:operator><name pos:line="376" pos:column="110">FontStyle</name></name></expr>}</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="379" pos:column="9">public</specifier> <name pos:line="379" pos:column="16">object</name></type> <name pos:line="379" pos:column="23">ConvertBack</name><parameter_list pos:line="379" pos:column="34">(<param><decl><type><name pos:line="379" pos:column="35">object</name></type> <name pos:line="379" pos:column="42">value</name></decl></param>, <param><decl><type><name pos:line="379" pos:column="49">Type</name></type> <name pos:line="379" pos:column="54">targetType</name></decl></param>, <param><decl><type><name pos:line="379" pos:column="66">object</name></type> <name pos:line="379" pos:column="73">parameter</name></decl></param>, <param><decl><type><name pos:line="379" pos:column="84">CultureInfo</name></type> <name pos:line="379" pos:column="96">culture</name></decl></param>)</parameter_list> <block pos:line="379" pos:column="105">{
            <throw pos:line="380" pos:column="13">throw <expr><op:operator pos:line="380" pos:column="19">new</op:operator> <call><name pos:line="380" pos:column="23">NotImplementedException</name><argument_list pos:line="380" pos:column="46">()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></namespace></unit>
