<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\TimedProcessorTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Threading</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Core</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">UnitTests</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">Tools</name></name>
<block pos:line="10" pos:column="1">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">TimedProcessorTests</name>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">readonly</specifier> <name pos:line="14" pos:column="26">TimedProcessor</name></type> <name pos:line="14" pos:column="41">processor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">readonly</specifier> <name pos:line="15" pos:column="26">object</name></type> <name pos:line="15" pos:column="33">locker</name> <init pos:line="15" pos:column="40">= <expr><op:operator pos:line="15" pos:column="42">new</op:operator> <call><name pos:line="15" pos:column="46">object</name><argument_list pos:line="15" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <name pos:line="16" pos:column="17">int</name></type> <name pos:line="16" pos:column="21">fieldToUpdate</name> <init pos:line="16" pos:column="35">= <expr><lit:literal type="number" pos:line="16" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>


        <constructor><specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">TimedProcessorTests</name><parameter_list pos:line="19" pos:column="35">()</parameter_list>
        <block pos:line="20" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">this</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">processor</name></name> <op:operator pos:line="21" pos:column="28">=</op:operator> <call><name><name pos:line="21" pos:column="30">TimedProcessor</name><op:operator pos:line="21" pos:column="44">.</op:operator><name pos:line="21" pos:column="45">GetInstance</name></name><argument_list pos:line="21" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>


        <function><type><specifier pos:line="25" pos:column="9">private</specifier> <name pos:line="25" pos:column="17">void</name></type> <name pos:line="25" pos:column="22">incrementField</name><parameter_list pos:line="25" pos:column="36">()</parameter_list>
        <block pos:line="26" pos:column="9">{
            <lock pos:line="27" pos:column="13">lock (<expr><name pos:line="27" pos:column="19">locker</name></expr>)
            <block pos:line="28" pos:column="13">{
                <expr_stmt><expr><name pos:line="29" pos:column="17">fieldToUpdate</name><op:operator pos:line="29" pos:column="30">++</op:operator></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="33" pos:column="9">private</specifier> <name pos:line="33" pos:column="17">void</name></type> <name pos:line="33" pos:column="22">decrementField</name><parameter_list pos:line="33" pos:column="36">()</parameter_list>
        <block pos:line="34" pos:column="9">{
            <lock pos:line="35" pos:column="13">lock (<expr><name pos:line="35" pos:column="19">locker</name></expr>)
            <block pos:line="36" pos:column="13">{
                <expr_stmt><expr><name pos:line="37" pos:column="17">fieldToUpdate</name><op:operator pos:line="37" pos:column="30">--</op:operator></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="41" pos:column="9">private</specifier> <name pos:line="41" pos:column="17">void</name></type> <name pos:line="41" pos:column="22">EnsureFieldCondition</name><parameter_list pos:line="41" pos:column="42">(<param><decl><type><name><name pos:line="41" pos:column="43">Predicate</name><argument_list pos:line="41" pos:column="52">&lt;<argument><name pos:line="41" pos:column="53">int</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="58">condition</name></decl></param>)</parameter_list>
        <block pos:line="42" pos:column="9">{
            <lock pos:line="43" pos:column="13">lock (<expr><name pos:line="43" pos:column="19">locker</name></expr>)
            <block pos:line="44" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">Assert</name><op:operator pos:line="45" pos:column="23">.</op:operator><name pos:line="45" pos:column="24">IsTrue</name></name><argument_list pos:line="45" pos:column="30">(<argument><expr><call><name><name pos:line="45" pos:column="31">condition</name><op:operator pos:line="45" pos:column="40">.</op:operator><name pos:line="45" pos:column="41">Invoke</name></name><argument_list pos:line="45" pos:column="47">(<argument><expr><name pos:line="45" pos:column="48">fieldToUpdate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>


        <function><type><attribute pos:line="50" pos:column="9">[<expr><name pos:line="50" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="51" pos:column="9">public</specifier> <name pos:line="51" pos:column="16">void</name></type> <name pos:line="51" pos:column="21">AddOneTask</name><parameter_list pos:line="51" pos:column="31">()</parameter_list>
        <block pos:line="52" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="53" pos:column="13">processor</name><op:operator pos:line="53" pos:column="22">.</op:operator><name pos:line="53" pos:column="23">AddTimedTask</name></name><argument_list pos:line="53" pos:column="35">(<argument><expr><name pos:line="53" pos:column="36">incrementField</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="53" pos:column="52">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Thread</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">Sleep</name></name><argument_list pos:line="54" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="54" pos:column="26">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">EnsureFieldCondition</name><argument_list pos:line="55" pos:column="33">(<argument><expr><lambda><name pos:line="55" pos:column="34">i</name> <op:operator pos:line="55" pos:column="36">=&gt;</op:operator> <name pos:line="55" pos:column="39">i</name> <op:operator pos:line="55" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="55" pos:column="43">50</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">EnsureFieldCondition</name><argument_list pos:line="56" pos:column="33">(<argument><expr><lambda><name pos:line="56" pos:column="34">i</name> <op:operator pos:line="56" pos:column="36">=&gt;</op:operator> <name pos:line="56" pos:column="39">i</name> <op:operator pos:line="56" pos:column="41">&lt;</op:operator> <lit:literal type="number" pos:line="56" pos:column="43">100</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">processor</name><op:operator pos:line="57" pos:column="22">.</op:operator><name pos:line="57" pos:column="23">RemoveTimedTask</name></name><argument_list pos:line="57" pos:column="38">(<argument><expr><name pos:line="57" pos:column="39">incrementField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">AddTwoTasks</name><parameter_list pos:line="61" pos:column="32">()</parameter_list>
        <block pos:line="62" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">processor</name><op:operator pos:line="63" pos:column="22">.</op:operator><name pos:line="63" pos:column="23">AddTimedTask</name></name><argument_list pos:line="63" pos:column="35">(<argument><expr><name pos:line="63" pos:column="36">incrementField</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="63" pos:column="52">5</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">processor</name><op:operator pos:line="64" pos:column="22">.</op:operator><name pos:line="64" pos:column="23">AddTimedTask</name></name><argument_list pos:line="64" pos:column="35">(<argument><expr><name pos:line="64" pos:column="36">decrementField</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="64" pos:column="52">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Thread</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">Sleep</name></name><argument_list pos:line="65" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="65" pos:column="26">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="66" pos:column="13">EnsureFieldCondition</name><argument_list pos:line="66" pos:column="33">(<argument><expr><lambda><name pos:line="66" pos:column="34">i</name> <op:operator pos:line="66" pos:column="36">=&gt;</op:operator> <name pos:line="66" pos:column="39">i</name> <op:operator pos:line="66" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="66" pos:column="43">50</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">EnsureFieldCondition</name><argument_list pos:line="67" pos:column="33">(<argument><expr><lambda><name pos:line="67" pos:column="34">i</name> <op:operator pos:line="67" pos:column="36">=&gt;</op:operator> <name pos:line="67" pos:column="39">i</name> <op:operator pos:line="67" pos:column="41">&lt;</op:operator> <lit:literal type="number" pos:line="67" pos:column="43">100</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">processor</name><op:operator pos:line="68" pos:column="22">.</op:operator><name pos:line="68" pos:column="23">RemoveTimedTask</name></name><argument_list pos:line="68" pos:column="38">(<argument><expr><name pos:line="68" pos:column="39">incrementField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">processor</name><op:operator pos:line="69" pos:column="22">.</op:operator><name pos:line="69" pos:column="23">RemoveTimedTask</name></name><argument_list pos:line="69" pos:column="38">(<argument><expr><name pos:line="69" pos:column="39">decrementField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></namespace>
</unit>
