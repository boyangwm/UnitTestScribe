<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\Levenshtein.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>

<namespace pos:line="3" pos:column="1">namespace <name><name pos:line="3" pos:column="11">Sando</name><op:operator pos:line="3" pos:column="16">.</op:operator><name pos:line="3" pos:column="17">Core</name><op:operator pos:line="3" pos:column="21">.</op:operator><name pos:line="3" pos:column="22">Tools</name></name>
<block pos:line="4" pos:column="1">{
    <class><specifier pos:line="5" pos:column="5">public</specifier> class <name pos:line="5" pos:column="18">Levenshtein</name>
    <block pos:line="6" pos:column="5">{
        <function><type><specifier pos:line="7" pos:column="9">public</specifier> <name pos:line="7" pos:column="16">int</name></type> <name pos:line="7" pos:column="20">iLD</name><parameter_list pos:line="7" pos:column="23">(<param><decl><type><name pos:line="7" pos:column="24">String</name></type> <name pos:line="7" pos:column="31">sRow</name></decl></param>, <param><decl><type><name pos:line="7" pos:column="37">String</name></type> <name pos:line="7" pos:column="44">sCol</name></decl></param>)</parameter_list>
        <block pos:line="8" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="9" pos:column="13">int</name></type> <name pos:line="9" pos:column="17">RowLen</name> <init pos:line="9" pos:column="24">= <expr><name><name pos:line="9" pos:column="26">sRow</name><op:operator pos:line="9" pos:column="30">.</op:operator><name pos:line="9" pos:column="31">Length</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="9" pos:column="39">// length of sRow</comment>
            <decl_stmt><decl><type><name pos:line="10" pos:column="13">int</name></type> <name pos:line="10" pos:column="17">ColLen</name> <init pos:line="10" pos:column="24">= <expr><name><name pos:line="10" pos:column="26">sCol</name><op:operator pos:line="10" pos:column="30">.</op:operator><name pos:line="10" pos:column="31">Length</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="10" pos:column="39">// length of sCol</comment>
            <decl_stmt><decl><type><name pos:line="11" pos:column="13">int</name></type> <name pos:line="11" pos:column="17">RowIdx</name></decl>;</decl_stmt> <comment type="line" pos:line="11" pos:column="25">// iterates through sRow</comment>
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">int</name></type> <name pos:line="12" pos:column="17">ColIdx</name></decl>;</decl_stmt> <comment type="line" pos:line="12" pos:column="25">// iterates through sCol</comment>
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">char</name></type> <name pos:line="13" pos:column="18">Row_i</name></decl>;</decl_stmt> <comment type="line" pos:line="13" pos:column="25">// ith character of sRow</comment>
            <decl_stmt><decl><type><name pos:line="14" pos:column="13">char</name></type> <name pos:line="14" pos:column="18">Col_j</name></decl>;</decl_stmt> <comment type="line" pos:line="14" pos:column="25">// jth character of sCol</comment>
            <decl_stmt><decl><type><name pos:line="15" pos:column="13">int</name></type> <name pos:line="15" pos:column="17">cost</name></decl>;</decl_stmt> <comment type="line" pos:line="15" pos:column="23">// cost</comment>

            <if pos:line="17" pos:column="13">if <condition pos:line="17" pos:column="16">(<expr><call><name><name pos:line="17" pos:column="17">Math</name><op:operator pos:line="17" pos:column="21">.</op:operator><name pos:line="17" pos:column="22">Max</name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name><name pos:line="17" pos:column="26">sRow</name><op:operator pos:line="17" pos:column="30">.</op:operator><name pos:line="17" pos:column="31">Length</name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="39">sCol</name><op:operator pos:line="17" pos:column="43">.</op:operator><name pos:line="17" pos:column="44">Length</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="17" pos:column="52">&gt;</op:operator> <call><name><name pos:line="17" pos:column="54">Math</name><op:operator pos:line="17" pos:column="58">.</op:operator><name pos:line="17" pos:column="59">Pow</name></name><argument_list pos:line="17" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="17" pos:column="63">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="17" pos:column="66">31</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="17" pos:column="70">
                <throw pos:line="18" pos:column="17">throw <expr><op:operator pos:line="18" pos:column="23">(</op:operator><op:operator pos:line="18" pos:column="24">new</op:operator> <call><name pos:line="18" pos:column="28">Exception</name><argument_list pos:line="18" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="18" pos:column="38">"\nMaximum string length in Levenshtein.iLD is "</lit:literal>
                    <op:operator pos:line="19" pos:column="21">+</op:operator> <call><name><name pos:line="19" pos:column="23">Math</name><op:operator pos:line="19" pos:column="27">.</op:operator><name pos:line="19" pos:column="28">Pow</name></name><argument_list pos:line="19" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="19" pos:column="32">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="19" pos:column="35">31</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="19" pos:column="39">+</op:operator> <lit:literal type="string" pos:line="19" pos:column="41">".\nYours is "</lit:literal> <op:operator pos:line="19" pos:column="56">+</op:operator> 
                        <call><name><name pos:line="20" pos:column="25">Math</name><op:operator pos:line="20" pos:column="29">.</op:operator><name pos:line="20" pos:column="30">Max</name></name><argument_list pos:line="20" pos:column="33">(<argument><expr><name><name pos:line="20" pos:column="34">sRow</name><op:operator pos:line="20" pos:column="38">.</op:operator><name pos:line="20" pos:column="39">Length</name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="47">sCol</name><op:operator pos:line="20" pos:column="51">.</op:operator><name pos:line="20" pos:column="52">Length</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="20" pos:column="60">+</op:operator> <lit:literal type="string" pos:line="20" pos:column="62">"."</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="20" pos:column="66">)</op:operator></expr>;</throw></then></if>

            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name pos:line="22" pos:column="17">RowLen</name> <op:operator pos:line="22" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="22" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="22" pos:column="29">
            <block pos:line="23" pos:column="13">{
                <return pos:line="24" pos:column="17">return <expr><name pos:line="24" pos:column="24">ColLen</name></expr>;</return>
            }</block></then></if>

            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name pos:line="27" pos:column="17">ColLen</name> <op:operator pos:line="27" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="27" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="27" pos:column="29">
            <block pos:line="28" pos:column="13">{
                <return pos:line="29" pos:column="17">return <expr><name pos:line="29" pos:column="24">RowLen</name></expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name pos:line="32" pos:column="13">int</name><index pos:line="32" pos:column="16">[]</index></type> <name pos:line="32" pos:column="19">v0</name> <init pos:line="32" pos:column="22">= <expr><op:operator pos:line="32" pos:column="24">new</op:operator> <name><name pos:line="32" pos:column="28">int</name><index pos:line="32" pos:column="31">[<expr><name pos:line="32" pos:column="32">RowLen</name> <op:operator pos:line="32" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="32" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">int</name><index pos:line="33" pos:column="16">[]</index></type> <name pos:line="33" pos:column="19">v1</name> <init pos:line="33" pos:column="22">= <expr><op:operator pos:line="33" pos:column="24">new</op:operator> <name><name pos:line="33" pos:column="28">int</name><index pos:line="33" pos:column="31">[<expr><name pos:line="33" pos:column="32">RowLen</name> <op:operator pos:line="33" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="33" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">int</name><index pos:line="34" pos:column="16">[]</index></type> <name pos:line="34" pos:column="19">vTmp</name></decl>;</decl_stmt>

            <for pos:line="36" pos:column="13">for (<init><expr><name pos:line="36" pos:column="18">RowIdx</name> <op:operator pos:line="36" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="36" pos:column="27">1</lit:literal></expr>;</init> <condition><expr><name pos:line="36" pos:column="30">RowIdx</name> <op:operator pos:line="36" pos:column="37">&lt;=</op:operator> <name pos:line="36" pos:column="40">RowLen</name></expr>;</condition> <incr><expr><name pos:line="36" pos:column="48">RowIdx</name><op:operator pos:line="36" pos:column="54">++</op:operator></expr></incr>)
            <block pos:line="37" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="38" pos:column="17">v0</name><index pos:line="38" pos:column="19">[<expr><name pos:line="38" pos:column="20">RowIdx</name></expr>]</index></name> <op:operator pos:line="38" pos:column="28">=</op:operator> <name pos:line="38" pos:column="30">RowIdx</name></expr>;</expr_stmt>
            }</block></for>

            <for pos:line="41" pos:column="13">for (<init><expr><name pos:line="41" pos:column="18">ColIdx</name> <op:operator pos:line="41" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="41" pos:column="27">1</lit:literal></expr>;</init> <condition><expr><name pos:line="41" pos:column="30">ColIdx</name> <op:operator pos:line="41" pos:column="37">&lt;=</op:operator> <name pos:line="41" pos:column="40">ColLen</name></expr>;</condition> <incr><expr><name pos:line="41" pos:column="48">ColIdx</name><op:operator pos:line="41" pos:column="54">++</op:operator></expr></incr>)
            <block pos:line="42" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="43" pos:column="17">v1</name><index pos:line="43" pos:column="19">[<expr><lit:literal type="number" pos:line="43" pos:column="20">0</lit:literal></expr>]</index></name> <op:operator pos:line="43" pos:column="23">=</op:operator> <name pos:line="43" pos:column="25">ColIdx</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="44" pos:column="17">Col_j</name> <op:operator pos:line="44" pos:column="23">=</op:operator> <name><name pos:line="44" pos:column="25">sCol</name><index pos:line="44" pos:column="29">[<expr><name pos:line="44" pos:column="30">ColIdx</name> <op:operator pos:line="44" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="44" pos:column="39">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>

                <for pos:line="46" pos:column="17">for (<init><expr><name pos:line="46" pos:column="22">RowIdx</name> <op:operator pos:line="46" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="46" pos:column="31">1</lit:literal></expr>;</init> <condition><expr><name pos:line="46" pos:column="34">RowIdx</name> <op:operator pos:line="46" pos:column="41">&lt;=</op:operator> <name pos:line="46" pos:column="44">RowLen</name></expr>;</condition> <incr><expr><name pos:line="46" pos:column="52">RowIdx</name><op:operator pos:line="46" pos:column="58">++</op:operator></expr></incr>)
                <block pos:line="47" pos:column="17">{
                    <expr_stmt><expr><name pos:line="48" pos:column="21">Row_i</name> <op:operator pos:line="48" pos:column="27">=</op:operator> <name><name pos:line="48" pos:column="29">sRow</name><index pos:line="48" pos:column="33">[<expr><name pos:line="48" pos:column="34">RowIdx</name> <op:operator pos:line="48" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="48" pos:column="43">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="49" pos:column="21">cost</name> <op:operator pos:line="49" pos:column="26">=</op:operator> <name pos:line="49" pos:column="28">Row_i</name> <op:operator pos:line="49" pos:column="34">==</op:operator> <name pos:line="49" pos:column="37">Col_j</name> <op:operator pos:line="49" pos:column="43">?</op:operator> <lit:literal type="number" pos:line="49" pos:column="45">0</lit:literal> <op:operator pos:line="49" pos:column="47">:</op:operator> <lit:literal type="number" pos:line="49" pos:column="49">1</lit:literal></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name pos:line="50" pos:column="21">int</name></type> <name pos:line="50" pos:column="25">m_min</name> <init pos:line="50" pos:column="31">= <expr><name><name pos:line="50" pos:column="33">v0</name><index pos:line="50" pos:column="35">[<expr><name pos:line="50" pos:column="36">RowIdx</name></expr>]</index></name> <op:operator pos:line="50" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="50" pos:column="46">1</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="51" pos:column="21">int</name></type> <name pos:line="51" pos:column="25">b</name> <init pos:line="51" pos:column="27">= <expr><name><name pos:line="51" pos:column="29">v1</name><index pos:line="51" pos:column="31">[<expr><name pos:line="51" pos:column="32">RowIdx</name> <op:operator pos:line="51" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="51" pos:column="41">1</lit:literal></expr>]</index></name> <op:operator pos:line="51" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="51" pos:column="46">1</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="52" pos:column="21">int</name></type> <name pos:line="52" pos:column="25">c</name> <init pos:line="52" pos:column="27">= <expr><name><name pos:line="52" pos:column="29">v0</name><index pos:line="52" pos:column="31">[<expr><name pos:line="52" pos:column="32">RowIdx</name> <op:operator pos:line="52" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="52" pos:column="41">1</lit:literal></expr>]</index></name> <op:operator pos:line="52" pos:column="44">+</op:operator> <name pos:line="52" pos:column="46">cost</name></expr></init></decl>;</decl_stmt>

                    <if pos:line="54" pos:column="21">if <condition pos:line="54" pos:column="24">(<expr><name pos:line="54" pos:column="25">b</name> <op:operator pos:line="54" pos:column="27">&lt;</op:operator> <name pos:line="54" pos:column="29">m_min</name></expr>)</condition><then pos:line="54" pos:column="35">
                    <block pos:line="55" pos:column="21">{
                        <expr_stmt><expr><name pos:line="56" pos:column="25">m_min</name> <op:operator pos:line="56" pos:column="31">=</op:operator> <name pos:line="56" pos:column="33">b</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="58" pos:column="21">if <condition pos:line="58" pos:column="24">(<expr><name pos:line="58" pos:column="25">c</name> <op:operator pos:line="58" pos:column="27">&lt;</op:operator> <name pos:line="58" pos:column="29">m_min</name></expr>)</condition><then pos:line="58" pos:column="35">
                    <block pos:line="59" pos:column="21">{
                        <expr_stmt><expr><name pos:line="60" pos:column="25">m_min</name> <op:operator pos:line="60" pos:column="31">=</op:operator> <name pos:line="60" pos:column="33">c</name></expr>;</expr_stmt>
                    }</block></then></if>

                    <expr_stmt><expr><name><name pos:line="63" pos:column="21">v1</name><index pos:line="63" pos:column="23">[<expr><name pos:line="63" pos:column="24">RowIdx</name></expr>]</index></name> <op:operator pos:line="63" pos:column="32">=</op:operator> <name pos:line="63" pos:column="34">m_min</name></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><name pos:line="65" pos:column="17">vTmp</name> <op:operator pos:line="65" pos:column="22">=</op:operator> <name pos:line="65" pos:column="24">v0</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="66" pos:column="17">v0</name> <op:operator pos:line="66" pos:column="20">=</op:operator> <name pos:line="66" pos:column="22">v1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="67" pos:column="17">v1</name> <op:operator pos:line="67" pos:column="20">=</op:operator> <name pos:line="67" pos:column="22">vTmp</name></expr>;</expr_stmt>

            }</block></for>
            <decl_stmt><decl><type><name pos:line="70" pos:column="13">int</name></type> <name pos:line="70" pos:column="17">max</name> <init pos:line="70" pos:column="21">= <expr><call><name><name pos:line="70" pos:column="23">Math</name><op:operator pos:line="70" pos:column="27">.</op:operator><name pos:line="70" pos:column="28">Max</name></name><argument_list pos:line="70" pos:column="31">(<argument><expr><name pos:line="70" pos:column="32">RowLen</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="40">ColLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="71" pos:column="13">return <expr><op:operator pos:line="71" pos:column="20">(</op:operator><op:operator pos:line="71" pos:column="21">(</op:operator><lit:literal type="number" pos:line="71" pos:column="22">100</lit:literal><op:operator pos:line="71" pos:column="25">*</op:operator><name><name pos:line="71" pos:column="26">v0</name><index pos:line="71" pos:column="28">[<expr><name pos:line="71" pos:column="29">RowLen</name></expr>]</index></name><op:operator pos:line="71" pos:column="36">)</op:operator><op:operator pos:line="71" pos:column="37">/</op:operator><name pos:line="71" pos:column="38">max</name><op:operator pos:line="71" pos:column="41">)</op:operator></expr>;</return>
        }</block></function>
        <function><type><specifier pos:line="73" pos:column="9">private</specifier> <name pos:line="73" pos:column="17">int</name></type> <name pos:line="73" pos:column="21">Minimum</name><parameter_list pos:line="73" pos:column="28">(<param><decl><type><name pos:line="73" pos:column="29">int</name></type> <name pos:line="73" pos:column="33">a</name></decl></param>, <param><decl><type><name pos:line="73" pos:column="36">int</name></type> <name pos:line="73" pos:column="40">b</name></decl></param>, <param><decl><type><name pos:line="73" pos:column="43">int</name></type> <name pos:line="73" pos:column="47">c</name></decl></param>)</parameter_list>
        <block pos:line="74" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="75" pos:column="13">int</name></type> <name pos:line="75" pos:column="17">mi</name> <init pos:line="75" pos:column="20">= <expr><name pos:line="75" pos:column="22">a</name></expr></init></decl>;</decl_stmt>

            <if pos:line="77" pos:column="13">if <condition pos:line="77" pos:column="16">(<expr><name pos:line="77" pos:column="17">b</name> <op:operator pos:line="77" pos:column="19">&lt;</op:operator> <name pos:line="77" pos:column="21">mi</name></expr>)</condition><then pos:line="77" pos:column="24">
            <block pos:line="78" pos:column="13">{
                <expr_stmt><expr><name pos:line="79" pos:column="17">mi</name> <op:operator pos:line="79" pos:column="20">=</op:operator> <name pos:line="79" pos:column="22">b</name></expr>;</expr_stmt>
            }</block></then></if>
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><name pos:line="81" pos:column="17">c</name> <op:operator pos:line="81" pos:column="19">&lt;</op:operator> <name pos:line="81" pos:column="21">mi</name></expr>)</condition><then pos:line="81" pos:column="24">
            <block pos:line="82" pos:column="13">{
                <expr_stmt><expr><name pos:line="83" pos:column="17">mi</name> <op:operator pos:line="83" pos:column="20">=</op:operator> <name pos:line="83" pos:column="22">c</name></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="86" pos:column="13">return <expr><name pos:line="86" pos:column="20">mi</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="89" pos:column="9">public</specifier> <name pos:line="89" pos:column="16">int</name></type> <name pos:line="89" pos:column="20">LD</name><parameter_list pos:line="89" pos:column="22">(<param><decl><type><name pos:line="89" pos:column="23">String</name></type> <name pos:line="89" pos:column="30">sNew</name></decl></param>, <param><decl><type><name pos:line="89" pos:column="36">String</name></type> <name pos:line="89" pos:column="43">sOld</name></decl></param>)</parameter_list>
        <block pos:line="90" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">int</name><index pos:line="91" pos:column="16">[,]</index></type> <name pos:line="91" pos:column="20">matrix</name></decl>;</decl_stmt>              <comment type="line" pos:line="91" pos:column="41">// matrix</comment>
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">int</name></type> <name pos:line="92" pos:column="17">sNewLen</name> <init pos:line="92" pos:column="25">= <expr><name><name pos:line="92" pos:column="27">sNew</name><op:operator pos:line="92" pos:column="31">.</op:operator><name pos:line="92" pos:column="32">Length</name></name></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="92" pos:column="41">// length of sNew</comment>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">int</name></type> <name pos:line="93" pos:column="17">sOldLen</name> <init pos:line="93" pos:column="25">= <expr><name><name pos:line="93" pos:column="27">sOld</name><op:operator pos:line="93" pos:column="31">.</op:operator><name pos:line="93" pos:column="32">Length</name></name></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="93" pos:column="41">// length of sOld</comment>
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">int</name></type> <name pos:line="94" pos:column="17">sNewIdx</name></decl>;</decl_stmt> <comment type="line" pos:line="94" pos:column="26">// iterates through sNew</comment>
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">int</name></type> <name pos:line="95" pos:column="17">sOldIdx</name></decl>;</decl_stmt> <comment type="line" pos:line="95" pos:column="26">// iterates through sOld</comment>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">char</name></type> <name pos:line="96" pos:column="18">sNew_i</name></decl>;</decl_stmt> <comment type="line" pos:line="96" pos:column="26">// ith character of sNew</comment>
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">char</name></type> <name pos:line="97" pos:column="18">sOld_j</name></decl>;</decl_stmt> <comment type="line" pos:line="97" pos:column="26">// jth character of sOld</comment>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">int</name></type> <name pos:line="98" pos:column="17">cost</name></decl>;</decl_stmt> <comment type="line" pos:line="98" pos:column="23">// cost</comment>

            <if pos:line="100" pos:column="13">if <condition pos:line="100" pos:column="16">(<expr><call><name><name pos:line="100" pos:column="17">Math</name><op:operator pos:line="100" pos:column="21">.</op:operator><name pos:line="100" pos:column="22">Max</name></name><argument_list pos:line="100" pos:column="25">(<argument><expr><name><name pos:line="100" pos:column="26">sNew</name><op:operator pos:line="100" pos:column="30">.</op:operator><name pos:line="100" pos:column="31">Length</name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="39">sOld</name><op:operator pos:line="100" pos:column="43">.</op:operator><name pos:line="100" pos:column="44">Length</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="100" pos:column="52">&gt;</op:operator> <call><name><name pos:line="100" pos:column="54">Math</name><op:operator pos:line="100" pos:column="58">.</op:operator><name pos:line="100" pos:column="59">Pow</name></name><argument_list pos:line="100" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="100" pos:column="63">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="100" pos:column="66">31</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="70">
                <throw pos:line="101" pos:column="17">throw <expr><op:operator pos:line="101" pos:column="23">(</op:operator><op:operator pos:line="101" pos:column="24">new</op:operator> <call><name pos:line="101" pos:column="28">Exception</name><argument_list pos:line="101" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="38">"\nMaximum string length in "</lit:literal> <op:operator pos:line="101" pos:column="68">+</op:operator>
                    <lit:literal type="string" pos:line="102" pos:column="21">"Levenshtein.LD is "</lit:literal> <op:operator pos:line="102" pos:column="42">+</op:operator> <call><name><name pos:line="102" pos:column="44">Math</name><op:operator pos:line="102" pos:column="48">.</op:operator><name pos:line="102" pos:column="49">Pow</name></name><argument_list pos:line="102" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="102" pos:column="53">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="102" pos:column="56">31</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="102" pos:column="60">+</op:operator> 
                        <lit:literal type="string" pos:line="103" pos:column="25">".\nYours is "</lit:literal> <op:operator pos:line="103" pos:column="40">+</op:operator> <call><name><name pos:line="103" pos:column="42">Math</name><op:operator pos:line="103" pos:column="46">.</op:operator><name pos:line="103" pos:column="47">Max</name></name><argument_list pos:line="103" pos:column="50">(<argument><expr><name><name pos:line="103" pos:column="51">sNew</name><op:operator pos:line="103" pos:column="55">.</op:operator><name pos:line="103" pos:column="56">Length</name></name></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="64">sOld</name><op:operator pos:line="103" pos:column="68">.</op:operator><name pos:line="103" pos:column="69">Length</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="103" pos:column="77">+</op:operator> <lit:literal type="string" pos:line="103" pos:column="79">"."</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="103" pos:column="83">)</op:operator></expr>;</throw></then></if>
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">sNewLen</name> <op:operator pos:line="104" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="104" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="104" pos:column="30">
            <block pos:line="105" pos:column="13">{
                <return pos:line="106" pos:column="17">return <expr><name pos:line="106" pos:column="24">sOldLen</name></expr>;</return>
            }</block></then></if>

            <if pos:line="109" pos:column="13">if <condition pos:line="109" pos:column="16">(<expr><name pos:line="109" pos:column="17">sOldLen</name> <op:operator pos:line="109" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="109" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="109" pos:column="30">
            <block pos:line="110" pos:column="13">{
                <return pos:line="111" pos:column="17">return <expr><name pos:line="111" pos:column="24">sNewLen</name></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><name pos:line="114" pos:column="13">matrix</name> <op:operator pos:line="114" pos:column="20">=</op:operator> <op:operator pos:line="114" pos:column="22">new</op:operator> <name><name pos:line="114" pos:column="26">int</name><index pos:line="114" pos:column="29">[<expr><name pos:line="114" pos:column="30">sNewLen</name> <op:operator pos:line="114" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="114" pos:column="40">1</lit:literal></expr>, <expr><name pos:line="114" pos:column="43">sOldLen</name> <op:operator pos:line="114" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="114" pos:column="53">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
            <for pos:line="115" pos:column="13">for (<init><expr><name pos:line="115" pos:column="18">sNewIdx</name> <op:operator pos:line="115" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="115" pos:column="28">0</lit:literal></expr>;</init> <condition><expr><name pos:line="115" pos:column="31">sNewIdx</name> <op:operator pos:line="115" pos:column="39">&lt;=</op:operator> <name pos:line="115" pos:column="42">sNewLen</name></expr>;</condition> <incr><expr><name pos:line="115" pos:column="51">sNewIdx</name><op:operator pos:line="115" pos:column="58">++</op:operator></expr></incr>)
            <block pos:line="116" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="117" pos:column="17">matrix</name><index pos:line="117" pos:column="23">[<expr><name pos:line="117" pos:column="24">sNewIdx</name></expr>, <expr><lit:literal type="number" pos:line="117" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="117" pos:column="36">=</op:operator> <name pos:line="117" pos:column="38">sNewIdx</name></expr>;</expr_stmt>
            }</block></for>

            <for pos:line="120" pos:column="13">for (<init><expr><name pos:line="120" pos:column="18">sOldIdx</name> <op:operator pos:line="120" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="120" pos:column="28">0</lit:literal></expr>;</init> <condition><expr><name pos:line="120" pos:column="31">sOldIdx</name> <op:operator pos:line="120" pos:column="39">&lt;=</op:operator> <name pos:line="120" pos:column="42">sOldLen</name></expr>;</condition> <incr><expr><name pos:line="120" pos:column="51">sOldIdx</name><op:operator pos:line="120" pos:column="58">++</op:operator></expr></incr>)
            <block pos:line="121" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="122" pos:column="17">matrix</name><index pos:line="122" pos:column="23">[<expr><lit:literal type="number" pos:line="122" pos:column="24">0</lit:literal></expr>, <expr><name pos:line="122" pos:column="27">sOldIdx</name></expr>]</index></name> <op:operator pos:line="122" pos:column="36">=</op:operator> <name pos:line="122" pos:column="38">sOldIdx</name></expr>;</expr_stmt>
            }</block></for>

            <for pos:line="125" pos:column="13">for (<init><expr><name pos:line="125" pos:column="18">sNewIdx</name> <op:operator pos:line="125" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="125" pos:column="28">1</lit:literal></expr>;</init> <condition><expr><name pos:line="125" pos:column="31">sNewIdx</name> <op:operator pos:line="125" pos:column="39">&lt;=</op:operator> <name pos:line="125" pos:column="42">sNewLen</name></expr>;</condition> <incr><expr><name pos:line="125" pos:column="51">sNewIdx</name><op:operator pos:line="125" pos:column="58">++</op:operator></expr></incr>)
            <block pos:line="126" pos:column="13">{
                <expr_stmt><expr><name pos:line="127" pos:column="17">sNew_i</name> <op:operator pos:line="127" pos:column="24">=</op:operator> <name><name pos:line="127" pos:column="26">sNew</name><index pos:line="127" pos:column="30">[<expr><name pos:line="127" pos:column="31">sNewIdx</name> <op:operator pos:line="127" pos:column="39">-</op:operator> <lit:literal type="number" pos:line="127" pos:column="41">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>

                <for pos:line="129" pos:column="17">for (<init><expr><name pos:line="129" pos:column="22">sOldIdx</name> <op:operator pos:line="129" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="129" pos:column="32">1</lit:literal></expr>;</init> <condition><expr><name pos:line="129" pos:column="35">sOldIdx</name> <op:operator pos:line="129" pos:column="43">&lt;=</op:operator> <name pos:line="129" pos:column="46">sOldLen</name></expr>;</condition> <incr><expr><name pos:line="129" pos:column="55">sOldIdx</name><op:operator pos:line="129" pos:column="62">++</op:operator></expr></incr>)
                <block pos:line="130" pos:column="17">{
                    <expr_stmt><expr><name pos:line="131" pos:column="21">sOld_j</name> <op:operator pos:line="131" pos:column="28">=</op:operator> <name><name pos:line="131" pos:column="30">sOld</name><index pos:line="131" pos:column="34">[<expr><name pos:line="131" pos:column="35">sOldIdx</name> <op:operator pos:line="131" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="131" pos:column="45">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="132" pos:column="21">cost</name> <op:operator pos:line="132" pos:column="26">=</op:operator> <name pos:line="132" pos:column="28">sNew_i</name> <op:operator pos:line="132" pos:column="35">==</op:operator> <name pos:line="132" pos:column="38">sOld_j</name> <op:operator pos:line="132" pos:column="45">?</op:operator> <lit:literal type="number" pos:line="132" pos:column="47">0</lit:literal> <op:operator pos:line="132" pos:column="49">:</op:operator> <lit:literal type="number" pos:line="132" pos:column="51">1</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="133" pos:column="21">matrix</name><index pos:line="133" pos:column="27">[<expr><name pos:line="133" pos:column="28">sNewIdx</name></expr>, <expr><name pos:line="133" pos:column="37">sOldIdx</name></expr>]</index></name> <op:operator pos:line="133" pos:column="46">=</op:operator> <call><name pos:line="133" pos:column="48">Minimum</name><argument_list pos:line="133" pos:column="55">(<argument><expr><name><name pos:line="133" pos:column="56">matrix</name><index pos:line="133" pos:column="62">[<expr><name pos:line="133" pos:column="63">sNewIdx</name> <op:operator pos:line="133" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="133" pos:column="73">1</lit:literal></expr><op:operator pos:line="133" pos:column="74">,</op:operator> <name pos:line="133" pos:column="76">sOldIdx</name>]</index></name> <op:operator pos:line="133" pos:column="85">+</op:operator> <lit:literal type="number" pos:line="133" pos:column="87">1</lit:literal></expr></argument>, 
                        <argument><expr><name><name pos:line="134" pos:column="25">matrix</name><index pos:line="134" pos:column="31">[<expr><name pos:line="134" pos:column="32">sNewIdx</name></expr><op:operator pos:line="134" pos:column="39">,</op:operator> <name pos:line="134" pos:column="41">sOldIdx</name> <op:operator pos:line="134" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="134" pos:column="51">1</lit:literal>]</index></name> <op:operator pos:line="134" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="134" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="59">matrix</name><index pos:line="134" pos:column="65">[<expr><name pos:line="134" pos:column="66">sNewIdx</name> <op:operator pos:line="134" pos:column="74">-</op:operator> <lit:literal type="number" pos:line="134" pos:column="76">1</lit:literal></expr><op:operator pos:line="134" pos:column="77">,</op:operator> <name pos:line="134" pos:column="79">sOldIdx</name> <op:operator pos:line="134" pos:column="87">-</op:operator> <lit:literal type="number" pos:line="134" pos:column="89">1</lit:literal>]</index></name> <op:operator pos:line="134" pos:column="92">+</op:operator> <name pos:line="134" pos:column="94">cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">int</name></type> <name pos:line="137" pos:column="17">max</name> <init pos:line="137" pos:column="21">= <expr><call><name><name pos:line="137" pos:column="23">Math</name><op:operator pos:line="137" pos:column="27">.</op:operator><name pos:line="137" pos:column="28">Max</name></name><argument_list pos:line="137" pos:column="31">(<argument><expr><name pos:line="137" pos:column="32">sNewLen</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="41">sOldLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="138" pos:column="13">return <expr><op:operator pos:line="138" pos:column="20">(</op:operator><lit:literal type="number" pos:line="138" pos:column="21">100</lit:literal> <op:operator pos:line="138" pos:column="25">*</op:operator> <name><name pos:line="138" pos:column="27">matrix</name><index pos:line="138" pos:column="33">[<expr><name pos:line="138" pos:column="34">sNewLen</name></expr>, <expr><name pos:line="138" pos:column="43">sOldLen</name></expr>]</index></name><op:operator pos:line="138" pos:column="51">)</op:operator> <op:operator pos:line="138" pos:column="53">/</op:operator> <name pos:line="138" pos:column="55">max</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
