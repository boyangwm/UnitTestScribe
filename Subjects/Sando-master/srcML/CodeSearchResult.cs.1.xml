<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\SandoExtensionContracts\ResultsReordererContracts\CodeSearchResult.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">System</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">IO</name></name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Xml</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">ExtensionContracts</name><op:operator pos:line="5" pos:column="31">.</op:operator><name pos:line="5" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="6" pos:column="1">using <name pos:line="6" pos:column="7">System</name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">System</name><op:operator pos:line="7" pos:column="13">.</op:operator><name pos:line="7" pos:column="14">Text</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">ExtensionContracts</name><op:operator pos:line="9" pos:column="35">.</op:operator><name pos:line="9" pos:column="36">ResultsReordererContracts</name></name>
<block pos:line="10" pos:column="1">{
    <enum><specifier pos:line="11" pos:column="5">public</specifier> enum <macro><name pos:line="11" pos:column="17">IndentionOption</name></macro>
    <block pos:line="12" pos:column="5">{
        <decl><name pos:line="13" pos:column="9">KeepIndention</name></decl><op:operator pos:line="13" pos:column="22">,</op:operator>
        <decl><name pos:line="14" pos:column="9">NoIndention</name></decl>
    }</block>

    <decl pos:line="17" pos:column="5">public interface <name pos:line="17" pos:column="22">IHighlightRawInfo</name>
    <block pos:line="18" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">string</name></type> <name pos:line="19" pos:column="16">Text</name> <block pos:line="19" pos:column="21">{ <function_decl><name pos:line="19" pos:column="23">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">int</name></type> <name pos:line="20" pos:column="13">StartLineNumber</name> <block pos:line="20" pos:column="29">{ <function_decl><name pos:line="20" pos:column="31">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">int</name><index pos:line="21" pos:column="12">[]</index></type> <name pos:line="21" pos:column="15">Offsets</name> <block pos:line="21" pos:column="23">{ <function_decl><name pos:line="21" pos:column="25">get</name>;</function_decl> }</block></decl></decl_stmt>
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">IndentionOption</name></type> <name pos:line="22" pos:column="25">IndOption</name> <block pos:line="22" pos:column="35">{ <function_decl><name pos:line="22" pos:column="37">get</name>;</function_decl> }</block></decl></decl_stmt>
    }</block></decl>


    <comment type="line" pos:line="26" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="27" pos:column="5">/// Class defined to create return result from Lucene indexer</comment>
    <comment type="line" pos:line="28" pos:column="5">/// &lt;/summary&gt;</comment>
    <decl pos:line="29" pos:column="5">public <name pos:line="29" pos:column="12">class</name> <name pos:line="29" pos:column="18">CodeSearchResult</name>
    <block pos:line="30" pos:column="5">{
        <constructor><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">CodeSearchResult</name><parameter_list pos:line="31" pos:column="32">(<param><decl><type><name pos:line="31" pos:column="33">ProgramElement</name></type> <name pos:line="31" pos:column="48">programElement</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="64">double</name></type> <name pos:line="31" pos:column="71">score</name></decl></param>)</parameter_list>
        <block pos:line="32" pos:column="9">{
            <expr_stmt><expr><name pos:line="33" pos:column="13">ProgramElement</name> <op:operator pos:line="33" pos:column="28">=</op:operator> <name pos:line="33" pos:column="30">programElement</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="34" pos:column="13">Score</name> <op:operator pos:line="34" pos:column="19">=</op:operator> <name pos:line="34" pos:column="21">score</name></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">public</specifier> <name pos:line="37" pos:column="16">double</name></type> <name pos:line="37" pos:column="23">Score</name> <block pos:line="37" pos:column="29">{ <function_decl><name pos:line="37" pos:column="31">get</name>;</function_decl> <function_decl><specifier pos:line="37" pos:column="36">private</specifier> <name pos:line="37" pos:column="44">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">ProgramElement</name></type> <name pos:line="39" pos:column="31">ProgramElement</name> <block pos:line="39" pos:column="46">{ <function_decl><name pos:line="39" pos:column="48">get</name>;</function_decl> <function_decl><specifier pos:line="39" pos:column="53">private</specifier> <name pos:line="39" pos:column="61">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="41" pos:column="9">public</specifier> <name pos:line="41" pos:column="16">string</name></type> <name pos:line="41" pos:column="23">ParentOrFile</name>
        <block pos:line="42" pos:column="9">{
            <function><name pos:line="43" pos:column="13">get</name> 
            <block pos:line="44" pos:column="13">{                
                <comment type="line" pos:line="45" pos:column="17">//NOTE: shortening is happening in this UI class instead of in the xaml because of xaml's limitations around controling column width inside of a listviewitem                </comment>
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">var</name></type> <name pos:line="46" pos:column="21">myFileName</name> <init pos:line="46" pos:column="32">= <expr><call><name><name pos:line="46" pos:column="34">Directory</name><op:operator pos:line="46" pos:column="43">.</op:operator><name pos:line="46" pos:column="44">GetFiles</name></name><argument_list pos:line="46" pos:column="52">(<argument><expr><call><name><name pos:line="46" pos:column="53">Path</name><op:operator pos:line="46" pos:column="57">.</op:operator><name pos:line="46" pos:column="58">GetDirectoryName</name></name><argument_list pos:line="46" pos:column="74">(<argument><expr><name><name pos:line="46" pos:column="75">ProgramElement</name><op:operator pos:line="46" pos:column="89">.</op:operator><name pos:line="46" pos:column="90">FullFilePath</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="46" pos:column="105">Path</name><op:operator pos:line="46" pos:column="109">.</op:operator><name pos:line="46" pos:column="110">GetFileName</name></name><argument_list pos:line="46" pos:column="121">(<argument><expr><name><name pos:line="46" pos:column="122">ProgramElement</name><op:operator pos:line="46" pos:column="136">.</op:operator><name pos:line="46" pos:column="137">FullFilePath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="151">.</op:operator><call><name pos:line="46" pos:column="152">FirstOrDefault</name><argument_list pos:line="46" pos:column="166">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="47" pos:column="17">var</name></type> <name pos:line="47" pos:column="21">parentOrFile</name> <init pos:line="47" pos:column="34">= <expr><lit:literal type="string" pos:line="47" pos:column="36">""</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><call><name><name pos:line="48" pos:column="21">string</name><op:operator pos:line="48" pos:column="27">.</op:operator><name pos:line="48" pos:column="28">IsNullOrEmpty</name></name><argument_list pos:line="48" pos:column="41">(<argument><expr><name pos:line="48" pos:column="42">Parent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="48" pos:column="50">
                    <expr_stmt><expr><name pos:line="49" pos:column="21">parentOrFile</name> <op:operator pos:line="49" pos:column="34">=</op:operator> <call><name><name pos:line="49" pos:column="36">Path</name><op:operator pos:line="49" pos:column="40">.</op:operator><name pos:line="49" pos:column="41">GetFileName</name></name><argument_list pos:line="49" pos:column="52">(<argument><expr><name pos:line="49" pos:column="53">myFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else pos:line="50" pos:column="17">else
                <block pos:line="51" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="52" pos:column="21">var</name></type> <name pos:line="52" pos:column="25">fileName</name> <init pos:line="52" pos:column="34">= <expr><call><name><name pos:line="52" pos:column="36">Path</name><op:operator pos:line="52" pos:column="40">.</op:operator><name pos:line="52" pos:column="41">GetFileName</name></name><argument_list pos:line="52" pos:column="52">(<argument><expr><name pos:line="52" pos:column="53">myFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="53" pos:column="21">if <condition pos:line="53" pos:column="24">(<expr><call><name><name pos:line="53" pos:column="25">fileName</name><op:operator pos:line="53" pos:column="33">.</op:operator><name pos:line="53" pos:column="34">StartsWith</name></name><argument_list pos:line="53" pos:column="44">(<argument><expr><name pos:line="53" pos:column="45">Parent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="53" pos:column="53">
                    <block pos:line="54" pos:column="21">{
                        <expr_stmt><expr><name pos:line="55" pos:column="25">parentOrFile</name> <op:operator pos:line="55" pos:column="38">=</op:operator> <name pos:line="55" pos:column="40">fileName</name></expr>;</expr_stmt>
                    }</block></then>
                    <else pos:line="57" pos:column="21">else
                    <block pos:line="58" pos:column="21">{
                        <expr_stmt><expr><name pos:line="59" pos:column="25">parentOrFile</name> <op:operator pos:line="59" pos:column="38">=</op:operator> <name pos:line="59" pos:column="40">Parent</name> <op:operator pos:line="59" pos:column="47">+</op:operator> <lit:literal type="string" pos:line="59" pos:column="49">" ("</lit:literal> <op:operator pos:line="59" pos:column="54">+</op:operator> <name pos:line="59" pos:column="56">fileName</name> <op:operator pos:line="59" pos:column="65">+</op:operator> <lit:literal type="string" pos:line="59" pos:column="67">")"</lit:literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
                <if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name><name pos:line="62" pos:column="21">parentOrFile</name><op:operator pos:line="62" pos:column="33">.</op:operator><name pos:line="62" pos:column="34">Length</name></name> <op:operator pos:line="62" pos:column="41">&gt;</op:operator> <name pos:line="62" pos:column="43">MAX_PARENT_LENGTH</name></expr>)</condition><then pos:line="62" pos:column="61">
                <block pos:line="63" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="64" pos:column="21">int</name></type> <name pos:line="64" pos:column="25">lengthAfterTrim</name> <init pos:line="64" pos:column="41">= <expr><name pos:line="64" pos:column="43">MAX_PARENT_LENGTH</name> <op:operator pos:line="64" pos:column="61">+</op:operator> <call><name pos:line="64" pos:column="63">RoomLeftFromName</name><argument_list pos:line="64" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="65" pos:column="21">if <condition pos:line="65" pos:column="24">(<expr><name><name pos:line="65" pos:column="25">parentOrFile</name><op:operator pos:line="65" pos:column="37">.</op:operator><name pos:line="65" pos:column="38">Length</name></name> <op:operator pos:line="65" pos:column="45">&gt;</op:operator> <name pos:line="65" pos:column="47">lengthAfterTrim</name></expr>)</condition><then pos:line="65" pos:column="63">
                        <return pos:line="66" pos:column="25">return <expr><call><name><name pos:line="66" pos:column="32">parentOrFile</name><op:operator pos:line="66" pos:column="44">.</op:operator><name pos:line="66" pos:column="45">Substring</name></name><argument_list pos:line="66" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="66" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="58">lengthAfterTrim</name></expr></argument>)</argument_list></call> <op:operator pos:line="66" pos:column="75">+</op:operator> <lit:literal type="string" pos:line="66" pos:column="77">"..."</lit:literal></expr>;</return></then></if>   
                }</block></then></if>
                <return pos:line="68" pos:column="17">return <expr><name pos:line="68" pos:column="24">parentOrFile</name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <function><type><specifier pos:line="72" pos:column="9">private</specifier> <name pos:line="72" pos:column="17">int</name></type> <name pos:line="72" pos:column="21">RoomLeftFromName</name><parameter_list pos:line="72" pos:column="37">()</parameter_list>
        <block pos:line="73" pos:column="9">{
            <if pos:line="74" pos:column="13">if <condition pos:line="74" pos:column="16">(<expr><name><name pos:line="74" pos:column="17">Name</name><op:operator pos:line="74" pos:column="21">.</op:operator><name pos:line="74" pos:column="22">Length</name></name> <op:operator pos:line="74" pos:column="29">&gt;</op:operator> <name pos:line="74" pos:column="31">MAX_PARENT_LENGTH</name> <op:operator pos:line="74" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="74" pos:column="51">10</lit:literal></expr>)</condition><then pos:line="74" pos:column="54">
                <return pos:line="75" pos:column="17">return <expr><lit:literal type="number" pos:line="75" pos:column="24">0</lit:literal></expr>;</return></then>
            <else pos:line="76" pos:column="13">else
                <return pos:line="77" pos:column="17">return <expr><name pos:line="77" pos:column="24">MAX_PARENT_LENGTH</name> <op:operator pos:line="77" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="77" pos:column="44">10</lit:literal> <op:operator pos:line="77" pos:column="47">-</op:operator> <name><name pos:line="77" pos:column="49">Name</name><op:operator pos:line="77" pos:column="53">.</op:operator><name pos:line="77" pos:column="54">Length</name></name></expr>;</return></else></if>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="80" pos:column="9">private</specifier> <specifier pos:line="80" pos:column="17">const</specifier> <name pos:line="80" pos:column="23">int</name></type> <name pos:line="80" pos:column="27">MAX_PARENT_LENGTH</name> <init pos:line="80" pos:column="45">= <expr><lit:literal type="number" pos:line="80" pos:column="47">33</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="82" pos:column="9">public</specifier> <name pos:line="82" pos:column="16">ProgramElementType</name></type> <name pos:line="82" pos:column="35">ProgramElementType</name>
        <block pos:line="83" pos:column="9">{
            <function><name pos:line="84" pos:column="13">get</name> <block pos:line="84" pos:column="17">{ <return pos:line="84" pos:column="19">return <expr><name><name pos:line="84" pos:column="26">ProgramElement</name><op:operator pos:line="84" pos:column="40">.</op:operator><name pos:line="84" pos:column="41">ProgramElementType</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="87" pos:column="9">public</specifier> <name pos:line="87" pos:column="16">string</name></type> <name pos:line="87" pos:column="23">Type</name>
        <block pos:line="88" pos:column="9">{
            <function><name pos:line="89" pos:column="13">get</name> <block pos:line="89" pos:column="17">{ <return pos:line="89" pos:column="19">return <expr><call><name><name pos:line="89" pos:column="26">ProgramElement</name><op:operator pos:line="89" pos:column="40">.</op:operator><name pos:line="89" pos:column="41">GetName</name></name><argument_list pos:line="89" pos:column="48">()</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="92" pos:column="9">public</specifier> <specifier pos:line="92" pos:column="16">static</specifier> <specifier pos:line="92" pos:column="23">readonly</specifier> <name pos:line="92" pos:column="32">int</name></type> <name pos:line="92" pos:column="36">DefaultSnippetSize</name> <init pos:line="92" pos:column="55">= <expr><lit:literal type="number" pos:line="92" pos:column="57">5</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="94" pos:column="9">public</specifier> <name pos:line="94" pos:column="16">string</name></type> <name pos:line="94" pos:column="23">Snippet</name>
        <block pos:line="95" pos:column="9">{
            <function><name pos:line="96" pos:column="13">get</name>
            <block pos:line="97" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="98" pos:column="17">var</name></type> <name pos:line="98" pos:column="21">raw</name> <init pos:line="98" pos:column="25">= <expr><name><name pos:line="98" pos:column="27">ProgramElement</name><op:operator pos:line="98" pos:column="41">.</op:operator><name pos:line="98" pos:column="42">RawSource</name></name></expr></init></decl>;</decl_stmt>
                <return pos:line="99" pos:column="17">return <expr><call><name pos:line="99" pos:column="24">SourceToSnippet</name><argument_list pos:line="99" pos:column="39">(<argument><expr><name pos:line="99" pos:column="40">raw</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="45">DefaultSnippetSize</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="103" pos:column="9">//Zhao Li, return all the RawSource to the Popup window</comment>
        <comment type="line" pos:line="104" pos:column="9">//We need to highlight the search string?</comment>
        <decl_stmt><decl><type><specifier pos:line="105" pos:column="9">public</specifier> <name pos:line="105" pos:column="16">string</name></type> <name pos:line="105" pos:column="23">Raw</name> <block pos:line="105" pos:column="27">{
            <function><name pos:line="106" pos:column="13">get</name> <block pos:line="106" pos:column="17">{
                <return pos:line="107" pos:column="17">return <expr><call><name><name pos:line="107" pos:column="24">ProgramElement</name><op:operator pos:line="107" pos:column="38">.</op:operator><name pos:line="107" pos:column="39">RawSource</name><op:operator pos:line="107" pos:column="48">.</op:operator><name pos:line="107" pos:column="49">Replace</name></name><argument_list pos:line="107" pos:column="56">(<argument><expr><lit:literal type="char" pos:line="107" pos:column="57">'\t'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="107" pos:column="63">' '</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <comment type="line" pos:line="111" pos:column="9">//Highlight raw</comment>
        <decl_stmt><decl><type><specifier pos:line="112" pos:column="9">private</specifier> <name pos:line="112" pos:column="17">string</name></type> <name pos:line="112" pos:column="24">highlightRaw</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="113" pos:column="9">public</specifier> <name pos:line="113" pos:column="16">string</name></type> <name pos:line="113" pos:column="23">HighlightRaw</name> <block pos:line="113" pos:column="36">{
            <function><name pos:line="114" pos:column="13">get</name> <block pos:line="114" pos:column="17">{
                <return pos:line="115" pos:column="17">return <expr><name><name pos:line="115" pos:column="24">this</name><op:operator pos:line="115" pos:column="28">.</op:operator><name pos:line="115" pos:column="29">highlightRaw</name></name></expr>;</return>
            }</block></function>
            <function><name pos:line="117" pos:column="13">set</name> <block pos:line="117" pos:column="17">{
                <expr_stmt><expr><name><name pos:line="118" pos:column="17">this</name><op:operator pos:line="118" pos:column="21">.</op:operator><name pos:line="118" pos:column="22">highlightRaw</name></name> <op:operator pos:line="118" pos:column="35">=</op:operator> <name pos:line="118" pos:column="37">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>
        <comment type="line" pos:line="121" pos:column="9">//Zhao Li, return all the seach results</comment>
        <decl_stmt><decl><type><specifier pos:line="122" pos:column="9">private</specifier> <name pos:line="122" pos:column="17">string</name></type> <name pos:line="122" pos:column="24">highlight</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="123" pos:column="9">public</specifier> <name pos:line="123" pos:column="16">String</name></type> <name pos:line="123" pos:column="23">Highlight</name>
        <block pos:line="124" pos:column="9">{
            <function><name pos:line="125" pos:column="13">get</name> <block pos:line="125" pos:column="17">{
                <return pos:line="126" pos:column="17">return <expr><name pos:line="126" pos:column="24">highlight</name></expr>;</return>
            }</block></function>
            <function><name pos:line="128" pos:column="13">set</name> <block pos:line="128" pos:column="17">{
                <expr_stmt><expr><name><name pos:line="129" pos:column="17">this</name><op:operator pos:line="129" pos:column="21">.</op:operator><name pos:line="129" pos:column="22">highlight</name></name> <op:operator pos:line="129" pos:column="32">=</op:operator> <name pos:line="129" pos:column="34">value</name></expr>;</expr_stmt>
            }</block></function>
        }</block></decl></decl_stmt>


        <decl_stmt><decl><type><specifier pos:line="134" pos:column="9">public</specifier> <name pos:line="134" pos:column="16">IHighlightRawInfo</name></type> <name pos:line="134" pos:column="34">HighlightInfo</name>
        <block pos:line="135" pos:column="9">{
            <function><name pos:line="136" pos:column="13">get</name>
            <block pos:line="137" pos:column="13">{
                <return pos:line="138" pos:column="17">return <expr><op:operator pos:line="138" pos:column="24">new</op:operator> <call><name pos:line="138" pos:column="28">InternalHighlightRawInfo</name><argument_list pos:line="138" pos:column="52">(<argument><expr><name pos:line="138" pos:column="53">highlight</name></expr></argument>, <argument><expr><name><name pos:line="138" pos:column="64">ProgramElement</name><op:operator pos:line="138" pos:column="78">.</op:operator>
                    <name pos:line="139" pos:column="21">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="43">IndentionOption</name><op:operator pos:line="139" pos:column="58">.</op:operator><name pos:line="139" pos:column="59">NoIndention</name></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="72">HighlightOffsets</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="143" pos:column="9">public</specifier> <name pos:line="143" pos:column="16">IHighlightRawInfo</name></type> <name pos:line="143" pos:column="34">RawHighlightInfo</name>
        <block pos:line="144" pos:column="9">{
            <function><name pos:line="145" pos:column="13">get</name>
            <block pos:line="146" pos:column="13">{
                <return pos:line="147" pos:column="17">return <expr><op:operator pos:line="147" pos:column="24">new</op:operator> <call><name pos:line="147" pos:column="28">InternalHighlightRawInfo</name><argument_list pos:line="147" pos:column="52">(<argument><expr><name pos:line="147" pos:column="53">highlightRaw</name></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="67">ProgramElement</name><op:operator pos:line="147" pos:column="81">.</op:operator>
                    <name pos:line="148" pos:column="21">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="43">IndentionOption</name><op:operator pos:line="148" pos:column="58">.</op:operator><name pos:line="148" pos:column="59">KeepIndention</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <class><specifier pos:line="152" pos:column="9">private</specifier> class <name pos:line="152" pos:column="23">InternalHighlightRawInfo</name> <super pos:line="152" pos:column="48">: <name pos:line="152" pos:column="50">IHighlightRawInfo</name></super>
        <block pos:line="153" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="154" pos:column="13">public</specifier> <name pos:line="154" pos:column="20">string</name></type> <name pos:line="154" pos:column="27">Text</name> <block pos:line="154" pos:column="32">{ <function_decl><name pos:line="154" pos:column="34">get</name>;</function_decl> <function_decl><specifier pos:line="154" pos:column="39">private</specifier> <name pos:line="154" pos:column="47">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="155" pos:column="13">public</specifier> <name pos:line="155" pos:column="20">int</name></type> <name pos:line="155" pos:column="24">StartLineNumber</name> <block pos:line="155" pos:column="40">{ <function_decl><name pos:line="155" pos:column="42">get</name>;</function_decl> <function_decl><specifier pos:line="155" pos:column="47">private</specifier> <name pos:line="155" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="156" pos:column="13">public</specifier> <name pos:line="156" pos:column="20">int</name><index pos:line="156" pos:column="23">[]</index></type> <name pos:line="156" pos:column="26">Offsets</name> <block pos:line="156" pos:column="34">{ <function_decl><name pos:line="156" pos:column="36">get</name>;</function_decl> <function_decl><specifier pos:line="156" pos:column="41">private</specifier> <name pos:line="156" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="157" pos:column="13">public</specifier> <name pos:line="157" pos:column="20">IndentionOption</name></type> <name pos:line="157" pos:column="36">IndOption</name> <block pos:line="157" pos:column="46">{ <function_decl><name pos:line="157" pos:column="48">get</name>;</function_decl> <function_decl><specifier pos:line="157" pos:column="53">private</specifier> <name pos:line="157" pos:column="61">set</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="159" pos:column="13">internal</specifier> <name pos:line="159" pos:column="22">InternalHighlightRawInfo</name><parameter_list pos:line="159" pos:column="46">(<param><decl><type><name pos:line="159" pos:column="47">String</name></type> <name pos:line="159" pos:column="54">Text</name></decl></param>, <param><decl><type><name pos:line="159" pos:column="60">int</name></type> <name pos:line="159" pos:column="64">StartLineNumber</name></decl></param>, 
                <param><decl><type><name pos:line="160" pos:column="17">IndentionOption</name></type> <name pos:line="160" pos:column="33">IndOption</name></decl></param>, <param><decl><type><name><name pos:line="160" pos:column="44">int</name><index pos:line="160" pos:column="47">[]</index></name></type> <name pos:line="160" pos:column="50">Offsets</name> <init pos:line="160" pos:column="58">= <expr><name pos:line="160" pos:column="60">null</name></expr></init></decl></param>)</parameter_list>
            <block pos:line="161" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="162" pos:column="17">this</name><op:operator pos:line="162" pos:column="21">.</op:operator><name pos:line="162" pos:column="22">Text</name></name> <op:operator pos:line="162" pos:column="27">=</op:operator> <name pos:line="162" pos:column="29">Text</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="163" pos:column="17">this</name><op:operator pos:line="163" pos:column="21">.</op:operator><name pos:line="163" pos:column="22">StartLineNumber</name></name> <op:operator pos:line="163" pos:column="38">=</op:operator> <name pos:line="163" pos:column="40">StartLineNumber</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="164" pos:column="17">this</name><op:operator pos:line="164" pos:column="21">.</op:operator><name pos:line="164" pos:column="22">Offsets</name></name> <op:operator pos:line="164" pos:column="30">=</op:operator> <name pos:line="164" pos:column="32">Offsets</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="165" pos:column="17">this</name><op:operator pos:line="165" pos:column="21">.</op:operator><name pos:line="165" pos:column="22">IndOption</name></name> <op:operator pos:line="165" pos:column="32">=</op:operator> <name pos:line="165" pos:column="34">IndOption</name></expr>;</expr_stmt>
            }</block></constructor>
        }</block></class>


        <decl_stmt><decl><type><specifier pos:line="170" pos:column="9">private</specifier> <specifier pos:line="170" pos:column="17">static</specifier> <name pos:line="170" pos:column="24">int</name></type> <name pos:line="170" pos:column="28">TAB</name> <init pos:line="170" pos:column="32">= <expr><lit:literal type="number" pos:line="170" pos:column="34">4</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="171" pos:column="9">private</specifier> <specifier pos:line="171" pos:column="17">static</specifier> <name pos:line="171" pos:column="24">int</name></type> <name pos:line="171" pos:column="28">MAX_SNIPPET_LENGTH</name> <init pos:line="171" pos:column="47">= <expr><lit:literal type="number" pos:line="171" pos:column="49">85</lit:literal></expr></init></decl>;</decl_stmt>        

        <function><type><specifier pos:line="173" pos:column="9">public</specifier> <name pos:line="173" pos:column="16">string</name></type> <name pos:line="173" pos:column="23">SourceToSnippet</name><parameter_list pos:line="173" pos:column="38">(<param><decl><type><name pos:line="173" pos:column="39">string</name></type> <name pos:line="173" pos:column="46">source</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="54">int</name></type> <name pos:line="173" pos:column="58">numLines</name></decl></param>)</parameter_list>
        <block pos:line="174" pos:column="9">{            
            <if pos:line="175" pos:column="13">if <condition pos:line="175" pos:column="16">(<expr><call><name pos:line="175" pos:column="17">IsXml</name><argument_list pos:line="175" pos:column="22">()</argument_list></call></expr>)</condition><then pos:line="175" pos:column="25">
            <block pos:line="176" pos:column="13">{         
                <expr_stmt><expr><name pos:line="177" pos:column="17">source</name> <op:operator pos:line="177" pos:column="24">=</op:operator> <call><name pos:line="177" pos:column="26">PrettyPrintXElement</name><argument_list pos:line="177" pos:column="45">(<argument><expr><name pos:line="177" pos:column="46">source</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="54">numLines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line" pos:line="179" pos:column="13">//NOTE: shortening is happening in this UI class instead of in the xaml because of xaml's limitations around controling column width inside of a listviewitem            </comment>
            <decl_stmt><decl><type><name pos:line="180" pos:column="13">var</name></type> <name pos:line="180" pos:column="17">lines</name> <init pos:line="180" pos:column="23">= <expr><call><name pos:line="180" pos:column="25">GetLines</name><argument_list pos:line="180" pos:column="33">(<argument><expr><name pos:line="180" pos:column="34">source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="181" pos:column="13">int</name></type> <name pos:line="181" pos:column="17">leadingSpaces</name> <init pos:line="181" pos:column="31">= <expr><lit:literal type="number" pos:line="181" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="182" pos:column="13">var</name></type> <name pos:line="182" pos:column="17">shortenedLineList</name> <init pos:line="182" pos:column="35">= <expr><call><name pos:line="182" pos:column="37">ShortenSnippet</name><argument_list pos:line="182" pos:column="51">(<argument><expr><name pos:line="182" pos:column="52">numLines</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="62">lines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            
            <if pos:line="185" pos:column="13">if <condition pos:line="185" pos:column="16">(<expr><op:operator pos:line="185" pos:column="17">!</op:operator><call><name pos:line="185" pos:column="18">IsXml</name><argument_list pos:line="185" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="185" pos:column="26">
            <block pos:line="186" pos:column="13">{
                <expr_stmt><expr><name pos:line="187" pos:column="17">leadingSpaces</name> <op:operator pos:line="187" pos:column="31">=</op:operator> <call><name pos:line="187" pos:column="33">GetLeadingSpaces</name><argument_list pos:line="187" pos:column="49">(<argument><expr><name pos:line="187" pos:column="50">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="188" pos:column="17">shortenedLineList</name> <op:operator pos:line="188" pos:column="35">=</op:operator> <call><name pos:line="188" pos:column="37">StandardizeLeadingWhitespace</name><argument_list pos:line="188" pos:column="65">(<argument><expr><name pos:line="188" pos:column="66">shortenedLineList</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="85">numLines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">StringBuilder</name></type> <name pos:line="190" pos:column="27">snippet</name> <init pos:line="190" pos:column="35">= <expr><call><name pos:line="190" pos:column="37">AddTruncatedLinesToSnippet</name><argument_list pos:line="190" pos:column="63">(<argument><expr><name pos:line="190" pos:column="64">shortenedLineList</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="83">leadingSpaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="191" pos:column="13">return <expr><call><name><name pos:line="191" pos:column="20">snippet</name><op:operator pos:line="191" pos:column="27">.</op:operator><name pos:line="191" pos:column="28">ToString</name></name><argument_list pos:line="191" pos:column="36">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="194" pos:column="9">private</specifier> <specifier pos:line="194" pos:column="17">static</specifier> <name><name pos:line="194" pos:column="24">List</name><argument_list pos:line="194" pos:column="28">&lt;<argument><name pos:line="194" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="194" pos:column="37">GetLines</name><parameter_list pos:line="194" pos:column="45">(<param><decl><type><name pos:line="194" pos:column="46">string</name></type> <name pos:line="194" pos:column="53">source</name></decl></param>)</parameter_list>
        <block pos:line="195" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="196" pos:column="13">var</name></type> <name pos:line="196" pos:column="17">lines</name> <init pos:line="196" pos:column="23">= <expr><op:operator pos:line="196" pos:column="25">new</op:operator> <call><name><name pos:line="196" pos:column="29">List</name><argument_list pos:line="196" pos:column="33">&lt;<argument><name pos:line="196" pos:column="34">string</name></argument>&gt;</argument_list></name><argument_list pos:line="196" pos:column="41">(<argument><expr><call><name><name pos:line="196" pos:column="42">source</name><op:operator pos:line="196" pos:column="48">.</op:operator><name pos:line="196" pos:column="49">Split</name></name><argument_list pos:line="196" pos:column="54">(<argument><expr><lit:literal type="char" pos:line="196" pos:column="55">'\n'</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="197" pos:column="13">return <expr><name pos:line="197" pos:column="20">lines</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="200" pos:column="9">private</specifier> <name pos:line="200" pos:column="17">bool</name></type> <name pos:line="200" pos:column="22">IsXml</name><parameter_list pos:line="200" pos:column="27">()</parameter_list>
        <block pos:line="201" pos:column="9">{
            <return pos:line="202" pos:column="13">return <expr><name><name pos:line="202" pos:column="20">this</name><op:operator pos:line="202" pos:column="24">.</op:operator><name pos:line="202" pos:column="25">FileName</name></name><op:operator pos:line="202" pos:column="33">!=</op:operator><name pos:line="202" pos:column="35">null</name> <op:operator pos:line="202" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="202" pos:column="43">(</op:operator><call><name><name pos:line="202" pos:column="44">FileName</name><op:operator pos:line="202" pos:column="52">.</op:operator><name pos:line="202" pos:column="53">EndsWith</name></name><argument_list pos:line="202" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="202" pos:column="62">".xaml"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="202" pos:column="70">||</op:operator><call><name><name pos:line="202" pos:column="72">FileName</name><op:operator pos:line="202" pos:column="80">.</op:operator><name pos:line="202" pos:column="81">EndsWith</name></name><argument_list pos:line="202" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="202" pos:column="90">".xml"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="202" pos:column="97">)</op:operator></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="205" pos:column="9">private</specifier> <specifier pos:line="205" pos:column="17">static</specifier> <name pos:line="205" pos:column="24">StringBuilder</name></type> <name pos:line="205" pos:column="38">AddTruncatedLinesToSnippet</name><parameter_list pos:line="205" pos:column="64">(<param><decl><type><name><name pos:line="205" pos:column="65">List</name><argument_list pos:line="205" pos:column="69">&lt;<argument><name pos:line="205" pos:column="70">string</name></argument>&gt;</argument_list></name></type> <name pos:line="205" pos:column="78">lines</name></decl></param>, <param><decl><type><name pos:line="205" pos:column="85">int</name></type> <name pos:line="205" pos:column="89">leadingSpaces</name></decl></param>)</parameter_list>
        <block pos:line="206" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">StringBuilder</name></type> <name pos:line="207" pos:column="27">snippet</name> <init pos:line="207" pos:column="35">= <expr><op:operator pos:line="207" pos:column="37">new</op:operator> <call><name pos:line="207" pos:column="41">StringBuilder</name><argument_list pos:line="207" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="208" pos:column="13">foreach (<init><decl><type><name pos:line="208" pos:column="22">var</name></type> <name pos:line="208" pos:column="26">aLine</name> <range pos:line="208" pos:column="32">in <expr><name pos:line="208" pos:column="35">lines</name></expr></range></decl></init>)
            <block pos:line="209" pos:column="13">{
                <try pos:line="210" pos:column="17">try
                <block pos:line="211" pos:column="17">{
                    <if pos:line="212" pos:column="21">if <condition pos:line="212" pos:column="24">(<expr><call><name><name pos:line="212" pos:column="25">aLine</name><op:operator pos:line="212" pos:column="30">.</op:operator><name pos:line="212" pos:column="31">Substring</name></name><argument_list pos:line="212" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="212" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><name pos:line="212" pos:column="44">leadingSpaces</name></expr></argument>)</argument_list></call><op:operator pos:line="212" pos:column="58">.</op:operator><call><name pos:line="212" pos:column="59">Trim</name><argument_list pos:line="212" pos:column="63">()</argument_list></call><op:operator pos:line="212" pos:column="65">.</op:operator><call><name pos:line="212" pos:column="66">Equals</name><argument_list pos:line="212" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="73">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="212" pos:column="77">
                        <expr_stmt><expr><call><name pos:line="213" pos:column="25">Append</name><argument_list pos:line="213" pos:column="31">(<argument><expr><name pos:line="213" pos:column="32">snippet</name></expr></argument>, <argument><expr><call><name><name pos:line="213" pos:column="41">aLine</name><op:operator pos:line="213" pos:column="46">.</op:operator><name pos:line="213" pos:column="47">Substring</name></name><argument_list pos:line="213" pos:column="56">(<argument><expr><name pos:line="213" pos:column="57">leadingSpaces</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                    <else pos:line="214" pos:column="21">else
                        <expr_stmt><expr><call><name pos:line="215" pos:column="25">Append</name><argument_list pos:line="215" pos:column="31">(<argument><expr><name pos:line="215" pos:column="32">snippet</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="41">aLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
                }</block>
                <catch pos:line="217" pos:column="17">catch <parameter_list pos:line="217" pos:column="23">(<param><decl><type><name pos:line="217" pos:column="24">ArgumentOutOfRangeException</name></type> <name pos:line="217" pos:column="52">e</name></decl></param>)</parameter_list>
                <block pos:line="218" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="219" pos:column="21">Append</name><argument_list pos:line="219" pos:column="27">(<argument><expr><name pos:line="219" pos:column="28">snippet</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="37">aLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></foreach>
            <return pos:line="222" pos:column="13">return <expr><name pos:line="222" pos:column="20">snippet</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="225" pos:column="9">private</specifier> <name pos:line="225" pos:column="17">int</name><index pos:line="225" pos:column="20">[]</index></type> <name pos:line="225" pos:column="23">CalculateStartAndEndLine</name><parameter_list pos:line="225" pos:column="47">()</parameter_list>
        <block pos:line="226" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="227" pos:column="13">var</name></type> <name pos:line="227" pos:column="17">resultLines</name> <init pos:line="227" pos:column="29">= <expr><call><name><name pos:line="227" pos:column="31">highlightRaw</name><op:operator pos:line="227" pos:column="43">.</op:operator><name pos:line="227" pos:column="44">Split</name></name><argument_list pos:line="227" pos:column="49">(<argument><expr><lit:literal type="char" pos:line="227" pos:column="50">'\n'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="227" pos:column="55">.</op:operator><call><name pos:line="227" pos:column="56">Where</name><argument_list pos:line="227" pos:column="61">(<argument><expr><lambda><name pos:line="227" pos:column="62">n</name> <op:operator pos:line="227" pos:column="64">=&gt;</op:operator> <op:operator pos:line="227" pos:column="67">!</op:operator><call><name><name pos:line="227" pos:column="68">string</name><op:operator pos:line="227" pos:column="74">.</op:operator><name pos:line="227" pos:column="75">IsNullOrWhiteSpace</name></name><argument_list pos:line="227" pos:column="93">(<argument><expr><name pos:line="227" pos:column="94">n</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="227" pos:column="97">.</op:operator><call><name pos:line="227" pos:column="98">ToList</name><argument_list pos:line="227" pos:column="104">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="228" pos:column="13">var</name></type> <name pos:line="228" pos:column="17">allLines</name> <init pos:line="228" pos:column="26">= <expr><call><name><name pos:line="228" pos:column="28">File</name><op:operator pos:line="228" pos:column="32">.</op:operator><name pos:line="228" pos:column="33">ReadAllLines</name></name><argument_list pos:line="228" pos:column="45">(<argument><expr><name><name pos:line="228" pos:column="46">ProgramElement</name><op:operator pos:line="228" pos:column="60">.</op:operator><name pos:line="228" pos:column="61">FullFilePath</name></name></expr></argument>)</argument_list></call><op:operator pos:line="228" pos:column="74">.</op:operator><call><name pos:line="228" pos:column="75">ToList</name><argument_list pos:line="228" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="229" pos:column="13">var</name></type> <name pos:line="229" pos:column="17">lineCount</name> <init pos:line="229" pos:column="27">= <expr><call><name><name pos:line="229" pos:column="29">resultLines</name><op:operator pos:line="229" pos:column="40">.</op:operator><name pos:line="229" pos:column="41">Count</name></name><argument_list pos:line="229" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="230" pos:column="13">int</name></type> <name pos:line="230" pos:column="17">start</name></decl>;</decl_stmt>
            <for pos:line="231" pos:column="13">for (<init><expr><name pos:line="231" pos:column="18">start</name> <op:operator pos:line="231" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="231" pos:column="26">0</lit:literal></expr>;</init> <condition><expr><op:operator pos:line="231" pos:column="29">!</op:operator><call><name pos:line="231" pos:column="30">AreAllLinesSame</name><argument_list pos:line="231" pos:column="45">(<argument><expr><name pos:line="231" pos:column="46">resultLines</name></expr></argument>, <argument><expr><call><name><name pos:line="231" pos:column="59">allLines</name><op:operator pos:line="231" pos:column="67">.</op:operator><name pos:line="231" pos:column="68">GetRange</name></name><argument_list pos:line="231" pos:column="76">(<argument><expr><name pos:line="231" pos:column="77">start</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="84">lineCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="231" pos:column="97">start</name> <op:operator pos:line="231" pos:column="103">++</op:operator></expr></incr>)<empty_stmt pos:line="231" pos:column="106">;</empty_stmt></for>
            <return pos:line="232" pos:column="13">return <expr><op:operator pos:line="232" pos:column="20">new</op:operator> <index pos:line="232" pos:column="24">[]</index><block pos:line="232" pos:column="26">{<expr><name pos:line="232" pos:column="27">start</name></expr><op:operator pos:line="232" pos:column="32">,</op:operator> <expr><name pos:line="232" pos:column="34">start</name> <op:operator pos:line="232" pos:column="40">+</op:operator> <name pos:line="232" pos:column="42">lineCount</name> <op:operator pos:line="232" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="232" pos:column="54">1</lit:literal></expr>}</block></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="235" pos:column="9">private</specifier> <name pos:line="235" pos:column="17">bool</name></type> <name pos:line="235" pos:column="22">AreAllLinesSame</name><parameter_list pos:line="235" pos:column="37">(<param><decl><type><name><name pos:line="235" pos:column="38">IEnumerable</name><argument_list pos:line="235" pos:column="49">&lt;<argument><name pos:line="235" pos:column="50">string</name></argument>&gt;</argument_list></name></type> <name pos:line="235" pos:column="58">lines1</name></decl></param>, <param><decl><type><name><name pos:line="235" pos:column="66">IEnumerable</name><argument_list pos:line="235" pos:column="77">&lt;<argument><name pos:line="235" pos:column="78">string</name></argument>&gt;</argument_list></name></type> <name pos:line="235" pos:column="86">lines2</name></decl></param>)</parameter_list>
        <block pos:line="236" pos:column="9">{
            <expr_stmt><expr><name pos:line="237" pos:column="13">lines1</name> <op:operator pos:line="237" pos:column="20">=</op:operator> <call><name><name pos:line="237" pos:column="22">lines1</name><op:operator pos:line="237" pos:column="28">.</op:operator><name pos:line="237" pos:column="29">ToArray</name></name><argument_list pos:line="237" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="238" pos:column="13">lines2</name> <op:operator pos:line="238" pos:column="20">=</op:operator> <call><name><name pos:line="238" pos:column="22">lines2</name><op:operator pos:line="238" pos:column="28">.</op:operator><name pos:line="238" pos:column="29">ToArray</name></name><argument_list pos:line="238" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="239" pos:column="13">if <condition pos:line="239" pos:column="16">(<expr><call><name><name pos:line="239" pos:column="17">lines1</name><op:operator pos:line="239" pos:column="23">.</op:operator><name pos:line="239" pos:column="24">Count</name></name><argument_list pos:line="239" pos:column="29">()</argument_list></call> <op:operator pos:line="239" pos:column="32">==</op:operator> <call><name><name pos:line="239" pos:column="35">lines2</name><op:operator pos:line="239" pos:column="41">.</op:operator><name pos:line="239" pos:column="42">Count</name></name><argument_list pos:line="239" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="239" pos:column="50">
            <block pos:line="240" pos:column="13">{
                <for pos:line="241" pos:column="17">for (<init><decl><type><name pos:line="241" pos:column="22">int</name></type> <name pos:line="241" pos:column="26">i</name> <init pos:line="241" pos:column="28">= <expr><lit:literal type="number" pos:line="241" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="241" pos:column="33">i</name> <op:operator pos:line="241" pos:column="35">&lt;</op:operator> <call><name><name pos:line="241" pos:column="37">lines1</name><op:operator pos:line="241" pos:column="43">.</op:operator><name pos:line="241" pos:column="44">Count</name></name><argument_list pos:line="241" pos:column="49">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="241" pos:column="53">i</name><op:operator pos:line="241" pos:column="54">++</op:operator></expr></incr>)
                <block pos:line="242" pos:column="17">{
                    <if pos:line="243" pos:column="21">if <condition pos:line="243" pos:column="24">(<expr><op:operator pos:line="243" pos:column="25">!</op:operator><call><name><name pos:line="243" pos:column="26">lines1</name><op:operator pos:line="243" pos:column="32">.</op:operator><name pos:line="243" pos:column="33">ElementAt</name></name><argument_list pos:line="243" pos:column="42">(<argument><expr><name pos:line="243" pos:column="43">i</name></expr></argument>)</argument_list></call><op:operator pos:line="243" pos:column="45">.</op:operator><call><name pos:line="243" pos:column="46">Trim</name><argument_list pos:line="243" pos:column="50">()</argument_list></call><op:operator pos:line="243" pos:column="52">.</op:operator><call><name pos:line="243" pos:column="53">Equals</name><argument_list pos:line="243" pos:column="59">(<argument><expr><call><name><name pos:line="243" pos:column="60">lines2</name><op:operator pos:line="243" pos:column="66">.</op:operator><name pos:line="243" pos:column="67">ElementAt</name></name><argument_list pos:line="243" pos:column="76">(<argument><expr><name pos:line="243" pos:column="77">i</name></expr></argument>)</argument_list></call><op:operator pos:line="243" pos:column="79">.</op:operator><call><name pos:line="243" pos:column="80">Trim</name><argument_list pos:line="243" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="243" pos:column="88">
                        <return pos:line="244" pos:column="25">return <expr><lit:literal type="boolean" pos:line="244" pos:column="32">false</lit:literal></expr>;</return></then></if>
                }</block></for>
                <return pos:line="246" pos:column="17">return <expr><lit:literal type="boolean" pos:line="246" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then></if>
            <return pos:line="248" pos:column="13">return <expr><lit:literal type="boolean" pos:line="248" pos:column="20">false</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="251" pos:column="9">private</specifier> <specifier pos:line="251" pos:column="17">static</specifier> <name><name pos:line="251" pos:column="24">List</name><argument_list pos:line="251" pos:column="28">&lt;<argument><name pos:line="251" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="251" pos:column="37">StandardizeLeadingWhitespace</name><parameter_list pos:line="251" pos:column="65">(<param><decl><type><name><name pos:line="251" pos:column="66">List</name><argument_list pos:line="251" pos:column="70">&lt;<argument><name pos:line="251" pos:column="71">string</name></argument>&gt;</argument_list></name></type> <name pos:line="251" pos:column="79">lines</name></decl></param>, <param><decl><type><name pos:line="251" pos:column="86">int</name></type> <name pos:line="251" pos:column="90">numLines</name></decl></param>)</parameter_list>
        <block pos:line="252" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="253" pos:column="13">var</name></type> <name pos:line="253" pos:column="17">newLines</name> <init pos:line="253" pos:column="26">= <expr><op:operator pos:line="253" pos:column="28">new</op:operator> <call><name><name pos:line="253" pos:column="32">List</name><argument_list pos:line="253" pos:column="36">&lt;<argument><name pos:line="253" pos:column="37">string</name></argument>&gt;</argument_list></name><argument_list pos:line="253" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="254" pos:column="13">int</name></type> <name pos:line="254" pos:column="17">count</name> <init pos:line="254" pos:column="23">= <expr><lit:literal type="number" pos:line="254" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
            <foreach pos:line="255" pos:column="13">foreach (<init><decl><type><name pos:line="255" pos:column="22">var</name></type> <name pos:line="255" pos:column="26">aLine</name> <range pos:line="255" pos:column="32">in <expr><name pos:line="255" pos:column="35">lines</name></expr></range></decl></init>)
            <block pos:line="256" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="257" pos:column="17">var</name></type> <name pos:line="257" pos:column="21">line</name> <init pos:line="257" pos:column="26">= <expr><name pos:line="257" pos:column="28">aLine</name></expr></init></decl>;</decl_stmt>
                <if pos:line="258" pos:column="17">if <condition pos:line="258" pos:column="20">(<expr><op:operator pos:line="258" pos:column="21">!</op:operator><call><name><name pos:line="258" pos:column="22">line</name><op:operator pos:line="258" pos:column="26">.</op:operator><name pos:line="258" pos:column="27">Trim</name></name><argument_list pos:line="258" pos:column="31">()</argument_list></call><op:operator pos:line="258" pos:column="33">.</op:operator><call><name pos:line="258" pos:column="34">Equals</name><argument_list pos:line="258" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="258" pos:column="41">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="258" pos:column="45">
                <block pos:line="259" pos:column="17">{
                    <while pos:line="260" pos:column="21">while <condition pos:line="260" pos:column="27">(<expr><call><name><name pos:line="260" pos:column="28">line</name><op:operator pos:line="260" pos:column="32">.</op:operator><name pos:line="260" pos:column="33">StartsWith</name></name><argument_list pos:line="260" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="260" pos:column="44">" "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="260" pos:column="49">||</op:operator> <call><name><name pos:line="260" pos:column="52">line</name><op:operator pos:line="260" pos:column="56">.</op:operator><name pos:line="260" pos:column="57">StartsWith</name></name><argument_list pos:line="260" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="260" pos:column="68">"\t"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition>
                    <block pos:line="261" pos:column="21">{
                        <if pos:line="262" pos:column="25">if <condition pos:line="262" pos:column="28">(<expr><call><name><name pos:line="262" pos:column="29">line</name><op:operator pos:line="262" pos:column="33">.</op:operator><name pos:line="262" pos:column="34">StartsWith</name></name><argument_list pos:line="262" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="45">" "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="262" pos:column="50">
                            <expr_stmt><expr><name pos:line="263" pos:column="29">count</name><op:operator pos:line="263" pos:column="34">++</op:operator></expr>;</expr_stmt></then>
                        <else pos:line="264" pos:column="25">else
                            <expr_stmt><expr><name pos:line="265" pos:column="29">count</name> <op:operator pos:line="265" pos:column="35">=</op:operator> <name pos:line="265" pos:column="37">count</name> <op:operator pos:line="265" pos:column="43">+</op:operator> <name pos:line="265" pos:column="45">TAB</name></expr>;</expr_stmt></else></if>
                        <expr_stmt><expr><name pos:line="266" pos:column="25">line</name> <op:operator pos:line="266" pos:column="30">=</op:operator> <call><name><name pos:line="266" pos:column="32">line</name><op:operator pos:line="266" pos:column="36">.</op:operator><name pos:line="266" pos:column="37">Substring</name></name><argument_list pos:line="266" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="266" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>
                    <decl_stmt><decl><type><name pos:line="268" pos:column="21">string</name></type> <name pos:line="268" pos:column="28">newLine</name> <init pos:line="268" pos:column="36">= <expr><lit:literal type="string" pos:line="268" pos:column="38">""</lit:literal></expr></init></decl>;</decl_stmt>
                    <for pos:line="269" pos:column="21">for (<init><decl><type><name pos:line="269" pos:column="26">int</name></type> <name pos:line="269" pos:column="30">i</name> <init pos:line="269" pos:column="32">= <expr><lit:literal type="number" pos:line="269" pos:column="34">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="269" pos:column="37">i</name> <op:operator pos:line="269" pos:column="39">&lt;</op:operator> <name pos:line="269" pos:column="41">count</name></expr>;</condition> <incr><expr><name pos:line="269" pos:column="48">i</name><op:operator pos:line="269" pos:column="49">++</op:operator></expr></incr>)
                        <expr_stmt><expr><name pos:line="270" pos:column="25">newLine</name> <op:operator pos:line="270" pos:column="33">+=</op:operator> <lit:literal type="string" pos:line="270" pos:column="36">" "</lit:literal></expr>;</expr_stmt></for>
                    <expr_stmt><expr><name pos:line="271" pos:column="21">newLine</name> <op:operator pos:line="271" pos:column="29">+=</op:operator> <name pos:line="271" pos:column="32">line</name> <op:operator pos:line="271" pos:column="37">+</op:operator> <lit:literal type="string" pos:line="271" pos:column="39">"\n"</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="272" pos:column="21">newLines</name><op:operator pos:line="272" pos:column="29">.</op:operator><name pos:line="272" pos:column="30">Add</name></name><argument_list pos:line="272" pos:column="33">(<argument><expr><name pos:line="272" pos:column="34">newLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="274" pos:column="17">count</name> <op:operator pos:line="274" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="274" pos:column="25">0</lit:literal></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="276" pos:column="13">return <expr><name pos:line="276" pos:column="20">newLines</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="279" pos:column="9">private</specifier> <specifier pos:line="279" pos:column="17">static</specifier> <name><name pos:line="279" pos:column="24">List</name><argument_list pos:line="279" pos:column="28">&lt;<argument><name pos:line="279" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="279" pos:column="37">ShortenSnippet</name><parameter_list pos:line="279" pos:column="51">(<param><decl><type><name pos:line="279" pos:column="52">int</name></type> <name pos:line="279" pos:column="56">numLines</name></decl></param>, <param><decl><type><name><name pos:line="279" pos:column="66">List</name><argument_list pos:line="279" pos:column="70">&lt;<argument><name pos:line="279" pos:column="71">string</name></argument>&gt;</argument_list></name></type> <name pos:line="279" pos:column="79">lines</name></decl></param>)</parameter_list>
        <block pos:line="280" pos:column="9">{
            <if pos:line="281" pos:column="13">if <condition pos:line="281" pos:column="16">(<expr><name pos:line="281" pos:column="17">numLines</name> <op:operator pos:line="281" pos:column="26">&lt;</op:operator> <name><name pos:line="281" pos:column="28">lines</name><op:operator pos:line="281" pos:column="33">.</op:operator><name pos:line="281" pos:column="34">Count</name></name></expr>)</condition><then pos:line="281" pos:column="40">
            <block pos:line="282" pos:column="13">{
                <return pos:line="283" pos:column="17">return <expr><call><name><name pos:line="283" pos:column="24">lines</name><op:operator pos:line="283" pos:column="29">.</op:operator><name pos:line="283" pos:column="30">GetRange</name></name><argument_list pos:line="283" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="283" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><name pos:line="283" pos:column="42">numLines</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else pos:line="285" pos:column="13">else
            <block pos:line="286" pos:column="13">{
                <return pos:line="287" pos:column="17">return <expr><call><name><name pos:line="287" pos:column="24">lines</name><op:operator pos:line="287" pos:column="29">.</op:operator><name pos:line="287" pos:column="30">GetRange</name></name><argument_list pos:line="287" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="287" pos:column="39">0</lit:literal></expr></argument>,<argument><expr><name><name pos:line="287" pos:column="41">lines</name><op:operator pos:line="287" pos:column="46">.</op:operator><name pos:line="287" pos:column="47">Count</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><type><specifier pos:line="291" pos:column="9">private</specifier> <specifier pos:line="291" pos:column="17">static</specifier> <name pos:line="291" pos:column="24">int</name></type> <name pos:line="291" pos:column="28">GetLeadingSpaces</name><parameter_list pos:line="291" pos:column="44">(<param><decl><type><name><name pos:line="291" pos:column="45">List</name><argument_list pos:line="291" pos:column="49">&lt;<argument><name pos:line="291" pos:column="50">string</name></argument>&gt;</argument_list></name></type> <name pos:line="291" pos:column="58">lines</name></decl></param>)</parameter_list>
        <block pos:line="292" pos:column="9">{
            <if pos:line="293" pos:column="13">if <condition pos:line="293" pos:column="16">(<expr><name><name pos:line="293" pos:column="17">lines</name><op:operator pos:line="293" pos:column="22">.</op:operator><name pos:line="293" pos:column="23">Count</name></name> <op:operator pos:line="293" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="293" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="293" pos:column="33">
            <block pos:line="294" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="295" pos:column="17">var</name></type> <name pos:line="295" pos:column="21">lastLine</name> <init pos:line="295" pos:column="30">= <expr><call><name><name pos:line="295" pos:column="32">lines</name><op:operator pos:line="295" pos:column="37">.</op:operator><name pos:line="295" pos:column="38">Last</name></name><argument_list pos:line="295" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="296" pos:column="17">if<condition pos:line="296" pos:column="19">(<expr><call><name><name pos:line="296" pos:column="20">lastLine</name><op:operator pos:line="296" pos:column="28">.</op:operator><name pos:line="296" pos:column="29">Trim</name></name><argument_list pos:line="296" pos:column="33">()</argument_list></call><op:operator pos:line="296" pos:column="35">.</op:operator><call><name pos:line="296" pos:column="36">Equals</name><argument_list pos:line="296" pos:column="42">(<argument><expr><name><name pos:line="296" pos:column="43">String</name><op:operator pos:line="296" pos:column="49">.</op:operator><name pos:line="296" pos:column="50">Empty</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="296" pos:column="57">
                <block pos:line="297" pos:column="17">{
                    <if pos:line="298" pos:column="21">if <condition pos:line="298" pos:column="24">(<expr><name><name pos:line="298" pos:column="25">lines</name><op:operator pos:line="298" pos:column="30">.</op:operator><name pos:line="298" pos:column="31">Count</name></name> <op:operator pos:line="298" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="298" pos:column="39">2</lit:literal></expr>)</condition><then pos:line="298" pos:column="41">
                    <block pos:line="299" pos:column="21">{
                        <expr_stmt><expr><name pos:line="300" pos:column="25">lastLine</name> <op:operator pos:line="300" pos:column="34">=</op:operator> <call><name><name pos:line="300" pos:column="36">lines</name><op:operator pos:line="300" pos:column="41">.</op:operator><name pos:line="300" pos:column="42">ElementAt</name></name><argument_list pos:line="300" pos:column="51">(<argument><expr><name><name pos:line="300" pos:column="52">lines</name><op:operator pos:line="300" pos:column="57">.</op:operator><name pos:line="300" pos:column="58">Count</name></name> <op:operator pos:line="300" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="300" pos:column="66">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <decl_stmt><decl><type><name pos:line="303" pos:column="17">int</name></type> <name pos:line="303" pos:column="21">count</name> <init pos:line="303" pos:column="27">= <expr><lit:literal type="number" pos:line="303" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
                <while pos:line="304" pos:column="17">while <condition pos:line="304" pos:column="23">(<expr><call><name><name pos:line="304" pos:column="24">lastLine</name><op:operator pos:line="304" pos:column="32">.</op:operator><name pos:line="304" pos:column="33">StartsWith</name></name><argument_list pos:line="304" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="44">" "</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="304" pos:column="49">||</op:operator> <call><name><name pos:line="304" pos:column="52">lastLine</name><op:operator pos:line="304" pos:column="60">.</op:operator><name pos:line="304" pos:column="61">StartsWith</name></name><argument_list pos:line="304" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="72">"\t"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block pos:line="305" pos:column="17">{
                    <if pos:line="306" pos:column="21">if <condition pos:line="306" pos:column="24">(<expr><call><name><name pos:line="306" pos:column="25">lastLine</name><op:operator pos:line="306" pos:column="33">.</op:operator><name pos:line="306" pos:column="34">StartsWith</name></name><argument_list pos:line="306" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="45">" "</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="306" pos:column="50">
                        <expr_stmt><expr><name pos:line="307" pos:column="25">count</name><op:operator pos:line="307" pos:column="30">++</op:operator></expr>;</expr_stmt></then>
                    <else pos:line="308" pos:column="21">else
                        <expr_stmt><expr><name pos:line="309" pos:column="25">count</name> <op:operator pos:line="309" pos:column="31">=</op:operator> <name pos:line="309" pos:column="33">count</name> <op:operator pos:line="309" pos:column="39">+</op:operator> <name pos:line="309" pos:column="41">TAB</name></expr>;</expr_stmt></else></if>
                    <expr_stmt><expr><name pos:line="310" pos:column="21">lastLine</name> <op:operator pos:line="310" pos:column="30">=</op:operator> <call><name><name pos:line="310" pos:column="32">lastLine</name><op:operator pos:line="310" pos:column="40">.</op:operator><name pos:line="310" pos:column="41">Substring</name></name><argument_list pos:line="310" pos:column="50">(<argument><expr><lit:literal type="number" pos:line="310" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <return pos:line="312" pos:column="17">return <expr><name pos:line="312" pos:column="24">count</name></expr>;</return>
            }</block></then></if>
            <return pos:line="314" pos:column="13">return <expr><lit:literal type="number" pos:line="314" pos:column="20">0</lit:literal></expr>;</return>
        }</block></function>
           
        <function><type><specifier pos:line="317" pos:column="9">private</specifier> <specifier pos:line="317" pos:column="17">static</specifier> <name pos:line="317" pos:column="24">void</name></type> <name pos:line="317" pos:column="29">Append</name><parameter_list pos:line="317" pos:column="35">(<param><decl><type><name pos:line="317" pos:column="36">StringBuilder</name></type> <name pos:line="317" pos:column="50">snippet</name></decl></param>, <param><decl><type><name pos:line="317" pos:column="59">string</name></type> <name pos:line="317" pos:column="66">p</name></decl></param>)</parameter_list>
        <block pos:line="318" pos:column="9">{
            <if pos:line="319" pos:column="13">if <condition pos:line="319" pos:column="16">(<expr><name><name pos:line="319" pos:column="17">p</name><op:operator pos:line="319" pos:column="18">.</op:operator><name pos:line="319" pos:column="19">Length</name></name> <op:operator pos:line="319" pos:column="26">&lt;</op:operator> <name pos:line="319" pos:column="28">MAX_SNIPPET_LENGTH</name></expr>)</condition><then pos:line="319" pos:column="47">
                <expr_stmt><expr><call><name><name pos:line="320" pos:column="17">snippet</name><op:operator pos:line="320" pos:column="24">.</op:operator><name pos:line="320" pos:column="25">Append</name></name><argument_list pos:line="320" pos:column="31">(<argument><expr><name pos:line="320" pos:column="32">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="321" pos:column="13">else
                <expr_stmt><expr><call><name><name pos:line="322" pos:column="17">snippet</name><op:operator pos:line="322" pos:column="24">.</op:operator><name pos:line="322" pos:column="25">Append</name></name><argument_list pos:line="322" pos:column="31">(<argument><expr><call><name><name pos:line="322" pos:column="32">p</name><op:operator pos:line="322" pos:column="33">.</op:operator><name pos:line="322" pos:column="34">Substring</name></name><argument_list pos:line="322" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="322" pos:column="44">0</lit:literal></expr></argument>,<argument><expr><name pos:line="322" pos:column="46">MAX_SNIPPET_LENGTH</name></expr></argument>)</argument_list></call><op:operator pos:line="322" pos:column="65">+</op:operator><lit:literal type="string" pos:line="322" pos:column="66">"..."</lit:literal><op:operator pos:line="322" pos:column="71">+</op:operator><lit:literal type="string" pos:line="322" pos:column="72">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="325" pos:column="9">public</specifier> <name pos:line="325" pos:column="16">string</name></type> <name pos:line="325" pos:column="23">FileName</name>
        <block pos:line="326" pos:column="9">{
            <function><name pos:line="327" pos:column="13">get</name> <block pos:line="327" pos:column="17">{ <return pos:line="327" pos:column="19">return <expr><call><name><name pos:line="327" pos:column="26">Path</name><op:operator pos:line="327" pos:column="30">.</op:operator><name pos:line="327" pos:column="31">GetFileName</name></name><argument_list pos:line="327" pos:column="42">(<argument><expr><name><name pos:line="327" pos:column="43">ProgramElement</name><op:operator pos:line="327" pos:column="57">.</op:operator><name pos:line="327" pos:column="58">FullFilePath</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="330" pos:column="9">public</specifier> <name pos:line="330" pos:column="16">string</name></type> <name pos:line="330" pos:column="23">Parent</name>
        <block pos:line="331" pos:column="9">{
            <function><name pos:line="332" pos:column="13">get</name>
            <block pos:line="333" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="334" pos:column="17">var</name></type> <name pos:line="334" pos:column="21">method</name> <init pos:line="334" pos:column="28">= <expr><name pos:line="334" pos:column="30">ProgramElement</name> <op:operator pos:line="334" pos:column="45">as</op:operator> <name pos:line="334" pos:column="48">MethodElement</name></expr></init></decl>;</decl_stmt>
                <return pos:line="335" pos:column="17">return <expr><name pos:line="335" pos:column="24">method</name> <op:operator pos:line="335" pos:column="31">!=</op:operator> <name pos:line="335" pos:column="34">null</name> <op:operator pos:line="335" pos:column="39">?</op:operator> <name><name pos:line="335" pos:column="41">method</name><op:operator pos:line="335" pos:column="47">.</op:operator><name pos:line="335" pos:column="48">ClassName</name></name> <op:operator pos:line="335" pos:column="58">:</op:operator> <name><name pos:line="335" pos:column="60">String</name><op:operator pos:line="335" pos:column="66">.</op:operator><name pos:line="335" pos:column="67">Empty</name></name></expr>;</return>
            }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="339" pos:column="9">public</specifier> <name pos:line="339" pos:column="16">string</name></type> <name pos:line="339" pos:column="23">Name</name>
        <block pos:line="340" pos:column="9">{
            <function><name pos:line="341" pos:column="13">get</name> <block pos:line="341" pos:column="17">{ <return pos:line="341" pos:column="19">return <expr><name><name pos:line="341" pos:column="26">ProgramElement</name><op:operator pos:line="341" pos:column="40">.</op:operator><name pos:line="341" pos:column="41">Name</name></name></expr>;</return> }</block></function>
        }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="344" pos:column="9">public</specifier> <name pos:line="344" pos:column="16">int</name><index pos:line="344" pos:column="19">[]</index></type> <name pos:line="344" pos:column="22">HighlightOffsets</name> <block pos:line="344" pos:column="39">{ <function_decl><specifier pos:line="344" pos:column="41">private</specifier> <name pos:line="344" pos:column="49">get</name>;</function_decl> <function_decl><name pos:line="344" pos:column="54">set</name>;</function_decl> }</block></decl></decl_stmt>


        <function><type><specifier pos:line="347" pos:column="9">private</specifier> <specifier pos:line="347" pos:column="17">static</specifier> <name pos:line="347" pos:column="24">string</name></type> <name pos:line="347" pos:column="31">PrettyPrintXElement</name><parameter_list pos:line="347" pos:column="50">(<param><decl><type><name pos:line="347" pos:column="51">String</name></type> <name pos:line="347" pos:column="58">source</name></decl></param>, <param><decl><type><name pos:line="347" pos:column="66">int</name></type> <name pos:line="347" pos:column="70">numLines</name></decl></param>)</parameter_list>
        <block pos:line="348" pos:column="9">{
            <try pos:line="349" pos:column="13">try
            <block pos:line="350" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="351" pos:column="17">var</name></type> <name pos:line="351" pos:column="21">prettyPrint</name> <init pos:line="351" pos:column="33">= <expr><name><name pos:line="351" pos:column="35">String</name><op:operator pos:line="351" pos:column="41">.</op:operator><name pos:line="351" pos:column="42">Empty</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="352" pos:column="17">var</name></type> <name pos:line="352" pos:column="21">doc</name> <init pos:line="352" pos:column="25">= <expr><call><name><name pos:line="352" pos:column="27">XDocument</name><op:operator pos:line="352" pos:column="36">.</op:operator><name pos:line="352" pos:column="37">Parse</name></name><argument_list pos:line="352" pos:column="42">(<argument><expr><name pos:line="352" pos:column="43">source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="353" pos:column="17">prettyPrint</name> <op:operator pos:line="353" pos:column="29">=</op:operator> <call><name><name pos:line="353" pos:column="31">doc</name><op:operator pos:line="353" pos:column="34">.</op:operator><name pos:line="353" pos:column="35">ToString</name></name><argument_list pos:line="353" pos:column="43">()</argument_list></call></expr>;</expr_stmt>               
                <return pos:line="354" pos:column="17">return <expr><name pos:line="354" pos:column="24">prettyPrint</name></expr>;</return>
            }</block>
            <catch pos:line="356" pos:column="13">catch <parameter_list pos:line="356" pos:column="19">(<param><decl><type><name pos:line="356" pos:column="20">Exception</name></type> <name pos:line="356" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="357" pos:column="13">{                
                <return pos:line="358" pos:column="17">return <expr><name pos:line="358" pos:column="24">source</name></expr>;</return>
            }</block></catch></try>
        }</block></function>
    }</block></decl>
<decl/></enum>}</block></namespace>
</unit>
