<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Indexer\Indexer\Metrics\QueryMetrics.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name><name pos:line="1" pos:column="7">Sando</name><op:operator pos:line="1" pos:column="12">.</op:operator><name pos:line="1" pos:column="13">ExtensionContracts</name><op:operator pos:line="1" pos:column="31">.</op:operator><name pos:line="1" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="2" pos:column="1">using <name pos:line="2" pos:column="7">System</name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">Generic</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name><op:operator pos:line="6" pos:column="18">.</op:operator><name pos:line="6" pos:column="19">RegularExpressions</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Indexer</name><op:operator pos:line="8" pos:column="24">.</op:operator><name pos:line="8" pos:column="25">Searching</name><op:operator pos:line="8" pos:column="34">.</op:operator><name pos:line="8" pos:column="35">Metrics</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> <specifier pos:line="10" pos:column="12">static</specifier> class <name pos:line="10" pos:column="25">QueryMetrics</name>
    <block pos:line="11" pos:column="5">{
        <constructor><specifier pos:line="12" pos:column="9">static</specifier> <name pos:line="12" pos:column="16">QueryMetrics</name><parameter_list pos:line="12" pos:column="28">()</parameter_list>
        <block pos:line="13" pos:column="9">{
            <expr_stmt><expr><name pos:line="14" pos:column="13">SavedQuery</name> <op:operator pos:line="14" pos:column="24">=</op:operator> <name><name pos:line="14" pos:column="26">String</name><op:operator pos:line="14" pos:column="32">.</op:operator><name pos:line="14" pos:column="33">Empty</name></name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="17" pos:column="9">public</specifier> <specifier pos:line="17" pos:column="16">static</specifier> <name pos:line="17" pos:column="23">QueryTermTypeList</name></type> <name pos:line="17" pos:column="41">ExamineQuery</name><parameter_list pos:line="17" pos:column="53">(<param><decl><type><name pos:line="17" pos:column="54">string</name></type> <name pos:line="17" pos:column="61">query</name></decl></param>)</parameter_list>
        <block pos:line="18" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">string</name><index pos:line="19" pos:column="19">[]</index></type> <name pos:line="19" pos:column="22">terms</name> <init pos:line="19" pos:column="28">= <expr><call><name><name pos:line="19" pos:column="30">query</name><op:operator pos:line="19" pos:column="35">.</op:operator><name pos:line="19" pos:column="36">Split</name></name><argument_list pos:line="19" pos:column="41">(<argument><expr><lit:literal type="char" pos:line="19" pos:column="42">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">QueryTermTypeList</name></type> <name pos:line="20" pos:column="31">queryTypes</name> <init pos:line="20" pos:column="42">= <expr><op:operator pos:line="20" pos:column="44">new</op:operator> <call><name pos:line="20" pos:column="48">QueryTermTypeList</name><argument_list pos:line="20" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">bool</name></type> <name pos:line="21" pos:column="18">quotesOn</name> <init pos:line="21" pos:column="27">= <expr><lit:literal type="boolean" pos:line="21" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
            <for pos:line="22" pos:column="13">for (<init><decl><type><name pos:line="22" pos:column="18">int</name></type> <name pos:line="22" pos:column="22">i</name> <init pos:line="22" pos:column="24">= <expr><lit:literal type="number" pos:line="22" pos:column="26">0</lit:literal></expr></init><op:operator pos:line="22" pos:column="27">,</op:operator> <name pos:line="22" pos:column="29">j</name> <init pos:line="22" pos:column="31">= <expr><lit:literal type="number" pos:line="22" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="22" pos:column="36">i</name> <op:operator pos:line="22" pos:column="38">&lt;</op:operator> <name><name pos:line="22" pos:column="40">terms</name><op:operator pos:line="22" pos:column="45">.</op:operator><name pos:line="22" pos:column="46">Length</name></name></expr>;</condition> <incr><expr><name pos:line="22" pos:column="54">i</name><op:operator pos:line="22" pos:column="55">++</op:operator></expr></incr>)
            <block pos:line="23" pos:column="13">{
                <if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">quotesOn</name></expr>)</condition><then pos:line="24" pos:column="30">
                <block pos:line="25" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="26" pos:column="21">queryTypes</name><index pos:line="26" pos:column="31">[<expr><name pos:line="26" pos:column="32">j</name></expr>]</index></name> <op:operator pos:line="26" pos:column="35">|=</op:operator> <name><name pos:line="26" pos:column="38">QueryTermType</name><op:operator pos:line="26" pos:column="51">.</op:operator><name pos:line="26" pos:column="52">Quoted</name></name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="28" pos:column="17">else
                <block pos:line="29" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="30" pos:column="21">queryTypes</name><index pos:line="30" pos:column="31">[<expr><name pos:line="30" pos:column="32">j</name></expr>]</index></name> <op:operator pos:line="30" pos:column="35">=</op:operator> <name><name pos:line="30" pos:column="37">QueryTermType</name><op:operator pos:line="30" pos:column="50">.</op:operator><name pos:line="30" pos:column="51">None</name></name></expr>;</expr_stmt>
                }</block></else></if>

                <if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name><name pos:line="33" pos:column="21">terms</name><index pos:line="33" pos:column="26">[<expr><name pos:line="33" pos:column="27">i</name></expr>]</index></name> <op:operator pos:line="33" pos:column="30">==</op:operator> <lit:literal type="string" pos:line="33" pos:column="33">"-"</lit:literal></expr>)</condition><then pos:line="33" pos:column="37">
                <block pos:line="34" pos:column="17">{
                    <expr_stmt><expr><name><name pos:line="35" pos:column="21">queryTypes</name><index pos:line="35" pos:column="31">[<expr><name pos:line="35" pos:column="32">j</name><op:operator pos:line="35" pos:column="33">+</op:operator><lit:literal type="number" pos:line="35" pos:column="34">1</lit:literal></expr>]</index></name> <op:operator pos:line="35" pos:column="37">|=</op:operator> <name><name pos:line="35" pos:column="40">QueryTermType</name><op:operator pos:line="35" pos:column="53">.</op:operator><name pos:line="35" pos:column="54">Minus</name></name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="37" pos:column="17">else <if pos:line="37" pos:column="22">if <condition pos:line="37" pos:column="25">(<expr><name><name pos:line="37" pos:column="26">terms</name><index pos:line="37" pos:column="31">[<expr><name pos:line="37" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="37" pos:column="35">==</op:operator> <lit:literal type="string" pos:line="37" pos:column="38">"\""</lit:literal></expr>)</condition><then pos:line="37" pos:column="43">
                <block pos:line="38" pos:column="17">{
                    <expr_stmt><expr><name pos:line="39" pos:column="21">quotesOn</name> <op:operator pos:line="39" pos:column="30">=</op:operator> <op:operator pos:line="39" pos:column="32">!</op:operator><name pos:line="39" pos:column="33">quotesOn</name></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="41" pos:column="17">else
                <block pos:line="42" pos:column="17">{
                    <if pos:line="43" pos:column="21">if <condition pos:line="43" pos:column="24">(<expr><name><name pos:line="43" pos:column="25">terms</name><index pos:line="43" pos:column="30">[<expr><name pos:line="43" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="43" pos:column="33">.</op:operator><call><name pos:line="43" pos:column="34">StartsWith</name><argument_list pos:line="43" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="45">"-"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="43" pos:column="50">
                    <block pos:line="44" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="45" pos:column="25">queryTypes</name><index pos:line="45" pos:column="35">[<expr><name pos:line="45" pos:column="36">j</name></expr>]</index></name> <op:operator pos:line="45" pos:column="39">|=</op:operator> <name><name pos:line="45" pos:column="42">QueryTermType</name><op:operator pos:line="45" pos:column="55">.</op:operator><name pos:line="45" pos:column="56">Minus</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="47" pos:column="21">if <condition pos:line="47" pos:column="24">(<expr><name><name pos:line="47" pos:column="25">terms</name><index pos:line="47" pos:column="30">[<expr><name pos:line="47" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="47" pos:column="33">.</op:operator><call><name pos:line="47" pos:column="34">StartsWith</name><argument_list pos:line="47" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="45">"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="47" pos:column="51">
                    <block pos:line="48" pos:column="21">{
                        <expr_stmt><expr><name pos:line="49" pos:column="25">quotesOn</name> <op:operator pos:line="49" pos:column="34">=</op:operator> <op:operator pos:line="49" pos:column="36">!</op:operator><name pos:line="49" pos:column="37">quotesOn</name></expr>;</expr_stmt>
                        <if pos:line="50" pos:column="25">if <condition pos:line="50" pos:column="28">(<expr><name pos:line="50" pos:column="29">quotesOn</name></expr>)</condition><then pos:line="50" pos:column="38">
                        <block pos:line="51" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="52" pos:column="29">queryTypes</name><index pos:line="52" pos:column="39">[<expr><name pos:line="52" pos:column="40">j</name></expr>]</index></name> <op:operator pos:line="52" pos:column="43">|=</op:operator> <name><name pos:line="52" pos:column="46">QueryTermType</name><op:operator pos:line="52" pos:column="59">.</op:operator><name pos:line="52" pos:column="60">Quoted</name></name></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="54" pos:column="25">else
                        <block pos:line="55" pos:column="25">{
                            <expr_stmt><expr><name><name pos:line="56" pos:column="29">queryTypes</name><index pos:line="56" pos:column="39">[<expr><name pos:line="56" pos:column="40">j</name></expr>]</index></name> <op:operator pos:line="56" pos:column="43">^=</op:operator> <name><name pos:line="56" pos:column="46">QueryTermType</name><op:operator pos:line="56" pos:column="59">.</op:operator><name pos:line="56" pos:column="60">Quoted</name></name></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then></if>
                    <if pos:line="59" pos:column="21">if <condition pos:line="59" pos:column="24">(<expr><name><name pos:line="59" pos:column="25">terms</name><index pos:line="59" pos:column="30">[<expr><name pos:line="59" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="59" pos:column="33">.</op:operator><call><name pos:line="59" pos:column="34">StartsWith</name><argument_list pos:line="59" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="45">"filetype\\:"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="59" pos:column="60">
                    <block pos:line="60" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="61" pos:column="25">queryTypes</name><index pos:line="61" pos:column="35">[<expr><name pos:line="61" pos:column="36">j</name></expr>]</index></name> <op:operator pos:line="61" pos:column="39">|=</op:operator> <name><name pos:line="61" pos:column="42">QueryTermType</name><op:operator pos:line="61" pos:column="55">.</op:operator><name pos:line="61" pos:column="56">Filetype</name></name></expr>;</expr_stmt>
                    }</block></then></if>

                    <if pos:line="64" pos:column="21">if <condition pos:line="64" pos:column="24">(<expr><name><name pos:line="64" pos:column="25">terms</name><index pos:line="64" pos:column="30">[<expr><name pos:line="64" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="64" pos:column="33">.</op:operator><call><name pos:line="64" pos:column="34">EndsWith</name><argument_list pos:line="64" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="43">"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="64" pos:column="49">
                    <block pos:line="65" pos:column="21">{
                        <expr_stmt><expr><name pos:line="66" pos:column="25">quotesOn</name> <op:operator pos:line="66" pos:column="34">=</op:operator> <op:operator pos:line="66" pos:column="36">!</op:operator><name pos:line="66" pos:column="37">quotesOn</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="68" pos:column="21">if <condition pos:line="68" pos:column="24">(<expr><call><name><name pos:line="68" pos:column="25">_patternCamel</name><op:operator pos:line="68" pos:column="38">.</op:operator><name pos:line="68" pos:column="39">IsMatch</name></name><argument_list pos:line="68" pos:column="46">(<argument><expr><name><name pos:line="68" pos:column="47">terms</name><index pos:line="68" pos:column="52">[<expr><name pos:line="68" pos:column="53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="68" pos:column="57">
                    <block pos:line="69" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="70" pos:column="25">queryTypes</name><index pos:line="70" pos:column="35">[<expr><name pos:line="70" pos:column="36">j</name></expr>]</index></name> <op:operator pos:line="70" pos:column="39">|=</op:operator> <name><name pos:line="70" pos:column="42">QueryTermType</name><op:operator pos:line="70" pos:column="55">.</op:operator><name pos:line="70" pos:column="56">Camelcase</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="72" pos:column="21">if <condition pos:line="72" pos:column="24">(<expr><call><name><name pos:line="72" pos:column="25">_patternAcronym</name><op:operator pos:line="72" pos:column="40">.</op:operator><name pos:line="72" pos:column="41">IsMatch</name></name><argument_list pos:line="72" pos:column="48">(<argument><expr><name><name pos:line="72" pos:column="49">terms</name><index pos:line="72" pos:column="54">[<expr><name pos:line="72" pos:column="55">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="72" pos:column="59">
                    <block pos:line="73" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="74" pos:column="25">queryTypes</name><index pos:line="74" pos:column="35">[<expr><name pos:line="74" pos:column="36">j</name></expr>]</index></name> <op:operator pos:line="74" pos:column="39">|=</op:operator> <name><name pos:line="74" pos:column="42">QueryTermType</name><op:operator pos:line="74" pos:column="55">.</op:operator><name pos:line="74" pos:column="56">Acronym</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if pos:line="76" pos:column="21">if <condition pos:line="76" pos:column="24">(<expr><name><name pos:line="76" pos:column="25">terms</name><index pos:line="76" pos:column="30">[<expr><name pos:line="76" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="76" pos:column="33">.</op:operator><call><name pos:line="76" pos:column="34">Contains</name><argument_list pos:line="76" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="76" pos:column="43">'_'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="48">
                    <block pos:line="77" pos:column="21">{
                        <expr_stmt><expr><name><name pos:line="78" pos:column="25">queryTypes</name><index pos:line="78" pos:column="35">[<expr><name pos:line="78" pos:column="36">j</name></expr>]</index></name> <op:operator pos:line="78" pos:column="39">|=</op:operator> <name><name pos:line="78" pos:column="42">QueryTermType</name><op:operator pos:line="78" pos:column="55">.</op:operator><name pos:line="78" pos:column="56">Underscore</name></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name pos:line="80" pos:column="21">j</name><op:operator pos:line="80" pos:column="22">++</op:operator></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></for>
            <return pos:line="83" pos:column="13">return <expr><name pos:line="83" pos:column="20">queryTypes</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="86" pos:column="9">public</specifier> <specifier pos:line="86" pos:column="16">static</specifier> <name pos:line="86" pos:column="23">string</name></type> <name pos:line="86" pos:column="30">DescribeQueryProgramElementMatch</name><parameter_list pos:line="86" pos:column="62">(<param><decl><type><name pos:line="86" pos:column="63">ProgramElement</name></type> <name pos:line="86" pos:column="78">progElem</name></decl></param>, <param><decl><type><name pos:line="86" pos:column="88">string</name></type> <name pos:line="86" pos:column="95">query</name></decl></param>)</parameter_list>
        <block pos:line="87" pos:column="9">{
            <if pos:line="88" pos:column="13">if <condition pos:line="88" pos:column="16">(<expr><call><name><name pos:line="88" pos:column="17">progElem</name><op:operator pos:line="88" pos:column="25">.</op:operator><name pos:line="88" pos:column="26">Name</name><op:operator pos:line="88" pos:column="30">.</op:operator><name pos:line="88" pos:column="31">Contains</name></name><argument_list pos:line="88" pos:column="39">(<argument><expr><name pos:line="88" pos:column="40">query</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="47">
            <block pos:line="89" pos:column="13">{
                <return pos:line="90" pos:column="17">return <expr><lit:literal type="string" pos:line="90" pos:column="24">"NameContainsQuery"</lit:literal></expr>;</return>
            }</block></then>
            <else pos:line="92" pos:column="13">else <if pos:line="92" pos:column="18">if <condition pos:line="92" pos:column="21">(<expr><call><name><name pos:line="92" pos:column="22">progElem</name><op:operator pos:line="92" pos:column="30">.</op:operator><name pos:line="92" pos:column="31">RawSource</name><op:operator pos:line="92" pos:column="40">.</op:operator><name pos:line="92" pos:column="41">Contains</name></name><argument_list pos:line="92" pos:column="49">(<argument><expr><name pos:line="92" pos:column="50">query</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="92" pos:column="57">
            <block pos:line="93" pos:column="13">{
                <return pos:line="94" pos:column="17">return <expr><lit:literal type="string" pos:line="94" pos:column="24">"RawSourceContainsQuery"</lit:literal></expr>;</return>
            }</block></then>
            <else pos:line="96" pos:column="13">else
            <block pos:line="97" pos:column="13">{
                <return pos:line="98" pos:column="17">return <expr><lit:literal type="string" pos:line="98" pos:column="24">"QueryNotInNameOrRawSource"</lit:literal></expr>;</return>
            }</block></else></if></else></if>
        }</block></function>

        <function><type><specifier pos:line="102" pos:column="9">public</specifier> <specifier pos:line="102" pos:column="16">static</specifier> <name pos:line="102" pos:column="23">double</name></type> <name pos:line="102" pos:column="30">DiceCoefficient</name><parameter_list pos:line="102" pos:column="45">(<param><decl><type><name pos:line="102" pos:column="46">string</name></type> <name pos:line="102" pos:column="53">query1</name></decl></param>, <param><decl><type><name pos:line="102" pos:column="61">string</name></type> <name pos:line="102" pos:column="68">query2</name></decl></param>)</parameter_list>
        <block pos:line="103" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">string</name><index pos:line="104" pos:column="19">[]</index></type> <name pos:line="104" pos:column="22">terms1</name> <init pos:line="104" pos:column="29">= <expr><call><name><name pos:line="104" pos:column="31">query1</name><op:operator pos:line="104" pos:column="37">.</op:operator><name pos:line="104" pos:column="38">Split</name></name><argument_list pos:line="104" pos:column="43">(<argument><expr><lit:literal type="char" pos:line="104" pos:column="44">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">string</name><index pos:line="105" pos:column="19">[]</index></type> <name pos:line="105" pos:column="22">terms2</name> <init pos:line="105" pos:column="29">= <expr><call><name><name pos:line="105" pos:column="31">query2</name><op:operator pos:line="105" pos:column="37">.</op:operator><name pos:line="105" pos:column="38">Split</name></name><argument_list pos:line="105" pos:column="43">(<argument><expr><lit:literal type="char" pos:line="105" pos:column="44">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="106" pos:column="13">terms1</name> <op:operator pos:line="106" pos:column="20">=</op:operator> <call><name><name pos:line="106" pos:column="22">terms1</name><op:operator pos:line="106" pos:column="28">.</op:operator><name pos:line="106" pos:column="29">Where</name></name><argument_list pos:line="106" pos:column="34">(<argument><expr><lambda><name pos:line="106" pos:column="35">t</name> <op:operator pos:line="106" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="106" pos:column="40">_patternChars</name><op:operator pos:line="106" pos:column="53">.</op:operator><name pos:line="106" pos:column="54">IsMatch</name></name><argument_list pos:line="106" pos:column="61">(<argument><expr><name pos:line="106" pos:column="62">t</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="106" pos:column="65">.</op:operator><call><name pos:line="106" pos:column="66">ToArray</name><argument_list pos:line="106" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="107" pos:column="13">terms2</name> <op:operator pos:line="107" pos:column="20">=</op:operator> <call><name><name pos:line="107" pos:column="22">terms2</name><op:operator pos:line="107" pos:column="28">.</op:operator><name pos:line="107" pos:column="29">Where</name></name><argument_list pos:line="107" pos:column="34">(<argument><expr><lambda><name pos:line="107" pos:column="35">t</name> <op:operator pos:line="107" pos:column="37">=&gt;</op:operator> <call><name><name pos:line="107" pos:column="40">_patternChars</name><op:operator pos:line="107" pos:column="53">.</op:operator><name pos:line="107" pos:column="54">IsMatch</name></name><argument_list pos:line="107" pos:column="61">(<argument><expr><name pos:line="107" pos:column="62">t</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="107" pos:column="65">.</op:operator><call><name pos:line="107" pos:column="66">ToArray</name><argument_list pos:line="107" pos:column="73">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="108" pos:column="13">if <condition pos:line="108" pos:column="16">(<expr><call><name><name pos:line="108" pos:column="17">terms1</name><op:operator pos:line="108" pos:column="23">.</op:operator><name pos:line="108" pos:column="24">Count</name></name><argument_list pos:line="108" pos:column="29">()</argument_list></call> <op:operator pos:line="108" pos:column="32">==</op:operator> <lit:literal type="number" pos:line="108" pos:column="35">0</lit:literal> <op:operator pos:line="108" pos:column="37">||</op:operator> <call><name><name pos:line="108" pos:column="40">terms2</name><op:operator pos:line="108" pos:column="46">.</op:operator><name pos:line="108" pos:column="47">Count</name></name><argument_list pos:line="108" pos:column="52">()</argument_list></call> <op:operator pos:line="108" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="108" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="108" pos:column="60"> <return pos:line="108" pos:column="61">return <expr><lit:literal type="number" pos:line="108" pos:column="68">0.0</lit:literal></expr>;</return></then></if>
            <return pos:line="109" pos:column="13">return <expr><op:operator pos:line="109" pos:column="20">(</op:operator><lit:literal type="number" pos:line="109" pos:column="21">2.0</lit:literal> <op:operator pos:line="109" pos:column="25">*</op:operator> <call><name><name pos:line="109" pos:column="27">terms1</name><op:operator pos:line="109" pos:column="33">.</op:operator><name pos:line="109" pos:column="34">Intersect</name></name><argument_list pos:line="109" pos:column="43">(<argument><expr><name pos:line="109" pos:column="44">terms2</name></expr></argument>)</argument_list></call><op:operator pos:line="109" pos:column="51">.</op:operator><call><name pos:line="109" pos:column="52">Count</name><argument_list pos:line="109" pos:column="57">()</argument_list></call><op:operator pos:line="109" pos:column="59">)</op:operator> <op:operator pos:line="109" pos:column="61">/</op:operator> <op:operator pos:line="109" pos:column="63">(</op:operator><call><name><name pos:line="109" pos:column="64">terms1</name><op:operator pos:line="109" pos:column="70">.</op:operator><name pos:line="109" pos:column="71">Count</name></name><argument_list pos:line="109" pos:column="76">()</argument_list></call> <op:operator pos:line="109" pos:column="79">+</op:operator> <call><name><name pos:line="109" pos:column="81">terms2</name><op:operator pos:line="109" pos:column="87">.</op:operator><name pos:line="109" pos:column="88">Count</name></name><argument_list pos:line="109" pos:column="93">()</argument_list></call><op:operator pos:line="109" pos:column="95">)</op:operator></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="112" pos:column="9">public</specifier> <specifier pos:line="112" pos:column="16">static</specifier> <name pos:line="112" pos:column="23">string</name></type> <name pos:line="112" pos:column="30">SavedQuery</name> <block pos:line="112" pos:column="41">{ <function_decl><name pos:line="112" pos:column="43">get</name>;</function_decl> <function_decl><name pos:line="112" pos:column="48">set</name>;</function_decl> }</block></decl></decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="114" pos:column="9">private</specifier> <specifier pos:line="114" pos:column="17">static</specifier> <name pos:line="114" pos:column="24">Regex</name></type> <name pos:line="114" pos:column="30">_patternChars</name> <init pos:line="114" pos:column="44">= <expr><op:operator pos:line="114" pos:column="46">new</op:operator> <call><name pos:line="114" pos:column="50">Regex</name><argument_list pos:line="114" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="56">"([a-zA-Z])"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="70">RegexOptions</name><op:operator pos:line="114" pos:column="82">.</op:operator><name pos:line="114" pos:column="83">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="115" pos:column="9">private</specifier> <specifier pos:line="115" pos:column="17">static</specifier> <name pos:line="115" pos:column="24">Regex</name></type> <name pos:line="115" pos:column="30">_patternCamel</name> <init pos:line="115" pos:column="44">= <expr><op:operator pos:line="115" pos:column="46">new</op:operator> <call><name pos:line="115" pos:column="50">Regex</name><argument_list pos:line="115" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="56">"([A-Z][a-z]+)"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="73">RegexOptions</name><op:operator pos:line="115" pos:column="85">.</op:operator><name pos:line="115" pos:column="86">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="116" pos:column="9">private</specifier> <specifier pos:line="116" pos:column="17">static</specifier> <name pos:line="116" pos:column="24">Regex</name></type> <name pos:line="116" pos:column="30">_patternAcronym</name> <init pos:line="116" pos:column="46">= <expr><op:operator pos:line="116" pos:column="48">new</op:operator> <call><name pos:line="116" pos:column="52">Regex</name><argument_list pos:line="116" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="58">"([A-Z]{3})"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="72">RegexOptions</name><op:operator pos:line="116" pos:column="84">.</op:operator><name pos:line="116" pos:column="85">Compiled</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></class>
}</block></namespace>
</unit>
