<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\QueryRefomers\QueryReformerManager.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">Sando</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Core</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">QueryRefomers</name></name>
<block pos:line="9" pos:column="1">{
    <comment type="line" pos:line="10" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="11" pos:column="5">/// This is the listener when improved terms are ready.</comment>
    <comment type="line" pos:line="12" pos:column="5">/// &lt;/summary&gt;</comment>
    <comment type="line" pos:line="13" pos:column="5">/// &lt;param name="improvedTerms"&gt;&lt;/param&gt;</comment>
    <function_decl><type><specifier pos:line="14" pos:column="5">public</specifier> <specifier pos:line="14" pos:column="12">delegate</specifier> <name pos:line="14" pos:column="21">void</name></type> <name pos:line="14" pos:column="26">ImprovedQueryReady</name><parameter_list pos:line="14" pos:column="44">(<param><decl><type><name><name pos:line="14" pos:column="45">IEnumerable</name><argument_list pos:line="14" pos:column="56">&lt;<argument><name pos:line="14" pos:column="57">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="73">improvedTerms</name></decl></param>)</parameter_list>;</function_decl>

    <class><specifier pos:line="16" pos:column="5">public</specifier> class <name pos:line="16" pos:column="18">QueryReformerManager</name> <super pos:line="16" pos:column="39">: <name pos:line="16" pos:column="41">IInitializable</name></super>
    <block pos:line="17" pos:column="5">{
       
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">private</specifier> <specifier pos:line="19" pos:column="17">readonly</specifier> <name pos:line="19" pos:column="26">DictionaryBasedSplitter</name></type> <name pos:line="19" pos:column="50">dictionary</name></decl>;</decl_stmt>
      
        <constructor><specifier pos:line="21" pos:column="9">public</specifier> <name pos:line="21" pos:column="16">QueryReformerManager</name><parameter_list pos:line="21" pos:column="36">(<param><decl><type><name pos:line="21" pos:column="37">DictionaryBasedSplitter</name></type> <name pos:line="21" pos:column="61">dictionary</name></decl></param>)</parameter_list>
        <block pos:line="22" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">this</name><op:operator pos:line="23" pos:column="17">.</op:operator><name pos:line="23" pos:column="18">dictionary</name></name> <op:operator pos:line="23" pos:column="29">=</op:operator> <name pos:line="23" pos:column="31">dictionary</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier pos:line="26" pos:column="9">public</specifier> <name pos:line="26" pos:column="16">void</name></type> <name pos:line="26" pos:column="21">Initialize</name><parameter_list pos:line="26" pos:column="31">(<param><decl><type><name pos:line="26" pos:column="32">string</name></type> <name pos:line="26" pos:column="39">nonUsedDirectory</name></decl></param>)</parameter_list>
        <block pos:line="27" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">SeSpecificThesaurus</name><op:operator pos:line="28" pos:column="32">.</op:operator><name pos:line="28" pos:column="33">GetInstance</name></name><argument_list pos:line="28" pos:column="44">()</argument_list></call><op:operator pos:line="28" pos:column="46">.</op:operator><call><name pos:line="28" pos:column="47">Initialize</name><argument_list pos:line="28" pos:column="57">(<argument><expr><name pos:line="28" pos:column="58">nonUsedDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">GeneralEnglishThesaurus</name><op:operator pos:line="29" pos:column="36">.</op:operator><name pos:line="29" pos:column="37">GetInstance</name></name><argument_list pos:line="29" pos:column="48">()</argument_list></call><op:operator pos:line="29" pos:column="50">.</op:operator><call><name pos:line="29" pos:column="51">Initialize</name><argument_list pos:line="29" pos:column="61">(<argument><expr><name pos:line="29" pos:column="62">nonUsedDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">ReformTermsAsynchronously</name><parameter_list pos:line="32" pos:column="46">(<param><decl><type><name><name pos:line="32" pos:column="47">IEnumerable</name><argument_list pos:line="32" pos:column="58">&lt;<argument><name pos:line="32" pos:column="59">String</name></argument>&gt;</argument_list></name></type> <name pos:line="32" pos:column="67">terms</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="74">ImprovedQueryReady</name></type> <name pos:line="32" pos:column="93">callback</name></decl></param>)</parameter_list>
        <block pos:line="33" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="34" pos:column="13">var</name></type> <name pos:line="34" pos:column="17">worker</name> <init pos:line="34" pos:column="24">= <expr><op:operator pos:line="34" pos:column="26">new</op:operator> <name pos:line="34" pos:column="30">BackgroundWorker</name> <block pos:line="34" pos:column="47">{ <expr><name pos:line="34" pos:column="49">WorkerReportsProgress</name> <op:operator pos:line="34" pos:column="71">=</op:operator> <lit:literal type="boolean" pos:line="34" pos:column="73">false</lit:literal></expr>, 
                <expr><name pos:line="35" pos:column="17">WorkerSupportsCancellation</name> <op:operator pos:line="35" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="35" pos:column="46">false</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">worker</name><op:operator pos:line="36" pos:column="19">.</op:operator><name pos:line="36" pos:column="20">DoWork</name></name> <op:operator pos:line="36" pos:column="27">+=</op:operator> <lambda><parameter_list pos:line="36" pos:column="30">(<param><decl><name pos:line="36" pos:column="31">sender</name></decl></param>, <param><decl><name pos:line="36" pos:column="39">args</name></decl></param>)</parameter_list> <op:operator pos:line="36" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="36" pos:column="48">callback</name><op:operator pos:line="36" pos:column="56">.</op:operator><name pos:line="36" pos:column="57">Invoke</name></name><argument_list pos:line="36" pos:column="63">(<argument><expr><call><name pos:line="36" pos:column="64">ReformTermsSynchronously</name><argument_list pos:line="36" pos:column="88">(<argument><expr><name pos:line="36" pos:column="89">terms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">worker</name><op:operator pos:line="37" pos:column="19">.</op:operator><name pos:line="37" pos:column="20">RunWorkerAsync</name></name><argument_list pos:line="37" pos:column="34">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="40" pos:column="9">public</specifier> <name><name pos:line="40" pos:column="16">IEnumerable</name><argument_list pos:line="40" pos:column="27">&lt;<argument><name pos:line="40" pos:column="28">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="44">ReformTermsSynchronously</name><parameter_list pos:line="40" pos:column="68">(<param><decl><type><name><name pos:line="40" pos:column="69">IEnumerable</name><argument_list pos:line="40" pos:column="80">&lt;<argument><name pos:line="40" pos:column="81">string</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="89">terms</name></decl></param>)</parameter_list>
        <block pos:line="41" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">termList</name> <init pos:line="42" pos:column="26">= <expr><call><name><name pos:line="42" pos:column="28">terms</name><op:operator pos:line="42" pos:column="33">.</op:operator><name pos:line="42" pos:column="34">ToList</name></name><argument_list pos:line="42" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="43" pos:column="13">if <condition pos:line="43" pos:column="16">(<expr><call><name><name pos:line="43" pos:column="17">termList</name><op:operator pos:line="43" pos:column="25">.</op:operator><name pos:line="43" pos:column="26">Any</name></name><argument_list pos:line="43" pos:column="29">()</argument_list></call></expr>)</condition><then pos:line="43" pos:column="32">
            <block pos:line="44" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="45" pos:column="17">var</name></type> <name pos:line="45" pos:column="21">builder</name> <init pos:line="45" pos:column="29">= <expr><op:operator pos:line="45" pos:column="31">new</op:operator> <call><name pos:line="45" pos:column="35">ReformedQueryBuilder</name><argument_list pos:line="45" pos:column="55">(<argument><expr><name pos:line="45" pos:column="56">dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="46" pos:column="17">foreach (<init><decl><type><name pos:line="46" pos:column="26">string</name></type> <name pos:line="46" pos:column="33">term</name> <range pos:line="46" pos:column="38">in <expr><name pos:line="46" pos:column="41">termList</name></expr></range></decl></init>)
                <block pos:line="47" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="48" pos:column="21">var</name></type> <name pos:line="48" pos:column="25">neigbors</name> <init pos:line="48" pos:column="34">= <expr><call><name pos:line="48" pos:column="36">GetNeighbors</name><argument_list pos:line="48" pos:column="48">(<argument><expr><name pos:line="48" pos:column="49">termList</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="59">term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="49" pos:column="21">builder</name><op:operator pos:line="49" pos:column="28">.</op:operator><name pos:line="49" pos:column="29">AddReformedTerms</name></name><argument_list pos:line="49" pos:column="45">(<argument><expr><call><name pos:line="49" pos:column="46">FindBetterTerms</name><argument_list pos:line="49" pos:column="61">(<argument><expr><name pos:line="49" pos:column="62">term</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="68">neigbors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
                <return pos:line="51" pos:column="17">return <expr><call><name pos:line="51" pos:column="24">GetReformedQuerySorter</name><argument_list pos:line="51" pos:column="46">()</argument_list></call><op:operator pos:line="51" pos:column="48">.</op:operator><call><name pos:line="51" pos:column="49">SortReformedQueries</name>
                    <argument_list pos:line="52" pos:column="21">(<argument><expr><call><name><name pos:line="52" pos:column="22">builder</name><op:operator pos:line="52" pos:column="29">.</op:operator><name pos:line="52" pos:column="30">GetAllPossibleReformedQueriesSoFar</name></name><argument_list pos:line="52" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="54" pos:column="13">return <expr><call><name><name pos:line="54" pos:column="20">Enumerable</name><op:operator pos:line="54" pos:column="30">.</op:operator><name><name pos:line="54" pos:column="31">Empty</name><argument_list pos:line="54" pos:column="36">&lt;<argument><name pos:line="54" pos:column="37">IReformedQuery</name></argument>&gt;</argument_list></name></name><argument_list pos:line="54" pos:column="52">()</argument_list></call></expr>;</return>
        }</block></function>



        <function><type><specifier pos:line="59" pos:column="9">private</specifier> <name pos:line="59" pos:column="17">IReformedQuerySorter</name></type> <name pos:line="59" pos:column="38">GetReformedQuerySorter</name><parameter_list pos:line="59" pos:column="60">()</parameter_list>
        <block pos:line="60" pos:column="9">{
            <return pos:line="61" pos:column="13">return <expr><call><name><name pos:line="61" pos:column="20">ReformedQuerySorters</name><op:operator pos:line="61" pos:column="40">.</op:operator><name pos:line="61" pos:column="41">GetReformedQuerySorter</name></name><argument_list pos:line="61" pos:column="63">(<argument><expr><name><name pos:line="61" pos:column="64">QuerySorterType</name><op:operator pos:line="61" pos:column="79">.</op:operator><name pos:line="61" pos:column="80">SCORE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="64" pos:column="9">private</specifier> <name><name pos:line="64" pos:column="17">IEnumerable</name><argument_list pos:line="64" pos:column="28">&lt;<argument><name pos:line="64" pos:column="29">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="64" pos:column="43">FindBetterTerms</name><parameter_list pos:line="64" pos:column="58">(<param><decl><type><name pos:line="64" pos:column="59">string</name></type> <name pos:line="64" pos:column="66">word</name></decl></param>, <param><decl><type><name><name pos:line="64" pos:column="72">IEnumerable</name><argument_list pos:line="64" pos:column="83">&lt;<argument><name pos:line="64" pos:column="84">string</name></argument>&gt;</argument_list></name></type> <name pos:line="64" pos:column="92">neigbors</name></decl></param>)</parameter_list>
        <block pos:line="65" pos:column="9">{
            <if pos:line="66" pos:column="13">if <condition pos:line="66" pos:column="16">(<expr><op:operator pos:line="66" pos:column="17">!</op:operator><call><name><name pos:line="66" pos:column="18">dictionary</name><op:operator pos:line="66" pos:column="28">.</op:operator><name pos:line="66" pos:column="29">DoesWordExist</name></name><argument_list pos:line="66" pos:column="42">(<argument><expr><name pos:line="66" pos:column="43">word</name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="49">DictionaryOption</name><op:operator pos:line="66" pos:column="65">.</op:operator><name pos:line="66" pos:column="66">IncludingStemming</name></name></expr></argument>)</argument_list></call> 
                <op:operator pos:line="67" pos:column="17">&amp;&amp;</op:operator> <op:operator pos:line="67" pos:column="20">!</op:operator><call><name><name pos:line="67" pos:column="21">word</name><op:operator pos:line="67" pos:column="25">.</op:operator><name pos:line="67" pos:column="26">IsWordQuoted</name></name><argument_list pos:line="67" pos:column="38">()</argument_list></call> <op:operator pos:line="67" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="67" pos:column="44">!</op:operator><call><name><name pos:line="67" pos:column="45">word</name><op:operator pos:line="67" pos:column="49">.</op:operator><name pos:line="67" pos:column="50">IsWordFlag</name></name><argument_list pos:line="67" pos:column="60">()</argument_list></call></expr>)</condition><then pos:line="67" pos:column="63">
            <block pos:line="68" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="69" pos:column="17">var</name></type> <name pos:line="69" pos:column="21">list</name> <init pos:line="69" pos:column="26">= <expr><op:operator pos:line="69" pos:column="28">new</op:operator> <call><name><name pos:line="69" pos:column="32">List</name><argument_list pos:line="69" pos:column="36">&lt;<argument><name pos:line="69" pos:column="37">ReformedWord</name></argument>&gt;</argument_list></name><argument_list pos:line="69" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="70" pos:column="17">list</name><op:operator pos:line="70" pos:column="21">.</op:operator><name pos:line="70" pos:column="22">AddRange</name></name><argument_list pos:line="70" pos:column="30">(<argument><expr><call><name pos:line="70" pos:column="31">FindShapeSimilarWordsInLocalDictionary</name><argument_list pos:line="70" pos:column="69">(<argument><expr><name pos:line="70" pos:column="70">word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="71" pos:column="17">list</name><op:operator pos:line="71" pos:column="21">.</op:operator><name pos:line="71" pos:column="22">AddRange</name></name><argument_list pos:line="71" pos:column="30">(<argument><expr><call><name pos:line="71" pos:column="31">FindSynonymsInDictionaries</name><argument_list pos:line="71" pos:column="57">(<argument><expr><name pos:line="71" pos:column="58">word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="72" pos:column="17">list</name><op:operator pos:line="72" pos:column="21">.</op:operator><name pos:line="72" pos:column="22">AddRange</name></name><argument_list pos:line="72" pos:column="30">(<argument><expr><call><name pos:line="72" pos:column="31">FindCoOccurredTerms</name><argument_list pos:line="72" pos:column="50">(<argument><expr><name pos:line="72" pos:column="51">word</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="57">neigbors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="73" pos:column="17">list</name> <op:operator pos:line="73" pos:column="22">=</op:operator> <call><name><name pos:line="73" pos:column="24">list</name><op:operator pos:line="73" pos:column="28">.</op:operator><name pos:line="73" pos:column="29">RemoveRedundance</name></name><argument_list pos:line="73" pos:column="45">()</argument_list></call><op:operator pos:line="73" pos:column="47">.</op:operator><call><name pos:line="73" pos:column="48">ToList</name><argument_list pos:line="73" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
                <return pos:line="74" pos:column="17">return <expr><call><name><name pos:line="74" pos:column="24">list</name><op:operator pos:line="74" pos:column="28">.</op:operator><name pos:line="74" pos:column="29">Any</name></name><argument_list pos:line="74" pos:column="32">()</argument_list></call> <op:operator pos:line="74" pos:column="35">?</op:operator> <name pos:line="74" pos:column="37">list</name> <op:operator pos:line="74" pos:column="42">:</op:operator> <call><name><name pos:line="74" pos:column="44">ToolHelpers</name><op:operator pos:line="74" pos:column="55">.</op:operator><name pos:line="74" pos:column="56">CreateNonChangedTerm</name></name><argument_list pos:line="74" pos:column="76">(<argument><expr><name pos:line="74" pos:column="77">word</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return pos:line="76" pos:column="13">return <expr><call><name><name pos:line="76" pos:column="20">ToolHelpers</name><op:operator pos:line="76" pos:column="31">.</op:operator><name pos:line="76" pos:column="32">CreateNonChangedTerm</name></name><argument_list pos:line="76" pos:column="52">(<argument><expr><name pos:line="76" pos:column="53">word</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="79" pos:column="9">private</specifier> <name><name pos:line="79" pos:column="17">IEnumerable</name><argument_list pos:line="79" pos:column="28">&lt;<argument><name pos:line="79" pos:column="29">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="79" pos:column="43">FindShapeSimilarWordsInLocalDictionary</name><parameter_list pos:line="79" pos:column="81">(<param><decl><type><name pos:line="79" pos:column="82">String</name></type> <name pos:line="79" pos:column="89">word</name></decl></param>)</parameter_list>
        <block pos:line="80" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">reformer</name> <init pos:line="81" pos:column="26">= <expr><op:operator pos:line="81" pos:column="28">new</op:operator> <call><name pos:line="81" pos:column="32">TypoCorrectionReformer</name><argument_list pos:line="81" pos:column="54">(<argument><expr><name pos:line="81" pos:column="55">dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="82" pos:column="13">return <expr><call><name><name pos:line="82" pos:column="20">reformer</name><op:operator pos:line="82" pos:column="28">.</op:operator><name pos:line="82" pos:column="29">GetReformedTarget</name></name><argument_list pos:line="82" pos:column="46">(<argument><expr><name pos:line="82" pos:column="47">word</name></expr></argument>)</argument_list></call><op:operator pos:line="82" pos:column="52">.</op:operator><call><name pos:line="82" pos:column="53">ToList</name><argument_list pos:line="82" pos:column="59">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="85" pos:column="9">private</specifier> <name><name pos:line="85" pos:column="17">IEnumerable</name><argument_list pos:line="85" pos:column="28">&lt;<argument><name pos:line="85" pos:column="29">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="85" pos:column="43">FindSynonymsInDictionaries</name><parameter_list pos:line="85" pos:column="69">(<param><decl><type><name pos:line="85" pos:column="70">String</name></type> <name pos:line="85" pos:column="77">word</name></decl></param>)</parameter_list>
        <block pos:line="86" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="87" pos:column="13">var</name></type> <name pos:line="87" pos:column="17">reformer</name> <init pos:line="87" pos:column="26">= <expr><op:operator pos:line="87" pos:column="28">new</op:operator> <call><name pos:line="87" pos:column="32">SeThesaurusWordReformer</name><argument_list pos:line="87" pos:column="55">(<argument><expr><name pos:line="87" pos:column="56">dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="88" pos:column="13">var</name></type> <name pos:line="88" pos:column="17">list</name> <init pos:line="88" pos:column="22">= <expr><call><name><name pos:line="88" pos:column="24">reformer</name><op:operator pos:line="88" pos:column="32">.</op:operator><name pos:line="88" pos:column="33">GetReformedTarget</name></name><argument_list pos:line="88" pos:column="50">(<argument><expr><name pos:line="88" pos:column="51">word</name></expr></argument>)</argument_list></call><op:operator pos:line="88" pos:column="56">.</op:operator><call><name pos:line="88" pos:column="57">ToList</name><argument_list pos:line="88" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">list</name><op:operator pos:line="89" pos:column="17">.</op:operator><name pos:line="89" pos:column="18">AddRange</name></name><argument_list pos:line="89" pos:column="26">(<argument><expr><op:operator pos:line="89" pos:column="27">new</op:operator> <call><name pos:line="89" pos:column="31">GeneralThesaurusWordReformer</name><argument_list pos:line="89" pos:column="59">(<argument><expr><name pos:line="89" pos:column="60">dictionary</name></expr></argument>)</argument_list></call><op:operator pos:line="89" pos:column="71">.</op:operator><call><name pos:line="89" pos:column="72">GetReformedTarget</name><argument_list pos:line="89" pos:column="89">(<argument><expr><name pos:line="89" pos:column="90">word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="90" pos:column="13">return <expr><name pos:line="90" pos:column="20">list</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="93" pos:column="9">private</specifier> <name><name pos:line="93" pos:column="17">IEnumerable</name><argument_list pos:line="93" pos:column="28">&lt;<argument><name pos:line="93" pos:column="29">String</name></argument>&gt;</argument_list></name></type> <name pos:line="93" pos:column="37">GetNeighbors</name><parameter_list pos:line="93" pos:column="49">(<param><decl><type><name><name pos:line="93" pos:column="50">IEnumerable</name><argument_list pos:line="93" pos:column="61">&lt;<argument><name pos:line="93" pos:column="62">String</name></argument>&gt;</argument_list></name></type> <name pos:line="93" pos:column="70">words</name></decl></param>, <param><decl><type><name pos:line="93" pos:column="77">String</name></type> <name pos:line="93" pos:column="84">target</name></decl></param>)</parameter_list>
        <block pos:line="94" pos:column="9">{
            <return pos:line="95" pos:column="13">return <expr><call><name><name pos:line="95" pos:column="20">words</name><op:operator pos:line="95" pos:column="25">.</op:operator><name pos:line="95" pos:column="26">Where</name></name><argument_list pos:line="95" pos:column="31">(<argument><expr><lambda><name pos:line="95" pos:column="32">w</name> <op:operator pos:line="95" pos:column="34">=&gt;</op:operator> <op:operator pos:line="95" pos:column="37">!</op:operator><call><name><name pos:line="95" pos:column="38">w</name><op:operator pos:line="95" pos:column="39">.</op:operator><name pos:line="95" pos:column="40">Equals</name></name><argument_list pos:line="95" pos:column="46">(<argument><expr><name pos:line="95" pos:column="47">target</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        
        <function><type><specifier pos:line="98" pos:column="9">private</specifier> <name><name pos:line="98" pos:column="17">IEnumerable</name><argument_list pos:line="98" pos:column="28">&lt;<argument><name pos:line="98" pos:column="29">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="43">FindCoOccurredTerms</name><parameter_list pos:line="98" pos:column="62">(<param><decl><type><name pos:line="98" pos:column="63">String</name></type> <name pos:line="98" pos:column="70">word</name></decl></param>, <param><decl><type><name><name pos:line="98" pos:column="76">IEnumerable</name><argument_list pos:line="98" pos:column="87">&lt;<argument><name pos:line="98" pos:column="88">String</name></argument>&gt;</argument_list></name></type> <name pos:line="98" pos:column="96">neighbors</name></decl></param>)</parameter_list>
        <block pos:line="99" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">var</name></type> <name pos:line="100" pos:column="17">reformer</name> <init pos:line="100" pos:column="26">= <expr><op:operator pos:line="100" pos:column="28">new</op:operator> <call><name pos:line="100" pos:column="32">CoOccurrenceBasedReformer</name><argument_list pos:line="100" pos:column="57">(<argument><expr><name pos:line="100" pos:column="58">dictionary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">reformer</name><op:operator pos:line="101" pos:column="21">.</op:operator><name pos:line="101" pos:column="22">SetContextWords</name></name><argument_list pos:line="101" pos:column="37">(<argument><expr><name pos:line="101" pos:column="38">neighbors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="102" pos:column="13">return <expr><call><name><name pos:line="102" pos:column="20">reformer</name><op:operator pos:line="102" pos:column="28">.</op:operator><name pos:line="102" pos:column="29">GetReformedTarget</name></name><argument_list pos:line="102" pos:column="46">(<argument><expr><name pos:line="102" pos:column="47">word</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
