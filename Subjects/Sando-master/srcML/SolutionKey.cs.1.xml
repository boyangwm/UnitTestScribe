<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\SolutionKey.cs" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/******************************************************************************
 * Copyright (c) 2011 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Jiang Zheng (ABB Group) - Initial implementation
 *****************************************************************************/</comment>
<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Diagnostics</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Contracts</name></name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name><name pos:line="14" pos:column="11">Sando</name><op:operator pos:line="14" pos:column="16">.</op:operator><name pos:line="14" pos:column="17">Core</name><op:operator pos:line="14" pos:column="21">.</op:operator><name pos:line="14" pos:column="22">Tools</name></name> <block pos:line="14" pos:column="28">{
    <comment type="line" pos:line="15" pos:column="5">/// &lt;summary&gt;</comment>
    <comment type="line" pos:line="16" pos:column="5">/// Now most likely this class would not be needed any more in SrcML.NET. Sando would maintain its own SolutionKey class.</comment>
    <comment type="line" pos:line="17" pos:column="5">/// &lt;/summary&gt;</comment>
    <class><specifier pos:line="18" pos:column="5">public</specifier> class <name pos:line="18" pos:column="18">SolutionKey</name> <block pos:line="18" pos:column="30">{
        <comment type="line" pos:line="19" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="20" pos:column="9">/// New constructor.</comment>
        <comment type="line" pos:line="21" pos:column="9">/// Removed the indexPath.</comment>
        <comment type="line" pos:line="22" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="23" pos:column="9">/// &lt;param name="solutionId"&gt;&lt;/param&gt;</comment>
        <comment type="line" pos:line="24" pos:column="9">/// &lt;param name="solutionPath"&gt;&lt;/param&gt;</comment>
        <constructor><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">SolutionKey</name><parameter_list pos:line="25" pos:column="27">(<param><decl><type><name pos:line="25" pos:column="28">Guid</name></type> <name pos:line="25" pos:column="33">solutionId</name></decl></param>, <param><decl><type><name pos:line="25" pos:column="45">string</name></type> <name pos:line="25" pos:column="52">solutionPath</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="66">{
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">Contract</name><op:operator pos:line="26" pos:column="21">.</op:operator><name pos:line="26" pos:column="22">Requires</name></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">solutionId</name> <op:operator pos:line="26" pos:column="42">!=</op:operator> <name pos:line="26" pos:column="45">null</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="26" pos:column="51">"SolutionKey:Constructor - solution id cannot be null!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Contract</name><op:operator pos:line="27" pos:column="21">.</op:operator><name pos:line="27" pos:column="22">Requires</name></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">solutionId</name> <op:operator pos:line="27" pos:column="42">!=</op:operator> <name><name pos:line="27" pos:column="45">Guid</name><op:operator pos:line="27" pos:column="49">.</op:operator><name pos:line="27" pos:column="50">Empty</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="27" pos:column="57">"SolutionKey:Constructor - solution id cannot be an empty guid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="28" pos:column="13">Contract</name><op:operator pos:line="28" pos:column="21">.</op:operator><name pos:line="28" pos:column="22">Requires</name></name><argument_list pos:line="28" pos:column="30">(<argument><expr><op:operator pos:line="28" pos:column="31">!</op:operator><call><name><name pos:line="28" pos:column="32">String</name><op:operator pos:line="28" pos:column="38">.</op:operator><name pos:line="28" pos:column="39">IsNullOrWhiteSpace</name></name><argument_list pos:line="28" pos:column="57">(<argument><expr><name pos:line="28" pos:column="58">solutionPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="28" pos:column="73">"SolutionKey:Constructor - solution path cannot be null or an empty string!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name pos:line="30" pos:column="13">this</name><op:operator pos:line="30" pos:column="17">.</op:operator><name pos:line="30" pos:column="18">solutionId</name></name> <op:operator pos:line="30" pos:column="29">=</op:operator> <name pos:line="30" pos:column="31">solutionId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="31" pos:column="13">this</name><op:operator pos:line="31" pos:column="17">.</op:operator><name pos:line="31" pos:column="18">solutionPath</name></name> <op:operator pos:line="31" pos:column="31">=</op:operator> <name pos:line="31" pos:column="33">solutionPath</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="block" pos:line="34" pos:column="9">/* //// Original implementation
        public SolutionKey(Guid solutionId, string solutionPath, string indexPath)
        {
            Contract.Requires(solutionId != null, "SolutionKey:Constructor - solution id cannot be null!");
            Contract.Requires(solutionId != Guid.Empty, "SolutionKey:Constructor - solution id cannot be an empty guid!");
            Contract.Requires(!String.IsNullOrWhiteSpace(solutionPath), "SolutionKey:Constructor - solution path cannot be null or an empty string!");
            Contract.Requires(!String.IsNullOrWhiteSpace(indexPath), "SolutionKey:Constructor - index path cannot be null or an empty string!");

            this.solutionId = solutionId;
            this.solutionPath = solutionPath;
            this.indexPath = indexPath;
        }
        */</comment>

        <comment type="line" pos:line="48" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="49" pos:column="9">/// Return the solution ID.</comment>
        <comment type="line" pos:line="50" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="51" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="52" pos:column="9">public</specifier> <name pos:line="52" pos:column="16">Guid</name></type> <name pos:line="52" pos:column="21">GetSolutionId</name><parameter_list pos:line="52" pos:column="34">()</parameter_list> <block pos:line="52" pos:column="37">{
            <return pos:line="53" pos:column="13">return <expr><name><name pos:line="53" pos:column="20">this</name><op:operator pos:line="53" pos:column="24">.</op:operator><name pos:line="53" pos:column="25">solutionId</name></name></expr>;</return>
        }</block></function>

        <comment type="block" pos:line="56" pos:column="9">/* //// Remove code about index
        public string GetIndexPath()
        {
            return indexPath;
        }
        */</comment>

        <comment type="line" pos:line="63" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="64" pos:column="9">/// Return the solution path</comment>
        <comment type="line" pos:line="65" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="66" pos:column="9">/// &lt;returns&gt;&lt;/returns&gt;</comment>
        <function><type><specifier pos:line="67" pos:column="9">public</specifier> <name pos:line="67" pos:column="16">string</name></type> <name pos:line="67" pos:column="23">GetSolutionPath</name><parameter_list pos:line="67" pos:column="38">()</parameter_list> <block pos:line="67" pos:column="41">{
            <return pos:line="68" pos:column="13">return <expr><name pos:line="68" pos:column="20">solutionPath</name></expr>;</return>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">private</specifier> <name pos:line="71" pos:column="17">Guid</name></type> <name pos:line="71" pos:column="22">solutionId</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="72" pos:column="9">private</specifier> <name pos:line="72" pos:column="17">string</name></type> <name pos:line="72" pos:column="24">solutionPath</name></decl>;</decl_stmt>
        <comment type="block" pos:line="73" pos:column="9">/* //// Remove code about index
        private string indexPath;
        */</comment>
    }</block></class>
}</block></namespace>
</unit>
