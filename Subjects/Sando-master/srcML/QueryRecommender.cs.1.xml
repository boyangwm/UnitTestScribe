<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Recommender\Recommender\QueryRecommender.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Collections</name><op:operator pos:line="3" pos:column="25">.</op:operator><name pos:line="3" pos:column="26">ObjectModel</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">ABB</name><op:operator pos:line="6" pos:column="10">.</op:operator><name pos:line="6" pos:column="11">Swum</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">ABB</name><op:operator pos:line="7" pos:column="10">.</op:operator><name pos:line="7" pos:column="11">Swum</name><op:operator pos:line="7" pos:column="15">.</op:operator><name pos:line="7" pos:column="16">Nodes</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">System</name><op:operator pos:line="8" pos:column="13">.</op:operator><name pos:line="8" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">Core</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">Tools</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">DependencyInjection</name></name>;</using>

<namespace pos:line="12" pos:column="1">namespace <name><name pos:line="12" pos:column="11">Sando</name><op:operator pos:line="12" pos:column="16">.</op:operator><name pos:line="12" pos:column="17">Recommender</name></name> <block pos:line="12" pos:column="29">{
    <class><specifier pos:line="13" pos:column="5">public</specifier> class <name pos:line="13" pos:column="18">QueryRecommender</name> <block pos:line="13" pos:column="35">{
        <comment type="line" pos:line="14" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="15" pos:column="9">/// Maps query recommendation strings to an accumulated score for that recommendation</comment>
        <comment type="line" pos:line="16" pos:column="9">/// &lt;/summary&gt;</comment>
        
        
        
        <constructor><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">QueryRecommender</name><parameter_list pos:line="20" pos:column="32">()</parameter_list> <block pos:line="20" pos:column="35">{
            
        }</block></constructor>


        <function><type><specifier pos:line="25" pos:column="9">public</specifier> <name pos:line="25" pos:column="16">ISwumRecommendedQuery</name><index pos:line="25" pos:column="37">[]</index></type> <name pos:line="25" pos:column="40">GenerateRecommendations</name><parameter_list pos:line="25" pos:column="63">(<param><decl><type><name pos:line="25" pos:column="64">string</name></type> <name pos:line="25" pos:column="71">query</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="78">{
            <if pos:line="26" pos:column="13">if<condition pos:line="26" pos:column="15">(<expr><call><name><name pos:line="26" pos:column="16">string</name><op:operator pos:line="26" pos:column="22">.</op:operator><name pos:line="26" pos:column="23">IsNullOrEmpty</name></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">query</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="26" pos:column="44"> <block pos:line="26" pos:column="45">{
                <if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">query</name> <op:operator pos:line="27" pos:column="27">!=</op:operator> <name pos:line="27" pos:column="30">null</name></expr>)</condition><then pos:line="27" pos:column="35">
                <block pos:line="28" pos:column="17">{
                    <return pos:line="29" pos:column="21">return <expr><call><name pos:line="29" pos:column="28">GetAllSearchHistoryItems</name><argument_list pos:line="29" pos:column="52">()</argument_list></call></expr>;</return>
                }</block></then></if>
                <return pos:line="31" pos:column="17">return <expr><op:operator pos:line="31" pos:column="24">new</op:operator> <name><name pos:line="31" pos:column="28">ISwumRecommendedQuery</name><index pos:line="31" pos:column="49">[<expr><lit:literal type="number" pos:line="31" pos:column="50">0</lit:literal></expr>]</index></name></expr>;</return>
            }</block></then></if>
            <try pos:line="33" pos:column="13">try
            <block pos:line="34" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="35" pos:column="17">var</name></type> <name pos:line="35" pos:column="21">recommendations</name> <init pos:line="35" pos:column="37">= <expr><op:operator pos:line="35" pos:column="39">new</op:operator> <call><name><name pos:line="35" pos:column="43">Dictionary</name><argument_list pos:line="35" pos:column="53">&lt;<argument><name pos:line="35" pos:column="54">string</name></argument>, <argument><name pos:line="35" pos:column="62">int</name></argument>&gt;</argument_list></name><argument_list pos:line="35" pos:column="66">(<argument><expr><name><name pos:line="35" pos:column="67">StringComparer</name><op:operator pos:line="35" pos:column="81">.</op:operator><name pos:line="35" pos:column="82">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


                <comment type="line" pos:line="38" pos:column="17">//TODO: split query into words, search each one? Already implemented for plain method names            </comment>

                <comment type="line" pos:line="40" pos:column="17">//WeightByFrequency(query);</comment>
                <comment type="line" pos:line="41" pos:column="17">//WeightBySameField(query);</comment>
                <comment type="line" pos:line="42" pos:column="17">//WeightBySameField_WordsInOrder(query);</comment>
                <expr_stmt><expr><call><name pos:line="43" pos:column="17">AddRecommendationForEachTerm</name><argument_list pos:line="43" pos:column="45">(<argument><expr><name pos:line="43" pos:column="46">query</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="53">recommendations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="45" pos:column="17">//return the recommendations sorted by score in descending order</comment>
                <decl_stmt><decl><type><name><name pos:line="46" pos:column="17">List</name><argument_list pos:line="46" pos:column="21">&lt;<argument><name><name pos:line="46" pos:column="22">KeyValuePair</name><argument_list pos:line="46" pos:column="34">&lt;<argument><name pos:line="46" pos:column="35">string</name></argument>, <argument><name pos:line="46" pos:column="43">int</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="49">listForSorting</name> <init pos:line="46" pos:column="64">= <expr><call><name><name pos:line="46" pos:column="66">recommendations</name><op:operator pos:line="46" pos:column="81">.</op:operator><name pos:line="46" pos:column="82">ToList</name></name><argument_list pos:line="46" pos:column="88">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="47" pos:column="17">listForSorting</name><op:operator pos:line="47" pos:column="31">.</op:operator><name pos:line="47" pos:column="32">Sort</name></name><argument_list pos:line="47" pos:column="36">(<argument><expr><lambda><parameter_list pos:line="47" pos:column="37">(<param><decl><name pos:line="47" pos:column="38">firstPair</name></decl></param>, <param><decl><name pos:line="47" pos:column="49">nextPair</name></decl></param>)</parameter_list> <op:operator pos:line="47" pos:column="59">=&gt;</op:operator>
                    <block pos:line="48" pos:column="21">{
                        <return pos:line="49" pos:column="25">return <expr><call><name><name pos:line="49" pos:column="32">nextPair</name><op:operator pos:line="49" pos:column="40">.</op:operator><name pos:line="49" pos:column="41">Value</name><op:operator pos:line="49" pos:column="46">.</op:operator><name pos:line="49" pos:column="47">CompareTo</name></name><argument_list pos:line="49" pos:column="56">(<argument><expr><name><name pos:line="49" pos:column="57">firstPair</name><op:operator pos:line="49" pos:column="66">.</op:operator><name pos:line="49" pos:column="67">Value</name></name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></lambda></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
                <return pos:line="52" pos:column="17">return <expr><call><name pos:line="52" pos:column="24">SortRecommendations</name><argument_list pos:line="52" pos:column="43">(<argument><expr><name pos:line="52" pos:column="44">query</name></expr></argument>, <argument><expr><call><name><name pos:line="52" pos:column="51">listForSorting</name><op:operator pos:line="52" pos:column="65">.</op:operator><name pos:line="52" pos:column="66">Select</name></name><argument_list pos:line="52" pos:column="72">(<argument><expr><lambda><name pos:line="52" pos:column="73">kvp</name> <op:operator pos:line="52" pos:column="77">=&gt;</op:operator> <name><name pos:line="52" pos:column="80">kvp</name><op:operator pos:line="52" pos:column="83">.</op:operator><name pos:line="52" pos:column="84">Key</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="52" pos:column="88">.</op:operator><call><name pos:line="52" pos:column="89">ToArray</name><argument_list pos:line="52" pos:column="96">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block>
            <catch pos:line="54" pos:column="13">catch <parameter_list pos:line="54" pos:column="19">(<param><decl><type><name pos:line="54" pos:column="20">Exception</name></type> <name pos:line="54" pos:column="30">e</name></decl></param>)</parameter_list>
            <block pos:line="55" pos:column="13">{
                <return pos:line="56" pos:column="17">return <expr><op:operator pos:line="56" pos:column="24">new</op:operator> <name><name pos:line="56" pos:column="28">ISwumRecommendedQuery</name><index pos:line="56" pos:column="49">[<expr><lit:literal type="number" pos:line="56" pos:column="50">0</lit:literal></expr>]</index></name></expr>;</return>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier pos:line="60" pos:column="9">private</specifier> <name pos:line="60" pos:column="17">ISwumRecommendedQuery</name><index pos:line="60" pos:column="38">[]</index></type> <name pos:line="60" pos:column="41">SortRecommendations</name><parameter_list pos:line="60" pos:column="60">(<param><decl><type><name pos:line="60" pos:column="61">string</name></type> <name pos:line="60" pos:column="68">query</name></decl></param>, <param><decl><type><name><name pos:line="60" pos:column="75">string</name><index pos:line="60" pos:column="81">[]</index></name></type> <name pos:line="60" pos:column="84">queries</name></decl></param>)</parameter_list>
        <block pos:line="61" pos:column="9">{
            <return pos:line="62" pos:column="13">return <expr><op:operator pos:line="62" pos:column="20">new</op:operator> <call><name pos:line="62" pos:column="24">SwumQueriesSorter</name><argument_list pos:line="62" pos:column="41">()</argument_list></call><op:operator pos:line="62" pos:column="43">.</op:operator><call><name pos:line="62" pos:column="44">SelectSortSwumRecommendations</name><argument_list pos:line="62" pos:column="73">(<argument><expr><name pos:line="62" pos:column="74">query</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="81">queries</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="66" pos:column="9">private</specifier> <name pos:line="66" pos:column="17">ISwumRecommendedQuery</name><index pos:line="66" pos:column="38">[]</index></type> <name pos:line="66" pos:column="41">GetAllSearchHistoryItems</name><parameter_list pos:line="66" pos:column="65">()</parameter_list>
        <block pos:line="67" pos:column="9">{
            <return pos:line="68" pos:column="13">return <expr><op:operator pos:line="68" pos:column="20">new</op:operator> <call><name pos:line="68" pos:column="24">SwumQueriesSorter</name><argument_list pos:line="68" pos:column="41">()</argument_list></call><op:operator pos:line="68" pos:column="43">.</op:operator><call><name pos:line="68" pos:column="44">GetAllHistoryItems</name><argument_list pos:line="68" pos:column="62">()</argument_list></call></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="72" pos:column="9">private</specifier> <name pos:line="72" pos:column="17">void</name></type> <name pos:line="72" pos:column="22">AddRecommendation</name><parameter_list pos:line="72" pos:column="39">(<param><decl><type><name pos:line="72" pos:column="40">string</name></type> <name pos:line="72" pos:column="47">rec</name></decl></param>, <param><decl><type><name><name pos:line="72" pos:column="52">Dictionary</name><argument_list pos:line="72" pos:column="62">&lt;<argument><name pos:line="72" pos:column="63">string</name></argument>, <argument><name pos:line="72" pos:column="71">int</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="76">recommendations</name></decl></param>)</parameter_list>
        <block pos:line="73" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">AddRecommendation</name><argument_list pos:line="74" pos:column="30">(<argument><expr><name pos:line="74" pos:column="31">rec</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="74" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="39">recommendations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="77" pos:column="9">private</specifier> <name pos:line="77" pos:column="17">void</name></type> <name pos:line="77" pos:column="22">AddRecommendation</name><parameter_list pos:line="77" pos:column="39">(<param><decl><type><name pos:line="77" pos:column="40">string</name></type> <name pos:line="77" pos:column="47">rec</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="52">int</name></type> <name pos:line="77" pos:column="56">score</name></decl></param>, <param><decl><type><name><name pos:line="77" pos:column="63">Dictionary</name><argument_list pos:line="77" pos:column="73">&lt;<argument><name pos:line="77" pos:column="74">string</name></argument>, <argument><name pos:line="77" pos:column="82">int</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="87">recommendations</name></decl></param>)</parameter_list>
        <block pos:line="78" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="79" pos:column="13">int</name></type> <name pos:line="79" pos:column="17">count</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="80" pos:column="13">recommendations</name><op:operator pos:line="80" pos:column="28">.</op:operator><name pos:line="80" pos:column="29">TryGetValue</name></name><argument_list pos:line="80" pos:column="40">(<argument><expr><name pos:line="80" pos:column="41">rec</name></expr></argument>, <argument><expr pos:line="80" pos:column="46">out <name pos:line="80" pos:column="50">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name pos:line="81" pos:column="13">recommendations</name><index pos:line="81" pos:column="28">[<expr><name pos:line="81" pos:column="29">rec</name></expr>]</index></name> <op:operator pos:line="81" pos:column="34">=</op:operator> <name pos:line="81" pos:column="36">count</name> <op:operator pos:line="81" pos:column="42">+</op:operator> <name pos:line="81" pos:column="44">score</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="84" pos:column="9">private</specifier> <name pos:line="84" pos:column="17">void</name></type> <name pos:line="84" pos:column="22">AddRecommendation</name><parameter_list pos:line="84" pos:column="39">(<param><decl><type><name><name pos:line="84" pos:column="40">Dictionary</name><argument_list pos:line="84" pos:column="50">&lt;<argument><name pos:line="84" pos:column="51">string</name></argument>, <argument><name pos:line="84" pos:column="59">int</name></argument>&gt;</argument_list></name></type> <name pos:line="84" pos:column="64">recommendations</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="81">string</name></type> <name pos:line="84" pos:column="88">p</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="91">int</name></type> <name pos:line="84" pos:column="95">NormalWeight</name></decl></param>, <param><decl><type><name pos:line="84" pos:column="109">MethodDeclarationNode</name></type> <name pos:line="84" pos:column="131">methodDeclarationNode</name> <init pos:line="84" pos:column="153">= <expr><name pos:line="84" pos:column="155">null</name></expr></init></decl></param>)</parameter_list>
        <block pos:line="85" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">AddRecommendation</name><argument_list pos:line="86" pos:column="30">(<argument><expr><call><name><name pos:line="86" pos:column="31">p</name><op:operator pos:line="86" pos:column="32">.</op:operator><name pos:line="86" pos:column="33">Trim</name></name><argument_list pos:line="86" pos:column="37">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="86" pos:column="41">NormalWeight</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="55">recommendations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if pos:line="87" pos:column="13">if<condition pos:line="87" pos:column="15">(<expr><name pos:line="87" pos:column="16">methodDeclarationNode</name> <op:operator pos:line="87" pos:column="38">!=</op:operator><name pos:line="87" pos:column="40">null</name></expr>)</condition><then pos:line="87" pos:column="45">
                <expr_stmt><expr><call><name pos:line="88" pos:column="17">AddRecommendation</name><argument_list pos:line="88" pos:column="34">(<argument><expr><call><name><name pos:line="88" pos:column="35">methodDeclarationNode</name><op:operator pos:line="88" pos:column="56">.</op:operator><name pos:line="88" pos:column="57">Name</name><op:operator pos:line="88" pos:column="61">.</op:operator><name pos:line="88" pos:column="62">Trim</name></name><argument_list pos:line="88" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="88" pos:column="70">NormalWeight</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="84">recommendations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></function>


        <function><type><specifier pos:line="92" pos:column="9">private</specifier> <name pos:line="92" pos:column="17">void</name></type> <name pos:line="92" pos:column="22">AddRecommendationForEachTerm</name><parameter_list pos:line="92" pos:column="50">(<param><decl><type><name pos:line="92" pos:column="51">String</name></type> <name pos:line="92" pos:column="58">query</name></decl></param>, <param><decl><type><name><name pos:line="92" pos:column="65">Dictionary</name><argument_list pos:line="92" pos:column="75">&lt;<argument><name pos:line="92" pos:column="76">String</name></argument>, <argument><name pos:line="92" pos:column="84">int</name></argument>&gt;</argument_list></name></type> <name pos:line="92" pos:column="89">recommendations</name></decl></param>)</parameter_list>
        <block pos:line="93" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="94" pos:column="13">var</name></type> <name pos:line="94" pos:column="17">terms</name> <init pos:line="94" pos:column="23">= <expr><call><name><name pos:line="94" pos:column="25">query</name><op:operator pos:line="94" pos:column="30">.</op:operator><name pos:line="94" pos:column="31">Split</name></name><argument_list pos:line="94" pos:column="36">()</argument_list></call><op:operator pos:line="94" pos:column="38">.</op:operator><call><name pos:line="94" pos:column="39">Where</name><argument_list pos:line="94" pos:column="44">(<argument><expr><lambda><name pos:line="94" pos:column="45">t</name> <op:operator pos:line="94" pos:column="47">=&gt;</op:operator> <op:operator pos:line="94" pos:column="50">!</op:operator><call><name><name pos:line="94" pos:column="51">String</name><op:operator pos:line="94" pos:column="57">.</op:operator><name pos:line="94" pos:column="58">IsNullOrWhiteSpace</name></name><argument_list pos:line="94" pos:column="76">(<argument><expr><name pos:line="94" pos:column="77">t</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="95" pos:column="13">foreach (<init><decl><type><name pos:line="95" pos:column="22">var</name></type> <name pos:line="95" pos:column="26">term</name> <range pos:line="95" pos:column="31">in <expr><name pos:line="95" pos:column="34">terms</name></expr></range></decl></init>)
            <block pos:line="96" pos:column="13">{
                <expr_stmt><expr><call><name pos:line="97" pos:column="17">WeightByPartOfSpeech</name><argument_list pos:line="97" pos:column="37">(<argument><expr><name pos:line="97" pos:column="38">term</name></expr></argument>, <argument><expr><name pos:line="97" pos:column="44">recommendations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <comment type="line" pos:line="101" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="102" pos:column="9">/// Generates query recommendations. Nouns and verbs are weighted higher than other parts of speech.</comment>
        <comment type="line" pos:line="103" pos:column="9">/// The words in the generated recommendations are sorted in the same order as they appear in the method signature.</comment>
        <comment type="line" pos:line="104" pos:column="9">/// &lt;/summary&gt;</comment>
        <comment type="line" pos:line="105" pos:column="9">/// &lt;param name="query"&gt;The query string to create recommended completions for.&lt;/param&gt;</comment>
        <function><type><specifier pos:line="106" pos:column="9">private</specifier> <name pos:line="106" pos:column="17">void</name></type> <name pos:line="106" pos:column="22">WeightByPartOfSpeech</name><parameter_list pos:line="106" pos:column="42">(<param><decl><type><name pos:line="106" pos:column="43">string</name></type> <name pos:line="106" pos:column="50">query</name></decl></param>, <param><decl><type><name><name pos:line="106" pos:column="57">Dictionary</name><argument_list pos:line="106" pos:column="67">&lt;<argument><name pos:line="106" pos:column="68">string</name></argument>, <argument><name pos:line="106" pos:column="76">int</name></argument>&gt;</argument_list></name></type> <name pos:line="106" pos:column="81">recommendations</name></decl></param> )</parameter_list> <block pos:line="106" pos:column="99">{
            <decl_stmt><decl><type><specifier pos:line="107" pos:column="13">const</specifier> <name pos:line="107" pos:column="19">int</name></type> <name pos:line="107" pos:column="23">NormalWeight</name> <init pos:line="107" pos:column="36">= <expr><lit:literal type="number" pos:line="107" pos:column="38">1</lit:literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="109" pos:column="13">var</name></type> <name pos:line="109" pos:column="17">terms</name> <init pos:line="109" pos:column="23">= <expr><call><name><name pos:line="109" pos:column="25">query</name><op:operator pos:line="109" pos:column="30">.</op:operator><name pos:line="109" pos:column="31">Split</name></name><argument_list pos:line="109" pos:column="36">(<argument><expr><lit:literal type="char" pos:line="109" pos:column="37">' '</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:line="111" pos:column="13">//search through all the SWUM data</comment>
            <decl_stmt><decl><type><name><name pos:line="112" pos:column="13">Dictionary</name><argument_list pos:line="112" pos:column="23">&lt;<argument><name pos:line="112" pos:column="24">string</name></argument>, <argument><name pos:line="112" pos:column="32">SwumDataRecord</name></argument>&gt;</argument_list></name></type> <name pos:line="112" pos:column="48">swumData</name> <init pos:line="112" pos:column="57">= <expr><call><name><name pos:line="112" pos:column="59">SwumManager</name><op:operator pos:line="112" pos:column="70">.</op:operator><name pos:line="112" pos:column="71">Instance</name><op:operator pos:line="112" pos:column="79">.</op:operator><name pos:line="112" pos:column="80">GetSwumData</name></name><argument_list pos:line="112" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>            
            <foreach pos:line="113" pos:column="13">foreach(<init><decl><type><name pos:line="113" pos:column="21">var</name></type> <name pos:line="113" pos:column="25">swumRecord</name> <range pos:line="113" pos:column="36">in <expr><name><name pos:line="113" pos:column="39">swumData</name><op:operator pos:line="113" pos:column="47">.</op:operator><name pos:line="113" pos:column="48">Values</name></name></expr></range></decl></init>) <block pos:line="113" pos:column="56">{
                <decl_stmt><decl><type><name pos:line="114" pos:column="17">var</name></type> <name pos:line="114" pos:column="21">actionWords</name> <init pos:line="114" pos:column="33">= <expr><op:operator pos:line="114" pos:column="35">new</op:operator> <call><name><name pos:line="114" pos:column="39">Collection</name><argument_list pos:line="114" pos:column="49">&lt;<argument><name pos:line="114" pos:column="50">WordNode</name></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="115" pos:column="17">var</name></type> <name pos:line="115" pos:column="21">themeWords</name> <init pos:line="115" pos:column="32">= <expr><op:operator pos:line="115" pos:column="34">new</op:operator> <call><name><name pos:line="115" pos:column="38">Collection</name><argument_list pos:line="115" pos:column="48">&lt;<argument><name pos:line="115" pos:column="49">WordNode</name></argument>&gt;</argument_list></name><argument_list pos:line="115" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="116" pos:column="17">var</name></type> <name pos:line="116" pos:column="21">indirectWords</name> <init pos:line="116" pos:column="35">= <expr><op:operator pos:line="116" pos:column="37">new</op:operator> <call><name><name pos:line="116" pos:column="41">Collection</name><argument_list pos:line="116" pos:column="51">&lt;<argument><name pos:line="116" pos:column="52">WordNode</name></argument>&gt;</argument_list></name><argument_list pos:line="116" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="117" pos:column="17">bool</name></type> <name pos:line="117" pos:column="22">queryInAction</name> <init pos:line="117" pos:column="36">= <expr><lit:literal type="boolean" pos:line="117" pos:column="38">false</lit:literal></expr></init><op:operator pos:line="117" pos:column="43">,</op:operator> <name pos:line="117" pos:column="45">queryInTheme</name> <init pos:line="117" pos:column="58">= <expr><lit:literal type="boolean" pos:line="117" pos:column="60">false</lit:literal></expr></init><op:operator pos:line="117" pos:column="65">,</op:operator> <name pos:line="117" pos:column="67">queryInIndirect</name> <init pos:line="117" pos:column="83">= <expr><lit:literal type="boolean" pos:line="117" pos:column="85">false</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="118" pos:column="17">int</name></type> <name pos:line="118" pos:column="21">queryActionIndex</name> <init pos:line="118" pos:column="38">= <expr><op:operator pos:line="118" pos:column="40">-</op:operator><lit:literal type="number" pos:line="118" pos:column="41">1</lit:literal></expr></init><op:operator pos:line="118" pos:column="42">,</op:operator> <name pos:line="118" pos:column="44">queryThemeIndex</name> <init pos:line="118" pos:column="60">= <expr><op:operator pos:line="118" pos:column="62">-</op:operator><lit:literal type="number" pos:line="118" pos:column="63">1</lit:literal></expr></init><op:operator pos:line="118" pos:column="64">,</op:operator> <name pos:line="118" pos:column="66">queryIndirectIndex</name> <init pos:line="118" pos:column="85">= <expr><op:operator pos:line="118" pos:column="87">-</op:operator><lit:literal type="number" pos:line="118" pos:column="88">1</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="119" pos:column="17">if<condition pos:line="119" pos:column="19">(<expr><name><name pos:line="119" pos:column="20">swumRecord</name><op:operator pos:line="119" pos:column="30">.</op:operator><name pos:line="119" pos:column="31">ParsedAction</name></name> <op:operator pos:line="119" pos:column="44">!=</op:operator> <name pos:line="119" pos:column="47">null</name></expr>)</condition><then pos:line="119" pos:column="52"> <block pos:line="119" pos:column="53">{
                    <expr_stmt><expr><name pos:line="120" pos:column="21">actionWords</name> <op:operator pos:line="120" pos:column="33">=</op:operator> <call><name><name pos:line="120" pos:column="35">swumRecord</name><op:operator pos:line="120" pos:column="45">.</op:operator><name pos:line="120" pos:column="46">ParsedAction</name><op:operator pos:line="120" pos:column="58">.</op:operator><name pos:line="120" pos:column="59">GetPhrase</name></name><argument_list pos:line="120" pos:column="68">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="121" pos:column="21">queryActionIndex</name> <op:operator pos:line="121" pos:column="38">=</op:operator> <call><name pos:line="121" pos:column="40">FindWordInPhraseNode</name><argument_list pos:line="121" pos:column="60">(<argument><expr><name><name pos:line="121" pos:column="61">swumRecord</name><op:operator pos:line="121" pos:column="71">.</op:operator><name pos:line="121" pos:column="72">ParsedAction</name></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="86">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="122" pos:column="21">if<condition pos:line="122" pos:column="23">(<expr><name pos:line="122" pos:column="24">queryActionIndex</name> <op:operator pos:line="122" pos:column="41">&gt;</op:operator> <op:operator pos:line="122" pos:column="43">-</op:operator><lit:literal type="number" pos:line="122" pos:column="44">1</lit:literal></expr>)</condition><then pos:line="122" pos:column="46"> <block pos:line="122" pos:column="47">{ <expr_stmt><expr><name pos:line="122" pos:column="49">queryInAction</name> <op:operator pos:line="122" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="122" pos:column="65">true</lit:literal></expr>;</expr_stmt> }</block></then></if>
                }</block></then></if>
                <if pos:line="124" pos:column="17">if<condition pos:line="124" pos:column="19">(<expr><name><name pos:line="124" pos:column="20">swumRecord</name><op:operator pos:line="124" pos:column="30">.</op:operator><name pos:line="124" pos:column="31">ParsedTheme</name></name> <op:operator pos:line="124" pos:column="43">!=</op:operator> <name pos:line="124" pos:column="46">null</name></expr>)</condition><then pos:line="124" pos:column="51"> <block pos:line="124" pos:column="52">{
                    <expr_stmt><expr><name pos:line="125" pos:column="21">themeWords</name> <op:operator pos:line="125" pos:column="32">=</op:operator> <call><name><name pos:line="125" pos:column="34">swumRecord</name><op:operator pos:line="125" pos:column="44">.</op:operator><name pos:line="125" pos:column="45">ParsedTheme</name><op:operator pos:line="125" pos:column="56">.</op:operator><name pos:line="125" pos:column="57">GetPhrase</name></name><argument_list pos:line="125" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="126" pos:column="21">queryThemeIndex</name> <op:operator pos:line="126" pos:column="37">=</op:operator> <call><name pos:line="126" pos:column="39">FindWordInPhraseNode</name><argument_list pos:line="126" pos:column="59">(<argument><expr><name><name pos:line="126" pos:column="60">swumRecord</name><op:operator pos:line="126" pos:column="70">.</op:operator><name pos:line="126" pos:column="71">ParsedTheme</name></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="84">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="127" pos:column="21">if<condition pos:line="127" pos:column="23">(<expr><name pos:line="127" pos:column="24">queryThemeIndex</name> <op:operator pos:line="127" pos:column="40">&gt;</op:operator> <op:operator pos:line="127" pos:column="42">-</op:operator><lit:literal type="number" pos:line="127" pos:column="43">1</lit:literal></expr>)</condition><then pos:line="127" pos:column="45"> <block pos:line="127" pos:column="46">{ <expr_stmt><expr><name pos:line="127" pos:column="48">queryInTheme</name> <op:operator pos:line="127" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="127" pos:column="63">true</lit:literal></expr>;</expr_stmt> }</block></then></if>
                }</block></then></if>
                <if pos:line="129" pos:column="17">if<condition pos:line="129" pos:column="19">(<expr><name><name pos:line="129" pos:column="20">swumRecord</name><op:operator pos:line="129" pos:column="30">.</op:operator><name pos:line="129" pos:column="31">ParsedIndirectObject</name></name> <op:operator pos:line="129" pos:column="52">!=</op:operator> <name pos:line="129" pos:column="55">null</name></expr>)</condition><then pos:line="129" pos:column="60"> <block pos:line="129" pos:column="61">{
                    <expr_stmt><expr><name pos:line="130" pos:column="21">indirectWords</name> <op:operator pos:line="130" pos:column="35">=</op:operator> <call><name><name pos:line="130" pos:column="37">swumRecord</name><op:operator pos:line="130" pos:column="47">.</op:operator><name pos:line="130" pos:column="48">ParsedIndirectObject</name><op:operator pos:line="130" pos:column="68">.</op:operator><name pos:line="130" pos:column="69">GetPhrase</name></name><argument_list pos:line="130" pos:column="78">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="131" pos:column="21">queryIndirectIndex</name> <op:operator pos:line="131" pos:column="40">=</op:operator> <call><name pos:line="131" pos:column="42">FindWordInPhraseNode</name><argument_list pos:line="131" pos:column="62">(<argument><expr><name><name pos:line="131" pos:column="63">swumRecord</name><op:operator pos:line="131" pos:column="73">.</op:operator><name pos:line="131" pos:column="74">ParsedIndirectObject</name></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="96">query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if pos:line="132" pos:column="21">if<condition pos:line="132" pos:column="23">(<expr><name pos:line="132" pos:column="24">queryIndirectIndex</name> <op:operator pos:line="132" pos:column="43">&gt;</op:operator> <op:operator pos:line="132" pos:column="45">-</op:operator><lit:literal type="number" pos:line="132" pos:column="46">1</lit:literal></expr>)</condition><then pos:line="132" pos:column="48"> <block pos:line="132" pos:column="49">{ <expr_stmt><expr><name pos:line="132" pos:column="51">queryInIndirect</name> <op:operator pos:line="132" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="132" pos:column="69">true</lit:literal></expr>;</expr_stmt> }</block></then></if>
                }</block></then></if>

                <if pos:line="135" pos:column="17">if<condition pos:line="135" pos:column="19">(<expr><name pos:line="135" pos:column="20">queryInAction</name> <op:operator pos:line="135" pos:column="34">||</op:operator> <name pos:line="135" pos:column="37">queryInTheme</name> <op:operator pos:line="135" pos:column="50">||</op:operator> <name pos:line="135" pos:column="53">queryInIndirect</name></expr>)</condition><then pos:line="135" pos:column="69"> <block pos:line="135" pos:column="70">{
                    <comment type="line" pos:line="136" pos:column="21">//add words from action</comment>
                    <for pos:line="137" pos:column="21">for(<init><decl><type><name pos:line="137" pos:column="25">int</name></type> <name pos:line="137" pos:column="29">i</name> <init pos:line="137" pos:column="31">= <expr><lit:literal type="number" pos:line="137" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="137" pos:column="36">i</name> <op:operator pos:line="137" pos:column="38">&lt;</op:operator> <name><name pos:line="137" pos:column="40">actionWords</name><op:operator pos:line="137" pos:column="51">.</op:operator><name pos:line="137" pos:column="52">Count</name></name></expr>;</condition> <incr><expr><name pos:line="137" pos:column="59">i</name><op:operator pos:line="137" pos:column="60">++</op:operator></expr></incr>) <block pos:line="137" pos:column="64">{
                        <decl_stmt><decl><type><name pos:line="138" pos:column="25">int</name></type> <name pos:line="138" pos:column="29">wordWeight</name> <init pos:line="138" pos:column="40">= <expr><call><name pos:line="138" pos:column="42">GetWeightForPartOfSpeech</name><argument_list pos:line="138" pos:column="66">(<argument><expr><name><name pos:line="138" pos:column="67">actionWords</name><index pos:line="138" pos:column="78">[<expr><name pos:line="138" pos:column="79">i</name></expr>]</index></name><op:operator pos:line="138" pos:column="81">.</op:operator><name pos:line="138" pos:column="82">Tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="139" pos:column="25">if<condition pos:line="139" pos:column="27">(<expr><name pos:line="139" pos:column="28">queryInAction</name></expr>)</condition><then pos:line="139" pos:column="42"> <block pos:line="139" pos:column="43">{
                            <if pos:line="140" pos:column="29">if<condition pos:line="140" pos:column="31">(<expr><name pos:line="140" pos:column="32">i</name> <op:operator pos:line="140" pos:column="34">&lt;</op:operator> <name pos:line="140" pos:column="36">queryActionIndex</name></expr>)</condition><then pos:line="140" pos:column="53"> <block pos:line="140" pos:column="54">{
                                <expr_stmt><expr><call><name pos:line="141" pos:column="33">AddRecommendation</name><argument_list pos:line="141" pos:column="50">(<argument><expr><name pos:line="141" pos:column="51">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="141" pos:column="68">string</name><op:operator pos:line="141" pos:column="74">.</op:operator><name pos:line="141" pos:column="75">Format</name></name><argument_list pos:line="141" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="82">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="93">actionWords</name><index pos:line="141" pos:column="104">[<expr><name pos:line="141" pos:column="105">i</name></expr>]</index></name><op:operator pos:line="141" pos:column="107">.</op:operator><name pos:line="141" pos:column="108">Text</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="114">query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="141" pos:column="122">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="142" pos:column="31">else <if pos:line="142" pos:column="36">if<condition pos:line="142" pos:column="38">(<expr><name pos:line="142" pos:column="39">queryActionIndex</name> <op:operator pos:line="142" pos:column="56">&lt;</op:operator> <name pos:line="142" pos:column="58">i</name></expr>)</condition><then pos:line="142" pos:column="60"> <block pos:line="142" pos:column="61">{
                                <expr_stmt><expr><call><name pos:line="143" pos:column="33">AddRecommendation</name><argument_list pos:line="143" pos:column="50">( <argument><expr><name pos:line="143" pos:column="52">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="143" pos:column="69">string</name><op:operator pos:line="143" pos:column="75">.</op:operator><name pos:line="143" pos:column="76">Format</name></name><argument_list pos:line="143" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="83">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="143" pos:column="94">query</name></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="101">actionWords</name><index pos:line="143" pos:column="112">[<expr><name pos:line="143" pos:column="113">i</name></expr>]</index></name><op:operator pos:line="143" pos:column="115">.</op:operator><name pos:line="143" pos:column="116">Text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="143" pos:column="123">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if></else></if>
                        }</block></then> <else pos:line="145" pos:column="27">else <block pos:line="145" pos:column="32">{
                            <comment type="line" pos:line="146" pos:column="29">//the action words do not contain the query word</comment>
                            <expr_stmt><expr><call><name pos:line="147" pos:column="29">AddRecommendation</name><argument_list pos:line="147" pos:column="46">( <argument><expr><name pos:line="147" pos:column="48">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="147" pos:column="65">string</name><op:operator pos:line="147" pos:column="71">.</op:operator><name pos:line="147" pos:column="72">Format</name></name><argument_list pos:line="147" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="147" pos:column="79">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="147" pos:column="90">actionWords</name><index pos:line="147" pos:column="101">[<expr><name pos:line="147" pos:column="102">i</name></expr>]</index></name><op:operator pos:line="147" pos:column="104">.</op:operator><name pos:line="147" pos:column="105">Text</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="111">query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="147" pos:column="119">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></for>
                    <if pos:line="150" pos:column="21">if<condition pos:line="150" pos:column="23">(<expr><name pos:line="150" pos:column="24">queryInAction</name> <op:operator pos:line="150" pos:column="38">&amp;&amp;</op:operator> <call><name><name pos:line="150" pos:column="41">actionWords</name><op:operator pos:line="150" pos:column="52">.</op:operator><name pos:line="150" pos:column="53">Count</name></name><argument_list pos:line="150" pos:column="58">()</argument_list></call> <op:operator pos:line="150" pos:column="61">&gt;</op:operator> <lit:literal type="number" pos:line="150" pos:column="63">2</lit:literal></expr>)</condition><then pos:line="150" pos:column="65"> <block pos:line="150" pos:column="66">{
                        <expr_stmt><expr><call><name pos:line="151" pos:column="25">AddRecommendation</name><argument_list pos:line="151" pos:column="42">( <argument><expr><name pos:line="151" pos:column="44">recommendations</name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="61">swumRecord</name><op:operator pos:line="151" pos:column="71">.</op:operator><name pos:line="151" pos:column="72">Action</name></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="80">NormalWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="152" pos:column="23">else <if pos:line="152" pos:column="28">if<condition pos:line="152" pos:column="30">(<expr><op:operator pos:line="152" pos:column="31">!</op:operator><name pos:line="152" pos:column="32">queryInAction</name> <op:operator pos:line="152" pos:column="46">&amp;&amp;</op:operator> <call><name><name pos:line="152" pos:column="49">actionWords</name><op:operator pos:line="152" pos:column="60">.</op:operator><name pos:line="152" pos:column="61">Count</name></name><argument_list pos:line="152" pos:column="66">()</argument_list></call> <op:operator pos:line="152" pos:column="69">&gt;</op:operator> <lit:literal type="number" pos:line="152" pos:column="71">1</lit:literal></expr>)</condition><then pos:line="152" pos:column="73"> <block pos:line="152" pos:column="74">{
                        <expr_stmt><expr><call><name pos:line="153" pos:column="25">AddRecommendation</name><argument_list pos:line="153" pos:column="42">( <argument><expr><name pos:line="153" pos:column="44">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="153" pos:column="61">string</name><op:operator pos:line="153" pos:column="67">.</op:operator><name pos:line="153" pos:column="68">Format</name></name><argument_list pos:line="153" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="75">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="86">swumRecord</name><op:operator pos:line="153" pos:column="96">.</op:operator><name pos:line="153" pos:column="97">Action</name></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="105">query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="153" pos:column="113">NormalWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>

                    <comment type="line" pos:line="156" pos:column="21">//add words from theme</comment>
                    <for pos:line="157" pos:column="21">for(<init><decl><type><name pos:line="157" pos:column="25">int</name></type> <name pos:line="157" pos:column="29">i</name> <init pos:line="157" pos:column="31">= <expr><lit:literal type="number" pos:line="157" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="157" pos:column="36">i</name> <op:operator pos:line="157" pos:column="38">&lt;</op:operator> <name><name pos:line="157" pos:column="40">themeWords</name><op:operator pos:line="157" pos:column="50">.</op:operator><name pos:line="157" pos:column="51">Count</name></name></expr>;</condition> <incr><expr><name pos:line="157" pos:column="58">i</name><op:operator pos:line="157" pos:column="59">++</op:operator></expr></incr>) <block pos:line="157" pos:column="63">{
                        <decl_stmt><decl><type><name pos:line="158" pos:column="25">int</name></type> <name pos:line="158" pos:column="29">wordWeight</name> <init pos:line="158" pos:column="40">= <expr><call><name pos:line="158" pos:column="42">GetWeightForPartOfSpeech</name><argument_list pos:line="158" pos:column="66">(<argument><expr><name><name pos:line="158" pos:column="67">themeWords</name><index pos:line="158" pos:column="77">[<expr><name pos:line="158" pos:column="78">i</name></expr>]</index></name><op:operator pos:line="158" pos:column="80">.</op:operator><name pos:line="158" pos:column="81">Tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="159" pos:column="25">if<condition pos:line="159" pos:column="27">(<expr><name pos:line="159" pos:column="28">queryInTheme</name></expr>)</condition><then pos:line="159" pos:column="41"> <block pos:line="159" pos:column="42">{
                            <if pos:line="160" pos:column="29">if<condition pos:line="160" pos:column="31">(<expr><name pos:line="160" pos:column="32">i</name> <op:operator pos:line="160" pos:column="34">&lt;</op:operator> <name pos:line="160" pos:column="36">queryThemeIndex</name></expr>)</condition><then pos:line="160" pos:column="52"> <block pos:line="160" pos:column="53">{
                                <expr_stmt><expr><call><name pos:line="161" pos:column="33">AddRecommendation</name><argument_list pos:line="161" pos:column="50">( <argument><expr><name pos:line="161" pos:column="52">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="161" pos:column="69">string</name><op:operator pos:line="161" pos:column="75">.</op:operator><name pos:line="161" pos:column="76">Format</name></name><argument_list pos:line="161" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="83">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="94">themeWords</name><index pos:line="161" pos:column="104">[<expr><name pos:line="161" pos:column="105">i</name></expr>]</index></name><op:operator pos:line="161" pos:column="107">.</op:operator><name pos:line="161" pos:column="108">Text</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="114">query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="161" pos:column="122">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="162" pos:column="31">else <if pos:line="162" pos:column="36">if<condition pos:line="162" pos:column="38">(<expr><name pos:line="162" pos:column="39">queryThemeIndex</name> <op:operator pos:line="162" pos:column="55">&lt;</op:operator> <name pos:line="162" pos:column="57">i</name></expr>)</condition><then pos:line="162" pos:column="59"> <block pos:line="162" pos:column="60">{
                                <expr_stmt><expr><call><name pos:line="163" pos:column="33">AddRecommendation</name><argument_list pos:line="163" pos:column="50">( <argument><expr><name pos:line="163" pos:column="52">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="163" pos:column="69">string</name><op:operator pos:line="163" pos:column="75">.</op:operator><name pos:line="163" pos:column="76">Format</name></name><argument_list pos:line="163" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="83">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="163" pos:column="94">query</name></expr></argument>, <argument><expr><name><name pos:line="163" pos:column="101">themeWords</name><index pos:line="163" pos:column="111">[<expr><name pos:line="163" pos:column="112">i</name></expr>]</index></name><op:operator pos:line="163" pos:column="114">.</op:operator><name pos:line="163" pos:column="115">Text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="163" pos:column="122">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if></else></if>
                        }</block></then> <else pos:line="165" pos:column="27">else <block pos:line="165" pos:column="32">{
                            <comment type="line" pos:line="166" pos:column="29">//the theme words do not contain the query word</comment>
                            <if pos:line="167" pos:column="29">if<condition pos:line="167" pos:column="31">(<expr><name pos:line="167" pos:column="32">queryInAction</name></expr>)</condition><then pos:line="167" pos:column="46"> <block pos:line="167" pos:column="47">{
                                <expr_stmt><expr><call><name pos:line="168" pos:column="33">AddRecommendation</name><argument_list pos:line="168" pos:column="50">( <argument><expr><name pos:line="168" pos:column="52">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="168" pos:column="69">string</name><op:operator pos:line="168" pos:column="75">.</op:operator><name pos:line="168" pos:column="76">Format</name></name><argument_list pos:line="168" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="83">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="168" pos:column="94">query</name></expr></argument>, <argument><expr><name><name pos:line="168" pos:column="101">themeWords</name><index pos:line="168" pos:column="111">[<expr><name pos:line="168" pos:column="112">i</name></expr>]</index></name><op:operator pos:line="168" pos:column="114">.</op:operator><name pos:line="168" pos:column="115">Text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="168" pos:column="122">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                            <if pos:line="170" pos:column="29">if<condition pos:line="170" pos:column="31">(<expr><name pos:line="170" pos:column="32">queryInIndirect</name></expr>)</condition><then pos:line="170" pos:column="48"> <block pos:line="170" pos:column="49">{
                                <expr_stmt><expr><call><name pos:line="171" pos:column="33">AddRecommendation</name><argument_list pos:line="171" pos:column="50">( <argument><expr><name pos:line="171" pos:column="52">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="171" pos:column="69">string</name><op:operator pos:line="171" pos:column="75">.</op:operator><name pos:line="171" pos:column="76">Format</name></name><argument_list pos:line="171" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="83">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="171" pos:column="94">themeWords</name><index pos:line="171" pos:column="104">[<expr><name pos:line="171" pos:column="105">i</name></expr>]</index></name><op:operator pos:line="171" pos:column="107">.</op:operator><name pos:line="171" pos:column="108">Text</name></expr></argument>, <argument><expr><name pos:line="171" pos:column="114">query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="171" pos:column="122">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></else></if>
                    }</block></for>
                    <if pos:line="175" pos:column="21">if<condition pos:line="175" pos:column="23">(<expr><name pos:line="175" pos:column="24">queryInTheme</name> <op:operator pos:line="175" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="175" pos:column="40">themeWords</name><op:operator pos:line="175" pos:column="50">.</op:operator><name pos:line="175" pos:column="51">Count</name></name><argument_list pos:line="175" pos:column="56">()</argument_list></call> <op:operator pos:line="175" pos:column="59">&gt;</op:operator> <lit:literal type="number" pos:line="175" pos:column="61">2</lit:literal></expr>)</condition><then pos:line="175" pos:column="63"> <block pos:line="175" pos:column="64">{
                        <expr_stmt><expr><call><name pos:line="176" pos:column="25">AddRecommendation</name><argument_list pos:line="176" pos:column="42">( <argument><expr><name pos:line="176" pos:column="44">recommendations</name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="61">swumRecord</name><op:operator pos:line="176" pos:column="71">.</op:operator><name pos:line="176" pos:column="72">Theme</name></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="79">NormalWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="177" pos:column="23">else <if pos:line="177" pos:column="28">if<condition pos:line="177" pos:column="30">(<expr><op:operator pos:line="177" pos:column="31">!</op:operator><name pos:line="177" pos:column="32">queryInTheme</name> <op:operator pos:line="177" pos:column="45">&amp;&amp;</op:operator> <call><name><name pos:line="177" pos:column="48">themeWords</name><op:operator pos:line="177" pos:column="58">.</op:operator><name pos:line="177" pos:column="59">Count</name></name><argument_list pos:line="177" pos:column="64">()</argument_list></call> <op:operator pos:line="177" pos:column="67">&gt;</op:operator> <lit:literal type="number" pos:line="177" pos:column="69">1</lit:literal></expr>)</condition><then pos:line="177" pos:column="71"> <block pos:line="177" pos:column="72">{
                        <if pos:line="178" pos:column="25">if<condition pos:line="178" pos:column="27">(<expr><name pos:line="178" pos:column="28">queryInAction</name></expr>)</condition><then pos:line="178" pos:column="42"> <block pos:line="178" pos:column="43">{
                            <expr_stmt><expr><call><name pos:line="179" pos:column="29">AddRecommendation</name><argument_list pos:line="179" pos:column="46">( <argument><expr><name pos:line="179" pos:column="48">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="179" pos:column="65">string</name><op:operator pos:line="179" pos:column="71">.</op:operator><name pos:line="179" pos:column="72">Format</name></name><argument_list pos:line="179" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="179" pos:column="79">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="179" pos:column="90">query</name></expr></argument>, <argument><expr><name><name pos:line="179" pos:column="97">swumRecord</name><op:operator pos:line="179" pos:column="107">.</op:operator><name pos:line="179" pos:column="108">Theme</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="179" pos:column="116">NormalWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <if pos:line="181" pos:column="25">if<condition pos:line="181" pos:column="27">(<expr><name pos:line="181" pos:column="28">queryInIndirect</name></expr>)</condition><then pos:line="181" pos:column="44"> <block pos:line="181" pos:column="45">{
                            <expr_stmt><expr><call><name pos:line="182" pos:column="29">AddRecommendation</name><argument_list pos:line="182" pos:column="46">( <argument><expr><name pos:line="182" pos:column="48">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="182" pos:column="65">string</name><op:operator pos:line="182" pos:column="71">.</op:operator><name pos:line="182" pos:column="72">Format</name></name><argument_list pos:line="182" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="79">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="90">swumRecord</name><op:operator pos:line="182" pos:column="100">.</op:operator><name pos:line="182" pos:column="101">Theme</name></name></expr></argument>, <argument><expr><name pos:line="182" pos:column="108">query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="182" pos:column="116">NormalWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if></else></if>

                    <comment type="line" pos:line="186" pos:column="21">//add words from indirect object</comment>
                    <for pos:line="187" pos:column="21">for(<init><decl><type><name pos:line="187" pos:column="25">int</name></type> <name pos:line="187" pos:column="29">i</name> <init pos:line="187" pos:column="31">= <expr><lit:literal type="number" pos:line="187" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="187" pos:column="36">i</name> <op:operator pos:line="187" pos:column="38">&lt;</op:operator> <name><name pos:line="187" pos:column="40">indirectWords</name><op:operator pos:line="187" pos:column="53">.</op:operator><name pos:line="187" pos:column="54">Count</name></name></expr>;</condition> <incr><expr><name pos:line="187" pos:column="61">i</name><op:operator pos:line="187" pos:column="62">++</op:operator></expr></incr>) <block pos:line="187" pos:column="66">{
                        <decl_stmt><decl><type><name pos:line="188" pos:column="25">int</name></type> <name pos:line="188" pos:column="29">wordWeight</name> <init pos:line="188" pos:column="40">= <expr><call><name pos:line="188" pos:column="42">GetWeightForPartOfSpeech</name><argument_list pos:line="188" pos:column="66">(<argument><expr><name><name pos:line="188" pos:column="67">indirectWords</name><index pos:line="188" pos:column="80">[<expr><name pos:line="188" pos:column="81">i</name></expr>]</index></name><op:operator pos:line="188" pos:column="83">.</op:operator><name pos:line="188" pos:column="84">Tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if pos:line="189" pos:column="25">if<condition pos:line="189" pos:column="27">(<expr><name pos:line="189" pos:column="28">queryInIndirect</name></expr>)</condition><then pos:line="189" pos:column="44"> <block pos:line="189" pos:column="45">{
                            <if pos:line="190" pos:column="29">if<condition pos:line="190" pos:column="31">(<expr><name pos:line="190" pos:column="32">i</name> <op:operator pos:line="190" pos:column="34">&lt;</op:operator> <name pos:line="190" pos:column="36">queryIndirectIndex</name></expr>)</condition><then pos:line="190" pos:column="55"> <block pos:line="190" pos:column="56">{
                                <expr_stmt><expr><call><name pos:line="191" pos:column="33">AddRecommendation</name><argument_list pos:line="191" pos:column="50">( <argument><expr><name pos:line="191" pos:column="52">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="191" pos:column="69">string</name><op:operator pos:line="191" pos:column="75">.</op:operator><name pos:line="191" pos:column="76">Format</name></name><argument_list pos:line="191" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="83">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="191" pos:column="94">indirectWords</name><index pos:line="191" pos:column="107">[<expr><name pos:line="191" pos:column="108">i</name></expr>]</index></name><op:operator pos:line="191" pos:column="110">.</op:operator><name pos:line="191" pos:column="111">Text</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="117">query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="191" pos:column="125">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else pos:line="192" pos:column="31">else <if pos:line="192" pos:column="36">if<condition pos:line="192" pos:column="38">(<expr><name pos:line="192" pos:column="39">queryIndirectIndex</name> <op:operator pos:line="192" pos:column="58">&lt;</op:operator> <name pos:line="192" pos:column="60">i</name></expr>)</condition><then pos:line="192" pos:column="62"> <block pos:line="192" pos:column="63">{
                                <expr_stmt><expr><call><name pos:line="193" pos:column="33">AddRecommendation</name><argument_list pos:line="193" pos:column="50">( <argument><expr><name pos:line="193" pos:column="52">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="193" pos:column="69">string</name><op:operator pos:line="193" pos:column="75">.</op:operator><name pos:line="193" pos:column="76">Format</name></name><argument_list pos:line="193" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="83">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="193" pos:column="94">query</name></expr></argument>, <argument><expr><name><name pos:line="193" pos:column="101">indirectWords</name><index pos:line="193" pos:column="114">[<expr><name pos:line="193" pos:column="115">i</name></expr>]</index></name><op:operator pos:line="193" pos:column="117">.</op:operator><name pos:line="193" pos:column="118">Text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="193" pos:column="125">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if></else></if>
                        }</block></then> <else pos:line="195" pos:column="27">else <block pos:line="195" pos:column="32">{
                            <comment type="line" pos:line="196" pos:column="29">//the indirect object words do not contain the query word</comment>
                            <expr_stmt><expr><call><name pos:line="197" pos:column="29">AddRecommendation</name><argument_list pos:line="197" pos:column="46">( <argument><expr><name pos:line="197" pos:column="48">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="197" pos:column="65">string</name><op:operator pos:line="197" pos:column="71">.</op:operator><name pos:line="197" pos:column="72">Format</name></name><argument_list pos:line="197" pos:column="78">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="79">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="197" pos:column="90">query</name></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="97">indirectWords</name><index pos:line="197" pos:column="110">[<expr><name pos:line="197" pos:column="111">i</name></expr>]</index></name><op:operator pos:line="197" pos:column="113">.</op:operator><name pos:line="197" pos:column="114">Text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="197" pos:column="121">wordWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></for>
                    <if pos:line="200" pos:column="21">if<condition pos:line="200" pos:column="23">(<expr><name pos:line="200" pos:column="24">queryInIndirect</name> <op:operator pos:line="200" pos:column="40">&amp;&amp;</op:operator> <call><name><name pos:line="200" pos:column="43">indirectWords</name><op:operator pos:line="200" pos:column="56">.</op:operator><name pos:line="200" pos:column="57">Count</name></name><argument_list pos:line="200" pos:column="62">()</argument_list></call> <op:operator pos:line="200" pos:column="65">&gt;</op:operator> <lit:literal type="number" pos:line="200" pos:column="67">2</lit:literal></expr>)</condition><then pos:line="200" pos:column="69"> <block pos:line="200" pos:column="70">{
                        <expr_stmt><expr><call><name pos:line="201" pos:column="25">AddRecommendation</name><argument_list pos:line="201" pos:column="42">( <argument><expr><name pos:line="201" pos:column="44">recommendations</name></expr></argument>, <argument><expr><name><name pos:line="201" pos:column="61">swumRecord</name><op:operator pos:line="201" pos:column="71">.</op:operator><name pos:line="201" pos:column="72">IndirectObject</name></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="88">NormalWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else pos:line="202" pos:column="23">else <if pos:line="202" pos:column="28">if<condition pos:line="202" pos:column="30">(<expr><op:operator pos:line="202" pos:column="31">!</op:operator><name pos:line="202" pos:column="32">queryInIndirect</name> <op:operator pos:line="202" pos:column="48">&amp;&amp;</op:operator> <call><name><name pos:line="202" pos:column="51">indirectWords</name><op:operator pos:line="202" pos:column="64">.</op:operator><name pos:line="202" pos:column="65">Count</name></name><argument_list pos:line="202" pos:column="70">()</argument_list></call> <op:operator pos:line="202" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="202" pos:column="75">1</lit:literal></expr>)</condition><then pos:line="202" pos:column="77"> <block pos:line="202" pos:column="78">{
                        <expr_stmt><expr><call><name pos:line="203" pos:column="25">AddRecommendation</name><argument_list pos:line="203" pos:column="42">( <argument><expr><name pos:line="203" pos:column="44">recommendations</name></expr></argument>, <argument><expr><call><name><name pos:line="203" pos:column="61">string</name><op:operator pos:line="203" pos:column="67">.</op:operator><name pos:line="203" pos:column="68">Format</name></name><argument_list pos:line="203" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="75">"{0} {1}"</lit:literal></expr></argument>, <argument><expr><name pos:line="203" pos:column="86">query</name></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="93">swumRecord</name><op:operator pos:line="203" pos:column="103">.</op:operator><name pos:line="203" pos:column="104">IndirectObject</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="203" pos:column="121">NormalWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                }</block></then></if>
                <expr_stmt><expr><call><name pos:line="206" pos:column="17">AddFullMethodName</name><argument_list pos:line="206" pos:column="34">(<argument><expr><name pos:line="206" pos:column="35">query</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="42">recommendations</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="59">NormalWeight</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="73">terms</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="80">swumRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
        }</block></function>

        <function><type><specifier pos:line="210" pos:column="9">private</specifier> <name pos:line="210" pos:column="17">void</name></type> <name pos:line="210" pos:column="22">AddFullMethodName</name><parameter_list pos:line="210" pos:column="39">(<param><decl><type><name pos:line="210" pos:column="40">string</name></type> <name pos:line="210" pos:column="47">query</name></decl></param>, <param><decl><type><name><name pos:line="210" pos:column="54">Dictionary</name><argument_list pos:line="210" pos:column="64">&lt;<argument><name pos:line="210" pos:column="65">string</name></argument>, <argument><name pos:line="210" pos:column="73">int</name></argument>&gt;</argument_list></name></type> <name pos:line="210" pos:column="78">recommendations</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="95">int</name></type> <name pos:line="210" pos:column="99">NormalWeight</name></decl></param>, <param><decl><type><name><name pos:line="210" pos:column="113">string</name><index pos:line="210" pos:column="119">[]</index></name></type> <name pos:line="210" pos:column="122">terms</name></decl></param>, <param><decl><type><name pos:line="210" pos:column="129">SwumDataRecord</name></type> <name pos:line="210" pos:column="144">swumRecord</name></decl></param>)</parameter_list>
        <block pos:line="211" pos:column="9">{
            <try pos:line="212" pos:column="13">try
            <block pos:line="213" pos:column="13">{
                <if pos:line="214" pos:column="17">if <condition pos:line="214" pos:column="20">(<expr><call><name><name pos:line="214" pos:column="21">swumRecord</name><op:operator pos:line="214" pos:column="31">.</op:operator><name pos:line="214" pos:column="32">SwumNode</name><op:operator pos:line="214" pos:column="40">.</op:operator><name pos:line="214" pos:column="41">Name</name><op:operator pos:line="214" pos:column="45">.</op:operator><name pos:line="214" pos:column="46">ToLower</name></name><argument_list pos:line="214" pos:column="53">()</argument_list></call><op:operator pos:line="214" pos:column="55">.</op:operator><call><name pos:line="214" pos:column="56">Contains</name><argument_list pos:line="214" pos:column="64">(<argument><expr><call><name><name pos:line="214" pos:column="65">query</name><op:operator pos:line="214" pos:column="70">.</op:operator><name pos:line="214" pos:column="71">ToLower</name></name><argument_list pos:line="214" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="214" pos:column="82">
                <block pos:line="215" pos:column="17">{
                    <expr_stmt><expr><call><name pos:line="216" pos:column="21">AddRecommendation</name><argument_list pos:line="216" pos:column="38">(<argument><expr><name><name pos:line="216" pos:column="39">swumRecord</name><op:operator pos:line="216" pos:column="49">.</op:operator><name pos:line="216" pos:column="50">SwumNode</name><op:operator pos:line="216" pos:column="58">.</op:operator><name pos:line="216" pos:column="59">Name</name></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="65">NormalWeight</name> <op:operator pos:line="216" pos:column="78">+</op:operator> <call pos:line="216" pos:column="80">(<name pos:line="216" pos:column="81">int</name>)<argument_list pos:line="216" pos:column="85">(<argument><expr><name pos:line="216" pos:column="86">NormalWeight</name> <op:operator pos:line="216" pos:column="99">*</op:operator> <lit:literal type="number" pos:line="216" pos:column="101">10</lit:literal> <op:operator pos:line="216" pos:column="104">/</op:operator> <call><name pos:line="216" pos:column="106">Distance</name><argument_list pos:line="216" pos:column="114">(<argument><expr><name><name pos:line="216" pos:column="115">swumRecord</name><op:operator pos:line="216" pos:column="125">.</op:operator><name pos:line="216" pos:column="126">SwumNode</name><op:operator pos:line="216" pos:column="134">.</op:operator><name pos:line="216" pos:column="135">Name</name></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="141">query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="216" pos:column="150">recommendations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="217" pos:column="21">//Debug.WriteLine(swumRecord.SwumNode.Name + " " + (NormalWeight + (int)(NormalWeight * 10 / Distance(swumRecord.SwumNode.Name, query))));</comment>
                }</block></then>
                <else pos:line="219" pos:column="17">else
                <block pos:line="220" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="221" pos:column="21">bool</name></type> <name pos:line="221" pos:column="26">shouldAdd</name> <init pos:line="221" pos:column="36">= <expr><lit:literal type="boolean" pos:line="221" pos:column="38">true</lit:literal></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="222" pos:column="21">foreach (<init><decl><type><name pos:line="222" pos:column="30">var</name></type> <name pos:line="222" pos:column="34">term</name> <range pos:line="222" pos:column="39">in <expr><name pos:line="222" pos:column="42">terms</name></expr></range></decl></init>)
                        <if pos:line="223" pos:column="25">if <condition pos:line="223" pos:column="28">(<expr><op:operator pos:line="223" pos:column="29">!</op:operator><call><name><name pos:line="223" pos:column="30">swumRecord</name><op:operator pos:line="223" pos:column="40">.</op:operator><name pos:line="223" pos:column="41">SwumNode</name><op:operator pos:line="223" pos:column="49">.</op:operator><name pos:line="223" pos:column="50">Name</name><op:operator pos:line="223" pos:column="54">.</op:operator><name pos:line="223" pos:column="55">ToLower</name></name><argument_list pos:line="223" pos:column="62">()</argument_list></call><op:operator pos:line="223" pos:column="64">.</op:operator><call><name pos:line="223" pos:column="65">Contains</name><argument_list pos:line="223" pos:column="73">(<argument><expr><name pos:line="223" pos:column="74">term</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="223" pos:column="80">
                            <expr_stmt><expr><name pos:line="224" pos:column="29">shouldAdd</name> <op:operator pos:line="224" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="224" pos:column="41">false</lit:literal></expr>;</expr_stmt></then></if></foreach>
                    <if pos:line="225" pos:column="21">if <condition pos:line="225" pos:column="24">(<expr><name pos:line="225" pos:column="25">shouldAdd</name></expr>)</condition><then pos:line="225" pos:column="35">
                    <block pos:line="226" pos:column="21">{
                        <expr_stmt><expr><call><name pos:line="227" pos:column="25">AddRecommendation</name><argument_list pos:line="227" pos:column="42">(<argument><expr><name><name pos:line="227" pos:column="43">swumRecord</name><op:operator pos:line="227" pos:column="53">.</op:operator><name pos:line="227" pos:column="54">SwumNode</name><op:operator pos:line="227" pos:column="62">.</op:operator><name pos:line="227" pos:column="63">Name</name></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="69">NormalWeight</name> <op:operator pos:line="227" pos:column="82">+</op:operator> <call pos:line="227" pos:column="84">(<name pos:line="227" pos:column="85">int</name>)<argument_list pos:line="227" pos:column="89">(<argument><expr><name pos:line="227" pos:column="90">NormalWeight</name> <op:operator pos:line="227" pos:column="103">*</op:operator> <lit:literal type="number" pos:line="227" pos:column="105">10</lit:literal> <op:operator pos:line="227" pos:column="108">/</op:operator> <call><name pos:line="227" pos:column="110">Distance</name><argument_list pos:line="227" pos:column="118">(<argument><expr><name><name pos:line="227" pos:column="119">swumRecord</name><op:operator pos:line="227" pos:column="129">.</op:operator><name pos:line="227" pos:column="130">SwumNode</name><op:operator pos:line="227" pos:column="138">.</op:operator><name pos:line="227" pos:column="139">Name</name></name></expr></argument>, <argument><expr><name pos:line="227" pos:column="145">query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="227" pos:column="154">recommendations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line" pos:line="228" pos:column="25">//Debug.WriteLine(swumRecord.SwumNode.Name+" "+(NormalWeight + (int)(NormalWeight * 10 / Distance(swumRecord.SwumNode.Name, query))));</comment>
                    }</block></then></if>
                }</block></else></if>
            }</block>
            <catch pos:line="232" pos:column="13">catch <parameter_list pos:line="232" pos:column="19">(<param><decl><type><name pos:line="232" pos:column="20">NullReferenceException</name></type> <name pos:line="232" pos:column="43">nre</name></decl></param>)</parameter_list>
            <block pos:line="233" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="234" pos:column="17">Debug</name><op:operator pos:line="234" pos:column="22">.</op:operator><name pos:line="234" pos:column="23">WriteLine</name></name><argument_list pos:line="234" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="234" pos:column="33">"he"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="235" pos:column="17">//ignore</comment>
            }</block></catch></try>
        }</block></function>

        <decl_stmt><decl><type><specifier pos:line="239" pos:column="9">static</specifier> <name pos:line="239" pos:column="16">int</name></type> <name pos:line="239" pos:column="20">maxOffset</name> <init pos:line="239" pos:column="30">= <expr><lit:literal type="number" pos:line="239" pos:column="32">5</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier pos:line="241" pos:column="9">public</specifier> <specifier pos:line="241" pos:column="16">static</specifier> <name pos:line="241" pos:column="23">float</name></type> <name pos:line="241" pos:column="29">Distance</name><parameter_list pos:line="241" pos:column="37">(<param><decl><type><name pos:line="241" pos:column="38">string</name></type> <name pos:line="241" pos:column="45">s1</name></decl></param>, <param><decl><type><name pos:line="241" pos:column="49">string</name></type> <name pos:line="241" pos:column="56">s2</name></decl></param>)</parameter_list>
        <block pos:line="242" pos:column="9">{
            <if pos:line="243" pos:column="13">if <condition pos:line="243" pos:column="16">(<expr><call><name><name pos:line="243" pos:column="17">String</name><op:operator pos:line="243" pos:column="23">.</op:operator><name pos:line="243" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="243" pos:column="37">(<argument><expr><name pos:line="243" pos:column="38">s1</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="243" pos:column="42">
                <return pos:line="244" pos:column="17">return
                <expr><call><name><name pos:line="245" pos:column="17">String</name><op:operator pos:line="245" pos:column="23">.</op:operator><name pos:line="245" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="245" pos:column="37">(<argument><expr><name pos:line="245" pos:column="38">s2</name></expr></argument>)</argument_list></call> <op:operator pos:line="245" pos:column="42">?</op:operator> <lit:literal type="number" pos:line="245" pos:column="44">0</lit:literal> <op:operator pos:line="245" pos:column="46">:</op:operator> <name><name pos:line="245" pos:column="48">s2</name><op:operator pos:line="245" pos:column="50">.</op:operator><name pos:line="245" pos:column="51">Length</name></name></expr>;</return></then></if>
            <if pos:line="246" pos:column="13">if <condition pos:line="246" pos:column="16">(<expr><call><name><name pos:line="246" pos:column="17">String</name><op:operator pos:line="246" pos:column="23">.</op:operator><name pos:line="246" pos:column="24">IsNullOrEmpty</name></name><argument_list pos:line="246" pos:column="37">(<argument><expr><name pos:line="246" pos:column="38">s2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="246" pos:column="42">
                <return pos:line="247" pos:column="17">return <expr><name><name pos:line="247" pos:column="24">s1</name><op:operator pos:line="247" pos:column="26">.</op:operator><name pos:line="247" pos:column="27">Length</name></name></expr>;</return></then></if>
            <decl_stmt><decl><type><name pos:line="248" pos:column="13">int</name></type> <name pos:line="248" pos:column="17">c</name> <init pos:line="248" pos:column="19">= <expr><lit:literal type="number" pos:line="248" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="249" pos:column="13">int</name></type> <name pos:line="249" pos:column="17">offset1</name> <init pos:line="249" pos:column="25">= <expr><lit:literal type="number" pos:line="249" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="250" pos:column="13">int</name></type> <name pos:line="250" pos:column="17">offset2</name> <init pos:line="250" pos:column="25">= <expr><lit:literal type="number" pos:line="250" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="251" pos:column="13">int</name></type> <name pos:line="251" pos:column="17">lcs</name> <init pos:line="251" pos:column="21">= <expr><lit:literal type="number" pos:line="251" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
            <while pos:line="252" pos:column="13">while <condition pos:line="252" pos:column="19">(<expr><op:operator pos:line="252" pos:column="20">(</op:operator><name pos:line="252" pos:column="21">c</name> <op:operator pos:line="252" pos:column="23">+</op:operator> <name pos:line="252" pos:column="25">offset1</name> <op:operator pos:line="252" pos:column="33">&lt;</op:operator> <name><name pos:line="252" pos:column="35">s1</name><op:operator pos:line="252" pos:column="37">.</op:operator><name pos:line="252" pos:column="38">Length</name></name><op:operator pos:line="252" pos:column="44">)</op:operator>
            <op:operator pos:line="253" pos:column="13">&amp;&amp;</op:operator> <op:operator pos:line="253" pos:column="16">(</op:operator><name pos:line="253" pos:column="17">c</name> <op:operator pos:line="253" pos:column="19">+</op:operator> <name pos:line="253" pos:column="21">offset2</name> <op:operator pos:line="253" pos:column="29">&lt;</op:operator> <name><name pos:line="253" pos:column="31">s2</name><op:operator pos:line="253" pos:column="33">.</op:operator><name pos:line="253" pos:column="34">Length</name></name><op:operator pos:line="253" pos:column="40">)</op:operator></expr>)</condition>
            <block pos:line="254" pos:column="13">{
                <if pos:line="255" pos:column="17">if <condition pos:line="255" pos:column="20">(<expr><name><name pos:line="255" pos:column="21">s1</name><index pos:line="255" pos:column="23">[<expr><name pos:line="255" pos:column="24">c</name> <op:operator pos:line="255" pos:column="26">+</op:operator> <name pos:line="255" pos:column="28">offset1</name></expr>]</index></name> <op:operator pos:line="255" pos:column="37">==</op:operator> <name><name pos:line="255" pos:column="40">s2</name><index pos:line="255" pos:column="42">[<expr><name pos:line="255" pos:column="43">c</name> <op:operator pos:line="255" pos:column="45">+</op:operator> <name pos:line="255" pos:column="47">offset2</name></expr>]</index></name></expr>)</condition><then pos:line="255" pos:column="56"> <expr_stmt><expr><name pos:line="255" pos:column="57">lcs</name><op:operator pos:line="255" pos:column="60">++</op:operator></expr>;</expr_stmt></then>
                <else pos:line="256" pos:column="17">else
                <block pos:line="257" pos:column="17">{
                    <expr_stmt><expr><name pos:line="258" pos:column="21">offset1</name> <op:operator pos:line="258" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="258" pos:column="31">0</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="259" pos:column="21">offset2</name> <op:operator pos:line="259" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="259" pos:column="31">0</lit:literal></expr>;</expr_stmt>
                    <for pos:line="260" pos:column="21">for (<init><decl><type><name pos:line="260" pos:column="26">int</name></type> <name pos:line="260" pos:column="30">i</name> <init pos:line="260" pos:column="32">= <expr><lit:literal type="number" pos:line="260" pos:column="34">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="260" pos:column="37">i</name> <op:operator pos:line="260" pos:column="39">&lt;</op:operator> <name pos:line="260" pos:column="41">maxOffset</name></expr>;</condition> <incr><expr><name pos:line="260" pos:column="52">i</name><op:operator pos:line="260" pos:column="53">++</op:operator></expr></incr>)
                    <block pos:line="261" pos:column="21">{
                        <if pos:line="262" pos:column="25">if <condition pos:line="262" pos:column="28">(<expr><op:operator pos:line="262" pos:column="29">(</op:operator><name pos:line="262" pos:column="30">c</name> <op:operator pos:line="262" pos:column="32">+</op:operator> <name pos:line="262" pos:column="34">i</name> <op:operator pos:line="262" pos:column="36">&lt;</op:operator> <name><name pos:line="262" pos:column="38">s1</name><op:operator pos:line="262" pos:column="40">.</op:operator><name pos:line="262" pos:column="41">Length</name></name><op:operator pos:line="262" pos:column="47">)</op:operator>
                        <op:operator pos:line="263" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="263" pos:column="28">(</op:operator><name><name pos:line="263" pos:column="29">s1</name><index pos:line="263" pos:column="31">[<expr><name pos:line="263" pos:column="32">c</name> <op:operator pos:line="263" pos:column="34">+</op:operator> <name pos:line="263" pos:column="36">i</name></expr>]</index></name> <op:operator pos:line="263" pos:column="39">==</op:operator> <name><name pos:line="263" pos:column="42">s2</name><index pos:line="263" pos:column="44">[<expr><name pos:line="263" pos:column="45">c</name></expr>]</index></name><op:operator pos:line="263" pos:column="47">)</op:operator></expr>)</condition><then pos:line="263" pos:column="49">
                        <block pos:line="264" pos:column="25">{
                            <expr_stmt><expr><name pos:line="265" pos:column="29">offset1</name> <op:operator pos:line="265" pos:column="37">=</op:operator> <name pos:line="265" pos:column="39">i</name></expr>;</expr_stmt>
                            <break pos:line="266" pos:column="29">break;</break>
                        }</block></then></if>
                        <if pos:line="268" pos:column="25">if <condition pos:line="268" pos:column="28">(<expr><op:operator pos:line="268" pos:column="29">(</op:operator><name pos:line="268" pos:column="30">c</name> <op:operator pos:line="268" pos:column="32">+</op:operator> <name pos:line="268" pos:column="34">i</name> <op:operator pos:line="268" pos:column="36">&lt;</op:operator> <name><name pos:line="268" pos:column="38">s2</name><op:operator pos:line="268" pos:column="40">.</op:operator><name pos:line="268" pos:column="41">Length</name></name><op:operator pos:line="268" pos:column="47">)</op:operator>
                        <op:operator pos:line="269" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="269" pos:column="28">(</op:operator><name><name pos:line="269" pos:column="29">s1</name><index pos:line="269" pos:column="31">[<expr><name pos:line="269" pos:column="32">c</name></expr>]</index></name> <op:operator pos:line="269" pos:column="35">==</op:operator> <name><name pos:line="269" pos:column="38">s2</name><index pos:line="269" pos:column="40">[<expr><name pos:line="269" pos:column="41">c</name> <op:operator pos:line="269" pos:column="43">+</op:operator> <name pos:line="269" pos:column="45">i</name></expr>]</index></name><op:operator pos:line="269" pos:column="47">)</op:operator></expr>)</condition><then pos:line="269" pos:column="49">
                        <block pos:line="270" pos:column="25">{
                            <expr_stmt><expr><name pos:line="271" pos:column="29">offset2</name> <op:operator pos:line="271" pos:column="37">=</op:operator> <name pos:line="271" pos:column="39">i</name></expr>;</expr_stmt>
                            <break pos:line="272" pos:column="29">break;</break>
                        }</block></then></if>
                    }</block></for>
                }</block></else></if>
                <expr_stmt><expr><name pos:line="276" pos:column="17">c</name><op:operator pos:line="276" pos:column="18">++</op:operator></expr>;</expr_stmt>
            }</block></while>
            <decl_stmt><decl><type><name pos:line="278" pos:column="13">var</name></type> <name pos:line="278" pos:column="17">returnVal</name> <init pos:line="278" pos:column="27">= <expr><op:operator pos:line="278" pos:column="29">(</op:operator><name><name pos:line="278" pos:column="30">s1</name><op:operator pos:line="278" pos:column="32">.</op:operator><name pos:line="278" pos:column="33">Length</name></name> <op:operator pos:line="278" pos:column="40">+</op:operator> <name><name pos:line="278" pos:column="42">s2</name><op:operator pos:line="278" pos:column="44">.</op:operator><name pos:line="278" pos:column="45">Length</name></name><op:operator pos:line="278" pos:column="51">)</op:operator> <op:operator pos:line="278" pos:column="53">/</op:operator> <lit:literal type="number" pos:line="278" pos:column="55">2</lit:literal> <op:operator pos:line="278" pos:column="57">-</op:operator> <name pos:line="278" pos:column="59">lcs</name></expr></init></decl>;</decl_stmt>
            <return pos:line="279" pos:column="13">return <expr><name pos:line="279" pos:column="20">returnVal</name></expr>;</return>
        }</block></function>
       

        <comment type="line" pos:line="283" pos:column="9">/// &lt;summary&gt;</comment>
        <comment type="line" pos:line="284" pos:column="9">/// Returns the index of &lt;paramref name="word"/&gt; within &lt;paramref name="phraseNode"/&gt;, or -1 if it's not found.</comment>
        <comment type="line" pos:line="285" pos:column="9">/// &lt;/summary&gt;</comment>
        <function><type><specifier pos:line="286" pos:column="9">private</specifier> <name pos:line="286" pos:column="17">int</name></type> <name pos:line="286" pos:column="21">FindWordInPhraseNode</name><parameter_list pos:line="286" pos:column="41">(<param><decl><type><name pos:line="286" pos:column="42">PhraseNode</name></type> <name pos:line="286" pos:column="53">phraseNode</name></decl></param>, <param><decl><type><name pos:line="286" pos:column="65">string</name></type> <name pos:line="286" pos:column="72">word</name></decl></param>)</parameter_list> <block pos:line="286" pos:column="78">{
            <if pos:line="287" pos:column="13">if<condition pos:line="287" pos:column="15">(<expr><name pos:line="287" pos:column="16">phraseNode</name> <op:operator pos:line="287" pos:column="27">==</op:operator> <name pos:line="287" pos:column="30">null</name></expr>)</condition><then pos:line="287" pos:column="35"> <block pos:line="287" pos:column="36">{ <throw pos:line="287" pos:column="38">throw <expr><op:operator pos:line="287" pos:column="44">new</op:operator> <call><name pos:line="287" pos:column="48">ArgumentNullException</name><argument_list pos:line="287" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="287" pos:column="70">"phraseNode"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            <if pos:line="288" pos:column="13">if<condition pos:line="288" pos:column="15">(<expr><name pos:line="288" pos:column="16">word</name> <op:operator pos:line="288" pos:column="21">==</op:operator> <name pos:line="288" pos:column="24">null</name></expr>)</condition><then pos:line="288" pos:column="29"> <block pos:line="288" pos:column="30">{ <throw pos:line="288" pos:column="32">throw <expr><op:operator pos:line="288" pos:column="38">new</op:operator> <call><name pos:line="288" pos:column="42">ArgumentNullException</name><argument_list pos:line="288" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="288" pos:column="64">"word"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw> }</block></then></if>
            
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">int</name></type> <name pos:line="290" pos:column="17">index</name> <init pos:line="290" pos:column="23">= <expr><op:operator pos:line="290" pos:column="25">-</op:operator><lit:literal type="number" pos:line="290" pos:column="26">1</lit:literal></expr></init></decl>;</decl_stmt>
            <for pos:line="291" pos:column="13">for(<init><decl><type><name pos:line="291" pos:column="17">int</name></type> <name pos:line="291" pos:column="21">i</name> <init pos:line="291" pos:column="23">= <expr><lit:literal type="number" pos:line="291" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="291" pos:column="28">i</name> <op:operator pos:line="291" pos:column="30">&lt;</op:operator> <call><name><name pos:line="291" pos:column="32">phraseNode</name><op:operator pos:line="291" pos:column="42">.</op:operator><name pos:line="291" pos:column="43">Size</name></name><argument_list pos:line="291" pos:column="47">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="291" pos:column="51">i</name><op:operator pos:line="291" pos:column="52">++</op:operator></expr></incr>) <block pos:line="291" pos:column="56">{
                <if pos:line="292" pos:column="17">if<condition pos:line="292" pos:column="19">(<expr><call><name><name pos:line="292" pos:column="20">string</name><op:operator pos:line="292" pos:column="26">.</op:operator><name pos:line="292" pos:column="27">Compare</name></name><argument_list pos:line="292" pos:column="34">(<argument><expr><name><name pos:line="292" pos:column="35">phraseNode</name><index pos:line="292" pos:column="45">[<expr><name pos:line="292" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="292" pos:column="48">.</op:operator><name pos:line="292" pos:column="49">Text</name></expr></argument>, <argument><expr><name pos:line="292" pos:column="55">word</name></expr></argument>, <argument><expr><name><name pos:line="292" pos:column="61">StringComparison</name><op:operator pos:line="292" pos:column="77">.</op:operator><name pos:line="292" pos:column="78">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="292" pos:column="106">==</op:operator> <lit:literal type="number" pos:line="292" pos:column="109">0</lit:literal></expr>)</condition><then pos:line="292" pos:column="111"> <block pos:line="292" pos:column="112">{
                    <expr_stmt><expr><name pos:line="293" pos:column="21">index</name> <op:operator pos:line="293" pos:column="27">=</op:operator> <name pos:line="293" pos:column="29">i</name></expr>;</expr_stmt>
                    <break pos:line="294" pos:column="21">break;</break>
                }</block></then></if>
            }</block></for>
            <return pos:line="297" pos:column="13">return <expr><name pos:line="297" pos:column="20">index</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="300" pos:column="9">private</specifier> <name pos:line="300" pos:column="17">int</name></type> <name pos:line="300" pos:column="21">GetWeightForPartOfSpeech</name><parameter_list pos:line="300" pos:column="45">(<param><decl><type><name pos:line="300" pos:column="46">PartOfSpeechTag</name></type> <name pos:line="300" pos:column="62">pos</name></decl></param>)</parameter_list> <block pos:line="300" pos:column="67">{
            <decl_stmt><decl><type><specifier pos:line="301" pos:column="13">const</specifier> <name pos:line="301" pos:column="19">int</name></type> <name pos:line="301" pos:column="23">NormalWeight</name> <init pos:line="301" pos:column="36">= <expr><lit:literal type="number" pos:line="301" pos:column="38">1</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="302" pos:column="13">const</specifier> <name pos:line="302" pos:column="19">int</name></type> <name pos:line="302" pos:column="23">PrimaryPosWeight</name> <init pos:line="302" pos:column="40">= <expr><lit:literal type="number" pos:line="302" pos:column="42">5</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="303" pos:column="13">const</specifier> <name pos:line="303" pos:column="19">int</name></type> <name pos:line="303" pos:column="23">PreambleWeight</name> <init pos:line="303" pos:column="38">= <expr><lit:literal type="number" pos:line="303" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="304" pos:column="13">var</name></type> <name pos:line="304" pos:column="17">primaryPos</name> <init pos:line="304" pos:column="28">= <expr><op:operator pos:line="304" pos:column="30">new</op:operator><index pos:line="304" pos:column="33">[]</index> <block pos:line="304" pos:column="36">{ <expr><name><name pos:line="304" pos:column="38">PartOfSpeechTag</name><op:operator pos:line="304" pos:column="53">.</op:operator><name pos:line="304" pos:column="54">Noun</name></name></expr>, <expr><name><name pos:line="304" pos:column="60">PartOfSpeechTag</name><op:operator pos:line="304" pos:column="75">.</op:operator><name pos:line="304" pos:column="76">NounPlural</name></name></expr>, <expr><name><name pos:line="304" pos:column="88">PartOfSpeechTag</name><op:operator pos:line="304" pos:column="103">.</op:operator><name pos:line="304" pos:column="104">PastParticiple</name></name></expr>, <expr><name><name pos:line="304" pos:column="120">PartOfSpeechTag</name><op:operator pos:line="304" pos:column="135">.</op:operator><name pos:line="304" pos:column="136">Verb</name></name></expr>, <expr><name><name pos:line="304" pos:column="142">PartOfSpeechTag</name><op:operator pos:line="304" pos:column="157">.</op:operator><name pos:line="304" pos:column="158">Verb3PS</name></name></expr>, <expr><name><name pos:line="304" pos:column="167">PartOfSpeechTag</name><op:operator pos:line="304" pos:column="182">.</op:operator><name pos:line="304" pos:column="183">VerbIng</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name pos:line="306" pos:column="13">int</name></type> <name pos:line="306" pos:column="17">result</name> <init pos:line="306" pos:column="24">= <expr><name pos:line="306" pos:column="26">NormalWeight</name></expr></init></decl>;</decl_stmt>
            <if pos:line="307" pos:column="13">if<condition pos:line="307" pos:column="15">(<expr><call><name><name pos:line="307" pos:column="16">primaryPos</name><op:operator pos:line="307" pos:column="26">.</op:operator><name pos:line="307" pos:column="27">Contains</name></name><argument_list pos:line="307" pos:column="35">(<argument><expr><name pos:line="307" pos:column="36">pos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="307" pos:column="41"> <block pos:line="307" pos:column="42">{
                <expr_stmt><expr><name pos:line="308" pos:column="17">result</name> <op:operator pos:line="308" pos:column="24">=</op:operator> <name pos:line="308" pos:column="26">PrimaryPosWeight</name></expr>;</expr_stmt>
            }</block></then> <else pos:line="309" pos:column="15">else <if pos:line="309" pos:column="20">if<condition pos:line="309" pos:column="22">(<expr><name pos:line="309" pos:column="23">pos</name> <op:operator pos:line="309" pos:column="27">==</op:operator> <name><name pos:line="309" pos:column="30">PartOfSpeechTag</name><op:operator pos:line="309" pos:column="45">.</op:operator><name pos:line="309" pos:column="46">Preamble</name></name></expr>)</condition><then pos:line="309" pos:column="55"> <block pos:line="309" pos:column="56">{
                <expr_stmt><expr><name pos:line="310" pos:column="17">result</name> <op:operator pos:line="310" pos:column="24">=</op:operator> <name pos:line="310" pos:column="26">PreambleWeight</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <return pos:line="312" pos:column="13">return <expr><name pos:line="312" pos:column="20">result</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
