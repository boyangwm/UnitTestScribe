<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\Tools\SparseCoOccurrenceMatrix.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Drawing</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">IO</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Linq</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">System</name><op:operator pos:line="6" pos:column="13">.</op:operator><name pos:line="6" pos:column="14">Text</name></name>;</using>

<namespace pos:line="8" pos:column="1">namespace <name><name pos:line="8" pos:column="11">Sando</name><op:operator pos:line="8" pos:column="16">.</op:operator><name pos:line="8" pos:column="17">Core</name><op:operator pos:line="8" pos:column="21">.</op:operator><name pos:line="8" pos:column="22">Tools</name></name>
<block pos:line="9" pos:column="1">{
    <class><specifier pos:line="10" pos:column="5">public</specifier> class <name pos:line="10" pos:column="18">SparseCoOccurrenceMatrix</name> <super pos:line="10" pos:column="43">: <name pos:line="10" pos:column="45">IWordCoOccurrenceMatrix</name></super>
    <block pos:line="11" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">private</specifier> <specifier pos:line="12" pos:column="17">readonly</specifier> <name><name pos:line="12" pos:column="26">List</name><argument_list pos:line="12" pos:column="30">&lt;<argument><name pos:line="12" pos:column="31">String</name></argument>&gt;</argument_list></name></type> <name pos:line="12" pos:column="39">allWords</name> <init pos:line="12" pos:column="48">= <expr><op:operator pos:line="12" pos:column="50">new</op:operator> <call><name><name pos:line="12" pos:column="54">List</name><argument_list pos:line="12" pos:column="58">&lt;<argument><name pos:line="12" pos:column="59">string</name></argument>&gt;</argument_list></name><argument_list pos:line="12" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">private</specifier> <specifier pos:line="13" pos:column="17">readonly</specifier> <name><name pos:line="13" pos:column="26">List</name><argument_list pos:line="13" pos:column="30">&lt;<argument><name pos:line="13" pos:column="31">BoxedInt</name></argument>&gt;</argument_list></name></type> <name pos:line="13" pos:column="41">A</name> <init pos:line="13" pos:column="43">= <expr><op:operator pos:line="13" pos:column="45">new</op:operator> <call><name><name pos:line="13" pos:column="49">List</name><argument_list pos:line="13" pos:column="53">&lt;<argument><name pos:line="13" pos:column="54">BoxedInt</name></argument>&gt;</argument_list></name><argument_list pos:line="13" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">readonly</specifier> <name><name pos:line="14" pos:column="26">List</name><argument_list pos:line="14" pos:column="30">&lt;<argument><name pos:line="14" pos:column="31">BoxedInt</name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="41">IA</name> <init pos:line="14" pos:column="44">= <expr><op:operator pos:line="14" pos:column="46">new</op:operator> <call><name><name pos:line="14" pos:column="50">List</name><argument_list pos:line="14" pos:column="54">&lt;<argument><name pos:line="14" pos:column="55">BoxedInt</name></argument>&gt;</argument_list></name><argument_list pos:line="14" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">private</specifier> <specifier pos:line="15" pos:column="17">readonly</specifier> <name><name pos:line="15" pos:column="26">List</name><argument_list pos:line="15" pos:column="30">&lt;<argument><name pos:line="15" pos:column="31">BoxedInt</name></argument>&gt;</argument_list></name></type> <name pos:line="15" pos:column="41">JA</name> <init pos:line="15" pos:column="44">= <expr><op:operator pos:line="15" pos:column="46">new</op:operator> <call><name><name pos:line="15" pos:column="50">List</name><argument_list pos:line="15" pos:column="54">&lt;<argument><name pos:line="15" pos:column="55">BoxedInt</name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">readonly</specifier> <name pos:line="16" pos:column="26">object</name></type> <name pos:line="16" pos:column="33">locker</name> <init pos:line="16" pos:column="40">= <expr><op:operator pos:line="16" pos:column="42">new</op:operator> <call><name pos:line="16" pos:column="46">object</name><argument_list pos:line="16" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier pos:line="18" pos:column="9">public</specifier> <name pos:line="18" pos:column="16">SparseCoOccurrenceMatrix</name><parameter_list pos:line="18" pos:column="40">()</parameter_list>
        <block pos:line="19" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">TimedProcessor</name><op:operator pos:line="20" pos:column="27">.</op:operator><name pos:line="20" pos:column="28">GetInstance</name></name><argument_list pos:line="20" pos:column="39">()</argument_list></call><op:operator pos:line="20" pos:column="41">.</op:operator><call><name pos:line="20" pos:column="42">AddTimedTask</name><argument_list pos:line="20" pos:column="54">(<argument><expr><name pos:line="20" pos:column="55">SaveToFile</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="20" pos:column="67">13</lit:literal> <op:operator pos:line="20" pos:column="70">*</op:operator> <lit:literal type="number" pos:line="20" pos:column="72">60</lit:literal> <op:operator pos:line="20" pos:column="75">*</op:operator> <lit:literal type="number" pos:line="20" pos:column="77">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <class><specifier pos:line="23" pos:column="9">private</specifier> class <name pos:line="23" pos:column="23">BoxedInt</name> <super pos:line="23" pos:column="32">: <name><name pos:line="23" pos:column="34">IComparable</name><argument_list pos:line="23" pos:column="45">&lt;<argument><name pos:line="23" pos:column="46">BoxedInt</name></argument>&gt;</argument_list></name></super>
        <block pos:line="24" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="25" pos:column="13">public</specifier> <name pos:line="25" pos:column="20">int</name></type> <name pos:line="25" pos:column="24">Value</name> <block pos:line="25" pos:column="30">{ <function_decl><name pos:line="25" pos:column="32">get</name>;</function_decl> <function_decl><name pos:line="25" pos:column="37">set</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="27" pos:column="13">public</specifier> <name pos:line="27" pos:column="20">BoxedInt</name><parameter_list pos:line="27" pos:column="28">(<param><decl><type><name pos:line="27" pos:column="29">int</name></type> <name pos:line="27" pos:column="33">Value</name></decl></param>)</parameter_list>
            <block pos:line="28" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="29" pos:column="17">this</name><op:operator pos:line="29" pos:column="21">.</op:operator><name pos:line="29" pos:column="22">Value</name></name> <op:operator pos:line="29" pos:column="28">=</op:operator> <name pos:line="29" pos:column="30">Value</name></expr>;</expr_stmt>
            }</block></constructor>

            <function><type><specifier pos:line="32" pos:column="13">public</specifier> <name pos:line="32" pos:column="20">int</name></type> <name pos:line="32" pos:column="24">CompareTo</name><parameter_list pos:line="32" pos:column="33">(<param><decl><type><name pos:line="32" pos:column="34">BoxedInt</name></type> <name pos:line="32" pos:column="43">other</name></decl></param>)</parameter_list>
            <block pos:line="33" pos:column="13">{
                <return pos:line="34" pos:column="17">return <expr><call><name><name pos:line="34" pos:column="24">this</name><op:operator pos:line="34" pos:column="28">.</op:operator><name pos:line="34" pos:column="29">Value</name><op:operator pos:line="34" pos:column="34">.</op:operator><name pos:line="34" pos:column="35">CompareTo</name></name><argument_list pos:line="34" pos:column="44">(<argument><expr><name><name pos:line="34" pos:column="45">other</name><op:operator pos:line="34" pos:column="50">.</op:operator><name pos:line="34" pos:column="51">Value</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class>

        <function><type><specifier pos:line="38" pos:column="9">private</specifier> <name pos:line="38" pos:column="17">int</name></type> <name pos:line="38" pos:column="21">GetValue</name><parameter_list pos:line="38" pos:column="29">(<param><decl><type><name pos:line="38" pos:column="30">int</name></type> <name pos:line="38" pos:column="34">row</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="39">int</name></type> <name pos:line="38" pos:column="43">column</name></decl></param>)</parameter_list>
        <block pos:line="39" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">var</name></type> <name pos:line="40" pos:column="17">columnNumbers</name> <init pos:line="40" pos:column="31">= <expr><call><name pos:line="40" pos:column="33">GetNonZeroColumnNumbers</name><argument_list pos:line="40" pos:column="56">(<argument><expr><name pos:line="40" pos:column="57">row</name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="61">.</op:operator><call><name pos:line="40" pos:column="62">ToList</name><argument_list pos:line="40" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">var</name></type> <name pos:line="41" pos:column="17">allRow</name> <init pos:line="41" pos:column="24">= <expr><call><name><name pos:line="41" pos:column="26">A</name><op:operator pos:line="41" pos:column="27">.</op:operator><name pos:line="41" pos:column="28">GetRange</name></name><argument_list pos:line="41" pos:column="36">(<argument><expr><call><name><name pos:line="41" pos:column="37">IA</name><op:operator pos:line="41" pos:column="39">.</op:operator><name pos:line="41" pos:column="40">ElementAt</name></name><argument_list pos:line="41" pos:column="49">(<argument><expr><name pos:line="41" pos:column="50">row</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="54">.</op:operator><name pos:line="41" pos:column="55">Value</name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="62">columnNumbers</name><op:operator pos:line="41" pos:column="75">.</op:operator><name pos:line="41" pos:column="76">Count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="42" pos:column="13">var</name></type> <name pos:line="42" pos:column="17">index</name> <init pos:line="42" pos:column="23">= <expr><call><name><name pos:line="42" pos:column="25">columnNumbers</name><op:operator pos:line="42" pos:column="38">.</op:operator><name pos:line="42" pos:column="39">BinarySearch</name></name><argument_list pos:line="42" pos:column="51">(<argument><expr><op:operator pos:line="42" pos:column="52">new</op:operator> <call><name pos:line="42" pos:column="56">BoxedInt</name><argument_list pos:line="42" pos:column="64">(<argument><expr><name pos:line="42" pos:column="65">column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="43" pos:column="13">return <expr><name pos:line="43" pos:column="20">index</name> <op:operator pos:line="43" pos:column="26">&gt;=</op:operator> <lit:literal type="number" pos:line="43" pos:column="29">0</lit:literal> <op:operator pos:line="43" pos:column="31">?</op:operator> <call><name><name pos:line="43" pos:column="33">allRow</name><op:operator pos:line="43" pos:column="39">.</op:operator><name pos:line="43" pos:column="40">ElementAt</name></name><argument_list pos:line="43" pos:column="49">(<argument><expr><name pos:line="43" pos:column="50">index</name></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="56">.</op:operator><name pos:line="43" pos:column="57">Value</name> <op:operator pos:line="43" pos:column="63">:</op:operator> <lit:literal type="number" pos:line="43" pos:column="65">0</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="46" pos:column="9">private</specifier> <name><name pos:line="46" pos:column="17">IEnumerable</name><argument_list pos:line="46" pos:column="28">&lt;<argument><name pos:line="46" pos:column="29">BoxedInt</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="39">GetNonZeroColumnNumbers</name><parameter_list pos:line="46" pos:column="62">(<param><decl><type><name pos:line="46" pos:column="63">int</name></type> <name pos:line="46" pos:column="67">row</name></decl></param>)</parameter_list>
        <block pos:line="47" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="48" pos:column="13">var</name></type> <name pos:line="48" pos:column="17">start</name> <init pos:line="48" pos:column="23">= <expr><call><name><name pos:line="48" pos:column="25">IA</name><op:operator pos:line="48" pos:column="27">.</op:operator><name pos:line="48" pos:column="28">ElementAt</name></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">row</name></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="42">.</op:operator><name pos:line="48" pos:column="43">Value</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">var</name></type> <name pos:line="49" pos:column="17">length</name> <init pos:line="49" pos:column="24">= <expr><name pos:line="49" pos:column="26">row</name> <op:operator pos:line="49" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="49" pos:column="32">1</lit:literal> <op:operator pos:line="49" pos:column="34">&lt;</op:operator> <name><name pos:line="49" pos:column="36">IA</name><op:operator pos:line="49" pos:column="38">.</op:operator><name pos:line="49" pos:column="39">Count</name> <type:modifier pos:line="49" pos:column="45">?</type:modifier></name> <call><name><name pos:line="49" pos:column="47">IA</name><op:operator pos:line="49" pos:column="49">.</op:operator><name pos:line="49" pos:column="50">ElementAt</name></name><argument_list pos:line="49" pos:column="59">(<argument><expr><name pos:line="49" pos:column="60">row</name> <op:operator pos:line="49" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="49" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="68">.</op:operator><name pos:line="49" pos:column="69">Value</name> <op:operator pos:line="49" pos:column="75">-</op:operator> <name pos:line="49" pos:column="77">start</name> 
                <op:operator pos:line="50" pos:column="17">:</op:operator> <name><name pos:line="50" pos:column="19">JA</name><op:operator pos:line="50" pos:column="21">.</op:operator><name pos:line="50" pos:column="22">Count</name></name> <op:operator pos:line="50" pos:column="28">-</op:operator> <name pos:line="50" pos:column="30">start</name></expr></init></decl>;</decl_stmt>
            <return pos:line="51" pos:column="13">return <expr><call><name><name pos:line="51" pos:column="20">JA</name><op:operator pos:line="51" pos:column="22">.</op:operator><name pos:line="51" pos:column="23">GetRange</name></name><argument_list pos:line="51" pos:column="31">(<argument><expr><name pos:line="51" pos:column="32">start</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="39">length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="54" pos:column="9">private</specifier> <name pos:line="54" pos:column="17">void</name></type> <name pos:line="54" pos:column="22">InsertRowAndColumnAt</name><parameter_list pos:line="54" pos:column="42">(<param><decl><type><name pos:line="54" pos:column="43">int</name></type> <name pos:line="54" pos:column="47">index</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="54">int</name></type> <name pos:line="54" pos:column="58">value</name></decl></param>)</parameter_list>
        <block pos:line="55" pos:column="9">{
            <comment type="line" pos:line="56" pos:column="13">// Update A.</comment>
            <decl_stmt><decl><type><name pos:line="57" pos:column="13">var</name></type> <name pos:line="57" pos:column="17">AIndex</name> <init pos:line="57" pos:column="24">= <expr><name><name pos:line="57" pos:column="26">IA</name><op:operator pos:line="57" pos:column="28">.</op:operator><name pos:line="57" pos:column="29">Count</name></name> <op:operator pos:line="57" pos:column="35">&gt;</op:operator> <name pos:line="57" pos:column="37">index</name> <op:operator pos:line="57" pos:column="43">&amp;&amp;</op:operator> <name pos:line="57" pos:column="46">index</name> <op:operator pos:line="57" pos:column="52">&gt;=</op:operator> <lit:literal type="number" pos:line="57" pos:column="55">0</lit:literal> <op:operator pos:line="57" pos:column="57">?</op:operator> <call><name><name pos:line="57" pos:column="59">IA</name><op:operator pos:line="57" pos:column="61">.</op:operator><name pos:line="57" pos:column="62">ElementAt</name></name><argument_list pos:line="57" pos:column="71">(<argument><expr><name pos:line="57" pos:column="72">index</name></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="78">.</op:operator><name pos:line="57" pos:column="79">Value</name> <op:operator pos:line="57" pos:column="85">:</op:operator>
                <name pos:line="58" pos:column="17">index</name> <op:operator pos:line="58" pos:column="23">-</op:operator> <lit:literal type="number" pos:line="58" pos:column="25">1</lit:literal> <op:operator pos:line="58" pos:column="27">&gt;=</op:operator> <lit:literal type="number" pos:line="58" pos:column="30">0</lit:literal> <op:operator pos:line="58" pos:column="32">&amp;&amp;</op:operator> <name pos:line="58" pos:column="35">index</name> <op:operator pos:line="58" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="58" pos:column="43">1</lit:literal> <op:operator pos:line="58" pos:column="45">&lt;</op:operator> <name><name pos:line="58" pos:column="47">IA</name><op:operator pos:line="58" pos:column="49">.</op:operator><name pos:line="58" pos:column="50">Count</name> <type:modifier pos:line="58" pos:column="56">?</type:modifier></name> <call><name><name pos:line="58" pos:column="58">IA</name><op:operator pos:line="58" pos:column="60">.</op:operator><name pos:line="58" pos:column="61">ElementAt</name></name><argument_list pos:line="58" pos:column="70">(<argument><expr><name pos:line="58" pos:column="71">index</name> <op:operator pos:line="58" pos:column="77">-</op:operator> <lit:literal type="number" pos:line="58" pos:column="79">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="81">.</op:operator><name pos:line="58" pos:column="82">Value</name> 
                    <op:operator pos:line="59" pos:column="21">+</op:operator> <call><name pos:line="59" pos:column="23">GetNonZeroColumnNumbers</name><argument_list pos:line="59" pos:column="46">(<argument><expr><name pos:line="59" pos:column="47">index</name> <op:operator pos:line="59" pos:column="53">-</op:operator> <lit:literal type="number" pos:line="59" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="57">.</op:operator><call><name pos:line="59" pos:column="58">Count</name><argument_list pos:line="59" pos:column="63">()</argument_list></call> <op:operator pos:line="59" pos:column="66">:</op:operator> <lit:literal type="number" pos:line="59" pos:column="68">0</lit:literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">A</name><op:operator pos:line="60" pos:column="14">.</op:operator><name pos:line="60" pos:column="15">Insert</name></name><argument_list pos:line="60" pos:column="21">(<argument><expr><name pos:line="60" pos:column="22">AIndex</name></expr></argument>, <argument><expr><op:operator pos:line="60" pos:column="30">new</op:operator> <call><name pos:line="60" pos:column="34">BoxedInt</name><argument_list pos:line="60" pos:column="42">(<argument><expr><name pos:line="60" pos:column="43">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="62" pos:column="13">// Update IA.</comment>
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">IA</name><op:operator pos:line="63" pos:column="15">.</op:operator><name pos:line="63" pos:column="16">Insert</name></name><argument_list pos:line="63" pos:column="22">(<argument><expr><name pos:line="63" pos:column="23">index</name></expr></argument>, <argument><expr><op:operator pos:line="63" pos:column="30">new</op:operator> <call><name pos:line="63" pos:column="34">BoxedInt</name><argument_list pos:line="63" pos:column="42">(<argument><expr><name pos:line="63" pos:column="43">AIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:line="64" pos:column="13">for (<init><decl><type><name pos:line="64" pos:column="18">int</name></type> <name pos:line="64" pos:column="22">i</name> <init pos:line="64" pos:column="24">= <expr><name pos:line="64" pos:column="26">index</name> <op:operator pos:line="64" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="64" pos:column="34">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="64" pos:column="37">i</name> <op:operator pos:line="64" pos:column="39">&lt;</op:operator> <name><name pos:line="64" pos:column="41">IA</name><op:operator pos:line="64" pos:column="43">.</op:operator><name pos:line="64" pos:column="44">Count</name></name></expr>;</condition> <incr><expr><name pos:line="64" pos:column="51">i</name><op:operator pos:line="64" pos:column="52">++</op:operator></expr></incr>)
            <block pos:line="65" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="66" pos:column="17">IA</name><op:operator pos:line="66" pos:column="19">.</op:operator><name pos:line="66" pos:column="20">ElementAt</name></name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">i</name></expr></argument>)</argument_list></call><op:operator pos:line="66" pos:column="32">.</op:operator><name pos:line="66" pos:column="33">Value</name> <op:operator pos:line="66" pos:column="39">++</op:operator></expr>;</expr_stmt>
            }</block></for>

            <comment type="line" pos:line="69" pos:column="13">// Update JA.</comment>
            <for pos:line="70" pos:column="13">for (<init><decl><type><name pos:line="70" pos:column="18">int</name></type> <name pos:line="70" pos:column="22">i</name> <init pos:line="70" pos:column="24">= <expr><lit:literal type="number" pos:line="70" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="70" pos:column="29">i</name> <op:operator pos:line="70" pos:column="31">&lt;</op:operator> <name><name pos:line="70" pos:column="33">JA</name><op:operator pos:line="70" pos:column="35">.</op:operator><name pos:line="70" pos:column="36">Count</name></name></expr>;</condition> <incr><expr><name pos:line="70" pos:column="43">i</name><op:operator pos:line="70" pos:column="44">++</op:operator></expr></incr>)
            <block pos:line="71" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="72" pos:column="17">JA</name><op:operator pos:line="72" pos:column="19">.</op:operator><name pos:line="72" pos:column="20">ElementAt</name></name><argument_list pos:line="72" pos:column="29">(<argument><expr><name pos:line="72" pos:column="30">i</name></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="32">.</op:operator><name pos:line="72" pos:column="33">Value</name> <op:operator pos:line="72" pos:column="39">=</op:operator> <call><name><name pos:line="72" pos:column="41">JA</name><op:operator pos:line="72" pos:column="43">.</op:operator><name pos:line="72" pos:column="44">ElementAt</name></name><argument_list pos:line="72" pos:column="53">(<argument><expr><name pos:line="72" pos:column="54">i</name></expr></argument>)</argument_list></call><op:operator pos:line="72" pos:column="56">.</op:operator><name pos:line="72" pos:column="57">Value</name> <op:operator pos:line="72" pos:column="63">&gt;=</op:operator> <name pos:line="72" pos:column="66">index</name>
                    <op:operator pos:line="73" pos:column="21">?</op:operator> <call><name><name pos:line="73" pos:column="23">JA</name><op:operator pos:line="73" pos:column="25">.</op:operator><name pos:line="73" pos:column="26">ElementAt</name></name><argument_list pos:line="73" pos:column="35">(<argument><expr><name pos:line="73" pos:column="36">i</name></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="38">.</op:operator><name pos:line="73" pos:column="39">Value</name> <op:operator pos:line="73" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="73" pos:column="47">1</lit:literal>
                        <op:operator pos:line="74" pos:column="25">:</op:operator> <call><name><name pos:line="74" pos:column="27">JA</name><op:operator pos:line="74" pos:column="29">.</op:operator><name pos:line="74" pos:column="30">ElementAt</name></name><argument_list pos:line="74" pos:column="39">(<argument><expr><name pos:line="74" pos:column="40">i</name></expr></argument>)</argument_list></call><op:operator pos:line="74" pos:column="42">.</op:operator><name pos:line="74" pos:column="43">Value</name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">JA</name><op:operator pos:line="76" pos:column="15">.</op:operator><name pos:line="76" pos:column="16">Insert</name></name><argument_list pos:line="76" pos:column="22">(<argument><expr><name pos:line="76" pos:column="23">AIndex</name></expr></argument>, <argument><expr><op:operator pos:line="76" pos:column="31">new</op:operator> <call><name pos:line="76" pos:column="35">BoxedInt</name><argument_list pos:line="76" pos:column="43">(<argument><expr><name pos:line="76" pos:column="44">index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="79" pos:column="9">private</specifier> <name pos:line="79" pos:column="17">void</name></type> <name pos:line="79" pos:column="22">IncrementCell</name><parameter_list pos:line="79" pos:column="35">(<param><decl><type><name pos:line="79" pos:column="36">int</name></type> <name pos:line="79" pos:column="40">row</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="45">int</name></type> <name pos:line="79" pos:column="49">column</name></decl></param>)</parameter_list>
        <block pos:line="80" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">var</name></type> <name pos:line="81" pos:column="17">columns</name> <init pos:line="81" pos:column="25">= <expr><call><name pos:line="81" pos:column="27">GetNonZeroColumnNumbers</name><argument_list pos:line="81" pos:column="50">(<argument><expr><name pos:line="81" pos:column="51">row</name></expr></argument>)</argument_list></call><op:operator pos:line="81" pos:column="55">.</op:operator><call><name pos:line="81" pos:column="56">ToList</name><argument_list pos:line="81" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="82" pos:column="13">var</name></type> <name pos:line="82" pos:column="17">index</name> <init pos:line="82" pos:column="23">= <expr><call><name><name pos:line="82" pos:column="25">columns</name><op:operator pos:line="82" pos:column="32">.</op:operator><name pos:line="82" pos:column="33">BinarySearch</name></name><argument_list pos:line="82" pos:column="45">(<argument><expr><op:operator pos:line="82" pos:column="46">new</op:operator> <call><name pos:line="82" pos:column="50">BoxedInt</name><argument_list pos:line="82" pos:column="58">(<argument><expr><name pos:line="82" pos:column="59">column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="83" pos:column="13">if <condition pos:line="83" pos:column="16">(<expr><name pos:line="83" pos:column="17">index</name> <op:operator pos:line="83" pos:column="23">&gt;=</op:operator> <lit:literal type="number" pos:line="83" pos:column="26">0</lit:literal></expr>)</condition><then pos:line="83" pos:column="28">
            <block pos:line="84" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="85" pos:column="17">A</name><op:operator pos:line="85" pos:column="18">.</op:operator><name pos:line="85" pos:column="19">ElementAt</name></name><argument_list pos:line="85" pos:column="28">(<argument><expr><call><name><name pos:line="85" pos:column="29">IA</name><op:operator pos:line="85" pos:column="31">.</op:operator><name pos:line="85" pos:column="32">ElementAt</name></name><argument_list pos:line="85" pos:column="41">(<argument><expr><name pos:line="85" pos:column="42">row</name></expr></argument>)</argument_list></call><op:operator pos:line="85" pos:column="46">.</op:operator><name pos:line="85" pos:column="47">Value</name> <op:operator pos:line="85" pos:column="53">+</op:operator> <name pos:line="85" pos:column="55">index</name></expr></argument>)</argument_list></call><op:operator pos:line="85" pos:column="61">.</op:operator><name pos:line="85" pos:column="62">Value</name><op:operator pos:line="85" pos:column="67">++</op:operator></expr>;</expr_stmt>
                <return pos:line="86" pos:column="17">return;</return>
            }</block></then></if>
            
            <comment type="line" pos:line="89" pos:column="13">// Update A</comment>
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">var</name></type> <name pos:line="90" pos:column="17">position</name> <init pos:line="90" pos:column="26">= <expr><op:operator pos:line="90" pos:column="28">~</op:operator><name pos:line="90" pos:column="29">index</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">var</name></type> <name pos:line="91" pos:column="17">AIndex</name> <init pos:line="91" pos:column="24">= <expr><name pos:line="91" pos:column="26">position</name> <op:operator pos:line="91" pos:column="35">+</op:operator> <call><name><name pos:line="91" pos:column="37">IA</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">ElementAt</name></name><argument_list pos:line="91" pos:column="49">(<argument><expr><name pos:line="91" pos:column="50">row</name></expr></argument>)</argument_list></call><op:operator pos:line="91" pos:column="54">.</op:operator><name pos:line="91" pos:column="55">Value</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">A</name><op:operator pos:line="92" pos:column="14">.</op:operator><name pos:line="92" pos:column="15">Insert</name></name><argument_list pos:line="92" pos:column="21">(<argument><expr><name pos:line="92" pos:column="22">AIndex</name></expr></argument>, <argument><expr><op:operator pos:line="92" pos:column="30">new</op:operator> <call><name pos:line="92" pos:column="34">BoxedInt</name><argument_list pos:line="92" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="92" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:line="94" pos:column="13">// Update IA</comment>
            <for pos:line="95" pos:column="13">for (<init><decl><type><name pos:line="95" pos:column="18">int</name></type> <name pos:line="95" pos:column="22">i</name> <init pos:line="95" pos:column="24">= <expr><name pos:line="95" pos:column="26">row</name> <op:operator pos:line="95" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="95" pos:column="32">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="95" pos:column="35">i</name> <op:operator pos:line="95" pos:column="37">&lt;</op:operator> <name><name pos:line="95" pos:column="39">IA</name><op:operator pos:line="95" pos:column="41">.</op:operator><name pos:line="95" pos:column="42">Count</name></name></expr>;</condition> <incr><expr><name pos:line="95" pos:column="49">i</name> <op:operator pos:line="95" pos:column="51">++</op:operator></expr></incr>)
            <block pos:line="96" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="97" pos:column="17">IA</name><op:operator pos:line="97" pos:column="19">.</op:operator><name pos:line="97" pos:column="20">ElementAt</name></name><argument_list pos:line="97" pos:column="29">(<argument><expr><name pos:line="97" pos:column="30">i</name></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="32">.</op:operator><name pos:line="97" pos:column="33">Value</name><op:operator pos:line="97" pos:column="38">++</op:operator></expr>;</expr_stmt>
            }</block></for>

            <comment type="line" pos:line="100" pos:column="13">// Udpate JA</comment>
            <expr_stmt><expr><call><name><name pos:line="101" pos:column="13">JA</name><op:operator pos:line="101" pos:column="15">.</op:operator><name pos:line="101" pos:column="16">Insert</name></name><argument_list pos:line="101" pos:column="22">(<argument><expr><name pos:line="101" pos:column="23">AIndex</name></expr></argument>, <argument><expr><op:operator pos:line="101" pos:column="31">new</op:operator> <call><name pos:line="101" pos:column="35">BoxedInt</name><argument_list pos:line="101" pos:column="43">(<argument><expr><name pos:line="101" pos:column="44">column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <decl_stmt><decl><type><specifier pos:line="105" pos:column="9">private</specifier> <specifier pos:line="105" pos:column="17">const</specifier> <name pos:line="105" pos:column="23">int</name></type> <name pos:line="105" pos:column="27">GRAM_NUMBER</name> <init pos:line="105" pos:column="39">= <expr><lit:literal type="number" pos:line="105" pos:column="41">3</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="106" pos:column="9">private</specifier> <specifier pos:line="106" pos:column="17">const</specifier> <name pos:line="106" pos:column="23">int</name></type> <name pos:line="106" pos:column="27">MAX_WORD_LENGTH</name> <init pos:line="106" pos:column="43">= <expr><lit:literal type="number" pos:line="106" pos:column="45">3</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="107" pos:column="9">private</specifier> <specifier pos:line="107" pos:column="17">const</specifier> <name pos:line="107" pos:column="23">int</name></type> <name pos:line="107" pos:column="27">MAX_COOCCURRENCE_WORDS_COUNT</name> <init pos:line="107" pos:column="56">= <expr><lit:literal type="number" pos:line="107" pos:column="58">100</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="109" pos:column="9">private</specifier> <specifier pos:line="109" pos:column="17">readonly</specifier> <name pos:line="109" pos:column="26">WorkQueueBasedProcess</name></type> <name pos:line="109" pos:column="48">queue</name> <init pos:line="109" pos:column="54">= <expr><op:operator pos:line="109" pos:column="56">new</op:operator> <call><name pos:line="109" pos:column="60">WorkQueueBasedProcess</name><argument_list pos:line="109" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="110" pos:column="9">private</specifier> <specifier pos:line="110" pos:column="17">const</specifier> <name pos:line="110" pos:column="23">string</name></type> <name pos:line="110" pos:column="30">fileName</name> <init pos:line="110" pos:column="39">= <expr><lit:literal type="string" pos:line="110" pos:column="41">"SparseMatrix.txt"</lit:literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="111" pos:column="9">private</specifier> <name pos:line="111" pos:column="17">string</name></type> <name pos:line="111" pos:column="24">directory</name></decl>;</decl_stmt>

       
        <function><type><specifier pos:line="114" pos:column="9">public</specifier> <name pos:line="114" pos:column="16">int</name></type> <name pos:line="114" pos:column="20">GetCoOccurrenceCount</name><parameter_list pos:line="114" pos:column="40">(<param><decl><type><name pos:line="114" pos:column="41">string</name></type> <name pos:line="114" pos:column="48">word1</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="55">string</name></type> <name pos:line="114" pos:column="62">word2</name></decl></param>)</parameter_list>
        <block pos:line="115" pos:column="9">{
            <lock pos:line="116" pos:column="13">lock (<expr><name pos:line="116" pos:column="19">locker</name></expr>)
            <block pos:line="117" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="118" pos:column="17">var</name></type> <name pos:line="118" pos:column="21">row</name> <init pos:line="118" pos:column="25">= <expr><call><name><name pos:line="118" pos:column="27">allWords</name><op:operator pos:line="118" pos:column="35">.</op:operator><name pos:line="118" pos:column="36">BinarySearch</name></name><argument_list pos:line="118" pos:column="48">(<argument><expr><name pos:line="118" pos:column="49">word1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="119" pos:column="17">var</name></type> <name pos:line="119" pos:column="21">column</name> <init pos:line="119" pos:column="28">= <expr><call><name><name pos:line="119" pos:column="30">allWords</name><op:operator pos:line="119" pos:column="38">.</op:operator><name pos:line="119" pos:column="39">BinarySearch</name></name><argument_list pos:line="119" pos:column="51">(<argument><expr><name pos:line="119" pos:column="52">word2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="120" pos:column="17">return <expr><name pos:line="120" pos:column="24">row</name> <op:operator pos:line="120" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="120" pos:column="31">0</lit:literal> <op:operator pos:line="120" pos:column="33">&amp;&amp;</op:operator> <name pos:line="120" pos:column="36">column</name> <op:operator pos:line="120" pos:column="43">&gt;=</op:operator> <lit:literal type="number" pos:line="120" pos:column="46">0</lit:literal> <op:operator pos:line="120" pos:column="48">?</op:operator> <call><name pos:line="120" pos:column="50">GetValue</name><argument_list pos:line="120" pos:column="58">(<argument><expr><name pos:line="120" pos:column="59">row</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="64">column</name></expr></argument>)</argument_list></call> <op:operator pos:line="120" pos:column="72">:</op:operator> <lit:literal type="number" pos:line="120" pos:column="74">0</lit:literal></expr>;</return>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="124" pos:column="9">public</specifier> <name pos:line="124" pos:column="16">void</name></type> <name pos:line="124" pos:column="21">Initialize</name><parameter_list pos:line="124" pos:column="31">(<param><decl><type><name pos:line="124" pos:column="32">string</name></type> <name pos:line="124" pos:column="39">directory</name></decl></param>)</parameter_list>
        <block pos:line="125" pos:column="9">{
            <lock pos:line="126" pos:column="13">lock (<expr><name pos:line="126" pos:column="19">locker</name></expr>)
            <block pos:line="127" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="128" pos:column="17">this</name><op:operator pos:line="128" pos:column="21">.</op:operator><name pos:line="128" pos:column="22">directory</name></name> <op:operator pos:line="128" pos:column="32">=</op:operator> <name pos:line="128" pos:column="34">directory</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="129" pos:column="17">ClearMemory</name><argument_list pos:line="129" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="130" pos:column="17">ReadFromFile</name><argument_list pos:line="130" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
            }</block></lock>            
        }</block></function>

        <function><type><specifier pos:line="134" pos:column="9">private</specifier> <name pos:line="134" pos:column="17">void</name></type> <name pos:line="134" pos:column="22">ReadFromFile</name><parameter_list pos:line="134" pos:column="34">()</parameter_list>
        <block pos:line="135" pos:column="9">{
            <if pos:line="136" pos:column="13">if <condition pos:line="136" pos:column="16">(<expr><call><name><name pos:line="136" pos:column="17">File</name><op:operator pos:line="136" pos:column="21">.</op:operator><name pos:line="136" pos:column="22">Exists</name></name><argument_list pos:line="136" pos:column="28">(<argument><expr><call><name pos:line="136" pos:column="29">GetMatrixFilePath</name><argument_list pos:line="136" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="136" pos:column="50">
            <block pos:line="137" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="138" pos:column="17">var</name></type> <name pos:line="138" pos:column="21">lines</name> <init pos:line="138" pos:column="27">= <expr><call><name><name pos:line="138" pos:column="29">File</name><op:operator pos:line="138" pos:column="33">.</op:operator><name pos:line="138" pos:column="34">ReadAllLines</name></name><argument_list pos:line="138" pos:column="46">(<argument><expr><call><name pos:line="138" pos:column="47">GetMatrixFilePath</name><argument_list pos:line="138" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="139" pos:column="17">allWords</name><op:operator pos:line="139" pos:column="25">.</op:operator><name pos:line="139" pos:column="26">AddRange</name></name><argument_list pos:line="139" pos:column="34">(<argument><expr><name><name pos:line="139" pos:column="35">lines</name><index pos:line="139" pos:column="40">[<expr><lit:literal type="number" pos:line="139" pos:column="41">0</lit:literal></expr>]</index></name><op:operator pos:line="139" pos:column="43">.</op:operator><call><name pos:line="139" pos:column="44">Split</name><argument_list pos:line="139" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="140" pos:column="17">A</name><op:operator pos:line="140" pos:column="18">.</op:operator><name pos:line="140" pos:column="19">AddRange</name></name><argument_list pos:line="140" pos:column="27">(<argument><expr><name><name pos:line="140" pos:column="28">lines</name><index pos:line="140" pos:column="33">[<expr><lit:literal type="number" pos:line="140" pos:column="34">1</lit:literal></expr>]</index></name><op:operator pos:line="140" pos:column="36">.</op:operator><call><name pos:line="140" pos:column="37">Split</name><argument_list pos:line="140" pos:column="42">()</argument_list></call><op:operator pos:line="140" pos:column="44">.</op:operator><call><name pos:line="140" pos:column="45">Select</name><argument_list pos:line="140" pos:column="51">(<argument><expr><lambda><name pos:line="140" pos:column="52">i</name> <op:operator pos:line="140" pos:column="54">=&gt;</op:operator> <op:operator pos:line="140" pos:column="57">new</op:operator> <call><name pos:line="140" pos:column="61">BoxedInt</name><argument_list pos:line="140" pos:column="69">(<argument><expr><call><name><name pos:line="140" pos:column="70">int</name><op:operator pos:line="140" pos:column="73">.</op:operator><name pos:line="140" pos:column="74">Parse</name></name><argument_list pos:line="140" pos:column="79">(<argument><expr><name pos:line="140" pos:column="80">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="141" pos:column="17">IA</name><op:operator pos:line="141" pos:column="19">.</op:operator><name pos:line="141" pos:column="20">AddRange</name></name><argument_list pos:line="141" pos:column="28">(<argument><expr><name><name pos:line="141" pos:column="29">lines</name><index pos:line="141" pos:column="34">[<expr><lit:literal type="number" pos:line="141" pos:column="35">2</lit:literal></expr>]</index></name><op:operator pos:line="141" pos:column="37">.</op:operator><call><name pos:line="141" pos:column="38">Split</name><argument_list pos:line="141" pos:column="43">()</argument_list></call><op:operator pos:line="141" pos:column="45">.</op:operator><call><name pos:line="141" pos:column="46">Select</name><argument_list pos:line="141" pos:column="52">(<argument><expr><lambda><name pos:line="141" pos:column="53">i</name> <op:operator pos:line="141" pos:column="55">=&gt;</op:operator> <op:operator pos:line="141" pos:column="58">new</op:operator> <call><name pos:line="141" pos:column="62">BoxedInt</name><argument_list pos:line="141" pos:column="70">(<argument><expr><call><name><name pos:line="141" pos:column="71">int</name><op:operator pos:line="141" pos:column="74">.</op:operator><name pos:line="141" pos:column="75">Parse</name></name><argument_list pos:line="141" pos:column="80">(<argument><expr><name pos:line="141" pos:column="81">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="142" pos:column="17">JA</name><op:operator pos:line="142" pos:column="19">.</op:operator><name pos:line="142" pos:column="20">AddRange</name></name><argument_list pos:line="142" pos:column="28">(<argument><expr><name><name pos:line="142" pos:column="29">lines</name><index pos:line="142" pos:column="34">[<expr><lit:literal type="number" pos:line="142" pos:column="35">3</lit:literal></expr>]</index></name><op:operator pos:line="142" pos:column="37">.</op:operator><call><name pos:line="142" pos:column="38">Split</name><argument_list pos:line="142" pos:column="43">()</argument_list></call><op:operator pos:line="142" pos:column="45">.</op:operator><call><name pos:line="142" pos:column="46">Select</name><argument_list pos:line="142" pos:column="52">(<argument><expr><lambda><name pos:line="142" pos:column="53">i</name> <op:operator pos:line="142" pos:column="55">=&gt;</op:operator> <op:operator pos:line="142" pos:column="58">new</op:operator> <call><name pos:line="142" pos:column="62">BoxedInt</name><argument_list pos:line="142" pos:column="70">(<argument><expr><call><name><name pos:line="142" pos:column="71">int</name><op:operator pos:line="142" pos:column="74">.</op:operator><name pos:line="142" pos:column="75">Parse</name></name><argument_list pos:line="142" pos:column="80">(<argument><expr><name pos:line="142" pos:column="81">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier pos:line="146" pos:column="9">private</specifier> <name pos:line="146" pos:column="17">void</name></type> <name pos:line="146" pos:column="22">ClearMemory</name><parameter_list pos:line="146" pos:column="33">()</parameter_list>
        <block pos:line="147" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="148" pos:column="13">this</name><op:operator pos:line="148" pos:column="17">.</op:operator><name pos:line="148" pos:column="18">allWords</name><op:operator pos:line="148" pos:column="26">.</op:operator><name pos:line="148" pos:column="27">Clear</name></name><argument_list pos:line="148" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="149" pos:column="13">this</name><op:operator pos:line="149" pos:column="17">.</op:operator><name pos:line="149" pos:column="18">A</name><op:operator pos:line="149" pos:column="19">.</op:operator><name pos:line="149" pos:column="20">Clear</name></name><argument_list pos:line="149" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="150" pos:column="13">this</name><op:operator pos:line="150" pos:column="17">.</op:operator><name pos:line="150" pos:column="18">IA</name><op:operator pos:line="150" pos:column="20">.</op:operator><name pos:line="150" pos:column="21">Clear</name></name><argument_list pos:line="150" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">this</name><op:operator pos:line="151" pos:column="17">.</op:operator><name pos:line="151" pos:column="18">JA</name><op:operator pos:line="151" pos:column="20">.</op:operator><name pos:line="151" pos:column="21">Clear</name></name><argument_list pos:line="151" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="154" pos:column="9">public</specifier> <name pos:line="154" pos:column="16">void</name></type> <name pos:line="154" pos:column="21">Dispose</name><parameter_list pos:line="154" pos:column="28">()</parameter_list>
        <block pos:line="155" pos:column="9">{
            <lock pos:line="156" pos:column="13">lock (<expr><name pos:line="156" pos:column="19">locker</name></expr>)
            <block pos:line="157" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="158" pos:column="17">TimedProcessor</name><op:operator pos:line="158" pos:column="31">.</op:operator><name pos:line="158" pos:column="32">GetInstance</name></name><argument_list pos:line="158" pos:column="43">()</argument_list></call><op:operator pos:line="158" pos:column="45">.</op:operator><call><name pos:line="158" pos:column="46">RemoveTimedTask</name><argument_list pos:line="158" pos:column="61">(<argument><expr><name pos:line="158" pos:column="62">SaveToFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="159" pos:column="17">SaveToFile</name><argument_list pos:line="159" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="160" pos:column="17">ClearMemory</name><argument_list pos:line="160" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="164" pos:column="9">private</specifier> <name pos:line="164" pos:column="17">void</name></type> <name pos:line="164" pos:column="22">SaveToFile</name><parameter_list pos:line="164" pos:column="32">()</parameter_list>
        <block pos:line="165" pos:column="9">{
            <lock pos:line="166" pos:column="13">lock (<expr><name pos:line="166" pos:column="19">locker</name></expr>)
            <block pos:line="167" pos:column="13">{
                <if pos:line="168" pos:column="17">if <condition pos:line="168" pos:column="20">(<expr><call><name><name pos:line="168" pos:column="21">Directory</name><op:operator pos:line="168" pos:column="30">.</op:operator><name pos:line="168" pos:column="31">Exists</name></name><argument_list pos:line="168" pos:column="37">(<argument><expr><name pos:line="168" pos:column="38">directory</name></expr></argument>)</argument_list></call> <op:operator pos:line="168" pos:column="49">&amp;&amp;</op:operator> <call><name><name pos:line="168" pos:column="52">allWords</name><op:operator pos:line="168" pos:column="60">.</op:operator><name pos:line="168" pos:column="61">Any</name></name><argument_list pos:line="168" pos:column="64">()</argument_list></call></expr>)</condition><then pos:line="168" pos:column="67">
                <block pos:line="169" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="170" pos:column="21">var</name></type> <name pos:line="170" pos:column="25">lineOne</name> <init pos:line="170" pos:column="33">= <expr><call><name><name pos:line="170" pos:column="35">allWords</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">Aggregate</name></name><argument_list pos:line="170" pos:column="53">(<argument><expr><op:operator pos:line="170" pos:column="54">new</op:operator> <call><name pos:line="170" pos:column="58">StringBuilder</name><argument_list pos:line="170" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list pos:line="170" pos:column="75">(<param><decl><name pos:line="170" pos:column="76">builder</name></decl></param>, <param><decl><name pos:line="170" pos:column="85">word</name></decl></param>)</parameter_list> <op:operator pos:line="170" pos:column="91">=&gt;</op:operator> <call><name><name pos:line="170" pos:column="94">builder</name><op:operator pos:line="170" pos:column="101">.</op:operator><name pos:line="170" pos:column="102">Append</name></name><argument_list pos:line="170" pos:column="108">(<argument><expr><name pos:line="170" pos:column="109">word</name></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="114">.</op:operator><call><name pos:line="170" pos:column="115">Append</name><argument_list pos:line="170" pos:column="121">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="122">" "</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                    
                    <decl_stmt><decl><type><name pos:line="171" pos:column="21">var</name></type> <name pos:line="171" pos:column="25">lineTwo</name> <init pos:line="171" pos:column="33">= <expr><call><name><name pos:line="171" pos:column="35">A</name><op:operator pos:line="171" pos:column="36">.</op:operator><name pos:line="171" pos:column="37">Select</name></name><argument_list pos:line="171" pos:column="43">(<argument><expr><lambda><name pos:line="171" pos:column="44">i</name> <op:operator pos:line="171" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="171" pos:column="49">i</name><op:operator pos:line="171" pos:column="50">.</op:operator><name pos:line="171" pos:column="51">Value</name><op:operator pos:line="171" pos:column="56">.</op:operator><name pos:line="171" pos:column="57">ToString</name></name><argument_list pos:line="171" pos:column="65">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="171" pos:column="68">.</op:operator><call><name pos:line="171" pos:column="69">Aggregate</name><argument_list pos:line="171" pos:column="78">(<argument><expr><op:operator pos:line="171" pos:column="79">new</op:operator> <call><name pos:line="171" pos:column="83">StringBuilder</name><argument_list pos:line="171" pos:column="96">()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list pos:line="171" pos:column="100">(<param><decl><name pos:line="171" pos:column="101">builder</name></decl></param>, <param><decl><name pos:line="171" pos:column="110">number</name></decl></param>)</parameter_list> <op:operator pos:line="171" pos:column="118">=&gt;</op:operator> <call><name><name pos:line="171" pos:column="121">builder</name><op:operator pos:line="171" pos:column="128">.</op:operator><name pos:line="171" pos:column="129">Append</name></name><argument_list pos:line="171" pos:column="135">(<argument><expr><name pos:line="171" pos:column="136">number</name></expr></argument>)</argument_list></call><op:operator pos:line="171" pos:column="143">.</op:operator><call><name pos:line="171" pos:column="144">Append</name><argument_list pos:line="171" pos:column="150">( <argument><expr><lit:literal type="string" pos:line="171" pos:column="152">" "</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="172" pos:column="21">var</name></type> <name pos:line="172" pos:column="25">lineThree</name> <init pos:line="172" pos:column="35">= <expr><call><name><name pos:line="172" pos:column="37">IA</name><op:operator pos:line="172" pos:column="39">.</op:operator><name pos:line="172" pos:column="40">Select</name></name><argument_list pos:line="172" pos:column="46">(<argument><expr><lambda><name pos:line="172" pos:column="47">i</name> <op:operator pos:line="172" pos:column="49">=&gt;</op:operator> <call><name><name pos:line="172" pos:column="52">i</name><op:operator pos:line="172" pos:column="53">.</op:operator><name pos:line="172" pos:column="54">Value</name><op:operator pos:line="172" pos:column="59">.</op:operator><name pos:line="172" pos:column="60">ToString</name></name><argument_list pos:line="172" pos:column="68">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="172" pos:column="71">.</op:operator><call><name pos:line="172" pos:column="72">Aggregate</name><argument_list pos:line="172" pos:column="81">(<argument><expr><op:operator pos:line="172" pos:column="82">new</op:operator> <call><name pos:line="172" pos:column="86">StringBuilder</name><argument_list pos:line="172" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list pos:line="172" pos:column="103">(<param><decl><name pos:line="172" pos:column="104">builder</name></decl></param>, <param><decl><name pos:line="172" pos:column="113">number</name></decl></param>)</parameter_list> <op:operator pos:line="172" pos:column="121">=&gt;</op:operator> <call><name><name pos:line="172" pos:column="124">builder</name><op:operator pos:line="172" pos:column="131">.</op:operator><name pos:line="172" pos:column="132">Append</name></name><argument_list pos:line="172" pos:column="138">(<argument><expr><name pos:line="172" pos:column="139">number</name></expr></argument>)</argument_list></call><op:operator pos:line="172" pos:column="146">.</op:operator><call><name pos:line="172" pos:column="147">Append</name><argument_list pos:line="172" pos:column="153">( <argument><expr><lit:literal type="string" pos:line="172" pos:column="155">" "</lit:literal></expr></argument> )</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="173" pos:column="21">var</name></type> <name pos:line="173" pos:column="25">lineFour</name> <init pos:line="173" pos:column="34">= <expr><call><name><name pos:line="173" pos:column="36">JA</name><op:operator pos:line="173" pos:column="38">.</op:operator><name pos:line="173" pos:column="39">Select</name></name><argument_list pos:line="173" pos:column="45">(<argument><expr><lambda><name pos:line="173" pos:column="46">i</name> <op:operator pos:line="173" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="173" pos:column="51">i</name><op:operator pos:line="173" pos:column="52">.</op:operator><name pos:line="173" pos:column="53">Value</name><op:operator pos:line="173" pos:column="58">.</op:operator><name pos:line="173" pos:column="59">ToString</name></name><argument_list pos:line="173" pos:column="67">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="173" pos:column="70">.</op:operator><call><name pos:line="173" pos:column="71">Aggregate</name><argument_list pos:line="173" pos:column="80">(<argument><expr><op:operator pos:line="173" pos:column="81">new</op:operator> <call><name pos:line="173" pos:column="85">StringBuilder</name><argument_list pos:line="173" pos:column="98">()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list pos:line="173" pos:column="102">(<param><decl><name pos:line="173" pos:column="103">builder</name></decl></param>, <param><decl><name pos:line="173" pos:column="112">number</name></decl></param>)</parameter_list> <op:operator pos:line="173" pos:column="120">=&gt;</op:operator> <call><name><name pos:line="173" pos:column="123">builder</name><op:operator pos:line="173" pos:column="130">.</op:operator><name pos:line="173" pos:column="131">Append</name></name><argument_list pos:line="173" pos:column="137">(<argument><expr><name pos:line="173" pos:column="138">number</name></expr></argument>)</argument_list></call><op:operator pos:line="173" pos:column="145">.</op:operator><call><name pos:line="173" pos:column="146">Append</name><argument_list pos:line="173" pos:column="152">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="153">" "</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="174" pos:column="21">var</name></type> <name pos:line="174" pos:column="25">lines</name> <init pos:line="174" pos:column="31">= <expr><op:operator pos:line="174" pos:column="33">new</op:operator> <name><name pos:line="174" pos:column="37">string</name><index pos:line="174" pos:column="43">[]</index></name> <block pos:line="174" pos:column="46">{<expr><call><name><name pos:line="174" pos:column="47">lineOne</name><op:operator pos:line="174" pos:column="54">.</op:operator><name pos:line="174" pos:column="55">ToString</name></name><argument_list pos:line="174" pos:column="63">()</argument_list></call><op:operator pos:line="174" pos:column="65">.</op:operator><call><name pos:line="174" pos:column="66">TrimEnd</name><argument_list pos:line="174" pos:column="73">()</argument_list></call></expr>, <expr><call><name><name pos:line="174" pos:column="77">lineTwo</name><op:operator pos:line="174" pos:column="84">.</op:operator><name pos:line="174" pos:column="85">ToString</name></name><argument_list pos:line="174" pos:column="93">()</argument_list></call><op:operator pos:line="174" pos:column="95">.</op:operator><call><name pos:line="174" pos:column="96">TrimEnd</name><argument_list pos:line="174" pos:column="103">()</argument_list></call></expr>, <expr><call><name><name pos:line="174" pos:column="107">lineThree</name><op:operator pos:line="174" pos:column="116">.</op:operator><name pos:line="174" pos:column="117">ToString</name></name><argument_list pos:line="174" pos:column="125">()</argument_list></call><op:operator pos:line="174" pos:column="127">.</op:operator><call><name pos:line="174" pos:column="128">TrimEnd</name><argument_list pos:line="174" pos:column="135">()</argument_list></call></expr>, <expr><call><name><name pos:line="174" pos:column="139">lineFour</name><op:operator pos:line="174" pos:column="147">.</op:operator><name pos:line="174" pos:column="148">ToString</name></name><argument_list pos:line="174" pos:column="156">()</argument_list></call><op:operator pos:line="174" pos:column="158">.</op:operator><call><name pos:line="174" pos:column="159">TrimEnd</name><argument_list pos:line="174" pos:column="166">()</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="175" pos:column="21">File</name><op:operator pos:line="175" pos:column="25">.</op:operator><name pos:line="175" pos:column="26">WriteAllLines</name></name><argument_list pos:line="175" pos:column="39">(<argument><expr><call><name pos:line="175" pos:column="40">GetMatrixFilePath</name><argument_list pos:line="175" pos:column="57">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="175" pos:column="61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="180" pos:column="9">public</specifier> <name pos:line="180" pos:column="16">void</name></type> <name pos:line="180" pos:column="21">HandleCoOcurrentWordsAsync</name><parameter_list pos:line="180" pos:column="47">(<param><decl><type><name><name pos:line="180" pos:column="48">IEnumerable</name><argument_list pos:line="180" pos:column="59">&lt;<argument><name pos:line="180" pos:column="60">String</name></argument>&gt;</argument_list></name></type> <name pos:line="180" pos:column="68">words</name></decl></param>)</parameter_list>
        <block pos:line="181" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="182" pos:column="13">queue</name><op:operator pos:line="182" pos:column="18">.</op:operator><name pos:line="182" pos:column="19">Enqueue</name></name><argument_list pos:line="182" pos:column="26">(<argument><expr><lambda><name pos:line="182" pos:column="27">n</name> <op:operator pos:line="182" pos:column="29">=&gt;</op:operator> <block pos:line="182" pos:column="32">{ 
                <expr_stmt><expr><call><name pos:line="183" pos:column="17">HandleCoOcurrentWordsSync</name><argument_list pos:line="183" pos:column="42">(<argument><expr><name pos:line="183" pos:column="43">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="184" pos:column="17">return <expr><lit:literal type="number" pos:line="184" pos:column="24">0</lit:literal></expr>;</return>
            }</block></lambda></expr></argument>, <argument><expr><name pos:line="185" pos:column="16">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="188" pos:column="9">public</specifier> <name><name pos:line="188" pos:column="16">Dictionary</name><argument_list pos:line="188" pos:column="26">&lt;<argument><name pos:line="188" pos:column="27">string</name></argument>, <argument><name pos:line="188" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="188" pos:column="40">GetCoOccurredWordsAndCount</name><parameter_list pos:line="188" pos:column="66">(<param><decl><type><name pos:line="188" pos:column="67">string</name></type> <name pos:line="188" pos:column="74">word</name></decl></param>)</parameter_list>
        <block pos:line="189" pos:column="9">{
            <lock pos:line="190" pos:column="13">lock (<expr><name pos:line="190" pos:column="19">locker</name></expr>)
            <block pos:line="191" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="192" pos:column="17">var</name></type> <name pos:line="192" pos:column="21">row</name> <init pos:line="192" pos:column="25">= <expr><call><name><name pos:line="192" pos:column="27">allWords</name><op:operator pos:line="192" pos:column="35">.</op:operator><name pos:line="192" pos:column="36">BinarySearch</name></name><argument_list pos:line="192" pos:column="48">(<argument><expr><name pos:line="192" pos:column="49">word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="193" pos:column="17">if <condition pos:line="193" pos:column="20">(<expr><name pos:line="193" pos:column="21">row</name> <op:operator pos:line="193" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="193" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="193" pos:column="29"> <return pos:line="193" pos:column="30">return <expr><op:operator pos:line="193" pos:column="37">new</op:operator> <call><name><name pos:line="193" pos:column="41">Dictionary</name><argument_list pos:line="193" pos:column="51">&lt;<argument><name pos:line="193" pos:column="52">string</name></argument>, <argument><name pos:line="193" pos:column="60">int</name></argument>&gt;</argument_list></name><argument_list pos:line="193" pos:column="64">()</argument_list></call></expr>;</return></then></if>
                <decl_stmt><decl><type><name pos:line="194" pos:column="17">var</name></type> <name pos:line="194" pos:column="21">columns</name> <init pos:line="194" pos:column="29">= <expr><call><name pos:line="194" pos:column="31">GetNonZeroColumnNumbers</name><argument_list pos:line="194" pos:column="54">(<argument><expr><name pos:line="194" pos:column="55">row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return pos:line="195" pos:column="17">return <expr><call><name><name pos:line="195" pos:column="24">columns</name><op:operator pos:line="195" pos:column="31">.</op:operator><name pos:line="195" pos:column="32">Select</name></name><argument_list pos:line="195" pos:column="38">(<argument><expr><lambda><name pos:line="195" pos:column="39">c</name> <op:operator pos:line="195" pos:column="41">=&gt;</op:operator> <call><name><name pos:line="195" pos:column="44">allWords</name><op:operator pos:line="195" pos:column="52">.</op:operator><name pos:line="195" pos:column="53">ElementAt</name></name><argument_list pos:line="195" pos:column="62">(<argument><expr><name><name pos:line="195" pos:column="63">c</name><op:operator pos:line="195" pos:column="64">.</op:operator><name pos:line="195" pos:column="65">Value</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="195" pos:column="72">.</op:operator><call><name pos:line="195" pos:column="73">ToDictionary</name><argument_list pos:line="195" pos:column="85">(<argument><expr><lambda><name pos:line="195" pos:column="86">k</name> <op:operator pos:line="195" pos:column="88">=&gt;</op:operator> <name pos:line="195" pos:column="91">k</name></lambda></expr></argument>,
                    <argument><expr><lambda><name pos:line="196" pos:column="21">k</name> <op:operator pos:line="196" pos:column="23">=&gt;</op:operator> <call><name pos:line="196" pos:column="26">GetCoOccurrenceCount</name><argument_list pos:line="196" pos:column="46">(<argument><expr><name pos:line="196" pos:column="47">k</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="50">word</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="200" pos:column="9">public</specifier> <name><name pos:line="200" pos:column="16">Dictionary</name><argument_list pos:line="200" pos:column="26">&lt;<argument><name pos:line="200" pos:column="27">string</name></argument>, <argument><name pos:line="200" pos:column="35">int</name></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="40">GetAllWordsAndCount</name><parameter_list pos:line="200" pos:column="59">()</parameter_list>
        <block pos:line="201" pos:column="9">{
            <lock pos:line="202" pos:column="13">lock (<expr><name pos:line="202" pos:column="19">locker</name></expr>)
            <block pos:line="203" pos:column="13">{
                <return pos:line="204" pos:column="17">return <expr><call><name><name pos:line="204" pos:column="24">allWords</name><op:operator pos:line="204" pos:column="32">.</op:operator><name pos:line="204" pos:column="33">ToDictionary</name></name><argument_list pos:line="204" pos:column="45">(<argument><expr><lambda><name pos:line="204" pos:column="46">w</name> <op:operator pos:line="204" pos:column="48">=&gt;</op:operator> <name pos:line="204" pos:column="51">w</name></lambda></expr></argument>, <argument><expr><lambda><name pos:line="204" pos:column="54">w</name> <op:operator pos:line="204" pos:column="56">=&gt;</op:operator> <call><name pos:line="204" pos:column="59">GetCoOccurrenceCount</name><argument_list pos:line="204" pos:column="79">(<argument><expr><name pos:line="204" pos:column="80">w</name></expr></argument>, <argument><expr><name pos:line="204" pos:column="83">w</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="208" pos:column="9">public</specifier> <name><name pos:line="208" pos:column="16">IEnumerable</name><argument_list pos:line="208" pos:column="27">&lt;<argument><name pos:line="208" pos:column="28">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="208" pos:column="42">GetEntries</name><parameter_list pos:line="208" pos:column="52">(<param><decl><type><name><name pos:line="208" pos:column="53">Predicate</name><argument_list pos:line="208" pos:column="62">&lt;<argument><name pos:line="208" pos:column="63">IMatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="208" pos:column="77">predicate</name></decl></param>)</parameter_list>
        <block pos:line="209" pos:column="9">{
            <lock pos:line="210" pos:column="13">lock (<expr><name pos:line="210" pos:column="19">locker</name></expr>)
            <block pos:line="211" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="212" pos:column="17">var</name></type> <name pos:line="212" pos:column="21">results</name> <init pos:line="212" pos:column="29">= <expr><op:operator pos:line="212" pos:column="31">new</op:operator> <call><name><name pos:line="212" pos:column="35">List</name><argument_list pos:line="212" pos:column="39">&lt;<argument><name pos:line="212" pos:column="40">IMatrixEntry</name></argument>&gt;</argument_list></name><argument_list pos:line="212" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="213" pos:column="17">for (<init><decl><type><name pos:line="213" pos:column="22">int</name></type> <name pos:line="213" pos:column="26">i</name> <init pos:line="213" pos:column="28">= <expr><lit:literal type="number" pos:line="213" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="213" pos:column="33">i</name> <op:operator pos:line="213" pos:column="35">&lt;</op:operator> <name><name pos:line="213" pos:column="37">JA</name><op:operator pos:line="213" pos:column="39">.</op:operator><name pos:line="213" pos:column="40">Count</name></name></expr>;</condition> <incr><expr><name pos:line="213" pos:column="47">i</name><op:operator pos:line="213" pos:column="48">++</op:operator></expr></incr>)
                <block pos:line="214" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="215" pos:column="21">var</name></type> <name pos:line="215" pos:column="25">row</name> <init pos:line="215" pos:column="29">= <expr><call><name pos:line="215" pos:column="31">GetRowByAIndex</name><argument_list pos:line="215" pos:column="45">(<argument><expr><name pos:line="215" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="216" pos:column="21">var</name></type> <name pos:line="216" pos:column="25">column</name> <init pos:line="216" pos:column="32">= <expr><call><name><name pos:line="216" pos:column="34">JA</name><op:operator pos:line="216" pos:column="36">.</op:operator><name pos:line="216" pos:column="37">ElementAt</name></name><argument_list pos:line="216" pos:column="46">(<argument><expr><name pos:line="216" pos:column="47">i</name></expr></argument>)</argument_list></call><op:operator pos:line="216" pos:column="49">.</op:operator><name pos:line="216" pos:column="50">Value</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="217" pos:column="21">var</name></type> <name pos:line="217" pos:column="25">count</name> <init pos:line="217" pos:column="31">= <expr><call><name><name pos:line="217" pos:column="33">A</name><op:operator pos:line="217" pos:column="34">.</op:operator><name pos:line="217" pos:column="35">ElementAt</name></name><argument_list pos:line="217" pos:column="44">(<argument><expr><name pos:line="217" pos:column="45">i</name></expr></argument>)</argument_list></call><op:operator pos:line="217" pos:column="47">.</op:operator><name pos:line="217" pos:column="48">Value</name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="219" pos:column="21">var</name></type> <name pos:line="219" pos:column="25">rowWord</name> <init pos:line="219" pos:column="33">= <expr><call><name><name pos:line="219" pos:column="35">allWords</name><op:operator pos:line="219" pos:column="43">.</op:operator><name pos:line="219" pos:column="44">ElementAt</name></name><argument_list pos:line="219" pos:column="53">(<argument><expr><name pos:line="219" pos:column="54">row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="220" pos:column="21">var</name></type> <name pos:line="220" pos:column="25">columnWord</name> <init pos:line="220" pos:column="36">= <expr><call><name><name pos:line="220" pos:column="38">allWords</name><op:operator pos:line="220" pos:column="46">.</op:operator><name pos:line="220" pos:column="47">ElementAt</name></name><argument_list pos:line="220" pos:column="56">(<argument><expr><name pos:line="220" pos:column="57">column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="221" pos:column="21">var</name></type> <name pos:line="221" pos:column="25">entry</name> <init pos:line="221" pos:column="31">= <expr><op:operator pos:line="221" pos:column="33">new</op:operator> <call><name pos:line="221" pos:column="37">MatrixEntry</name><argument_list pos:line="221" pos:column="48">(<argument><expr><name pos:line="221" pos:column="49">rowWord</name></expr></argument>, <argument><expr><name pos:line="221" pos:column="58">columnWord</name></expr></argument>, <argument><expr><name pos:line="221" pos:column="70">count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if pos:line="222" pos:column="21">if <condition pos:line="222" pos:column="24">(<expr><call><name><name pos:line="222" pos:column="25">predicate</name><op:operator pos:line="222" pos:column="34">.</op:operator><name pos:line="222" pos:column="35">Invoke</name></name><argument_list pos:line="222" pos:column="41">(<argument><expr><name pos:line="222" pos:column="42">entry</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="222" pos:column="49"> <expr_stmt><expr><call><name><name pos:line="222" pos:column="50">results</name><op:operator pos:line="222" pos:column="57">.</op:operator><name pos:line="222" pos:column="58">Add</name></name><argument_list pos:line="222" pos:column="61">(<argument><expr><name pos:line="222" pos:column="62">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></for>
                <return pos:line="224" pos:column="17">return <expr><name pos:line="224" pos:column="24">results</name></expr>;</return>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="228" pos:column="9">private</specifier> <name pos:line="228" pos:column="17">int</name></type> <name pos:line="228" pos:column="21">GetRowByAIndex</name><parameter_list pos:line="228" pos:column="35">(<param><decl><type><name pos:line="228" pos:column="36">int</name></type> <name pos:line="228" pos:column="40">aIndex</name></decl></param>)</parameter_list>
        <block pos:line="229" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="230" pos:column="13">var</name></type> <name pos:line="230" pos:column="17">IAIndex</name> <init pos:line="230" pos:column="25">= <expr><call><name><name pos:line="230" pos:column="27">IA</name><op:operator pos:line="230" pos:column="29">.</op:operator><name pos:line="230" pos:column="30">BinarySearch</name></name><argument_list pos:line="230" pos:column="42">(<argument><expr><op:operator pos:line="230" pos:column="43">new</op:operator> <call><name pos:line="230" pos:column="47">BoxedInt</name><argument_list pos:line="230" pos:column="55">(<argument><expr><name pos:line="230" pos:column="56">aIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return pos:line="231" pos:column="13">return <expr><name pos:line="231" pos:column="20">IAIndex</name> <op:operator pos:line="231" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="231" pos:column="31">0</lit:literal> <op:operator pos:line="231" pos:column="33">?</op:operator> <name pos:line="231" pos:column="35">IAIndex</name> <op:operator pos:line="231" pos:column="43">:</op:operator> <op:operator pos:line="231" pos:column="45">~</op:operator><name pos:line="231" pos:column="46">IAIndex</name> <op:operator pos:line="231" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="231" pos:column="56">1</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="234" pos:column="9">public</specifier> <name pos:line="234" pos:column="16">void</name></type> <name pos:line="234" pos:column="21">HandleCoOcurrentWordsSync</name><parameter_list pos:line="234" pos:column="46">(<param><decl><type><name><name pos:line="234" pos:column="47">IEnumerable</name><argument_list pos:line="234" pos:column="58">&lt;<argument><name pos:line="234" pos:column="59">string</name></argument>&gt;</argument_list></name></type> <name pos:line="234" pos:column="67">words</name></decl></param>)</parameter_list>
        <block pos:line="235" pos:column="9">{
            <lock pos:line="236" pos:column="13">lock (<expr><name pos:line="236" pos:column="19">locker</name></expr>)
            <block pos:line="237" pos:column="13">{
                <expr_stmt><expr><name pos:line="238" pos:column="17">words</name> <op:operator pos:line="238" pos:column="23">=</op:operator> <call><name pos:line="238" pos:column="25">SelectWords</name><argument_list pos:line="238" pos:column="36">(<argument><expr><call><name><name pos:line="238" pos:column="37">words</name><op:operator pos:line="238" pos:column="42">.</op:operator><name pos:line="238" pos:column="43">ToList</name></name><argument_list pos:line="238" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="238" pos:column="52">.</op:operator><call><name pos:line="238" pos:column="53">ToList</name><argument_list pos:line="238" pos:column="59">()</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="240" pos:column="17">// Add new words.</comment>
                <decl_stmt><decl><type><name pos:line="241" pos:column="17">var</name></type> <name pos:line="241" pos:column="21">newWords</name> <init pos:line="241" pos:column="30">= <expr><call><name><name pos:line="241" pos:column="32">words</name><op:operator pos:line="241" pos:column="37">.</op:operator><name pos:line="241" pos:column="38">Except</name></name><argument_list pos:line="241" pos:column="44">(<argument><expr><name pos:line="241" pos:column="45">allWords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="242" pos:column="17">foreach (<init><decl><type><name pos:line="242" pos:column="26">var</name></type> <name pos:line="242" pos:column="30">nw</name> <range pos:line="242" pos:column="33">in <expr><name pos:line="242" pos:column="36">newWords</name></expr></range></decl></init>)
                <block pos:line="243" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="244" pos:column="21">var</name></type> <name pos:line="244" pos:column="25">index</name> <init pos:line="244" pos:column="31">= <expr><call><name><name pos:line="244" pos:column="33">allWords</name><op:operator pos:line="244" pos:column="41">.</op:operator><name pos:line="244" pos:column="42">BinarySearch</name></name><argument_list pos:line="244" pos:column="54">(<argument><expr><name pos:line="244" pos:column="55">nw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name pos:line="245" pos:column="21">InsertRowAndColumnAt</name><argument_list pos:line="245" pos:column="41">(<argument><expr><op:operator pos:line="245" pos:column="42">~</op:operator><name pos:line="245" pos:column="43">index</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="245" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="246" pos:column="21">allWords</name><op:operator pos:line="246" pos:column="29">.</op:operator><name pos:line="246" pos:column="30">Insert</name></name><argument_list pos:line="246" pos:column="36">(<argument><expr><op:operator pos:line="246" pos:column="37">~</op:operator><name pos:line="246" pos:column="38">index</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="45">nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>

                <comment type="line" pos:line="249" pos:column="17">// Increment occurrence.</comment>
                <decl_stmt><decl><type><name pos:line="250" pos:column="17">var</name></type> <name pos:line="250" pos:column="21">entries</name> <init pos:line="250" pos:column="29">= <expr><call><name pos:line="250" pos:column="31">GetBigramEntries</name><argument_list pos:line="250" pos:column="47">(<argument><expr><name pos:line="250" pos:column="48">words</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <foreach pos:line="251" pos:column="17">foreach (<init><decl><type><name pos:line="251" pos:column="26">var</name></type> <name pos:line="251" pos:column="30">entry</name> <range pos:line="251" pos:column="36">in <expr><name pos:line="251" pos:column="39">entries</name></expr></range></decl></init>)
                <block pos:line="252" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="253" pos:column="21">int</name></type> <name pos:line="253" pos:column="25">rowNumber</name></decl><op:operator pos:line="253" pos:column="34">,</op:operator> <decl><type ref="prev"/><name pos:line="253" pos:column="36">columnNumber</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name pos:line="254" pos:column="21">ComputeWordPosition</name><argument_list pos:line="254" pos:column="40">(<argument><expr><name><name pos:line="254" pos:column="41">entry</name><op:operator pos:line="254" pos:column="46">.</op:operator><name pos:line="254" pos:column="47">Row</name></name></expr></argument>, <argument><expr><name><name pos:line="254" pos:column="52">entry</name><op:operator pos:line="254" pos:column="57">.</op:operator><name pos:line="254" pos:column="58">Column</name></name></expr></argument>, <argument><expr pos:line="254" pos:column="66">out <name pos:line="254" pos:column="70">rowNumber</name></expr></argument>, 
                        <argument><expr pos:line="255" pos:column="25">out <name pos:line="255" pos:column="29">columnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="256" pos:column="21">IncrementCell</name><argument_list pos:line="256" pos:column="34">(<argument><expr><name pos:line="256" pos:column="35">rowNumber</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="46">columnNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></foreach>
            }</block></lock>
        }</block></function>

        <function><type><specifier pos:line="261" pos:column="9">private</specifier> <name pos:line="261" pos:column="17">void</name></type> <name pos:line="261" pos:column="22">ComputeWordPosition</name><parameter_list pos:line="261" pos:column="41">(<param><decl><type><name pos:line="261" pos:column="42">String</name></type> <name pos:line="261" pos:column="49">rowWord</name></decl></param>, <param><decl><type><name pos:line="261" pos:column="58">string</name></type> <name pos:line="261" pos:column="65">columnWord</name></decl></param>, 
            <param><decl><type><specifier pos:line="262" pos:column="13">out</specifier> <name pos:line="262" pos:column="17">int</name></type> <name pos:line="262" pos:column="21">row</name></decl></param>, <param><decl><type><specifier pos:line="262" pos:column="26">out</specifier> <name pos:line="262" pos:column="30">int</name></type> <name pos:line="262" pos:column="34">column</name></decl></param>)</parameter_list>
        <block pos:line="263" pos:column="9">{
            <expr_stmt><expr><name pos:line="264" pos:column="13">row</name> <op:operator pos:line="264" pos:column="17">=</op:operator> <call><name><name pos:line="264" pos:column="19">allWords</name><op:operator pos:line="264" pos:column="27">.</op:operator><name pos:line="264" pos:column="28">BinarySearch</name></name><argument_list pos:line="264" pos:column="40">(<argument><expr><name pos:line="264" pos:column="41">rowWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="265" pos:column="13">column</name> <op:operator pos:line="265" pos:column="20">=</op:operator> <call><name><name pos:line="265" pos:column="22">allWords</name><op:operator pos:line="265" pos:column="30">.</op:operator><name pos:line="265" pos:column="31">BinarySearch</name></name><argument_list pos:line="265" pos:column="43">(<argument><expr><name pos:line="265" pos:column="44">columnWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="268" pos:column="9">private</specifier> <name><name pos:line="268" pos:column="17">IEnumerable</name><argument_list pos:line="268" pos:column="28">&lt;<argument><name pos:line="268" pos:column="29">MatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="268" pos:column="42">GetBigramEntries</name><parameter_list pos:line="268" pos:column="58">(<param><decl><type><name><name pos:line="268" pos:column="59">IEnumerable</name><argument_list pos:line="268" pos:column="70">&lt;<argument><name pos:line="268" pos:column="71">string</name></argument>&gt;</argument_list></name></type> <name pos:line="268" pos:column="79">words</name></decl></param>)</parameter_list>
        <block pos:line="269" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="270" pos:column="13">var</name></type> <name pos:line="270" pos:column="17">list</name> <init pos:line="270" pos:column="22">= <expr><call><name><name pos:line="270" pos:column="24">words</name><op:operator pos:line="270" pos:column="29">.</op:operator><name pos:line="270" pos:column="30">ToList</name></name><argument_list pos:line="270" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="271" pos:column="13">var</name></type> <name pos:line="271" pos:column="17">allEntries</name> <init pos:line="271" pos:column="28">= <expr><op:operator pos:line="271" pos:column="30">new</op:operator> <call><name><name pos:line="271" pos:column="34">List</name><argument_list pos:line="271" pos:column="38">&lt;<argument><name pos:line="271" pos:column="39">MatrixEntry</name></argument>&gt;</argument_list></name><argument_list pos:line="271" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="272" pos:column="13">int</name></type> <name pos:line="272" pos:column="17">i</name></decl>;</decl_stmt>
            <for pos:line="273" pos:column="13">for (<init><expr><name pos:line="273" pos:column="18">i</name> <op:operator pos:line="273" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="273" pos:column="22">0</lit:literal></expr>;</init> <condition><expr><name pos:line="273" pos:column="25">i</name> <op:operator pos:line="273" pos:column="27">+</op:operator> <name pos:line="273" pos:column="29">GRAM_NUMBER</name> <op:operator pos:line="273" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="273" pos:column="43">1</lit:literal> <op:operator pos:line="273" pos:column="45">&lt;</op:operator> <name><name pos:line="273" pos:column="47">list</name><op:operator pos:line="273" pos:column="51">.</op:operator><name pos:line="273" pos:column="52">Count</name></name></expr>;</condition> <incr><expr><name pos:line="273" pos:column="59">i</name><op:operator pos:line="273" pos:column="60">++</op:operator></expr></incr>)
            <block pos:line="274" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="275" pos:column="17">allEntries</name><op:operator pos:line="275" pos:column="27">.</op:operator><name pos:line="275" pos:column="28">AddRange</name></name><argument_list pos:line="275" pos:column="36">(<argument><expr><call><name pos:line="275" pos:column="37">InternalGetEntries</name><argument_list pos:line="275" pos:column="55">(<argument><expr><call><name><name pos:line="275" pos:column="56">list</name><op:operator pos:line="275" pos:column="60">.</op:operator><name pos:line="275" pos:column="61">GetRange</name></name><argument_list pos:line="275" pos:column="69">(<argument><expr><name pos:line="275" pos:column="70">i</name></expr></argument>, <argument><expr><name pos:line="275" pos:column="73">GRAM_NUMBER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <comment type="line" pos:line="278" pos:column="13">// Check if having leftovers.</comment>
            <if pos:line="279" pos:column="13">if <condition pos:line="279" pos:column="16">(<expr><name pos:line="279" pos:column="17">i</name> <op:operator pos:line="279" pos:column="19">+</op:operator> <name pos:line="279" pos:column="21">GRAM_NUMBER</name> <op:operator pos:line="279" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="279" pos:column="35">1</lit:literal> <op:operator pos:line="279" pos:column="37">!=</op:operator> <name><name pos:line="279" pos:column="40">list</name><op:operator pos:line="279" pos:column="44">.</op:operator><name pos:line="279" pos:column="45">Count</name></name> <op:operator pos:line="279" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="279" pos:column="53">1</lit:literal> <op:operator pos:line="279" pos:column="55">&amp;&amp;</op:operator> <call><name><name pos:line="279" pos:column="58">list</name><op:operator pos:line="279" pos:column="62">.</op:operator><name pos:line="279" pos:column="63">Any</name></name><argument_list pos:line="279" pos:column="66">()</argument_list></call></expr>)</condition><then pos:line="279" pos:column="69">
            <block pos:line="280" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="281" pos:column="17">allEntries</name><op:operator pos:line="281" pos:column="27">.</op:operator><name pos:line="281" pos:column="28">AddRange</name></name><argument_list pos:line="281" pos:column="36">(<argument><expr><call><name pos:line="281" pos:column="37">InternalGetEntries</name><argument_list pos:line="281" pos:column="55">(<argument><expr><call><name><name pos:line="281" pos:column="56">list</name><op:operator pos:line="281" pos:column="60">.</op:operator><name pos:line="281" pos:column="61">GetRange</name></name><argument_list pos:line="281" pos:column="69">(<argument><expr><name pos:line="281" pos:column="70">i</name></expr></argument>, <argument><expr><name><name pos:line="281" pos:column="73">list</name><op:operator pos:line="281" pos:column="77">.</op:operator><name pos:line="281" pos:column="78">Count</name></name> <op:operator pos:line="281" pos:column="84">-</op:operator> <name pos:line="281" pos:column="86">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return pos:line="284" pos:column="13">return <expr><name pos:line="284" pos:column="20">allEntries</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="287" pos:column="9">private</specifier> <name><name pos:line="287" pos:column="17">IEnumerable</name><argument_list pos:line="287" pos:column="28">&lt;<argument><name pos:line="287" pos:column="29">MatrixEntry</name></argument>&gt;</argument_list></name></type> <name pos:line="287" pos:column="42">InternalGetEntries</name><parameter_list pos:line="287" pos:column="60">(<param><decl><type><name><name pos:line="287" pos:column="61">IEnumerable</name><argument_list pos:line="287" pos:column="72">&lt;<argument><name pos:line="287" pos:column="73">string</name></argument>&gt;</argument_list></name></type> <name pos:line="287" pos:column="81">words</name></decl></param>)</parameter_list>
        <block pos:line="288" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="289" pos:column="13">var</name></type> <name pos:line="289" pos:column="17">list</name> <init pos:line="289" pos:column="22">= <expr><call><name><name pos:line="289" pos:column="24">words</name><op:operator pos:line="289" pos:column="29">.</op:operator><name pos:line="289" pos:column="30">ToList</name></name><argument_list pos:line="289" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="290" pos:column="13">var</name></type> <name pos:line="290" pos:column="17">allEntries</name> <init pos:line="290" pos:column="28">= <expr><op:operator pos:line="290" pos:column="30">new</op:operator> <call><name><name pos:line="290" pos:column="34">List</name><argument_list pos:line="290" pos:column="38">&lt;<argument><name pos:line="290" pos:column="39">MatrixEntry</name></argument>&gt;</argument_list></name><argument_list pos:line="290" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="291" pos:column="13">for (<init><decl><type><name pos:line="291" pos:column="18">int</name></type> <name pos:line="291" pos:column="22">i</name> <init pos:line="291" pos:column="24">= <expr><lit:literal type="number" pos:line="291" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="291" pos:column="29">i</name> <op:operator pos:line="291" pos:column="31">&lt;</op:operator> <name><name pos:line="291" pos:column="33">list</name><op:operator pos:line="291" pos:column="37">.</op:operator><name pos:line="291" pos:column="38">Count</name></name></expr>;</condition> <incr><expr><name pos:line="291" pos:column="45">i</name><op:operator pos:line="291" pos:column="46">++</op:operator></expr></incr>)
            <block pos:line="292" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="293" pos:column="17">var</name></type> <name pos:line="293" pos:column="21">word1</name> <init pos:line="293" pos:column="27">= <expr><call><name><name pos:line="293" pos:column="29">list</name><op:operator pos:line="293" pos:column="33">.</op:operator><name pos:line="293" pos:column="34">ElementAt</name></name><argument_list pos:line="293" pos:column="43">(<argument><expr><name pos:line="293" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for pos:line="294" pos:column="17">for (<init><decl><type><name pos:line="294" pos:column="22">int</name></type> <name pos:line="294" pos:column="26">j</name> <init pos:line="294" pos:column="28">= <expr><name pos:line="294" pos:column="30">i</name></expr></init></decl>;</init> <condition><expr><name pos:line="294" pos:column="33">j</name> <op:operator pos:line="294" pos:column="35">&lt;</op:operator> <name><name pos:line="294" pos:column="37">list</name><op:operator pos:line="294" pos:column="41">.</op:operator><name pos:line="294" pos:column="42">Count</name></name></expr>;</condition> <incr><expr><name pos:line="294" pos:column="49">j</name><op:operator pos:line="294" pos:column="50">++</op:operator></expr></incr>)
                <block pos:line="295" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="296" pos:column="21">var</name></type> <name pos:line="296" pos:column="25">word2</name> <init pos:line="296" pos:column="31">= <expr><call><name><name pos:line="296" pos:column="33">list</name><op:operator pos:line="296" pos:column="37">.</op:operator><name pos:line="296" pos:column="38">ElementAt</name></name><argument_list pos:line="296" pos:column="47">(<argument><expr><name pos:line="296" pos:column="48">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="297" pos:column="21">allEntries</name><op:operator pos:line="297" pos:column="31">.</op:operator><name pos:line="297" pos:column="32">Add</name></name><argument_list pos:line="297" pos:column="35">(<argument><expr><op:operator pos:line="297" pos:column="36">new</op:operator> <call><name pos:line="297" pos:column="40">MatrixEntry</name><argument_list pos:line="297" pos:column="51">(<argument><expr><name pos:line="297" pos:column="52">word1</name></expr></argument>, <argument><expr><name pos:line="297" pos:column="59">word2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="298" pos:column="21">allEntries</name><op:operator pos:line="298" pos:column="31">.</op:operator><name pos:line="298" pos:column="32">Add</name></name><argument_list pos:line="298" pos:column="35">(<argument><expr><op:operator pos:line="298" pos:column="36">new</op:operator> <call><name pos:line="298" pos:column="40">MatrixEntry</name><argument_list pos:line="298" pos:column="51">(<argument><expr><name pos:line="298" pos:column="52">word2</name></expr></argument>, <argument><expr><name pos:line="298" pos:column="59">word1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
            <return pos:line="301" pos:column="13">return <expr><name pos:line="301" pos:column="20">allEntries</name></expr>;</return>
        }</block></function>


        <function><type><specifier pos:line="305" pos:column="9">private</specifier> <name><name pos:line="305" pos:column="17">IEnumerable</name><argument_list pos:line="305" pos:column="28">&lt;<argument><name pos:line="305" pos:column="29">String</name></argument>&gt;</argument_list></name></type> <name pos:line="305" pos:column="37">SelectWords</name><parameter_list pos:line="305" pos:column="48">(<param><decl><type><name><name pos:line="305" pos:column="49">List</name><argument_list pos:line="305" pos:column="53">&lt;<argument><name pos:line="305" pos:column="54">string</name></argument>&gt;</argument_list></name></type> <name pos:line="305" pos:column="62">words</name></decl></param>)</parameter_list>
        <block pos:line="306" pos:column="9">{
            <expr_stmt><expr><name pos:line="307" pos:column="13">words</name> <op:operator pos:line="307" pos:column="19">=</op:operator> <call><name pos:line="307" pos:column="21">FilterOutBadWords</name><argument_list pos:line="307" pos:column="38">(<argument><expr><name pos:line="307" pos:column="39">words</name></expr></argument>)</argument_list></call><op:operator pos:line="307" pos:column="45">.</op:operator><call><name pos:line="307" pos:column="46">ToList</name><argument_list pos:line="307" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="308" pos:column="13">words</name> <op:operator pos:line="308" pos:column="19">=</op:operator> <op:operator pos:line="308" pos:column="21">(</op:operator><name><name pos:line="308" pos:column="22">words</name><op:operator pos:line="308" pos:column="27">.</op:operator><name pos:line="308" pos:column="28">Count</name></name> <op:operator pos:line="308" pos:column="34">&gt;</op:operator> <name pos:line="308" pos:column="36">MAX_COOCCURRENCE_WORDS_COUNT</name><op:operator pos:line="308" pos:column="64">)</op:operator>
                <op:operator pos:line="309" pos:column="17">?</op:operator> <call><name><name pos:line="309" pos:column="19">words</name><op:operator pos:line="309" pos:column="24">.</op:operator><name pos:line="309" pos:column="25">GetRange</name></name><argument_list pos:line="309" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="309" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><name pos:line="309" pos:column="37">MAX_COOCCURRENCE_WORDS_COUNT</name></expr></argument>)</argument_list></call>
                   <op:operator pos:line="310" pos:column="20">:</op:operator> <name pos:line="310" pos:column="22">words</name></expr>;</expr_stmt>
            <return pos:line="311" pos:column="13">return <expr><call><name><name pos:line="311" pos:column="20">words</name><op:operator pos:line="311" pos:column="25">.</op:operator><name pos:line="311" pos:column="26">Distinct</name></name><argument_list pos:line="311" pos:column="34">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="314" pos:column="9">private</specifier> <name><name pos:line="314" pos:column="17">IEnumerable</name><argument_list pos:line="314" pos:column="28">&lt;<argument><name pos:line="314" pos:column="29">String</name></argument>&gt;</argument_list></name></type> <name pos:line="314" pos:column="37">FilterOutBadWords</name><parameter_list pos:line="314" pos:column="54">(<param><decl><type><name><name pos:line="314" pos:column="55">IEnumerable</name><argument_list pos:line="314" pos:column="66">&lt;<argument><name pos:line="314" pos:column="67">String</name></argument>&gt;</argument_list></name></type> <name pos:line="314" pos:column="75">words</name></decl></param>)</parameter_list>
        <block pos:line="315" pos:column="9">{
            <return pos:line="316" pos:column="13">return <expr><call><name><name pos:line="316" pos:column="20">words</name><op:operator pos:line="316" pos:column="25">.</op:operator><name pos:line="316" pos:column="26">Where</name></name><argument_list pos:line="316" pos:column="31">(<argument><expr><lambda><name pos:line="316" pos:column="32">w</name> <op:operator pos:line="316" pos:column="34">=&gt;</op:operator> <name><name pos:line="316" pos:column="37">w</name><op:operator pos:line="316" pos:column="38">.</op:operator><name pos:line="316" pos:column="39">Length</name></name> <op:operator pos:line="316" pos:column="46">&gt;=</op:operator> <name pos:line="316" pos:column="49">MAX_WORD_LENGTH</name>
                <op:operator pos:line="317" pos:column="17">||</op:operator> <call><name><name pos:line="317" pos:column="20">w</name><op:operator pos:line="317" pos:column="21">.</op:operator><name pos:line="317" pos:column="22">Contains</name></name><argument_list pos:line="317" pos:column="30">(<argument><expr><lit:literal type="char" pos:line="317" pos:column="31">' '</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="317" pos:column="36">||</op:operator> <call><name><name pos:line="317" pos:column="39">w</name><op:operator pos:line="317" pos:column="40">.</op:operator><name pos:line="317" pos:column="41">Contains</name></name><argument_list pos:line="317" pos:column="49">(<argument><expr><lit:literal type="char" pos:line="317" pos:column="50">':'</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <class><specifier pos:line="320" pos:column="9">private</specifier> class <name pos:line="320" pos:column="23">MatrixEntry</name> <super pos:line="320" pos:column="35">: <name pos:line="320" pos:column="37">IMatrixEntry</name></super>
        <block pos:line="321" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="322" pos:column="13">public</specifier> <name pos:line="322" pos:column="20">string</name></type> <name pos:line="322" pos:column="27">Row</name> <block pos:line="322" pos:column="31">{ <function_decl><name pos:line="322" pos:column="33">get</name>;</function_decl> <function_decl><specifier pos:line="322" pos:column="38">private</specifier> <name pos:line="322" pos:column="46">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="323" pos:column="13">public</specifier> <name pos:line="323" pos:column="20">string</name></type> <name pos:line="323" pos:column="27">Column</name> <block pos:line="323" pos:column="34">{ <function_decl><name pos:line="323" pos:column="36">get</name>;</function_decl> <function_decl><specifier pos:line="323" pos:column="41">private</specifier> <name pos:line="323" pos:column="49">set</name>;</function_decl> }</block></decl></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="324" pos:column="13">public</specifier> <name pos:line="324" pos:column="20">int</name></type> <name pos:line="324" pos:column="24">Count</name> <block pos:line="324" pos:column="30">{ <function_decl><name pos:line="324" pos:column="32">get</name>;</function_decl> <function_decl><specifier pos:line="324" pos:column="37">private</specifier> <name pos:line="324" pos:column="45">set</name>;</function_decl> }</block></decl></decl_stmt>

            <constructor><specifier pos:line="326" pos:column="13">public</specifier> <name pos:line="326" pos:column="20">MatrixEntry</name><parameter_list pos:line="326" pos:column="31">(<param><decl><type><name pos:line="326" pos:column="32">String</name></type> <name pos:line="326" pos:column="39">Row</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="44">String</name></type> <name pos:line="326" pos:column="51">Column</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="59">int</name></type> <name pos:line="326" pos:column="63">Count</name> <init pos:line="326" pos:column="69">= <expr><lit:literal type="number" pos:line="326" pos:column="71">0</lit:literal></expr></init></decl></param>)</parameter_list>
            <block pos:line="327" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="328" pos:column="17">this</name><op:operator pos:line="328" pos:column="21">.</op:operator><name pos:line="328" pos:column="22">Row</name></name> <op:operator pos:line="328" pos:column="26">=</op:operator> <name pos:line="328" pos:column="28">Row</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="329" pos:column="17">this</name><op:operator pos:line="329" pos:column="21">.</op:operator><name pos:line="329" pos:column="22">Column</name></name> <op:operator pos:line="329" pos:column="29">=</op:operator> <name pos:line="329" pos:column="31">Column</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="330" pos:column="17">this</name><op:operator pos:line="330" pos:column="21">.</op:operator><name pos:line="330" pos:column="22">Count</name></name> <op:operator pos:line="330" pos:column="28">=</op:operator> <name pos:line="330" pos:column="30">Count</name></expr>;</expr_stmt>
            }</block></constructor>
        }</block></class>

        <function><type><specifier pos:line="334" pos:column="9">private</specifier> <name pos:line="334" pos:column="17">string</name></type> <name pos:line="334" pos:column="24">GetMatrixFilePath</name><parameter_list pos:line="334" pos:column="41">()</parameter_list>
        <block pos:line="335" pos:column="9">{
            <return pos:line="336" pos:column="13">return <expr><call><name><name pos:line="336" pos:column="20">Path</name><op:operator pos:line="336" pos:column="24">.</op:operator><name pos:line="336" pos:column="25">Combine</name></name><argument_list pos:line="336" pos:column="32">(<argument><expr><name pos:line="336" pos:column="33">directory</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="44">fileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
