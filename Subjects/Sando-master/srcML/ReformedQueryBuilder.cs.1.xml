<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core\QueryRefomers\ReformedQueryBuilder.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Linq</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Text</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Sando</name><op:operator pos:line="5" pos:column="12">.</op:operator><name pos:line="5" pos:column="13">Core</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="7" pos:column="1">namespace <name><name pos:line="7" pos:column="11">Sando</name><op:operator pos:line="7" pos:column="16">.</op:operator><name pos:line="7" pos:column="17">Core</name><op:operator pos:line="7" pos:column="21">.</op:operator><name pos:line="7" pos:column="22">QueryRefomers</name></name>
<block pos:line="8" pos:column="1">{
    <class><specifier pos:line="9" pos:column="5">public</specifier> class <name pos:line="9" pos:column="18">ReformedQueryBuilder</name>
    <block pos:line="10" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">private</specifier> <specifier pos:line="11" pos:column="17">readonly</specifier> <name><name pos:line="11" pos:column="26">List</name><argument_list pos:line="11" pos:column="30">&lt;<argument><name><name pos:line="11" pos:column="31">List</name><argument_list pos:line="11" pos:column="35">&lt;<argument><name pos:line="11" pos:column="36">ReformedWord</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="11" pos:column="51">reformedTermLists</name> <init pos:line="11" pos:column="69">= <expr><op:operator pos:line="11" pos:column="71">new</op:operator>
            <call><name><name pos:line="12" pos:column="13">List</name><argument_list pos:line="12" pos:column="17">&lt;<argument><name><name pos:line="12" pos:column="18">List</name><argument_list pos:line="12" pos:column="22">&lt;<argument><name pos:line="12" pos:column="23">ReformedWord</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="12" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">readonly</specifier> <name><name pos:line="14" pos:column="26">List</name><argument_list pos:line="14" pos:column="30">&lt;<argument><name><name pos:line="14" pos:column="31">Predicate</name><argument_list pos:line="14" pos:column="40">&lt;<argument><name pos:line="14" pos:column="41">IReformedQuery</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="14" pos:column="58">QueryFilters</name> <init pos:line="14" pos:column="71">= <expr><op:operator pos:line="14" pos:column="73">new</op:operator> 
            <call><name><name pos:line="15" pos:column="13">List</name><argument_list pos:line="15" pos:column="17">&lt;<argument><name><name pos:line="15" pos:column="18">Predicate</name><argument_list pos:line="15" pos:column="27">&lt;<argument><name pos:line="15" pos:column="28">IReformedQuery</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="15" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">private</specifier> <specifier pos:line="17" pos:column="17">readonly</specifier> <name pos:line="17" pos:column="26">IWordCoOccurrenceMatrix</name></type> <name pos:line="17" pos:column="50">coOccurrenceMatrix</name></decl>;</decl_stmt>


        <constructor><specifier pos:line="20" pos:column="9">public</specifier> <name pos:line="20" pos:column="16">ReformedQueryBuilder</name><parameter_list pos:line="20" pos:column="36">(<param><decl><type><name pos:line="20" pos:column="37">IWordCoOccurrenceMatrix</name></type> <name pos:line="20" pos:column="61">coOccurrenceMatrix</name></decl></param>)</parameter_list>
        <block pos:line="21" pos:column="9">{
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">this</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">coOccurrenceMatrix</name></name> <op:operator pos:line="22" pos:column="37">=</op:operator> <name pos:line="22" pos:column="39">coOccurrenceMatrix</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">QueryFilters</name><op:operator pos:line="23" pos:column="25">.</op:operator><name pos:line="23" pos:column="26">Add</name></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">IsEveryWordPairExisting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>


        <function><type><specifier pos:line="27" pos:column="9">private</specifier> <name pos:line="27" pos:column="17">Boolean</name></type> <name pos:line="27" pos:column="25">IsEveryWordPairExisting</name><parameter_list pos:line="27" pos:column="48">(<param><decl><type><name pos:line="27" pos:column="49">IReformedQuery</name></type> <name pos:line="27" pos:column="64">query</name></decl></param>)</parameter_list>
        <block pos:line="28" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">var</name></type> <name pos:line="29" pos:column="17">words</name> <init pos:line="29" pos:column="23">= <expr><call><name><name pos:line="29" pos:column="25">query</name><op:operator pos:line="29" pos:column="30">.</op:operator><name pos:line="29" pos:column="31">ReformedWords</name><op:operator pos:line="29" pos:column="44">.</op:operator><name pos:line="29" pos:column="45">Select</name></name><argument_list pos:line="29" pos:column="51">(<argument><expr><lambda><name pos:line="29" pos:column="52">q</name> <op:operator pos:line="29" pos:column="54">=&gt;</op:operator> <name><name pos:line="29" pos:column="57">q</name><op:operator pos:line="29" pos:column="58">.</op:operator><name pos:line="29" pos:column="59">NewTerm</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="29" pos:column="67">.</op:operator><call><name pos:line="29" pos:column="68">ToList</name><argument_list pos:line="29" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="30" pos:column="13">for (<init><decl><type><name pos:line="30" pos:column="18">int</name></type> <name pos:line="30" pos:column="22">i</name> <init pos:line="30" pos:column="24">= <expr><lit:literal type="number" pos:line="30" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="30" pos:column="29">i</name> <op:operator pos:line="30" pos:column="31">&lt;</op:operator> <name><name pos:line="30" pos:column="33">words</name><op:operator pos:line="30" pos:column="38">.</op:operator><name pos:line="30" pos:column="39">Count</name></name> <op:operator pos:line="30" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="30" pos:column="47">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="30" pos:column="50">i</name> <op:operator pos:line="30" pos:column="52">++</op:operator></expr></incr>)
            <block pos:line="31" pos:column="13">{
                <for pos:line="32" pos:column="17">for (<init><decl><type><name pos:line="32" pos:column="22">int</name></type> <name pos:line="32" pos:column="26">j</name> <init pos:line="32" pos:column="28">= <expr><name pos:line="32" pos:column="30">i</name> <op:operator pos:line="32" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="32" pos:column="34">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="32" pos:column="37">j</name> <op:operator pos:line="32" pos:column="39">&lt;</op:operator> <name><name pos:line="32" pos:column="41">words</name><op:operator pos:line="32" pos:column="46">.</op:operator><name pos:line="32" pos:column="47">Count</name></name></expr>;</condition> <incr><expr><name pos:line="32" pos:column="54">j</name> <op:operator pos:line="32" pos:column="56">++</op:operator></expr></incr>)
                <block pos:line="33" pos:column="17">{
                    <if pos:line="34" pos:column="21">if <condition pos:line="34" pos:column="24">(<expr><call><name><name pos:line="34" pos:column="25">coOccurrenceMatrix</name><op:operator pos:line="34" pos:column="43">.</op:operator><name pos:line="34" pos:column="44">GetCoOccurrenceCount</name></name><argument_list pos:line="34" pos:column="64">(<argument><expr><call><name><name pos:line="34" pos:column="65">words</name><op:operator pos:line="34" pos:column="70">.</op:operator><name pos:line="34" pos:column="71">ElementAt</name></name><argument_list pos:line="34" pos:column="80">(<argument><expr><name pos:line="34" pos:column="81">i</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name pos:line="35" pos:column="25">words</name><op:operator pos:line="35" pos:column="30">.</op:operator><name pos:line="35" pos:column="31">ElementAt</name></name><argument_list pos:line="35" pos:column="40">(<argument><expr><name pos:line="35" pos:column="41">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="35" pos:column="48">0</lit:literal></expr>)</condition><then pos:line="35" pos:column="50">
                    <block pos:line="36" pos:column="21">{
                        <return pos:line="37" pos:column="25">return <expr><lit:literal type="boolean" pos:line="37" pos:column="32">false</lit:literal></expr>;</return>
                    }</block></then></if>
                }</block></for>
            }</block></for>
            <return pos:line="41" pos:column="13">return <expr><lit:literal type="boolean" pos:line="41" pos:column="20">true</lit:literal></expr>;</return>
        }</block></function>

        <class><specifier pos:line="44" pos:column="9">private</specifier> class <name pos:line="44" pos:column="23">InternalReformedQuery</name> <super pos:line="44" pos:column="45">: <name pos:line="44" pos:column="47">IReformedQuery</name>, <name pos:line="44" pos:column="63">ICloneable</name></super>
        <block pos:line="45" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="46" pos:column="13">private</specifier> <specifier pos:line="46" pos:column="21">readonly</specifier> <name><name pos:line="46" pos:column="30">List</name><argument_list pos:line="46" pos:column="34">&lt;<argument><name pos:line="46" pos:column="35">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="49">allTerms</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="47" pos:column="13">private</specifier> <specifier pos:line="47" pos:column="21">readonly</specifier> <name pos:line="47" pos:column="30">IWordCoOccurrenceMatrix</name></type> <name pos:line="47" pos:column="54">matrix</name></decl>;</decl_stmt>

            <constructor><specifier pos:line="49" pos:column="13">public</specifier> <name pos:line="49" pos:column="20">InternalReformedQuery</name><parameter_list pos:line="49" pos:column="41">(<param><decl><type><name pos:line="49" pos:column="42">IWordCoOccurrenceMatrix</name></type> <name pos:line="49" pos:column="66">matrix</name></decl></param>)</parameter_list>
            <block pos:line="50" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="51" pos:column="17">this</name><op:operator pos:line="51" pos:column="21">.</op:operator><name pos:line="51" pos:column="22">allTerms</name></name> <op:operator pos:line="51" pos:column="31">=</op:operator> <op:operator pos:line="51" pos:column="33">new</op:operator> <call><name><name pos:line="51" pos:column="37">List</name><argument_list pos:line="51" pos:column="41">&lt;<argument><name pos:line="51" pos:column="42">ReformedWord</name></argument>&gt;</argument_list></name><argument_list pos:line="51" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="52" pos:column="17">this</name><op:operator pos:line="52" pos:column="21">.</op:operator><name pos:line="52" pos:column="22">matrix</name></name> <op:operator pos:line="52" pos:column="29">=</op:operator> <name pos:line="52" pos:column="31">matrix</name></expr>;</expr_stmt>
            }</block></constructor>

            <constructor><specifier pos:line="55" pos:column="13">private</specifier> <name pos:line="55" pos:column="21">InternalReformedQuery</name><parameter_list pos:line="55" pos:column="42">(<param><decl><type><name><name pos:line="55" pos:column="43">IEnumerable</name><argument_list pos:line="55" pos:column="54">&lt;<argument><name pos:line="55" pos:column="55">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="55" pos:column="69">allTerms</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="79">IWordCoOccurrenceMatrix</name></type> <name pos:line="55" pos:column="103">matrix</name></decl></param>)</parameter_list>
            <block pos:line="56" pos:column="13">{
                <expr_stmt><expr><name><name pos:line="57" pos:column="17">this</name><op:operator pos:line="57" pos:column="21">.</op:operator><name pos:line="57" pos:column="22">allTerms</name></name> <op:operator pos:line="57" pos:column="31">=</op:operator> <call><name><name pos:line="57" pos:column="33">allTerms</name><op:operator pos:line="57" pos:column="41">.</op:operator><name pos:line="57" pos:column="42">ToList</name></name><argument_list pos:line="57" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name pos:line="58" pos:column="17">this</name><op:operator pos:line="58" pos:column="21">.</op:operator><name pos:line="58" pos:column="22">matrix</name></name> <op:operator pos:line="58" pos:column="29">=</op:operator> <name pos:line="58" pos:column="31">matrix</name></expr>;</expr_stmt>
            }</block></constructor>

            <decl_stmt><decl><type><specifier pos:line="61" pos:column="13">public</specifier> <name><name pos:line="61" pos:column="20">IEnumerable</name><argument_list pos:line="61" pos:column="31">&lt;<argument><name pos:line="61" pos:column="32">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="61" pos:column="46">ReformedWords</name>
            <block pos:line="62" pos:column="13">{
                <function><name pos:line="63" pos:column="17">get</name> <block pos:line="63" pos:column="21">{ <return pos:line="63" pos:column="23">return <expr><name pos:line="63" pos:column="30">allTerms</name></expr>;</return> }</block></function>
            }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="66" pos:column="13">public</specifier> <name><name pos:line="66" pos:column="20">IEnumerable</name><argument_list pos:line="66" pos:column="31">&lt;<argument><name pos:line="66" pos:column="32">string</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="40">WordsAfterReform</name> <block pos:line="66" pos:column="57">{
                <function><name pos:line="67" pos:column="17">get</name> <block pos:line="67" pos:column="21">{ <return pos:line="67" pos:column="23">return <expr><call><name><name pos:line="67" pos:column="30">allTerms</name><op:operator pos:line="67" pos:column="38">.</op:operator><name pos:line="67" pos:column="39">Select</name></name><argument_list pos:line="67" pos:column="45">(<argument><expr><lambda><name pos:line="67" pos:column="46">t</name> <op:operator pos:line="67" pos:column="48">=&gt;</op:operator> <name><name pos:line="67" pos:column="51">t</name><op:operator pos:line="67" pos:column="52">.</op:operator><name pos:line="67" pos:column="53">NewTerm</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="67" pos:column="61">.</op:operator><call><name pos:line="67" pos:column="62">ToList</name><argument_list pos:line="67" pos:column="68">()</argument_list></call></expr>;</return> }</block></function>
            }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="70" pos:column="13">public</specifier> <name pos:line="70" pos:column="20">string</name></type> <name pos:line="70" pos:column="27">ReformExplanation</name> <block pos:line="70" pos:column="45">{
                <function><name pos:line="71" pos:column="17">get</name>
                <block pos:line="72" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="73" pos:column="21">var</name></type> <name pos:line="73" pos:column="25">sb</name> <init pos:line="73" pos:column="28">= <expr><op:operator pos:line="73" pos:column="30">new</op:operator> <call><name pos:line="73" pos:column="34">StringBuilder</name><argument_list pos:line="73" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="74" pos:column="21">foreach (<init><decl><type><name pos:line="74" pos:column="30">ReformedWord</name></type> <name pos:line="74" pos:column="43">reformedTerm</name> <range pos:line="74" pos:column="56">in <expr><name pos:line="74" pos:column="59">allTerms</name></expr></range></decl></init>)
                    <block pos:line="75" pos:column="21">{
                        <if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><name><name pos:line="76" pos:column="29">reformedTerm</name><op:operator pos:line="76" pos:column="41">.</op:operator><name pos:line="76" pos:column="42">Category</name></name> <op:operator pos:line="76" pos:column="51">!=</op:operator> <name><name pos:line="76" pos:column="54">TermChangeCategory</name><op:operator pos:line="76" pos:column="72">.</op:operator><name pos:line="76" pos:column="73">NOT_CHANGED</name></name></expr>)</condition><then pos:line="76" pos:column="85">
                        <block pos:line="77" pos:column="25">{
                            <expr_stmt><expr><call><name><name pos:line="78" pos:column="29">sb</name><op:operator pos:line="78" pos:column="31">.</op:operator><name pos:line="78" pos:column="32">Append</name></name><argument_list pos:line="78" pos:column="38">(<argument><expr><name><name pos:line="78" pos:column="39">reformedTerm</name><op:operator pos:line="78" pos:column="51">.</op:operator><name pos:line="78" pos:column="52">ReformExplanation</name></name> <op:operator pos:line="78" pos:column="70">+</op:operator> <lit:literal type="string" pos:line="78" pos:column="72">";"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></foreach>
                    <return pos:line="81" pos:column="21">return <expr><call><name><name pos:line="81" pos:column="28">sb</name><op:operator pos:line="81" pos:column="30">.</op:operator><name pos:line="81" pos:column="31">ToString</name></name><argument_list pos:line="81" pos:column="39">()</argument_list></call></expr>;</return>
                }</block></function>
            }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="85" pos:column="13">public</specifier> <name pos:line="85" pos:column="20">string</name></type> <name pos:line="85" pos:column="27">QueryString</name> <block pos:line="85" pos:column="39">{
                <function><name pos:line="86" pos:column="17">get</name> <block pos:line="86" pos:column="21">{ 
                    <decl_stmt><decl><type><name pos:line="87" pos:column="21">var</name></type> <name pos:line="87" pos:column="25">sb</name> <init pos:line="87" pos:column="28">= <expr><op:operator pos:line="87" pos:column="30">new</op:operator> <call><name pos:line="87" pos:column="34">StringBuilder</name><argument_list pos:line="87" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="88" pos:column="21">foreach (<init><decl><type><name pos:line="88" pos:column="30">ReformedWord</name></type> <name pos:line="88" pos:column="43">term</name> <range pos:line="88" pos:column="48">in <expr><name pos:line="88" pos:column="51">allTerms</name></expr></range></decl></init>)
                    <block pos:line="89" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="90" pos:column="25">sb</name><op:operator pos:line="90" pos:column="27">.</op:operator><name pos:line="90" pos:column="28">Append</name></name><argument_list pos:line="90" pos:column="34">(<argument><expr><name><name pos:line="90" pos:column="35">term</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">NewTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="91" pos:column="25">sb</name><op:operator pos:line="91" pos:column="27">.</op:operator><name pos:line="91" pos:column="28">Append</name></name><argument_list pos:line="91" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="35">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                    <return pos:line="93" pos:column="21">return <expr><call><name><name pos:line="93" pos:column="28">sb</name><op:operator pos:line="93" pos:column="30">.</op:operator><name pos:line="93" pos:column="31">ToString</name></name><argument_list pos:line="93" pos:column="39">()</argument_list></call><op:operator pos:line="93" pos:column="41">.</op:operator><call><name pos:line="93" pos:column="42">Trim</name><argument_list pos:line="93" pos:column="46">()</argument_list></call></expr>;</return>
                }</block></function>
            }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="97" pos:column="13">public</specifier> <name pos:line="97" pos:column="20">string</name></type> <name pos:line="97" pos:column="27">OriginalQueryString</name> <block pos:line="97" pos:column="47">{
                <function><name pos:line="98" pos:column="17">get</name> <block pos:line="98" pos:column="21">{ 
                    <decl_stmt><decl><type><name pos:line="99" pos:column="21">var</name></type> <name pos:line="99" pos:column="25">sb</name> <init pos:line="99" pos:column="28">= <expr><op:operator pos:line="99" pos:column="30">new</op:operator> <call><name pos:line="99" pos:column="34">StringBuilder</name><argument_list pos:line="99" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <foreach pos:line="100" pos:column="21">foreach (<init><decl><type><name pos:line="100" pos:column="30">var</name></type> <name pos:line="100" pos:column="34">term</name> <range pos:line="100" pos:column="39">in <expr><name pos:line="100" pos:column="42">ReformedWords</name></expr></range></decl></init>)
                    <block pos:line="101" pos:column="21">{
                        <expr_stmt><expr><call><name><name pos:line="102" pos:column="25">sb</name><op:operator pos:line="102" pos:column="27">.</op:operator><name pos:line="102" pos:column="28">Append</name></name><argument_list pos:line="102" pos:column="34">(<argument><expr><name><name pos:line="102" pos:column="35">term</name><op:operator pos:line="102" pos:column="39">.</op:operator><name pos:line="102" pos:column="40">OriginalTerm</name></name> <op:operator pos:line="102" pos:column="53">+</op:operator> <lit:literal type="string" pos:line="102" pos:column="55">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></foreach>
                    <return pos:line="104" pos:column="21">return <expr><call><name><name pos:line="104" pos:column="28">sb</name><op:operator pos:line="104" pos:column="30">.</op:operator><name pos:line="104" pos:column="31">ToString</name></name><argument_list pos:line="104" pos:column="39">()</argument_list></call><op:operator pos:line="104" pos:column="41">.</op:operator><call><name pos:line="104" pos:column="42">Trim</name><argument_list pos:line="104" pos:column="46">()</argument_list></call></expr>;</return>
                }</block></function>
            }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="108" pos:column="13">public</specifier> <name pos:line="108" pos:column="20">int</name></type> <name pos:line="108" pos:column="24">CoOccurrenceCount</name> <block pos:line="108" pos:column="42">{ 
                <function><name pos:line="109" pos:column="17">get</name>
                <block pos:line="110" pos:column="17">{
                    <decl_stmt><decl><type><name pos:line="111" pos:column="21">int</name></type> <name pos:line="111" pos:column="25">count</name> <init pos:line="111" pos:column="31">= <expr><lit:literal type="number" pos:line="111" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="112" pos:column="21">int</name></type> <name pos:line="112" pos:column="25">length</name> <init pos:line="112" pos:column="32">= <expr><name><name pos:line="112" pos:column="34">allTerms</name><op:operator pos:line="112" pos:column="42">.</op:operator><name pos:line="112" pos:column="43">Count</name></name></expr></init></decl>;</decl_stmt>
                    <for pos:line="113" pos:column="21">for (<init><decl><type><name pos:line="113" pos:column="26">var</name></type> <name pos:line="113" pos:column="30">i</name> <init pos:line="113" pos:column="32">= <expr><lit:literal type="number" pos:line="113" pos:column="34">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="113" pos:column="37">i</name> <op:operator pos:line="113" pos:column="39">&lt;</op:operator> <name pos:line="113" pos:column="41">length</name> <op:operator pos:line="113" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="113" pos:column="50">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="113" pos:column="53">i</name> <op:operator pos:line="113" pos:column="55">++</op:operator></expr></incr>)
                    <block pos:line="114" pos:column="21">{
                        <decl_stmt><decl><type><name pos:line="115" pos:column="25">var</name></type> <name pos:line="115" pos:column="29">word1</name> <init pos:line="115" pos:column="35">= <expr><call><name><name pos:line="115" pos:column="37">allTerms</name><op:operator pos:line="115" pos:column="45">.</op:operator><name pos:line="115" pos:column="46">ElementAt</name></name><argument_list pos:line="115" pos:column="55">(<argument><expr><name pos:line="115" pos:column="56">i</name></expr></argument>)</argument_list></call><op:operator pos:line="115" pos:column="58">.</op:operator><name pos:line="115" pos:column="59">NewTerm</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="116" pos:column="25">var</name></type> <name pos:line="116" pos:column="29">left</name> <init pos:line="116" pos:column="34">= <expr><call><name><name pos:line="116" pos:column="36">allTerms</name><op:operator pos:line="116" pos:column="44">.</op:operator><name pos:line="116" pos:column="45">GetRange</name></name><argument_list pos:line="116" pos:column="53">(<argument><expr><name pos:line="116" pos:column="54">i</name> <op:operator pos:line="116" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="116" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="61">length</name> <op:operator pos:line="116" pos:column="68">-</op:operator> <name pos:line="116" pos:column="70">i</name> <op:operator pos:line="116" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="116" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="116" pos:column="76">.</op:operator><call><name pos:line="116" pos:column="77">Select</name><argument_list pos:line="116" pos:column="83">(<argument><expr><lambda><name pos:line="116" pos:column="84">t</name> <op:operator pos:line="116" pos:column="86">=&gt;</op:operator> <name><name pos:line="116" pos:column="89">t</name><op:operator pos:line="116" pos:column="90">.</op:operator><name pos:line="116" pos:column="91">NewTerm</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="117" pos:column="25">count</name> <op:operator pos:line="117" pos:column="31">+=</op:operator> <call><name><name pos:line="117" pos:column="34">left</name><op:operator pos:line="117" pos:column="38">.</op:operator><name pos:line="117" pos:column="39">Where</name></name><argument_list pos:line="117" pos:column="44">(<argument><expr><lambda><name pos:line="117" pos:column="45">word2</name> <op:operator pos:line="117" pos:column="51">=&gt;</op:operator> <op:operator pos:line="117" pos:column="54">!</op:operator><call><name><name pos:line="117" pos:column="55">word1</name><op:operator pos:line="117" pos:column="60">.</op:operator><name pos:line="117" pos:column="61">Equals</name></name><argument_list pos:line="117" pos:column="67">(<argument><expr><name pos:line="117" pos:column="68">word2</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="117" pos:column="75">.</op:operator><call><name pos:line="117" pos:column="76">Sum</name>
                            <argument_list pos:line="118" pos:column="29">(<argument><expr><lambda><name pos:line="118" pos:column="30">word2</name> <op:operator pos:line="118" pos:column="36">=&gt;</op:operator> <call><name><name pos:line="118" pos:column="39">matrix</name><op:operator pos:line="118" pos:column="45">.</op:operator><name pos:line="118" pos:column="46">GetCoOccurrenceCount</name></name><argument_list pos:line="118" pos:column="66">(<argument><expr><name pos:line="118" pos:column="67">word1</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="74">word2</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <return pos:line="120" pos:column="21">return <expr><name pos:line="120" pos:column="28">count</name></expr>;</return>
                }</block></function>
            }</block></decl></decl_stmt>

            <decl_stmt><decl><type><specifier pos:line="124" pos:column="13">public</specifier> <name pos:line="124" pos:column="20">int</name></type> <name pos:line="124" pos:column="24">EditDistance</name> <block pos:line="124" pos:column="37">{
                <function><name pos:line="125" pos:column="17">get</name> <block pos:line="125" pos:column="21">{ <return pos:line="125" pos:column="23">return <expr><call><name><name pos:line="125" pos:column="30">allTerms</name><op:operator pos:line="125" pos:column="38">.</op:operator><name pos:line="125" pos:column="39">Sum</name></name><argument_list pos:line="125" pos:column="42">(<argument><expr><lambda><name pos:line="125" pos:column="43">t</name> <op:operator pos:line="125" pos:column="45">=&gt;</op:operator> <name><name pos:line="125" pos:column="48">t</name><op:operator pos:line="125" pos:column="49">.</op:operator><name pos:line="125" pos:column="50">DistanceFromOriginal</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
            }</block></decl></decl_stmt>

            <function><type><specifier pos:line="128" pos:column="13">public</specifier> <name pos:line="128" pos:column="20">object</name></type> <name pos:line="128" pos:column="27">Clone</name><parameter_list pos:line="128" pos:column="32">()</parameter_list>
            <block pos:line="129" pos:column="13">{
                <return pos:line="130" pos:column="17">return <expr><op:operator pos:line="130" pos:column="24">new</op:operator> <call><name pos:line="130" pos:column="28">InternalReformedQuery</name><argument_list pos:line="130" pos:column="49">(<argument><expr><name pos:line="130" pos:column="50">allTerms</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="60">matrix</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="133" pos:column="13">public</specifier> <name pos:line="133" pos:column="20">void</name></type> <name pos:line="133" pos:column="25">AppendTerm</name><parameter_list pos:line="133" pos:column="35">(<param><decl><type><name pos:line="133" pos:column="36">ReformedWord</name></type> <name pos:line="133" pos:column="49">term</name></decl></param>)</parameter_list>
            <block pos:line="134" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="135" pos:column="17">allTerms</name><op:operator pos:line="135" pos:column="25">.</op:operator><name pos:line="135" pos:column="26">Add</name></name><argument_list pos:line="135" pos:column="29">(<argument><expr><name pos:line="135" pos:column="30">term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier pos:line="138" pos:column="13">public</specifier> <name pos:line="138" pos:column="20">bool</name></type> <name pos:line="138" pos:column="25">Equals</name><parameter_list pos:line="138" pos:column="31">(<param><decl><type><name pos:line="138" pos:column="32">IReformedQuery</name></type> <name pos:line="138" pos:column="47">other</name></decl></param>)</parameter_list>
            <block pos:line="139" pos:column="13">{
                <return pos:line="140" pos:column="17">return <expr><call><name><name pos:line="140" pos:column="24">this</name><op:operator pos:line="140" pos:column="28">.</op:operator><name pos:line="140" pos:column="29">QueryString</name><op:operator pos:line="140" pos:column="40">.</op:operator><name pos:line="140" pos:column="41">Equals</name></name><argument_list pos:line="140" pos:column="47">(<argument><expr><name><name pos:line="140" pos:column="48">other</name><op:operator pos:line="140" pos:column="53">.</op:operator><name pos:line="140" pos:column="54">QueryString</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><specifier pos:line="143" pos:column="13">public</specifier> <name pos:line="143" pos:column="20">InternalReformedQuery</name></type> <name pos:line="143" pos:column="42">RemoveRedundantTerm</name><parameter_list pos:line="143" pos:column="61">()</parameter_list>
            <block pos:line="144" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="145" pos:column="17">var</name></type> <name pos:line="145" pos:column="21">list</name> <init pos:line="145" pos:column="26">= <expr><call><name><name pos:line="145" pos:column="28">allTerms</name><op:operator pos:line="145" pos:column="36">.</op:operator><name pos:line="145" pos:column="37">Distinct</name></name><argument_list pos:line="145" pos:column="45">(<argument><expr><op:operator pos:line="145" pos:column="46">new</op:operator> <call><name pos:line="145" pos:column="50">NewTermEqualityComparer</name><argument_list pos:line="145" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="145" pos:column="76">.</op:operator><call><name pos:line="145" pos:column="77">ToList</name><argument_list pos:line="145" pos:column="83">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="146" pos:column="17">allTerms</name><op:operator pos:line="146" pos:column="25">.</op:operator><name pos:line="146" pos:column="26">Clear</name></name><argument_list pos:line="146" pos:column="31">()</argument_list></call></expr>;</expr_stmt> 
                <expr_stmt><expr><call><name><name pos:line="147" pos:column="17">allTerms</name><op:operator pos:line="147" pos:column="25">.</op:operator><name pos:line="147" pos:column="26">AddRange</name></name><argument_list pos:line="147" pos:column="34">(<argument><expr><name pos:line="147" pos:column="35">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="148" pos:column="17">return <expr><name pos:line="148" pos:column="24">this</name></expr>;</return>
            }</block></function>

            <class><specifier pos:line="151" pos:column="13">private</specifier> class <name pos:line="151" pos:column="27">NewTermEqualityComparer</name> <super pos:line="151" pos:column="51">: <name><name pos:line="151" pos:column="53">IEqualityComparer</name><argument_list pos:line="151" pos:column="70">&lt;<argument><name pos:line="151" pos:column="71">ReformedWord</name></argument>&gt;</argument_list></name></super>
            <block pos:line="152" pos:column="13">{
                <function><type><specifier pos:line="153" pos:column="17">public</specifier> <name pos:line="153" pos:column="24">bool</name></type> <name pos:line="153" pos:column="29">Equals</name><parameter_list pos:line="153" pos:column="35">(<param><decl><type><name pos:line="153" pos:column="36">ReformedWord</name></type> <name pos:line="153" pos:column="49">x</name></decl></param>, <param><decl><type><name pos:line="153" pos:column="52">ReformedWord</name></type> <name pos:line="153" pos:column="65">y</name></decl></param>)</parameter_list>
                <block pos:line="154" pos:column="17">{
                    <return pos:line="155" pos:column="21">return <expr><call><name><name pos:line="155" pos:column="28">x</name><op:operator pos:line="155" pos:column="29">.</op:operator><name pos:line="155" pos:column="30">NewTerm</name><op:operator pos:line="155" pos:column="37">.</op:operator><name pos:line="155" pos:column="38">Equals</name></name><argument_list pos:line="155" pos:column="44">(<argument><expr><name><name pos:line="155" pos:column="45">y</name><op:operator pos:line="155" pos:column="46">.</op:operator><name pos:line="155" pos:column="47">NewTerm</name></name></expr></argument>, <argument><expr><name><name pos:line="155" pos:column="56">StringComparison</name><op:operator pos:line="155" pos:column="72">.</op:operator><name pos:line="155" pos:column="73">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="155" pos:column="101">||</op:operator> 
                        <call><name><name pos:line="156" pos:column="25">x</name><op:operator pos:line="156" pos:column="26">.</op:operator><name pos:line="156" pos:column="27">NewTerm</name><op:operator pos:line="156" pos:column="34">.</op:operator><name pos:line="156" pos:column="35">GetStemmedQuery</name></name><argument_list pos:line="156" pos:column="50">()</argument_list></call><op:operator pos:line="156" pos:column="52">.</op:operator><call><name pos:line="156" pos:column="53">Equals</name><argument_list pos:line="156" pos:column="59">(<argument><expr><call><name><name pos:line="156" pos:column="60">y</name><op:operator pos:line="156" pos:column="61">.</op:operator><name pos:line="156" pos:column="62">NewTerm</name><op:operator pos:line="156" pos:column="69">.</op:operator><name pos:line="156" pos:column="70">GetStemmedQuery</name></name><argument_list pos:line="156" pos:column="85">()</argument_list></call></expr></argument>, 
                            <argument><expr><name><name pos:line="157" pos:column="29">StringComparison</name><op:operator pos:line="157" pos:column="45">.</op:operator><name pos:line="157" pos:column="46">InvariantCultureIgnoreCase</name></name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>

                <function><type><specifier pos:line="160" pos:column="17">public</specifier> <name pos:line="160" pos:column="24">int</name></type> <name pos:line="160" pos:column="28">GetHashCode</name><parameter_list pos:line="160" pos:column="39">(<param><decl><type><name pos:line="160" pos:column="40">ReformedWord</name></type> <name pos:line="160" pos:column="53">obj</name></decl></param>)</parameter_list>
                <block pos:line="161" pos:column="17">{
                    <return pos:line="162" pos:column="21">return <expr><lit:literal type="number" pos:line="162" pos:column="28">0</lit:literal></expr>;</return>
                }</block></function>
            }</block></class>

            <function><type><specifier pos:line="166" pos:column="13">public</specifier> <name pos:line="166" pos:column="20">InternalReformedQuery</name></type> <name pos:line="166" pos:column="42">RemoveShortTerms</name><parameter_list pos:line="166" pos:column="58">()</parameter_list>
            <block pos:line="167" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="168" pos:column="17">var</name></type> <name pos:line="168" pos:column="21">terms</name> <init pos:line="168" pos:column="27">= <expr><call><name><name pos:line="168" pos:column="29">allTerms</name><op:operator pos:line="168" pos:column="37">.</op:operator><name pos:line="168" pos:column="38">Where</name></name><argument_list pos:line="168" pos:column="43">(<argument><expr><lambda><name pos:line="168" pos:column="44">t</name> <op:operator pos:line="168" pos:column="46">=&gt;</op:operator> <name><name pos:line="168" pos:column="49">t</name><op:operator pos:line="168" pos:column="50">.</op:operator><name pos:line="168" pos:column="51">NewTerm</name><op:operator pos:line="168" pos:column="58">.</op:operator><name pos:line="168" pos:column="59">Length</name></name> <op:operator pos:line="168" pos:column="66">&gt;=</op:operator> <lit:literal type="number" pos:line="168" pos:column="69">2</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="168" pos:column="71">.</op:operator><call><name pos:line="168" pos:column="72">ToArray</name><argument_list pos:line="168" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="169" pos:column="17">allTerms</name><op:operator pos:line="169" pos:column="25">.</op:operator><name pos:line="169" pos:column="26">Clear</name></name><argument_list pos:line="169" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="170" pos:column="17">allTerms</name><op:operator pos:line="170" pos:column="25">.</op:operator><name pos:line="170" pos:column="26">AddRange</name></name><argument_list pos:line="170" pos:column="34">(<argument><expr><name pos:line="170" pos:column="35">terms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="171" pos:column="17">return <expr><name pos:line="171" pos:column="24">this</name></expr>;</return>
            }</block></function>
        }</block></class>


        <function><type><specifier pos:line="176" pos:column="9">public</specifier> <name pos:line="176" pos:column="16">void</name></type> <name pos:line="176" pos:column="21">StartBuilding</name><parameter_list pos:line="176" pos:column="34">()</parameter_list>
        <block pos:line="177" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">this</name><op:operator pos:line="178" pos:column="17">.</op:operator><name pos:line="178" pos:column="18">reformedTermLists</name><op:operator pos:line="178" pos:column="35">.</op:operator><name pos:line="178" pos:column="36">Clear</name></name><argument_list pos:line="178" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="181" pos:column="9">public</specifier> <name pos:line="181" pos:column="16">void</name></type> <name pos:line="181" pos:column="21">AddReformedTerms</name><parameter_list pos:line="181" pos:column="37">(<param><decl><type><name><name pos:line="181" pos:column="38">IEnumerable</name><argument_list pos:line="181" pos:column="49">&lt;<argument><name pos:line="181" pos:column="50">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="181" pos:column="64">newTerms</name></decl></param>)</parameter_list>
        <block pos:line="182" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="183" pos:column="13">this</name><op:operator pos:line="183" pos:column="17">.</op:operator><name pos:line="183" pos:column="18">reformedTermLists</name><op:operator pos:line="183" pos:column="35">.</op:operator><name pos:line="183" pos:column="36">Add</name></name><argument_list pos:line="183" pos:column="39">(<argument><expr><call><name><name pos:line="183" pos:column="40">newTerms</name><op:operator pos:line="183" pos:column="48">.</op:operator><name pos:line="183" pos:column="49">ToList</name></name><argument_list pos:line="183" pos:column="55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier pos:line="186" pos:column="9">public</specifier> <name><name pos:line="186" pos:column="16">IEnumerable</name><argument_list pos:line="186" pos:column="27">&lt;<argument><name pos:line="186" pos:column="28">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="186" pos:column="44">GetAllPossibleReformedQueriesSoFar</name><parameter_list pos:line="186" pos:column="78">()</parameter_list>
        <block pos:line="187" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="188" pos:column="13">var</name></type> <name pos:line="188" pos:column="17">allReformedQuries</name> <init pos:line="188" pos:column="35">= <expr><op:operator pos:line="188" pos:column="37">new</op:operator> <name><name pos:line="188" pos:column="41">List</name><argument_list pos:line="188" pos:column="45">&lt;<argument><name pos:line="188" pos:column="46">InternalReformedQuery</name></argument>&gt;</argument_list></name> <block pos:line="188" pos:column="69">{<expr><op:operator pos:line="188" pos:column="70">new</op:operator> 
                <call><name pos:line="189" pos:column="17">InternalReformedQuery</name><argument_list pos:line="189" pos:column="38">(<argument><expr><name><name pos:line="189" pos:column="39">this</name><op:operator pos:line="189" pos:column="43">.</op:operator><name pos:line="189" pos:column="44">coOccurrenceMatrix</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">var</name></type> <name pos:line="190" pos:column="17">allQuries</name> <init pos:line="190" pos:column="27">= <expr><call><name><name pos:line="190" pos:column="29">reformedTermLists</name><op:operator pos:line="190" pos:column="46">.</op:operator><name pos:line="190" pos:column="47">Aggregate</name></name><argument_list pos:line="190" pos:column="56">(<argument><expr><name pos:line="190" pos:column="57">allReformedQuries</name></expr></argument>, 
                <argument><expr><lambda><parameter_list pos:line="191" pos:column="17">(<param><decl><name pos:line="191" pos:column="18">current</name></decl></param>, <param><decl><name pos:line="191" pos:column="27">reformedTermList</name></decl></param>)</parameter_list> <op:operator pos:line="191" pos:column="45">=&gt;</op:operator> <call><name><name pos:line="191" pos:column="48">current</name><op:operator pos:line="191" pos:column="55">.</op:operator><name pos:line="191" pos:column="56">SelectMany</name></name><argument_list pos:line="191" pos:column="66">(<argument><expr><lambda><name pos:line="191" pos:column="67">q</name> <op:operator pos:line="191" pos:column="69">=&gt;</op:operator> 
                    <call><name pos:line="192" pos:column="21">GenerateNewQueriesByAppendingTerms</name><argument_list pos:line="192" pos:column="55">(<argument><expr><name pos:line="192" pos:column="56">q</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="59">reformedTermList</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="192" pos:column="77">.</op:operator><call><name pos:line="192" pos:column="78">ToList</name><argument_list pos:line="192" pos:column="84">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="192" pos:column="87">.</op:operator><call><name pos:line="192" pos:column="88">ToList</name><argument_list pos:line="192" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:line="193" pos:column="13">// too strict?</comment>
            <comment type="line" pos:line="194" pos:column="13">// return RemoveDuplication(FilterOutBadQueries(allQuries.Select(q =&gt; q.RemoveRedundantTerm())));</comment>
            <return pos:line="195" pos:column="13">return <expr><call><name pos:line="195" pos:column="20">RemoveDuplication</name><argument_list pos:line="195" pos:column="37">(<argument><expr><call><name><name pos:line="195" pos:column="38">allQuries</name><op:operator pos:line="195" pos:column="47">.</op:operator><name pos:line="195" pos:column="48">Select</name></name><argument_list pos:line="195" pos:column="54">(<argument><expr><lambda><name pos:line="195" pos:column="55">q</name> <op:operator pos:line="195" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="195" pos:column="60">q</name><op:operator pos:line="195" pos:column="61">.</op:operator><name pos:line="195" pos:column="62">RemoveRedundantTerm</name></name><argument_list pos:line="195" pos:column="81">()</argument_list></call><op:operator pos:line="195" pos:column="83">.</op:operator><call><name pos:line="195" pos:column="84">RemoveShortTerms</name><argument_list pos:line="195" pos:column="100">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="198" pos:column="9">private</specifier> <name><name pos:line="198" pos:column="17">IEnumerable</name><argument_list pos:line="198" pos:column="28">&lt;<argument><name pos:line="198" pos:column="29">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="198" pos:column="45">FilterOutBadQueries</name><parameter_list pos:line="198" pos:column="64">(<param><decl><type><name><name pos:line="198" pos:column="65">IEnumerable</name><argument_list pos:line="198" pos:column="76">&lt;<argument><name pos:line="198" pos:column="77">InternalReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="198" pos:column="100">allQuries</name></decl></param>)</parameter_list>
        <block pos:line="199" pos:column="9">{
            <return pos:line="200" pos:column="13">return <expr><call><name><name pos:line="200" pos:column="20">allQuries</name><op:operator pos:line="200" pos:column="29">.</op:operator><name pos:line="200" pos:column="30">Where</name></name><argument_list pos:line="200" pos:column="35">(<argument><expr><lambda><name pos:line="200" pos:column="36">q</name> <op:operator pos:line="200" pos:column="38">=&gt;</op:operator> <call><name><name pos:line="200" pos:column="41">QueryFilters</name><op:operator pos:line="200" pos:column="53">.</op:operator><name pos:line="200" pos:column="54">All</name></name><argument_list pos:line="200" pos:column="57">(<argument><expr><lambda><name pos:line="200" pos:column="58">f</name> <op:operator pos:line="200" pos:column="60">=&gt;</op:operator> <call><name><name pos:line="200" pos:column="63">f</name><op:operator pos:line="200" pos:column="64">.</op:operator><name pos:line="200" pos:column="65">Invoke</name></name><argument_list pos:line="200" pos:column="71">(<argument><expr><name pos:line="200" pos:column="72">q</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="200" pos:column="76">.</op:operator><call><name pos:line="200" pos:column="77">ToList</name><argument_list pos:line="200" pos:column="83">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="203" pos:column="9">private</specifier> <name><name pos:line="203" pos:column="17">IEnumerable</name><argument_list pos:line="203" pos:column="28">&lt;<argument><name pos:line="203" pos:column="29">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="203" pos:column="45">RemoveDuplication</name><parameter_list pos:line="203" pos:column="62">(<param><decl><type><name><name pos:line="203" pos:column="63">IEnumerable</name><argument_list pos:line="203" pos:column="74">&lt;<argument><name pos:line="203" pos:column="75">IReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="203" pos:column="91">queries</name></decl></param>)</parameter_list>
        <block pos:line="204" pos:column="9">{
            <expr_stmt><expr><name pos:line="205" pos:column="13">queries</name> <op:operator pos:line="205" pos:column="21">=</op:operator> <call><name><name pos:line="205" pos:column="23">queries</name><op:operator pos:line="205" pos:column="30">.</op:operator><name pos:line="205" pos:column="31">ToArray</name></name><argument_list pos:line="205" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="206" pos:column="13">var</name></type> <name pos:line="206" pos:column="17">queryList</name> <init pos:line="206" pos:column="27">= <expr><call><name><name pos:line="206" pos:column="29">queries</name><op:operator pos:line="206" pos:column="36">.</op:operator><name pos:line="206" pos:column="37">ToList</name></name><argument_list pos:line="206" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="207" pos:column="13">var</name></type> <name pos:line="207" pos:column="17">stemmedNewQueries</name> <init pos:line="207" pos:column="35">= <expr><call><name><name pos:line="207" pos:column="37">queries</name><op:operator pos:line="207" pos:column="44">.</op:operator><name pos:line="207" pos:column="45">Select</name></name><argument_list pos:line="207" pos:column="51">(<argument><expr><name pos:line="207" pos:column="52">GetStemmedNewQuery</name></expr></argument>)</argument_list></call><op:operator pos:line="207" pos:column="71">.</op:operator><call><name pos:line="207" pos:column="72">ToList</name><argument_list pos:line="207" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="208" pos:column="13">for (<init><decl><type><name pos:line="208" pos:column="18">int</name></type> <name pos:line="208" pos:column="22">i</name> <init pos:line="208" pos:column="24">= <expr><call><name><name pos:line="208" pos:column="26">stemmedNewQueries</name><op:operator pos:line="208" pos:column="43">.</op:operator><name pos:line="208" pos:column="44">Count</name></name><argument_list pos:line="208" pos:column="49">()</argument_list></call> <op:operator pos:line="208" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="208" pos:column="54">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="208" pos:column="57">i</name> <op:operator pos:line="208" pos:column="59">&gt;=</op:operator> <lit:literal type="number" pos:line="208" pos:column="62">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="208" pos:column="65">i</name><op:operator pos:line="208" pos:column="66">--</op:operator></expr></incr>)
            <block pos:line="209" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="210" pos:column="17">var</name></type> <name pos:line="210" pos:column="21">current</name> <init pos:line="210" pos:column="29">= <expr><call><name><name pos:line="210" pos:column="31">stemmedNewQueries</name><op:operator pos:line="210" pos:column="48">.</op:operator><name pos:line="210" pos:column="49">ElementAt</name></name><argument_list pos:line="210" pos:column="58">(<argument><expr><name pos:line="210" pos:column="59">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="211" pos:column="17">var</name></type> <name pos:line="211" pos:column="21">before</name> <init pos:line="211" pos:column="28">= <expr><call><name><name pos:line="211" pos:column="30">stemmedNewQueries</name><op:operator pos:line="211" pos:column="47">.</op:operator><name pos:line="211" pos:column="48">GetRange</name></name><argument_list pos:line="211" pos:column="56">(<argument><expr><lit:literal type="number" pos:line="211" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><name pos:line="211" pos:column="60">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="212" pos:column="17">if<condition pos:line="212" pos:column="19">(<expr><call><name><name pos:line="212" pos:column="20">before</name><op:operator pos:line="212" pos:column="26">.</op:operator><name pos:line="212" pos:column="27">Contains</name></name><argument_list pos:line="212" pos:column="35">(<argument><expr><name pos:line="212" pos:column="36">current</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="212" pos:column="45">
                    <expr_stmt><expr><call><name><name pos:line="213" pos:column="21">queryList</name><op:operator pos:line="213" pos:column="30">.</op:operator><name pos:line="213" pos:column="31">RemoveAt</name></name><argument_list pos:line="213" pos:column="39">(<argument><expr><name pos:line="213" pos:column="40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
            <return pos:line="215" pos:column="13">return <expr><name pos:line="215" pos:column="20">queryList</name></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="218" pos:column="9">private</specifier> <name pos:line="218" pos:column="17">string</name></type> <name pos:line="218" pos:column="24">GetStemmedNewQuery</name><parameter_list pos:line="218" pos:column="42">(<param><decl><type><name pos:line="218" pos:column="43">IReformedQuery</name></type> <name pos:line="218" pos:column="58">query</name></decl></param>)</parameter_list>
        <block pos:line="219" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="220" pos:column="13">var</name></type> <name pos:line="220" pos:column="17">sb</name> <init pos:line="220" pos:column="20">= <expr><op:operator pos:line="220" pos:column="22">new</op:operator> <call><name pos:line="220" pos:column="26">StringBuilder</name><argument_list pos:line="220" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <foreach pos:line="221" pos:column="13">foreach (<init><decl><type><name pos:line="221" pos:column="22">var</name></type> <name pos:line="221" pos:column="26">word</name> <range pos:line="221" pos:column="31">in <expr><call><name><name pos:line="221" pos:column="34">query</name><op:operator pos:line="221" pos:column="39">.</op:operator><name pos:line="221" pos:column="40">ReformedWords</name><op:operator pos:line="221" pos:column="53">.</op:operator><name pos:line="221" pos:column="54">Select</name></name><argument_list pos:line="221" pos:column="60">(<argument><expr><lambda><name pos:line="221" pos:column="61">w</name> <op:operator pos:line="221" pos:column="63">=&gt;</op:operator> <name><name pos:line="221" pos:column="66">w</name><op:operator pos:line="221" pos:column="67">.</op:operator><name pos:line="221" pos:column="68">NewTerm</name></name></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)
            <block pos:line="222" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="223" pos:column="17">sb</name><op:operator pos:line="223" pos:column="19">.</op:operator><name pos:line="223" pos:column="20">Append</name></name><argument_list pos:line="223" pos:column="26">(<argument><expr><call><name><name pos:line="223" pos:column="27">word</name><op:operator pos:line="223" pos:column="31">.</op:operator><name pos:line="223" pos:column="32">GetStemmedQuery</name></name><argument_list pos:line="223" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="224" pos:column="17">sb</name><op:operator pos:line="224" pos:column="19">.</op:operator><name pos:line="224" pos:column="20">Append</name></name><argument_list pos:line="224" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="224" pos:column="27">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></foreach>
            <return pos:line="226" pos:column="13">return <expr><call><name><name pos:line="226" pos:column="20">sb</name><op:operator pos:line="226" pos:column="22">.</op:operator><name pos:line="226" pos:column="23">ToString</name></name><argument_list pos:line="226" pos:column="31">()</argument_list></call><op:operator pos:line="226" pos:column="33">.</op:operator><call><name pos:line="226" pos:column="34">Trim</name><argument_list pos:line="226" pos:column="38">()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="229" pos:column="9">private</specifier> <name><name pos:line="229" pos:column="17">IEnumerable</name><argument_list pos:line="229" pos:column="28">&lt;<argument><name pos:line="229" pos:column="29">InternalReformedQuery</name></argument>&gt;</argument_list></name></type> <name pos:line="229" pos:column="52">GenerateNewQueriesByAppendingTerms</name><parameter_list pos:line="229" pos:column="86">(<param><decl><type><name pos:line="229" pos:column="87">InternalReformedQuery</name></type> <name pos:line="229" pos:column="109">query</name></decl></param>, 
            <param><decl><type><name><name pos:line="230" pos:column="13">ICollection</name><argument_list pos:line="230" pos:column="24">&lt;<argument><name pos:line="230" pos:column="25">ReformedWord</name></argument>&gt;</argument_list></name></type> <name pos:line="230" pos:column="39">newTerms</name></decl></param>)</parameter_list>
        <block pos:line="231" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="232" pos:column="13">var</name></type> <name pos:line="232" pos:column="17">list</name> <init pos:line="232" pos:column="22">= <expr><op:operator pos:line="232" pos:column="24">new</op:operator> <call><name><name pos:line="232" pos:column="28">List</name><argument_list pos:line="232" pos:column="32">&lt;<argument><name pos:line="232" pos:column="33">InternalReformedQuery</name></argument>&gt;</argument_list></name><argument_list pos:line="232" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="233" pos:column="13">for (<init><decl><type><name pos:line="233" pos:column="18">var</name></type> <name pos:line="233" pos:column="22">i</name> <init pos:line="233" pos:column="24">= <expr><lit:literal type="number" pos:line="233" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="233" pos:column="29">i</name> <op:operator pos:line="233" pos:column="31">&lt;</op:operator> <name><name pos:line="233" pos:column="33">newTerms</name><op:operator pos:line="233" pos:column="41">.</op:operator><name pos:line="233" pos:column="42">Count</name></name></expr>;</condition> <incr><expr><name pos:line="233" pos:column="49">i</name><op:operator pos:line="233" pos:column="50">++</op:operator></expr></incr>)
            <block pos:line="234" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="235" pos:column="17">var</name></type> <name pos:line="235" pos:column="21">extendedQuery</name> <init pos:line="235" pos:column="35">= <expr><op:operator pos:line="235" pos:column="37">(</op:operator><name pos:line="235" pos:column="38">InternalReformedQuery</name><op:operator pos:line="235" pos:column="59">)</op:operator> <call><name><name pos:line="235" pos:column="61">query</name><op:operator pos:line="235" pos:column="66">.</op:operator><name pos:line="235" pos:column="67">Clone</name></name><argument_list pos:line="235" pos:column="72">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="236" pos:column="17">extendedQuery</name><op:operator pos:line="236" pos:column="30">.</op:operator><name pos:line="236" pos:column="31">AppendTerm</name></name><argument_list pos:line="236" pos:column="41">(<argument><expr><call><name><name pos:line="236" pos:column="42">newTerms</name><op:operator pos:line="236" pos:column="50">.</op:operator><name pos:line="236" pos:column="51">ElementAt</name></name><argument_list pos:line="236" pos:column="60">(<argument><expr><name pos:line="236" pos:column="61">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="237" pos:column="17">list</name><op:operator pos:line="237" pos:column="21">.</op:operator><name pos:line="237" pos:column="22">Add</name></name><argument_list pos:line="237" pos:column="25">(<argument><expr><name pos:line="237" pos:column="26">extendedQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return pos:line="239" pos:column="13">return <expr><name pos:line="239" pos:column="20">list</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></namespace>
</unit>
