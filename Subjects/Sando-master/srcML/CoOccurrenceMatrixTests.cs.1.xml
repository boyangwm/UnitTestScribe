<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\Core\Core.UnitTests\Tools\CoOccurrenceMatrixTests.cs" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">System</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Linq</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">System</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Text</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">Tools</name></name>;</using>

<namespace pos:line="9" pos:column="1">namespace <name><name pos:line="9" pos:column="11">Sando</name><op:operator pos:line="9" pos:column="16">.</op:operator><name pos:line="9" pos:column="17">Core</name><op:operator pos:line="9" pos:column="21">.</op:operator><name pos:line="9" pos:column="22">UnitTests</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">Tools</name></name>
<block pos:line="10" pos:column="1">{
    <class><attribute pos:line="11" pos:column="5">[<expr><name pos:line="11" pos:column="6">TestFixture</name></expr>]</attribute>
    <specifier pos:line="12" pos:column="5">public</specifier> class <name pos:line="12" pos:column="18">CoOccurrenceMatrixTests</name> <super pos:line="12" pos:column="42">: <name pos:line="12" pos:column="44">RandomStringBasedTests</name></super>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">private</specifier> <specifier pos:line="14" pos:column="17">readonly</specifier> <name pos:line="14" pos:column="26">InternalWordCoOccurrenceMatrix</name></type> <name pos:line="14" pos:column="57">matrix</name> <init pos:line="14" pos:column="64">= 
            <expr><op:operator pos:line="15" pos:column="13">new</op:operator> <call><name pos:line="15" pos:column="17">InternalWordCoOccurrenceMatrix</name><argument_list pos:line="15" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">private</specifier> <specifier pos:line="16" pos:column="17">const</specifier> <name pos:line="16" pos:column="23">String</name></type> <name pos:line="16" pos:column="30">directory</name> <init pos:line="16" pos:column="40">= <expr><lit:literal type="string" pos:line="16" pos:column="42">@"C:\Windows\Temp\Dictionary\"</lit:literal></expr></init></decl>;</decl_stmt>

        <function><type><attribute pos:line="18" pos:column="9">[<expr><name pos:line="18" pos:column="10">SetUp</name></expr>]</attribute>
        <specifier pos:line="19" pos:column="9">public</specifier> <name pos:line="19" pos:column="16">void</name></type> <name pos:line="19" pos:column="21">SetUp</name><parameter_list pos:line="19" pos:column="26">()</parameter_list>
        <block pos:line="20" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">DeleteCreatedFile</name><argument_list pos:line="21" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">CreateDirectory</name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">matrix</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">Initialize</name></name><argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="26" pos:column="9">[<expr><name pos:line="26" pos:column="10">TearDown</name></expr>]</attribute>
        <specifier pos:line="27" pos:column="9">public</specifier> <name pos:line="27" pos:column="16">void</name></type> <name pos:line="27" pos:column="21">DisposingMatrix</name><parameter_list pos:line="27" pos:column="36">()</parameter_list>
        <block pos:line="28" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">matrix</name><op:operator pos:line="29" pos:column="19">.</op:operator><name pos:line="29" pos:column="20">Dispose</name></name><argument_list pos:line="29" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">DeleteCreatedFile</name><argument_list pos:line="30" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="33" pos:column="9">[<expr><name pos:line="33" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">AddWordsSeveralTimes</name><parameter_list pos:line="34" pos:column="41">()</parameter_list>
        <block pos:line="35" pos:column="9">{
            <decl_stmt><decl><type><specifier pos:line="36" pos:column="13">const</specifier> <name pos:line="36" pos:column="19">int</name></type> <name pos:line="36" pos:column="23">listLength</name> <init pos:line="36" pos:column="34">= <expr><lit:literal type="number" pos:line="36" pos:column="36">20</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="37" pos:column="13">const</specifier> <name pos:line="37" pos:column="19">int</name></type> <name pos:line="37" pos:column="23">coocurrenceCount</name> <init pos:line="37" pos:column="40">= <expr><lit:literal type="number" pos:line="37" pos:column="42">3</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">var</name></type> <name pos:line="38" pos:column="17">words</name> <init pos:line="38" pos:column="23">= <expr><call><name pos:line="38" pos:column="25">GenerateRandomWordList</name><argument_list pos:line="38" pos:column="47">(<argument><expr><name pos:line="38" pos:column="48">listLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for pos:line="39" pos:column="13">for (<init><decl><type><name pos:line="39" pos:column="18">int</name></type> <name pos:line="39" pos:column="22">i</name> <init pos:line="39" pos:column="24">= <expr><lit:literal type="number" pos:line="39" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="39" pos:column="29">i</name> <op:operator pos:line="39" pos:column="31">&lt;</op:operator> <name pos:line="39" pos:column="33">coocurrenceCount</name></expr>;</condition> <incr><expr><name pos:line="39" pos:column="51">i</name><op:operator pos:line="39" pos:column="52">++</op:operator></expr></incr>)
            <block pos:line="40" pos:column="13">{
                <expr_stmt><expr><call><name><name pos:line="41" pos:column="17">matrix</name><op:operator pos:line="41" pos:column="23">.</op:operator><name pos:line="41" pos:column="24">HandleCoOcurrentWordsSync</name></name><argument_list pos:line="41" pos:column="49">(<argument><expr><name pos:line="41" pos:column="50">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></for>
            <for pos:line="43" pos:column="13">for (<init><decl><type><name pos:line="43" pos:column="18">int</name></type> <name pos:line="43" pos:column="22">i</name> <init pos:line="43" pos:column="24">= <expr><lit:literal type="number" pos:line="43" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="43" pos:column="29">i</name> <op:operator pos:line="43" pos:column="31">&lt;</op:operator> <name pos:line="43" pos:column="33">listLength</name> <op:operator pos:line="43" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="43" pos:column="46">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="43" pos:column="49">i</name> <op:operator pos:line="43" pos:column="51">++</op:operator></expr></incr>)
            <block pos:line="44" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="45" pos:column="17">var</name></type> <name pos:line="45" pos:column="21">word1</name> <init pos:line="45" pos:column="27">= <expr><call><name><name pos:line="45" pos:column="29">words</name><op:operator pos:line="45" pos:column="34">.</op:operator><name pos:line="45" pos:column="35">ElementAt</name></name><argument_list pos:line="45" pos:column="44">(<argument><expr><name pos:line="45" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">var</name></type> <name pos:line="46" pos:column="21">word2</name> <init pos:line="46" pos:column="27">= <expr><call><name><name pos:line="46" pos:column="29">words</name><op:operator pos:line="46" pos:column="34">.</op:operator><name pos:line="46" pos:column="35">ElementAt</name></name><argument_list pos:line="46" pos:column="44">(<argument><expr><name pos:line="46" pos:column="45">i</name> <op:operator pos:line="46" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="46" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="47" pos:column="17">var</name></type> <name pos:line="47" pos:column="21">count</name> <init pos:line="47" pos:column="27">= <expr><call><name><name pos:line="47" pos:column="29">matrix</name><op:operator pos:line="47" pos:column="35">.</op:operator><name pos:line="47" pos:column="36">GetCoOccurrenceCount</name></name><argument_list pos:line="47" pos:column="56">(<argument><expr><name pos:line="47" pos:column="57">word1</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="64">word2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="48" pos:column="17">Assert</name><op:operator pos:line="48" pos:column="23">.</op:operator><name pos:line="48" pos:column="24">IsTrue</name></name><argument_list pos:line="48" pos:column="30">(<argument><expr><name pos:line="48" pos:column="31">count</name> <op:operator pos:line="48" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="48" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></function>

        <function><type><attribute pos:line="52" pos:column="9">[<expr><name pos:line="52" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="53" pos:column="9">public</specifier> <name pos:line="53" pos:column="16">void</name></type> <name pos:line="53" pos:column="21">ConfirmAssumptionAboutStringComparisons</name><parameter_list pos:line="53" pos:column="60">()</parameter_list>
        <block pos:line="54" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">Assert</name><op:operator pos:line="55" pos:column="19">.</op:operator><name pos:line="55" pos:column="20">IsTrue</name></name><argument_list pos:line="55" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="27">"abc"</lit:literal><op:operator pos:line="55" pos:column="32">.</op:operator><call><name pos:line="55" pos:column="33">CompareTo</name><argument_list pos:line="55" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="43">""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="55" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="55" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="56" pos:column="13">Assert</name><op:operator pos:line="56" pos:column="19">.</op:operator><name pos:line="56" pos:column="20">IsTrue</name></name><argument_list pos:line="56" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="27">"a"</lit:literal><op:operator pos:line="56" pos:column="30">.</op:operator><call><name pos:line="56" pos:column="31">CompareTo</name><argument_list pos:line="56" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="41">""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="56" pos:column="45">&gt;</op:operator> <lit:literal type="number" pos:line="56" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">Assert</name><op:operator pos:line="57" pos:column="19">.</op:operator><name pos:line="57" pos:column="20">IsTrue</name></name><argument_list pos:line="57" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="27">"zzzzzzzz"</lit:literal><op:operator pos:line="57" pos:column="37">.</op:operator><call><name pos:line="57" pos:column="38">CompareTo</name><argument_list pos:line="57" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="48">""</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="57" pos:column="52">&gt;</op:operator> <lit:literal type="number" pos:line="57" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="60" pos:column="9">[<expr><name pos:line="60" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="61" pos:column="9">public</specifier> <name pos:line="61" pos:column="16">void</name></type> <name pos:line="61" pos:column="21">QueryWordsDoesNotDependOnOrder</name><parameter_list pos:line="61" pos:column="51">()</parameter_list>
        <block pos:line="62" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="63" pos:column="13">matrix</name><op:operator pos:line="63" pos:column="19">.</op:operator><name pos:line="63" pos:column="20">HandleCoOcurrentWordsSync</name></name><argument_list pos:line="63" pos:column="45">(<argument><expr><op:operator pos:line="63" pos:column="46">new</op:operator> <name><name pos:line="63" pos:column="50">string</name><index pos:line="63" pos:column="56">[]</index></name><block pos:line="63" pos:column="58">{<expr><lit:literal type="string" pos:line="63" pos:column="59">"word1"</lit:literal></expr><op:operator pos:line="63" pos:column="66">,</op:operator> <expr><lit:literal type="string" pos:line="63" pos:column="68">"word2"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="64" pos:column="13">Assert</name><op:operator pos:line="64" pos:column="19">.</op:operator><name pos:line="64" pos:column="20">IsTrue</name></name><argument_list pos:line="64" pos:column="26">(<argument><expr><call><name><name pos:line="64" pos:column="27">matrix</name><op:operator pos:line="64" pos:column="33">.</op:operator><name pos:line="64" pos:column="34">GetCoOccurrenceCount</name></name><argument_list pos:line="64" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="55">"word1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="64" pos:column="64">"word2"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="64" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="64" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="65" pos:column="13">Assert</name><op:operator pos:line="65" pos:column="19">.</op:operator><name pos:line="65" pos:column="20">IsTrue</name></name><argument_list pos:line="65" pos:column="26">(<argument><expr><call><name><name pos:line="65" pos:column="27">matrix</name><op:operator pos:line="65" pos:column="33">.</op:operator><name pos:line="65" pos:column="34">GetCoOccurrenceCount</name></name><argument_list pos:line="65" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="55">"word2"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="64">"word1"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="65" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="65" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><attribute pos:line="68" pos:column="9">[<expr><name pos:line="68" pos:column="10">Test</name></expr>]</attribute>
        <specifier pos:line="69" pos:column="9">public</specifier> <name pos:line="69" pos:column="16">void</name></type> <name pos:line="69" pos:column="21">PerformanceTest</name><parameter_list pos:line="69" pos:column="36">()</parameter_list>
        <block pos:line="70" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="71" pos:column="13">var</name></type> <name pos:line="71" pos:column="17">stopwatch</name> <init pos:line="71" pos:column="27">= <expr><op:operator pos:line="71" pos:column="29">new</op:operator> <call><name pos:line="71" pos:column="33">Stopwatch</name><argument_list pos:line="71" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">var</name></type> <name pos:line="72" pos:column="17">words</name> <init pos:line="72" pos:column="23">= <expr><call><name pos:line="72" pos:column="25">GenerateRandomWordList</name><argument_list pos:line="72" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="48">100</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="73" pos:column="13">stopwatch</name><op:operator pos:line="73" pos:column="22">.</op:operator><name pos:line="73" pos:column="23">Start</name></name><argument_list pos:line="73" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="74" pos:column="13">matrix</name><op:operator pos:line="74" pos:column="19">.</op:operator><name pos:line="74" pos:column="20">HandleCoOcurrentWordsSync</name></name><argument_list pos:line="74" pos:column="45">(<argument><expr><name pos:line="74" pos:column="46">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">stopwatch</name><op:operator pos:line="75" pos:column="22">.</op:operator><name pos:line="75" pos:column="23">Stop</name></name><argument_list pos:line="75" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">long</name></type> <name pos:line="76" pos:column="18">time</name> <init pos:line="76" pos:column="23">= <expr><name><name pos:line="76" pos:column="25">stopwatch</name><op:operator pos:line="76" pos:column="34">.</op:operator><name pos:line="76" pos:column="35">ElapsedMilliseconds</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">Assert</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">IsTrue</name></name><argument_list pos:line="77" pos:column="26">(<argument><expr><name pos:line="77" pos:column="27">time</name> <op:operator pos:line="77" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="77" pos:column="34">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
      
    }</block></class>
}</block></namespace>
</unit>
