<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\LIBS\Extensions\inc\office10\msoprops.h" pos:tabs="8"><cpp:pragma pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">pragma</cpp:directive> once</cpp:pragma>

<comment type="block" format="doxygen" pos:line="3" pos:column="1">/****************************************************************************
	msoprops.h

	Owner: MartinTh
 	Copyright (c) 1994-95 Microsoft Corporation

	This file contains the exported interfaces and declarations for
	the Extended OLE Properties.
****************************************************************************/</comment>
<cpp:ifndef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifndef</cpp:directive> <name pos:line="12" pos:column="9">MSOPROPS_H</name></cpp:ifndef>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">MSOPROPS_H</name></cpp:macro></cpp:define>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;msodig.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;msobp.h&gt;</cpp:file></cpp:include>
<cpp:pragma pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">pragma</cpp:directive> pack( push, msoprops, 4 )</cpp:pragma>

<comment type="line" pos:line="18" pos:column="1">//	Call back functions implemented by client apps (those will be passed to mso96(95).dll</comment>
<comment type="line" pos:line="19" pos:column="1">//	as function pointers) must explicitly declare its calling convention using the</comment>
<comment type="line" pos:line="20" pos:column="1">//	OFC_CALLBACK macro</comment>
<comment type="line" pos:line="21" pos:column="1">//	TODO: 	Will investigate if we define OFC_CALLBACK as  MSOSTDAPICALLTYPE, they are</comment>
<comment type="line" pos:line="22" pos:column="1">//			defined as the same except in Mac builds, (of course Mso95 doesn't have a Mac</comment>
<comment type="line" pos:line="23" pos:column="1">//			build, yet)</comment>
<comment type="line" pos:line="24" pos:column="1">//	PRIORITY:6</comment>
<comment type="line" pos:line="25" pos:column="1">//	DIFFICULTY:1</comment>

<cpp:define pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="27" pos:column="9">OFC_CALLBACK</name></cpp:macro> <cpp:value pos:line="27" pos:column="22">__stdcall</cpp:value></cpp:define>

<comment type="line" format="doxygen" pos:line="29" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="30" pos:column="1">// EXTENDED OLE DOC PROPERTIES APIs</comment>
<comment type="line" pos:line="31" pos:column="1">// Overview:</comment>
<comment type="line" pos:line="32" pos:column="1">//              To use extended ole properties do the following</comment>
<comment type="line" pos:line="33" pos:column="1">//              1.Open your file</comment>
<comment type="line" pos:line="34" pos:column="1">//              2.Call FOfficeCreateAndInitObjects: This will create 3 objects which are</comment>
<comment type="line" pos:line="35" pos:column="1">//                      siobj (sum info obj</comment>
<comment type="line" pos:line="36" pos:column="1">//                      dsiobj (doc sum info obj)</comment>
<comment type="line" pos:line="37" pos:column="1">//                      udobj (user defined data or custom obj)</comment>
<comment type="line" pos:line="38" pos:column="1">//               and provides a pointer to each of these.</comment>
<comment type="line" pos:line="39" pos:column="1">//               To make any subsequent calls, you will have to provide the pointer to the</comment>
<comment type="line" pos:line="40" pos:column="1">//               appropriate object.</comment>
<comment type="line" pos:line="41" pos:column="1">//              3.Before you close a file call FOfficeDestroyObjects.</comment>
<comment type="line" format="doxygen" pos:line="42" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="43" pos:column="1">//</comment>
<comment type="line" pos:line="44" pos:column="1">// Summary Information interface API.</comment>
<comment type="line" pos:line="45" pos:column="1">//</comment>
<comment type="line" pos:line="46" pos:column="1">// Notes:</comment>
<comment type="line" pos:line="47" pos:column="1">//  - define OLE_PROPS to build OLE 2 interface objects too.</comment>
<comment type="line" pos:line="48" pos:column="1">//</comment>
<comment type="line" pos:line="49" pos:column="1">// The actual data is stored in SUMINFO.  The layout of the first</comment>
<comment type="line" pos:line="50" pos:column="1">// 3 entries must not be changed, since it will be overlayed with</comment>
<comment type="line" pos:line="51" pos:column="1">// other structures.  All property exchange data structures have</comment>
<comment type="line" pos:line="52" pos:column="1">// this format.</comment>
<comment type="line" pos:line="53" pos:column="1">//</comment>
<comment type="line" pos:line="54" pos:column="1">// The first parameter of all functions must be LPSIOBJ in order for these</comment>
<comment type="line" pos:line="55" pos:column="1">// functions to work as OLE objects.</comment>
<comment type="line" pos:line="56" pos:column="1">//</comment>
<comment type="line" pos:line="57" pos:column="1">// All functions defined here have "SumInfo" in them.</comment>
<comment type="line" pos:line="58" pos:column="1">//</comment>
<comment type="line" pos:line="59" pos:column="1">// Several macros are used to hide the stuff that changes in this</comment>
<comment type="line" pos:line="60" pos:column="1">// file when it is used to support OLE 2 objects.</comment>
<comment type="line" pos:line="61" pos:column="1">// They are:</comment>
<comment type="line" pos:line="62" pos:column="1">//   SIVTBLSTRUCT - For OLE, expands to the pointer to the interface Vtbl</comment>
<comment type="line" pos:line="63" pos:column="1">//              - Otherwise, expands to dummy struct same size as Vtbl</comment>
<comment type="line" pos:line="64" pos:column="1">//   LPSIOBJ    - For OLE, expands to a pointer to the interface which is</comment>
<comment type="line" pos:line="65" pos:column="1">//                just the lpVtbl portion of the data, to be overlayed later.</comment>
<comment type="line" pos:line="66" pos:column="1">//              - Otherwise, expands to a pointer to the whole data</comment>
<comment type="line" pos:line="67" pos:column="1">//</comment>
<comment type="line" format="doxygen" pos:line="68" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>

  <comment type="line" pos:line="70" pos:column="3">// Apps should use these for "Create" calls to fill out rglpfn</comment>
<cpp:define pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="71" pos:column="9">ifnCPConvert</name></cpp:macro>    <cpp:value pos:line="71" pos:column="25">0</cpp:value></cpp:define>               <comment type="line" pos:line="71" pos:column="41">// Index of Code Page Converter</comment>
<cpp:define pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="72" pos:column="9">ifnFWzToNum</name></cpp:macro>     <cpp:value pos:line="72" pos:column="25">1</cpp:value></cpp:define>               <comment type="line" pos:line="72" pos:column="41">// Index of Sz To Num routine</comment>
<cpp:define pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="73" pos:column="9">ifnFNumToWz</name></cpp:macro>     <cpp:value pos:line="73" pos:column="25">2</cpp:value></cpp:define>               <comment type="line" pos:line="73" pos:column="41">// Index of Num To Sz routine</comment>
<cpp:define pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="74" pos:column="9">ifnFUpdateStats</name></cpp:macro> <cpp:value pos:line="74" pos:column="25">3</cpp:value></cpp:define>               <comment type="line" pos:line="74" pos:column="41">// Index of routine to update statistics</comment>
<cpp:define pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="75" pos:column="9">ifnMax</name></cpp:macro>          <cpp:value pos:line="75" pos:column="25">4</cpp:value></cpp:define>               <comment type="line" pos:line="75" pos:column="41">// Max index</comment>

  <comment type="line" pos:line="77" pos:column="3">// Predefined Security level values for Property Sets in the standard</comment>
<cpp:define pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="78" pos:column="9">SECURITY_NONE</name></cpp:macro>                   <cpp:value pos:line="78" pos:column="41">0x0</cpp:value></cpp:define>     <comment type="block" pos:line="78" pos:column="49">/* No security */</comment>
<cpp:define pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="79" pos:column="9">SECURITY_PASSWORD</name></cpp:macro>               <cpp:value pos:line="79" pos:column="41">0x1</cpp:value></cpp:define>     <comment type="block" pos:line="79" pos:column="49">/* Password-protected */</comment>
<cpp:define pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="80" pos:column="9">SECURITY_READONLYRECOMMEND</name></cpp:macro>      <cpp:value pos:line="80" pos:column="41">0x2</cpp:value></cpp:define>     <comment type="block" pos:line="80" pos:column="49">/* Read-only access recommened */</comment>
<cpp:define pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="81" pos:column="9">SECURITY_READONLYENFORCED</name></cpp:macro>       <cpp:value pos:line="81" pos:column="41">0x4</cpp:value></cpp:define>     <comment type="block" pos:line="81" pos:column="49">/* Read-only access enforced */</comment>
<cpp:define pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="82" pos:column="9">SECURITY_LOCKED</name></cpp:macro>                 <cpp:value pos:line="82" pos:column="41">0x8</cpp:value></cpp:define>     <comment type="block" pos:line="82" pos:column="49">/* Locked for annotations */</comment>

  <comment type="line" pos:line="84" pos:column="3">// The types supported by the User-Defined properties</comment>
<typedef pos:line="85" pos:column="1">typedef <type><enum pos:line="85" pos:column="9">enum <name pos:line="85" pos:column="14">_UDTYPES</name>
<block pos:line="86" pos:column="1">{
  <decl><name pos:line="87" pos:column="3">wUDlpsz</name>    <init pos:line="87" pos:column="14">= <expr><name pos:line="87" pos:column="16">VT_LPSTR</name></expr></init></decl><op:operator pos:line="87" pos:column="24">,</op:operator>  <comment type="line" pos:line="87" pos:column="27">// In Office 97 we are actually unicode...</comment>
  <decl><name pos:line="88" pos:column="3">wUDdate</name>    <init pos:line="88" pos:column="14">= <expr><name pos:line="88" pos:column="16">VT_FILETIME</name></expr></init></decl><op:operator pos:line="88" pos:column="27">,</op:operator>
  <decl><name pos:line="89" pos:column="3">wUDdw</name>      <init pos:line="89" pos:column="14">= <expr><name pos:line="89" pos:column="16">VT_I4</name></expr></init></decl><op:operator pos:line="89" pos:column="21">,</op:operator>
  <decl><name pos:line="90" pos:column="3">wUDfloat</name>   <init pos:line="90" pos:column="14">= <expr><name pos:line="90" pos:column="16">VT_R8</name></expr></init></decl><op:operator pos:line="90" pos:column="21">,</op:operator>
  <decl><name pos:line="91" pos:column="3">wUDbool</name>    <init pos:line="91" pos:column="14">= <expr><name pos:line="91" pos:column="16">VT_BOOL</name></expr></init></decl><op:operator pos:line="91" pos:column="23">,</op:operator>
  <decl><name pos:line="92" pos:column="3">wUDinvalid</name> <init pos:line="92" pos:column="14">= <expr><name pos:line="92" pos:column="16">VT_VARIANT</name></expr></init></decl>        <comment type="line" pos:line="92" pos:column="34">// VT_VARIANT is invalid because it</comment>
				 <comment type="line" pos:line="93" pos:column="34">// must always be combined with VT_VECTOR</comment>
}</block></enum></type> <name pos:line="94" pos:column="3">UDTYPES</name>;</typedef>

  <comment type="line" pos:line="96" pos:column="3">// Create a placeholder Vtbl for non-OLE objects.</comment>
<cpp:define pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="97" pos:column="9">SIVTBLSTRUCT</name></cpp:macro> <cpp:value pos:line="97" pos:column="22">struct _SIVTBLSTRUCT { void FAR *lpVtbl; } SIVTBLSTRUCT</cpp:value></cpp:define>

  <comment type="line" pos:line="99" pos:column="3">// For non-OLE objects, first param is pointer to real data.</comment>
<cpp:define pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="100" pos:column="9">LPSIOBJ</name></cpp:macro> <cpp:value pos:line="100" pos:column="17">LPOFFICESUMINFO</cpp:value></cpp:define>

<comment type="line" pos:line="102" pos:column="1">// For more information on the thumbnail look in OLE 2 Programmer's Reference, Volume 1, pp 874-875.</comment>

<typedef pos:line="104" pos:column="1">typedef <type><struct pos:line="104" pos:column="9">struct <name pos:line="104" pos:column="16">tagSINAIL</name>
<block pos:line="105" pos:column="1">{<public type="default" pos:line="105" pos:column="2">
   <decl_stmt><decl><type><name pos:line="106" pos:column="4">DWORD</name></type> <name pos:line="106" pos:column="10">cbData</name></decl>;</decl_stmt>     <comment type="line" pos:line="106" pos:column="22">// size of *pdata</comment>
   <decl_stmt><decl><type><name pos:line="107" pos:column="4">DWORD</name></type> <name pos:line="107" pos:column="10">cftag</name></decl>;</decl_stmt>      <comment type="line" pos:line="107" pos:column="22">// either 0,-1,-2,-3, or positive. This decides the size of pFMTID.</comment>
   <decl_stmt><decl><type><name pos:line="108" pos:column="4">BYTE</name> <type:modifier pos:line="108" pos:column="9">*</type:modifier></type><name pos:line="108" pos:column="10">pbFMTID</name></decl>;</decl_stmt>    <comment type="line" pos:line="108" pos:column="22">// bytes representing the FMTID</comment>
   <decl_stmt><decl><type><name pos:line="109" pos:column="4">BYTE</name> <type:modifier pos:line="109" pos:column="9">*</type:modifier></type><name pos:line="109" pos:column="10">pbData</name></decl>;</decl_stmt>     <comment type="line" pos:line="109" pos:column="22">// bytes representing the data</comment>
</public>}</block></struct></type> <name pos:line="110" pos:column="3">SINAIL</name>;</typedef>

<typedef pos:line="112" pos:column="1">typedef <type><name pos:line="112" pos:column="9">SINAIL</name> <name pos:line="112" pos:column="16">FAR</name> <type:modifier pos:line="112" pos:column="20">*</type:modifier></type> <name pos:line="112" pos:column="22">LPSINAIL</name>;</typedef>

<comment type="line" pos:line="114" pos:column="1">// Note about tagSINAIL:</comment>
<comment type="line" pos:line="115" pos:column="1">//</comment>
<comment type="line" pos:line="116" pos:column="1">// if cftag is</comment>
<comment type="line" pos:line="117" pos:column="1">//             0 - pFMTID is NULL i.e. no format name</comment>
<comment type="line" pos:line="118" pos:column="1">//            -1 - Windows built-in Clipboard format. pFMTID points to a DWORD (e.g. CF_DIB)</comment>
<comment type="line" pos:line="119" pos:column="1">//            -2 - Macintosh Format Value.            pFMTID points to a DWORD</comment>
<comment type="line" pos:line="120" pos:column="1">//            -3 - FMTID.                             pFMTID points to 16 bytes</comment>
<comment type="line" pos:line="121" pos:column="1">//            &gt;0 - Length of string.                  pFMTID points to cftag bytes</comment>
<comment type="line" pos:line="122" pos:column="1">//</comment>

  <comment type="line" pos:line="124" pos:column="3">// Summary info data.  Callers should *never* access this data directly,</comment>
  <comment type="line" pos:line="125" pos:column="3">// always use the supplied API's.</comment>
<typedef pos:line="126" pos:column="1">typedef <type><struct pos:line="126" pos:column="9">struct <name pos:line="126" pos:column="16">_OFFICESUMINFO</name> <block pos:line="126" pos:column="31">{<public type="default" pos:line="126" pos:column="32">

  <macro><name pos:line="128" pos:column="3">SIVTBLSTRUCT</name></macro><empty_stmt pos:line="128" pos:column="15">;</empty_stmt>                             <comment type="line" pos:line="128" pos:column="45">// Vtbl goes here for OLE objs,</comment>
					    <comment type="line" pos:line="129" pos:column="45">// Must be here for overlays to work!</comment>
  <decl_stmt><decl><type><name pos:line="130" pos:column="3">BOOL</name></type>                <name pos:line="130" pos:column="23">m_fObjChanged</name></decl>;</decl_stmt>        <comment type="line" pos:line="130" pos:column="45">// Indicates the object has changed</comment>
  <decl_stmt><decl><type><name pos:line="131" pos:column="3">LPVOID</name></type>              <name pos:line="131" pos:column="23">m_lpData</name></decl>;</decl_stmt>             <comment type="line" pos:line="131" pos:column="45">// Pointer to the real data</comment>

</public>}</block></struct></type> <name pos:line="133" pos:column="3">OFFICESUMINFO</name><op:operator pos:line="133" pos:column="16">,</op:operator> <name pos:line="133" pos:column="18">FAR</name> <type:modifier pos:line="133" pos:column="22">*</type:modifier> <name pos:line="133" pos:column="24">LPOFFICESUMINFO</name>;</typedef>

<cpp:ifdef pos:line="135" pos:column="1">#<cpp:directive pos:line="135" pos:column="2">ifdef</cpp:directive> <name pos:line="135" pos:column="8">__cplusplus</name></cpp:ifdef>
<extern pos:line="136" pos:column="1">extern <lit:literal type="string" pos:line="136" pos:column="8">"C"</lit:literal> <block pos:line="136" pos:column="12">{
<cpp:endif pos:line="137" pos:column="1">#<cpp:directive pos:line="137" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="137" pos:column="8">// __cplusplus</comment>

<comment type="line" pos:line="139" pos:column="1">//</comment>
<comment type="line" pos:line="140" pos:column="1">// Indices to pass to API routines to get the specifc data.</comment>
<comment type="line" pos:line="141" pos:column="1">//</comment>
  <comment type="line" pos:line="142" pos:column="3">// Strings</comment>
<cpp:define pos:line="143" pos:column="1">#<cpp:directive pos:line="143" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="143" pos:column="9">SI_TITLE</name></cpp:macro>        <cpp:value pos:line="143" pos:column="25">0</cpp:value></cpp:define>
<cpp:define pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="144" pos:column="9">SI_SUBJECT</name></cpp:macro>      <cpp:value pos:line="144" pos:column="25">1</cpp:value></cpp:define>
<cpp:define pos:line="145" pos:column="1">#<cpp:directive pos:line="145" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="145" pos:column="9">SI_AUTHOR</name></cpp:macro>       <cpp:value pos:line="145" pos:column="25">2</cpp:value></cpp:define>
<cpp:define pos:line="146" pos:column="1">#<cpp:directive pos:line="146" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="146" pos:column="9">SI_KEYWORDS</name></cpp:macro>     <cpp:value pos:line="146" pos:column="25">3</cpp:value></cpp:define>
<cpp:define pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="147" pos:column="9">SI_COMMENTS</name></cpp:macro>     <cpp:value pos:line="147" pos:column="25">4</cpp:value></cpp:define>
<cpp:define pos:line="148" pos:column="1">#<cpp:directive pos:line="148" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="148" pos:column="9">SI_TEMPLATE</name></cpp:macro>     <cpp:value pos:line="148" pos:column="25">5</cpp:value></cpp:define>
<cpp:define pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="149" pos:column="9">SI_LASTAUTH</name></cpp:macro>     <cpp:value pos:line="149" pos:column="25">6</cpp:value></cpp:define>
<cpp:define pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="150" pos:column="9">SI_REVISION</name></cpp:macro>     <cpp:value pos:line="150" pos:column="25">7</cpp:value></cpp:define>
<cpp:define pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="151" pos:column="9">SI_APPNAME</name></cpp:macro>      <cpp:value pos:line="151" pos:column="25">8</cpp:value></cpp:define>
<cpp:define pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="152" pos:column="9">SI_STRINGLAST</name></cpp:macro>   <cpp:value pos:line="152" pos:column="25">8</cpp:value></cpp:define>

  <comment type="line" pos:line="154" pos:column="3">// Times</comment>
<cpp:define pos:line="155" pos:column="1">#<cpp:directive pos:line="155" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="155" pos:column="9">SI_TOTALEDIT</name></cpp:macro>    <cpp:value pos:line="155" pos:column="25">0</cpp:value></cpp:define>
<cpp:define pos:line="156" pos:column="1">#<cpp:directive pos:line="156" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="156" pos:column="9">SI_LASTPRINT</name></cpp:macro>    <cpp:value pos:line="156" pos:column="25">1</cpp:value></cpp:define>
<cpp:define pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="157" pos:column="9">SI_CREATION</name></cpp:macro>     <cpp:value pos:line="157" pos:column="25">2</cpp:value></cpp:define>
<cpp:define pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="158" pos:column="9">SI_LASTSAVE</name></cpp:macro>     <cpp:value pos:line="158" pos:column="25">3</cpp:value></cpp:define>
<cpp:define pos:line="159" pos:column="1">#<cpp:directive pos:line="159" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="159" pos:column="9">SI_TIMELAST</name></cpp:macro>     <cpp:value pos:line="159" pos:column="25">3</cpp:value></cpp:define>

  <comment type="line" pos:line="161" pos:column="3">// Integer stats</comment>
<cpp:define pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="162" pos:column="9">SI_PAGES</name></cpp:macro>        <cpp:value pos:line="162" pos:column="25">0</cpp:value></cpp:define>
<cpp:define pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="163" pos:column="9">SI_WORDS</name></cpp:macro>        <cpp:value pos:line="163" pos:column="25">1</cpp:value></cpp:define>
<cpp:define pos:line="164" pos:column="1">#<cpp:directive pos:line="164" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="164" pos:column="9">SI_CHARS</name></cpp:macro>        <cpp:value pos:line="164" pos:column="25">2</cpp:value></cpp:define>
<cpp:define pos:line="165" pos:column="1">#<cpp:directive pos:line="165" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="165" pos:column="9">SI_SECURITY</name></cpp:macro>     <cpp:value pos:line="165" pos:column="25">3</cpp:value></cpp:define>
<cpp:define pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="166" pos:column="9">SI_INTLAST</name></cpp:macro>      <cpp:value pos:line="166" pos:column="25">3</cpp:value></cpp:define>

<comment type="line" pos:line="168" pos:column="1">//</comment>
<comment type="line" pos:line="169" pos:column="1">// Standard I/O routines</comment>
<comment type="line" pos:line="170" pos:column="1">//</comment>
    <comment type="line" pos:line="171" pos:column="5">// Indicates if the summary info data has changed.</comment>
    <comment type="line" pos:line="172" pos:column="5">//</comment>
    <comment type="line" pos:line="173" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="174" pos:column="5">//</comment>
    <comment type="line" pos:line="175" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
    <comment type="line" pos:line="176" pos:column="5">//</comment>
    <comment type="line" pos:line="177" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="178" pos:column="5">//</comment>
    <comment type="line" pos:line="179" pos:column="5">//   TRUE -- the data has changed, and should be saved.</comment>
    <comment type="line" pos:line="180" pos:column="5">//   FALSE -- the data has not changed.</comment>
    <comment type="line" pos:line="181" pos:column="5">//</comment>

<macro><name pos:line="183" pos:column="1">MSOAPI_</name><argument_list pos:line="183" pos:column="8">(<argument pos:line="183" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="183" pos:column="16">MsoFSumInfoShouldSave</name> <argument_list pos:line="183" pos:column="38">(<argument pos:line="183" pos:column="39">LPSIOBJ lpSIObj</argument>)</argument_list></macro><empty_stmt pos:line="183" pos:column="55">;</empty_stmt>

<comment type="line" pos:line="185" pos:column="1">//</comment>
<comment type="line" pos:line="186" pos:column="1">// Data manipulation</comment>
<comment type="line" pos:line="187" pos:column="1">//</comment>
    <comment type="line" pos:line="188" pos:column="5">// Get the size of a given string (UNICODE) property.</comment>
    <comment type="line" pos:line="189" pos:column="5">//</comment>
    <comment type="line" pos:line="190" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="191" pos:column="5">//</comment>
    <comment type="line" pos:line="192" pos:column="5">//   lpSIObj - pointer to Summary Info object.</comment>
    <comment type="line" pos:line="193" pos:column="5">//   iw - specifies which string to get the size of and should be</comment>
    <comment type="line" pos:line="194" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="195" pos:column="5">//      SI_TITLE</comment>
    <comment type="line" pos:line="196" pos:column="5">//      SI_SUBJECT</comment>
    <comment type="line" pos:line="197" pos:column="5">//      SI_AUTHOR</comment>
    <comment type="line" pos:line="198" pos:column="5">//      SI_KEYWORDS</comment>
    <comment type="line" pos:line="199" pos:column="5">//      SI_COMMENTS</comment>
    <comment type="line" pos:line="200" pos:column="5">//      SI_TEMPLATE</comment>
    <comment type="line" pos:line="201" pos:column="5">//      SI_LASTAUTH</comment>
    <comment type="line" pos:line="202" pos:column="5">//      SI_REVISION</comment>
    <comment type="line" pos:line="203" pos:column="5">//      SI_APPNAME</comment>
    <comment type="line" pos:line="204" pos:column="5">//</comment>
    <comment type="line" pos:line="205" pos:column="5">//   pdw - pointer to a dword, will contain cb on return</comment>
    <comment type="line" pos:line="206" pos:column="5">//</comment>
    <comment type="line" pos:line="207" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="208" pos:column="5">//</comment>
    <comment type="line" pos:line="209" pos:column="5">//   The function returns TRUE on success, FALSE on error.</comment>

<macro><name pos:line="211" pos:column="1">MSOAPI_</name><argument_list pos:line="211" pos:column="8">(<argument pos:line="211" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="211" pos:column="15">MsoFCbSumInfoString</name>
  <argument_list pos:line="212" pos:column="3">(<argument pos:line="212" pos:column="4">LPSIOBJ lpSIObj</argument>,                     <comment type="line" pos:line="212" pos:column="41">// Pointer to object</comment>
   <argument pos:line="213" pos:column="4">WORD iw</argument>,                             <comment type="line" pos:line="213" pos:column="41">// Index of string to get size of</comment>
   <argument pos:line="214" pos:column="4">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="214" pos:column="15">;</empty_stmt>                         <comment type="line" pos:line="214" pos:column="41">// Pointer to dword</comment>

    <comment type="line" pos:line="216" pos:column="5">// Get a given string (UNICODE) property.</comment>
    <comment type="line" pos:line="217" pos:column="5">//</comment>
    <comment type="line" pos:line="218" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="219" pos:column="5">//</comment>
    <comment type="line" pos:line="220" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
    <comment type="line" pos:line="221" pos:column="5">//   wz - buffer to hold string (allocated by caller)</comment>
    <comment type="line" pos:line="222" pos:column="5">//   iw - specifies which string to get and should be</comment>
    <comment type="line" pos:line="223" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="224" pos:column="5">//      SI_TITLE</comment>
    <comment type="line" pos:line="225" pos:column="5">//      SI_SUBJECT</comment>
    <comment type="line" pos:line="226" pos:column="5">//      SI_AUTHOR</comment>
    <comment type="line" pos:line="227" pos:column="5">//      SI_KEYWORDS</comment>
    <comment type="line" pos:line="228" pos:column="5">//      SI_COMMENTS</comment>
    <comment type="line" pos:line="229" pos:column="5">//      SI_TEMPLATE</comment>
    <comment type="line" pos:line="230" pos:column="5">//      SI_LASTAUTH</comment>
    <comment type="line" pos:line="231" pos:column="5">//      SI_REVISION</comment>
    <comment type="line" pos:line="232" pos:column="5">//      SI_APPNAME</comment>
    <comment type="line" pos:line="233" pos:column="5">//</comment>
    <comment type="line" pos:line="234" pos:column="5">//   cbMax - size of buffer</comment>
    <comment type="line" pos:line="235" pos:column="5">//</comment>
    <comment type="line" pos:line="236" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="237" pos:column="5">//</comment>
    <comment type="line" pos:line="238" pos:column="5">//   The function returns TRUE on success, FALSE on error.</comment>
    <comment type="line" pos:line="239" pos:column="5">//</comment>

<macro><name pos:line="241" pos:column="1">MSOAPI_</name><argument_list pos:line="241" pos:column="8">(<argument pos:line="241" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="241" pos:column="15">MsoFSumInfoGetString</name>
  <argument_list pos:line="242" pos:column="3">(<argument pos:line="242" pos:column="4">LPSIOBJ lpSIObj</argument>,                     <comment type="line" pos:line="242" pos:column="41">// Pointer to object</comment>
   <argument pos:line="243" pos:column="4">WORD iw</argument>,                             <comment type="line" pos:line="243" pos:column="41">// Index of string to get</comment>
   <argument pos:line="244" pos:column="4">DWORD cbMax</argument>,                         <comment type="line" pos:line="244" pos:column="41">// Size of lpsz</comment>
   <argument pos:line="245" pos:column="4">WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="245" pos:column="14">;</empty_stmt>                        <comment type="line" pos:line="245" pos:column="39">// Pointer to buffer</comment>

    <comment type="line" pos:line="247" pos:column="5">// Set a string (UNICODE) property to a given value</comment>
    <comment type="line" pos:line="248" pos:column="5">//</comment>
    <comment type="line" pos:line="249" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="250" pos:column="5">//</comment>
    <comment type="line" pos:line="251" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
    <comment type="line" pos:line="252" pos:column="5">//   iw - specifies which string to set and should be</comment>
    <comment type="line" pos:line="253" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="254" pos:column="5">//      SI_TITLE</comment>
    <comment type="line" pos:line="255" pos:column="5">//      SI_SUBJECT</comment>
    <comment type="line" pos:line="256" pos:column="5">//      SI_AUTHOR</comment>
    <comment type="line" pos:line="257" pos:column="5">//      SI_KEYWORDS</comment>
    <comment type="line" pos:line="258" pos:column="5">//      SI_COMMENTS</comment>
    <comment type="line" pos:line="259" pos:column="5">//      SI_TEMPLATE</comment>
    <comment type="line" pos:line="260" pos:column="5">//      SI_LASTAUTH</comment>
    <comment type="line" pos:line="261" pos:column="5">//      SI_REVISION</comment>
    <comment type="line" pos:line="262" pos:column="5">//      SI_APPNAME</comment>
    <comment type="line" pos:line="263" pos:column="5">//</comment>
    <comment type="line" pos:line="264" pos:column="5">//   wz - buffer containing string value</comment>
    <comment type="line" pos:line="265" pos:column="5">//</comment>
    <comment type="line" pos:line="266" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="267" pos:column="5">//</comment>
    <comment type="line" pos:line="268" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="269" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="270" pos:column="5">//</comment>
    <comment type="line" pos:line="271" pos:column="5">//   If SI_REVISION is passed, the string must point to a whole number.</comment>
    <comment type="line" pos:line="272" pos:column="5">//   If not, the function will return FALSE.</comment>
    <comment type="line" pos:line="273" pos:column="5">//</comment>
    <comment type="line" pos:line="274" pos:column="5">// Note: The function will dirty the object on success.</comment>
    <comment type="line" pos:line="275" pos:column="5">//</comment>
<macro><name pos:line="276" pos:column="1">MSOAPI_</name><argument_list pos:line="276" pos:column="8">(<argument pos:line="276" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="276" pos:column="15">MsoFSumInfoSetString</name>
  <argument_list pos:line="277" pos:column="3">(<argument pos:line="277" pos:column="4">LPSIOBJ lpSIObj</argument>,                     <comment type="line" pos:line="277" pos:column="41">// Pointer to object</comment>
   <argument pos:line="278" pos:column="4">WORD iw</argument>,                             <comment type="line" pos:line="278" pos:column="41">// Index of string to set</comment>
   <argument pos:line="279" pos:column="4">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="279" pos:column="20">;</empty_stmt>                          <comment type="line" pos:line="279" pos:column="47">// Pointer to new title</comment>


    <comment type="line" pos:line="282" pos:column="5">// Get a given time property.</comment>
    <comment type="line" pos:line="283" pos:column="5">//</comment>
    <comment type="line" pos:line="284" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="285" pos:column="5">//</comment>
    <comment type="line" pos:line="286" pos:column="5">//   lpSIObj - pointer to a Summary Info object</comment>
    <comment type="line" pos:line="287" pos:column="5">//   iw - specifies which time to get and should be</comment>
    <comment type="line" pos:line="288" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="289" pos:column="5">//      SI_TOTALEDIT</comment>
    <comment type="line" pos:line="290" pos:column="5">//      SI_LASTPRINT</comment>
    <comment type="line" pos:line="291" pos:column="5">//      SI_CREATION</comment>
    <comment type="line" pos:line="292" pos:column="5">//      SI_LASTSAVE</comment>
    <comment type="line" pos:line="293" pos:column="5">//</comment>
    <comment type="line" pos:line="294" pos:column="5">//   lpTime - buffer to hold filetime</comment>
    <comment type="line" pos:line="295" pos:column="5">//</comment>
    <comment type="line" pos:line="296" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="297" pos:column="5">//</comment>
    <comment type="line" pos:line="298" pos:column="5">//   The function returns TRUE on succes.</comment>
    <comment type="line" pos:line="299" pos:column="5">//   The function returns FALSE on error (bogus argument, or the time</comment>
    <comment type="line" pos:line="300" pos:column="5">//   requested doesn't exist - i.e. has not been set, or loaded).</comment>
    <comment type="line" pos:line="301" pos:column="5">//</comment>
    <comment type="line" pos:line="302" pos:column="5">//  NOTE:    The filetime will be based Coordinated Universal Time (UTC).</comment>
    <comment type="line" pos:line="303" pos:column="5">//           This ensures that the time is displayed correctly all over the</comment>
    <comment type="line" pos:line="304" pos:column="5">//           world.</comment>
    <comment type="line" pos:line="305" pos:column="5">//</comment>
    <comment type="line" pos:line="306" pos:column="5">// NOTE: FOR SI_TOTALEDIT lpTime WILL ACTUALLY BE THE TIME</comment>
    <comment type="line" pos:line="307" pos:column="5">//       THE FILE HAS BEEN EDITED, NOT A DATE.  THE TIME</comment>
    <comment type="line" pos:line="308" pos:column="5">//       WILL BE EXPRESSED IN UNITS OF 100ns.  I KNOW THIS IS</comment>
    <comment type="line" pos:line="309" pos:column="5">//       A WEIRD UNIT TO USE, BUT WE HAVE TO DO THAT FOR BACK-</comment>
    <comment type="line" pos:line="310" pos:column="5">//       WARDS COMPATABILITY REASONS WITH 16-BIT WORD 6.</comment>
    <comment type="line" pos:line="311" pos:column="5">//</comment>
    <comment type="line" pos:line="312" pos:column="5">//       OFFICE provides a utility routine to convert a number of</comment>
    <comment type="line" pos:line="313" pos:column="5">//       units of 100ns into minutes. Call Convert100nsToMin.</comment>
    <comment type="line" pos:line="314" pos:column="5">//</comment>
<macro><name pos:line="315" pos:column="1">MSOAPI_</name><argument_list pos:line="315" pos:column="8">(<argument pos:line="315" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="315" pos:column="16">MsoFSumInfoGetTime</name> <argument_list pos:line="315" pos:column="35">(<argument pos:line="315" pos:column="36">LPSIOBJ lpSIObj</argument>,
					   <argument pos:line="316" pos:column="44">WORD iw</argument>,
					   <argument pos:line="317" pos:column="44">LPFILETIME lpTime</argument>)</argument_list></macro><empty_stmt pos:line="317" pos:column="62">;</empty_stmt>

    <comment type="line" pos:line="319" pos:column="5">// Set the time property to a given value</comment>
    <comment type="line" pos:line="320" pos:column="5">//</comment>
    <comment type="line" pos:line="321" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="322" pos:column="5">//</comment>
    <comment type="line" pos:line="323" pos:column="5">//   lpSIObj - pointer to a Summary Info object</comment>
    <comment type="line" pos:line="324" pos:column="5">//   iw - specifies which time to set and should be</comment>
    <comment type="line" pos:line="325" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="326" pos:column="5">//      SI_TOTALEDIT</comment>
    <comment type="line" pos:line="327" pos:column="5">//      SI_LASTPRINT</comment>
    <comment type="line" pos:line="328" pos:column="5">//      SI_CREATION</comment>
    <comment type="line" pos:line="329" pos:column="5">//      SI_LASTSAVE</comment>
    <comment type="line" pos:line="330" pos:column="5">//</comment>
    <comment type="line" pos:line="331" pos:column="5">//   lpTime - buffer containing new filetime</comment>
    <comment type="line" pos:line="332" pos:column="5">//</comment>
    <comment type="line" pos:line="333" pos:column="5">//   NOTE:    The filetime should be based Coordinated Universal Time (UTC).</comment>
    <comment type="line" pos:line="334" pos:column="5">//            This ensures that the time is displayed correctly all over the</comment>
    <comment type="line" pos:line="335" pos:column="5">//            world.</comment>
    <comment type="line" pos:line="336" pos:column="5">//</comment>
    <comment type="line" pos:line="337" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="338" pos:column="5">//</comment>
    <comment type="line" pos:line="339" pos:column="5">//   The function returns TRUE on succes.</comment>
    <comment type="line" pos:line="340" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="341" pos:column="5">//</comment>
    <comment type="line" pos:line="342" pos:column="5">// Note: The function will dirty the object on success.</comment>
    <comment type="line" pos:line="343" pos:column="5">//</comment>
    <comment type="line" pos:line="344" pos:column="5">// NOTE: FOR SI_TOTALEDIT lpTime WILL BE INTERPRETED AS THE TIME</comment>
    <comment type="line" pos:line="345" pos:column="5">//       THE FILE HAS BEEN EDITED, NOT A DATE.  THE TIME SHOULD</comment>
    <comment type="line" pos:line="346" pos:column="5">//       BE EXPRESSED IN UNITS OF 100ns.  I KNOW THIS IS</comment>
    <comment type="line" pos:line="347" pos:column="5">//       A WEIRD UNIT TO USE, BUT WE HAVE TO DO THAT FOR BACK-</comment>
    <comment type="line" pos:line="348" pos:column="5">//       WARDS COMPATABILITY REASONS WITH 16-BIT WORD 6.</comment>
    <comment type="line" pos:line="349" pos:column="5">//</comment>
    <comment type="line" pos:line="350" pos:column="5">//       ALSO NOTE THAT THE TIME WILL BE SHOW IN MINUTES IN THE</comment>
    <comment type="line" pos:line="351" pos:column="5">//       PROPERTIES DIALOG.</comment>
    <comment type="line" pos:line="352" pos:column="5">//</comment>
    <comment type="line" pos:line="353" pos:column="5">//       OFFICE provides a utility routine to convert a number of</comment>
    <comment type="line" pos:line="354" pos:column="5">//       minutes into units of 100ns. Call ConvertMinTo100ns</comment>
    <comment type="line" pos:line="355" pos:column="5">//</comment>
<macro><name pos:line="356" pos:column="1">MSOAPI_</name><argument_list pos:line="356" pos:column="8">(<argument pos:line="356" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="356" pos:column="16">MsoFSumInfoSetTime</name> <argument_list pos:line="356" pos:column="35">(<argument pos:line="356" pos:column="36">LPSIOBJ lpSIObj</argument>, <argument pos:line="356" pos:column="53">WORD iw</argument>, <argument pos:line="356" pos:column="62">LPFILETIME lpTime</argument>)</argument_list></macro><empty_stmt pos:line="356" pos:column="80">;</empty_stmt>

  <comment type="line" pos:line="358" pos:column="3">// Convert a number of minutes into units of 100ns.</comment>
  <comment type="line" pos:line="359" pos:column="3">//</comment>
  <comment type="line" pos:line="360" pos:column="3">// Parameters:</comment>
  <comment type="line" pos:line="361" pos:column="3">//</comment>
  <comment type="line" pos:line="362" pos:column="3">//     lpTime - on intput: contains the number of minutes.</comment>
  <comment type="line" pos:line="363" pos:column="3">//     lptime - on output: contains the equivalent number expressed in 100ns.</comment>
  <comment type="line" pos:line="364" pos:column="3">//</comment>
  <comment type="line" pos:line="365" pos:column="3">// Return value:</comment>
  <comment type="line" pos:line="366" pos:column="3">//</comment>
  <comment type="line" pos:line="367" pos:column="3">//     None.</comment>
  <comment type="line" pos:line="368" pos:column="3">//</comment>
<macro><name pos:line="369" pos:column="1">MSOAPI_</name><argument_list pos:line="369" pos:column="8">(<argument pos:line="369" pos:column="9">VOID</argument> )</argument_list></macro> <macro><name pos:line="369" pos:column="16">MsoConvertMinTo100ns</name><argument_list pos:line="369" pos:column="36">(<argument pos:line="369" pos:column="37">LPFILETIME lpTime</argument>)</argument_list></macro><empty_stmt pos:line="369" pos:column="55">;</empty_stmt>

  <comment type="line" pos:line="371" pos:column="3">// Convert a number in units of 100ns into number of minutes.</comment>
  <comment type="line" pos:line="372" pos:column="3">//</comment>
  <comment type="line" pos:line="373" pos:column="3">// Parameters:</comment>
  <comment type="line" pos:line="374" pos:column="3">//</comment>
  <comment type="line" pos:line="375" pos:column="3">//     lptime - on input: contains a number expressed in 100ns.</comment>
  <comment type="line" pos:line="376" pos:column="3">//              on output: contains the equivalent number of minutes.</comment>
  <comment type="line" pos:line="377" pos:column="3">//</comment>
  <comment type="line" pos:line="378" pos:column="3">// Return value:</comment>
  <comment type="line" pos:line="379" pos:column="3">//</comment>
  <comment type="line" pos:line="380" pos:column="3">//     None.</comment>
  <comment type="line" pos:line="381" pos:column="3">//</comment>
<macro><name pos:line="382" pos:column="1">MSOAPI_</name><argument_list pos:line="382" pos:column="8">(<argument pos:line="382" pos:column="9">VOID</argument> )</argument_list></macro> <macro><name pos:line="382" pos:column="16">MsoConvert100nsToMin</name><argument_list pos:line="382" pos:column="36">(<argument pos:line="382" pos:column="37">LPFILETIME lpTime</argument>)</argument_list></macro><empty_stmt pos:line="382" pos:column="55">;</empty_stmt>

    <comment type="line" pos:line="384" pos:column="5">// Get an integer property</comment>
    <comment type="line" pos:line="385" pos:column="5">//</comment>
    <comment type="line" pos:line="386" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="387" pos:column="5">//</comment>
    <comment type="line" pos:line="388" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
    <comment type="line" pos:line="389" pos:column="5">//   iw - specifies which integer to get and should be</comment>
    <comment type="line" pos:line="390" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="391" pos:column="5">//      SI_PAGES</comment>
    <comment type="line" pos:line="392" pos:column="5">//      SI_WORDS</comment>
    <comment type="line" pos:line="393" pos:column="5">//      SI_CHARS</comment>
    <comment type="line" pos:line="394" pos:column="5">//      SI_SECURITY</comment>
    <comment type="line" pos:line="395" pos:column="5">//</comment>
    <comment type="line" pos:line="396" pos:column="5">//   pdw - pointer to a dword, will contain the int on return</comment>
    <comment type="line" pos:line="397" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="398" pos:column="5">//</comment>
    <comment type="line" pos:line="399" pos:column="5">//   The function returns TRUE on succes, FALSE on error.</comment>
<macro><name pos:line="400" pos:column="1">MSOAPI_</name><argument_list pos:line="400" pos:column="8">(<argument pos:line="400" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="400" pos:column="16">MsoFDwSumInfoGetInt</name> <argument_list pos:line="400" pos:column="36">(<argument pos:line="400" pos:column="37">LPSIOBJ lpSIObj</argument>, <argument pos:line="400" pos:column="54">WORD iw</argument>, <argument pos:line="400" pos:column="63">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="400" pos:column="74">;</empty_stmt>

    <comment type="line" pos:line="402" pos:column="5">// Set an integer property to a given value</comment>
    <comment type="line" pos:line="403" pos:column="5">//</comment>
    <comment type="line" pos:line="404" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="405" pos:column="5">//</comment>
    <comment type="line" pos:line="406" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
    <comment type="line" pos:line="407" pos:column="5">//   iw - specifies which integer to set and should be</comment>
    <comment type="line" pos:line="408" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="409" pos:column="5">//      SI_PAGES</comment>
    <comment type="line" pos:line="410" pos:column="5">//      SI_WORDS</comment>
    <comment type="line" pos:line="411" pos:column="5">//      SI_CHARS</comment>
    <comment type="line" pos:line="412" pos:column="5">//      SI_SECURITY</comment>
    <comment type="line" pos:line="413" pos:column="5">//</comment>
    <comment type="line" pos:line="414" pos:column="5">//   dw - the value </comment>
    <comment type="line" pos:line="415" pos:column="5">//</comment>
    <comment type="line" pos:line="416" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="417" pos:column="5">//</comment>
    <comment type="line" pos:line="418" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="419" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="420" pos:column="5">//</comment>
    <comment type="line" pos:line="421" pos:column="5">// Note: The function will dirty the object on success.</comment>
    <comment type="line" pos:line="422" pos:column="5">//</comment>
<macro><name pos:line="423" pos:column="1">MSOAPI_</name><argument_list pos:line="423" pos:column="8">(<argument pos:line="423" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="423" pos:column="16">MsoFSumInfoSetInt</name> <argument_list pos:line="423" pos:column="34">(<argument pos:line="423" pos:column="35">LPSIOBJ lpSIObj</argument>, <argument pos:line="423" pos:column="52">WORD iw</argument>, <argument pos:line="423" pos:column="61">DWORD dw</argument>)</argument_list></macro><empty_stmt pos:line="423" pos:column="70">;</empty_stmt>


    <comment type="line" pos:line="426" pos:column="5">// Get the thumbnail property.</comment>
    <comment type="line" pos:line="427" pos:column="5">//</comment>
    <comment type="line" pos:line="428" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="429" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
    <comment type="line" pos:line="430" pos:column="5">//   lpSINail - will hold the SINAIL information</comment>
    <comment type="line" pos:line="431" pos:column="5">//</comment>
    <comment type="line" pos:line="432" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="433" pos:column="5">//</comment>
    <comment type="line" pos:line="434" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="435" pos:column="5">//   The function returns FALSE on error.  The caller should ignore values</comment>
    <comment type="line" pos:line="436" pos:column="5">//   set in the SINAIL struct.</comment>
    <comment type="line" pos:line="437" pos:column="5">//</comment>
    <comment type="line" pos:line="438" pos:column="5">// Note1: The function will allocate memory to hold the data.</comment>
    <comment type="line" pos:line="439" pos:column="5">// Note2: lpSINail-&gt;cbData can be 0, in which case lpSINail-&gt;pData is NULL.</comment>
    <comment type="line" pos:line="440" pos:column="5">//        This is legal.</comment>
    <comment type="line" pos:line="441" pos:column="5">// Note3: lpSINail-&gt;cftag can be 0, in which case lpSINail-&gt;pFMTID is NULL.</comment>
    <comment type="line" pos:line="442" pos:column="5">//        This is legal.</comment>
    <comment type="line" pos:line="443" pos:column="5">//</comment>
    <comment type="line" pos:line="444" pos:column="5">// Note4: You must call FreeThumbnailData before freeing the lpSINail you</comment>
    <comment type="line" pos:line="445" pos:column="5">//        passed to this function.  You must do this since Office will</comment>
    <comment type="line" pos:line="446" pos:column="5">//        allocate the pointers in the structure, so Office must also free</comment>
    <comment type="line" pos:line="447" pos:column="5">//        them to avoid memory leaks.</comment>
    <comment type="line" pos:line="448" pos:column="5">//</comment>
<macro><name pos:line="449" pos:column="1">MSOAPI_</name><argument_list pos:line="449" pos:column="8">(<argument pos:line="449" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="449" pos:column="16">MsoFSumInfoGetThumbnail</name> <argument_list pos:line="449" pos:column="40">(<argument pos:line="449" pos:column="41">LPSIOBJ lpSIObj</argument>, <argument pos:line="449" pos:column="58">LPSINAIL lpSINail</argument>)</argument_list></macro><empty_stmt pos:line="449" pos:column="76">;</empty_stmt>

    <comment type="line" pos:line="451" pos:column="5">// Free the data hanging of the SINail struct.</comment>
    <comment type="line" pos:line="452" pos:column="5">//</comment>
    <comment type="line" pos:line="453" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="454" pos:column="5">//   lpSINail - pointer to a SINAIL structure.</comment>
    <comment type="line" pos:line="455" pos:column="5">//</comment>
    <comment type="line" pos:line="456" pos:column="5">// Return Value:</comment>
    <comment type="line" pos:line="457" pos:column="5">//   None.</comment>
    <comment type="line" pos:line="458" pos:column="5">//</comment>
    <comment type="line" pos:line="459" pos:column="5">// Note: This should only be called for Thumbnails obtained through</comment>
    <comment type="line" pos:line="460" pos:column="5">//       FSumInfoGetThumbnail.</comment>
    <comment type="line" pos:line="461" pos:column="5">//</comment>
<macro><name pos:line="462" pos:column="1">MSOAPI_</name><argument_list pos:line="462" pos:column="8">(<argument pos:line="462" pos:column="9">VOID</argument> )</argument_list></macro> <macro><name pos:line="462" pos:column="16">MsoFreeThumbnailData</name> <argument_list pos:line="462" pos:column="37">(<argument pos:line="462" pos:column="38">LPSINAIL lpSINail</argument>)</argument_list></macro><empty_stmt pos:line="462" pos:column="56">;</empty_stmt>

    <comment type="line" pos:line="464" pos:column="5">// Set the thumbnail property</comment>
    <comment type="line" pos:line="465" pos:column="5">//</comment>
    <comment type="line" pos:line="466" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="467" pos:column="5">//</comment>
    <comment type="line" pos:line="468" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
    <comment type="line" pos:line="469" pos:column="5">//   lpSINail - holds the SINAIL information</comment>
    <comment type="line" pos:line="470" pos:column="5">//</comment>
    <comment type="line" pos:line="471" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="472" pos:column="5">//</comment>
    <comment type="line" pos:line="473" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="474" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="475" pos:column="5">//</comment>
    <comment type="line" pos:line="476" pos:column="5">// Note: The function wil dirty the object on success.</comment>
    <comment type="line" pos:line="477" pos:column="5">//</comment>
<macro><name pos:line="478" pos:column="1">MSOAPI_</name><argument_list pos:line="478" pos:column="8">(<argument pos:line="478" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="478" pos:column="16">MsoFSumInfoSetThumbnail</name> <argument_list pos:line="478" pos:column="40">(<argument pos:line="478" pos:column="41">LPSIOBJ lpSIObj</argument>, <argument pos:line="478" pos:column="58">LPSINAIL lpSINail</argument>)</argument_list></macro><empty_stmt pos:line="478" pos:column="76">;</empty_stmt>

    <comment type="line" pos:line="480" pos:column="5">// Should the thumbnail property be saved</comment>
    <comment type="line" pos:line="481" pos:column="5">//</comment>
    <comment type="line" pos:line="482" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="483" pos:column="5">//</comment>
    <comment type="line" pos:line="484" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
    <comment type="line" pos:line="485" pos:column="5">//</comment>
    <comment type="line" pos:line="486" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="487" pos:column="5">//</comment>
    <comment type="line" pos:line="488" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="489" pos:column="5">//   The function returns FALSE is there is no thumbnail.</comment>
    <comment type="line" pos:line="490" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="491" pos:column="5">//</comment>
<macro><name pos:line="492" pos:column="1">MSOAPI_</name><argument_list pos:line="492" pos:column="8">(<argument pos:line="492" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="492" pos:column="16">MsoFSumInfoShouldSaveThumbnail</name> <argument_list pos:line="492" pos:column="47">(<argument pos:line="492" pos:column="48">LPSIOBJ lpSIObj</argument>)</argument_list></macro><empty_stmt pos:line="492" pos:column="64">;</empty_stmt>

    <comment type="line" pos:line="494" pos:column="5">// Set the flag deciding whether the thumbnail property should be saved</comment>
    <comment type="line" pos:line="495" pos:column="5">//</comment>
    <comment type="line" pos:line="496" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="497" pos:column="5">//</comment>
    <comment type="line" pos:line="498" pos:column="5">//   lpSIObj - pointer to Summary Info object</comment>
	<comment type="line" pos:line="499" pos:column="9">//	 fSave   - TRUE (should save), FALSE (don't save)</comment>
    <comment type="line" pos:line="500" pos:column="5">//</comment>
    <comment type="line" pos:line="501" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="502" pos:column="5">//</comment>
	<comment type="line" pos:line="503" pos:column="9">//	 None.</comment>
    <comment type="line" pos:line="504" pos:column="5">//</comment>
<macro><name pos:line="505" pos:column="1">MSOAPI_</name><argument_list pos:line="505" pos:column="8">(<argument pos:line="505" pos:column="9">VOID</argument>)</argument_list></macro> <macro><name pos:line="505" pos:column="15">MsoSumInfoSetSaveThumbnail</name> <argument_list pos:line="505" pos:column="42">(<argument pos:line="505" pos:column="43">LPSIOBJ lpSIObj</argument>, <argument pos:line="505" pos:column="60">BOOL fSave</argument>)</argument_list></macro><empty_stmt pos:line="505" pos:column="71">;</empty_stmt>

<macro><name pos:line="507" pos:column="1">MSOAPI_</name><argument_list pos:line="507" pos:column="8">(<argument pos:line="507" pos:column="9">BPSC</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="507" pos:column="15">MsoBpscBulletProofSinfo</name><argument_list pos:line="507" pos:column="38">(<argument><expr><name pos:line="507" pos:column="39">MSOBPCB</name> <op:operator pos:line="507" pos:column="47">*</op:operator><name pos:line="507" pos:column="48">pmsobpcb</name></expr></argument>, <argument><expr><name pos:line="507" pos:column="58">LPSIOBJ</name> <op:operator pos:line="507" pos:column="66">*</op:operator><name pos:line="507" pos:column="67">ppsiobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:line="509" pos:column="1">#<cpp:directive pos:line="509" pos:column="2">ifdef</cpp:directive> <name pos:line="509" pos:column="8">__cplusplus</name></cpp:ifdef>
}</block></extern><empty_stmt pos:line="510" pos:column="2">;</empty_stmt> <comment type="line" pos:line="510" pos:column="4">// extern "C"</comment>
<cpp:endif pos:line="511" pos:column="1">#<cpp:directive pos:line="511" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="511" pos:column="8">// __cplusplus</comment>


<comment type="line" format="doxygen" pos:line="514" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="515" pos:column="1">//</comment>
<comment type="line" pos:line="516" pos:column="1">// MS Office Document Summary Information</comment>
<comment type="line" pos:line="517" pos:column="1">//</comment>
<comment type="line" pos:line="518" pos:column="1">// The Document Summary Information follows the serialized format for</comment>
<comment type="line" pos:line="519" pos:column="1">// property sets defined in Appendix B ("OLE Property Sets") of</comment>
<comment type="line" pos:line="520" pos:column="1">// "OLE 2 Programmer's Reference, Volume 1"</comment>
<comment type="line" pos:line="521" pos:column="1">//</comment>
<comment type="line" pos:line="522" pos:column="1">// Notes:</comment>
<comment type="line" pos:line="523" pos:column="1">//  - define OLE_PROPS to build OLE 2 interface objects too.</comment>
<comment type="line" pos:line="524" pos:column="1">//</comment>
<comment type="line" pos:line="525" pos:column="1">// The actual data is stored in DOCSUMINFO.  The layout of the first</comment>
<comment type="line" pos:line="526" pos:column="1">// 3 entries must not be changed, since it will be overlayed with</comment>
<comment type="line" pos:line="527" pos:column="1">// other structures.  All property exchange data structures have</comment>
<comment type="line" pos:line="528" pos:column="1">// this format.</comment>
<comment type="line" pos:line="529" pos:column="1">//</comment>
<comment type="line" pos:line="530" pos:column="1">// The first parameter of all functions must be LPDSIOBJ in order for these</comment>
<comment type="line" pos:line="531" pos:column="1">// functions to work as OLE objects.</comment>
<comment type="line" pos:line="532" pos:column="1">//</comment>
<comment type="line" pos:line="533" pos:column="1">// All functions defined here have "DocSum" in them.</comment>
<comment type="line" pos:line="534" pos:column="1">//</comment>
<comment type="line" pos:line="535" pos:column="1">// Several macros are used to hide the stuff that changes in this</comment>
<comment type="line" pos:line="536" pos:column="1">// file when it is used to support OLE 2 objects.</comment>
<comment type="line" pos:line="537" pos:column="1">// They are:</comment>
<comment type="line" pos:line="538" pos:column="1">//   DSIVTBLSTRUCT - For OLE, expands to the pointer to the interface Vtbl</comment>
<comment type="line" pos:line="539" pos:column="1">//              - Otherwise, expands to dummy struct same size as Vtbl</comment>
<comment type="line" pos:line="540" pos:column="1">//   LPDSIOBJ   - For OLE, expands to a pointer to the interface which is</comment>
<comment type="line" pos:line="541" pos:column="1">//                just the lpVtbl portion of the data, to be overlayed later.</comment>
<comment type="line" pos:line="542" pos:column="1">//              - Otherwise, expands to a pointer to the whole data</comment>
<comment type="line" pos:line="543" pos:column="1">//</comment>
<comment type="line" format="doxygen" pos:line="544" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>

  <comment type="line" pos:line="546" pos:column="3">// Create a placeholder Vtbl for non-OLE objects.</comment>
<cpp:define pos:line="547" pos:column="1">#<cpp:directive pos:line="547" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="547" pos:column="9">DSIVTBLSTRUCT</name></cpp:macro> <cpp:value pos:line="547" pos:column="23">struct _DSIVTBLSTRUCT { void FAR *lpVtbl; } DSIVTBLSTRUCT</cpp:value></cpp:define>

  <comment type="line" pos:line="549" pos:column="3">// For non-OLE objects, first param is pointer to real data.</comment>
<cpp:define pos:line="550" pos:column="1">#<cpp:directive pos:line="550" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="550" pos:column="9">LPDSIOBJ</name></cpp:macro> <cpp:value pos:line="550" pos:column="18">LPDOCSUMINFO</cpp:value></cpp:define>

  <comment type="line" pos:line="552" pos:column="3">// Our object</comment>
<typedef pos:line="553" pos:column="1">typedef <type><struct pos:line="553" pos:column="9">struct <name pos:line="553" pos:column="16">_DOCSUMINFO</name> <block pos:line="553" pos:column="28">{<public type="default" pos:line="553" pos:column="29">

  <macro><name pos:line="555" pos:column="3">DSIVTBLSTRUCT</name></macro><empty_stmt pos:line="555" pos:column="16">;</empty_stmt>                            <comment type="line" pos:line="555" pos:column="45">// Vtbl goes here for OLE objs,</comment>
					    <comment type="line" pos:line="556" pos:column="45">// Must be here for overlays to work!</comment>
  <decl_stmt><decl><type><name pos:line="557" pos:column="3">BOOL</name></type>                <name pos:line="557" pos:column="23">m_fObjChanged</name></decl>;</decl_stmt>        <comment type="line" pos:line="557" pos:column="45">// Indicates the object has changed</comment>
  <decl_stmt><decl><type><name pos:line="558" pos:column="3">LPVOID</name></type>              <name pos:line="558" pos:column="23">m_lpData</name></decl>;</decl_stmt>             <comment type="line" pos:line="558" pos:column="45">// Pointer to the real data</comment>

</public>}</block></struct></type> <name pos:line="560" pos:column="3">DOCSUMINFO</name><op:operator pos:line="560" pos:column="13">,</op:operator> <name pos:line="560" pos:column="15">FAR</name> <type:modifier pos:line="560" pos:column="19">*</type:modifier> <name pos:line="560" pos:column="21">LPDOCSUMINFO</name>;</typedef>


<cpp:ifdef pos:line="563" pos:column="1">#<cpp:directive pos:line="563" pos:column="2">ifdef</cpp:directive> <name pos:line="563" pos:column="8">__cplusplus</name></cpp:ifdef>
<extern pos:line="564" pos:column="1">extern <lit:literal type="string" pos:line="564" pos:column="8">"C"</lit:literal> <block pos:line="564" pos:column="12">{
<cpp:endif pos:line="565" pos:column="1">#<cpp:directive pos:line="565" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="567" pos:column="1">//</comment>
<comment type="line" pos:line="568" pos:column="1">// Indices to pass to API routines to get the specifc data.</comment>
<comment type="line" pos:line="569" pos:column="1">//</comment>

  <comment type="line" pos:line="571" pos:column="3">// Strings</comment>
<cpp:define pos:line="572" pos:column="1">#<cpp:directive pos:line="572" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="572" pos:column="9">DSI_CATEGORY</name></cpp:macro>    <cpp:value pos:line="572" pos:column="25">0</cpp:value></cpp:define>
<cpp:define pos:line="573" pos:column="1">#<cpp:directive pos:line="573" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="573" pos:column="9">DSI_FORMAT</name></cpp:macro>      <cpp:value pos:line="573" pos:column="25">1</cpp:value></cpp:define>
<cpp:define pos:line="574" pos:column="1">#<cpp:directive pos:line="574" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="574" pos:column="9">DSI_MANAGER</name></cpp:macro>     <cpp:value pos:line="574" pos:column="25">2</cpp:value></cpp:define>
<cpp:define pos:line="575" pos:column="1">#<cpp:directive pos:line="575" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="575" pos:column="9">DSI_COMPANY</name></cpp:macro>     <cpp:value pos:line="575" pos:column="25">3</cpp:value></cpp:define>
<cpp:define pos:line="576" pos:column="1">#<cpp:directive pos:line="576" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="576" pos:column="9">DSI_GUID</name></cpp:macro>		<cpp:value pos:line="576" pos:column="33">4</cpp:value></cpp:define>
<cpp:define pos:line="577" pos:column="1">#<cpp:directive pos:line="577" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="577" pos:column="9">DSI_LINKBASE</name></cpp:macro>    <cpp:value pos:line="577" pos:column="25">5</cpp:value></cpp:define>
<cpp:define pos:line="578" pos:column="1">#<cpp:directive pos:line="578" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="578" pos:column="9">DSI_STRINGLAST</name></cpp:macro>  <cpp:value pos:line="578" pos:column="25">5</cpp:value></cpp:define>

  <comment type="line" pos:line="580" pos:column="3">// Integer statistics</comment>
<cpp:define pos:line="581" pos:column="1">#<cpp:directive pos:line="581" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="581" pos:column="9">DSI_BYTES</name></cpp:macro>       <cpp:value pos:line="581" pos:column="25">0</cpp:value></cpp:define>
<cpp:define pos:line="582" pos:column="1">#<cpp:directive pos:line="582" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="582" pos:column="9">DSI_LINES</name></cpp:macro>       <cpp:value pos:line="582" pos:column="25">1</cpp:value></cpp:define>
<cpp:define pos:line="583" pos:column="1">#<cpp:directive pos:line="583" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="583" pos:column="9">DSI_PARAS</name></cpp:macro>       <cpp:value pos:line="583" pos:column="25">2</cpp:value></cpp:define>
<cpp:define pos:line="584" pos:column="1">#<cpp:directive pos:line="584" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="584" pos:column="9">DSI_SLIDES</name></cpp:macro>      <cpp:value pos:line="584" pos:column="25">3</cpp:value></cpp:define>
<cpp:define pos:line="585" pos:column="1">#<cpp:directive pos:line="585" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="585" pos:column="9">DSI_NOTES</name></cpp:macro>       <cpp:value pos:line="585" pos:column="25">4</cpp:value></cpp:define>
<cpp:define pos:line="586" pos:column="1">#<cpp:directive pos:line="586" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="586" pos:column="9">DSI_HIDDENSLIDES</name></cpp:macro> <cpp:value pos:line="586" pos:column="26">5</cpp:value></cpp:define>
<cpp:define pos:line="587" pos:column="1">#<cpp:directive pos:line="587" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="587" pos:column="9">DSI_MMCLIPS</name></cpp:macro>     <cpp:value pos:line="587" pos:column="25">6</cpp:value></cpp:define>
<cpp:define pos:line="588" pos:column="1">#<cpp:directive pos:line="588" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="588" pos:column="9">DSI_CCHWSPACES</name></cpp:macro>	<cpp:value pos:line="588" pos:column="25">7</cpp:value></cpp:define>	<comment type="line" pos:line="588" pos:column="33">// count of characters including spaces</comment>
<cpp:define pos:line="589" pos:column="1">#<cpp:directive pos:line="589" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="589" pos:column="9">DSI_VERSION</name></cpp:macro>		<cpp:value pos:line="589" pos:column="33">8</cpp:value></cpp:define>	<comment type="line" pos:line="589" pos:column="41">// Stream format version</comment>
<cpp:define pos:line="590" pos:column="1">#<cpp:directive pos:line="590" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="590" pos:column="9">DSI_INTLAST</name></cpp:macro>     <cpp:value pos:line="590" pos:column="25">8</cpp:value></cpp:define>

  <comment type="line" pos:line="592" pos:column="3">// Booleans</comment>
<cpp:define pos:line="593" pos:column="1">#<cpp:directive pos:line="593" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="593" pos:column="9">DSI_SHAREDDOC</name></cpp:macro>   	  <cpp:value pos:line="593" pos:column="35">0</cpp:value></cpp:define>
<cpp:define pos:line="594" pos:column="1">#<cpp:directive pos:line="594" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="594" pos:column="9">DSI_HYPERLINKSCHANGED</name></cpp:macro> <cpp:value pos:line="594" pos:column="31">1</cpp:value></cpp:define>
<cpp:define pos:line="595" pos:column="1">#<cpp:directive pos:line="595" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="595" pos:column="9">DSI_BOOLLAST</name></cpp:macro>    	  <cpp:value pos:line="595" pos:column="35">1</cpp:value></cpp:define>

  <comment type="line" pos:line="597" pos:column="3">// Arrays</comment>
<cpp:define pos:line="598" pos:column="1">#<cpp:directive pos:line="598" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="598" pos:column="9">DSI_HLINKS</name></cpp:macro>	<cpp:value pos:line="598" pos:column="25">0</cpp:value></cpp:define>		<comment type="line" pos:line="598" pos:column="41">// Array of hyperlinks</comment>
<cpp:define pos:line="599" pos:column="1">#<cpp:directive pos:line="599" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="599" pos:column="9">DSI_RGLAST</name></cpp:macro>  <cpp:value pos:line="599" pos:column="21">0</cpp:value></cpp:define>

  <comment type="line" pos:line="601" pos:column="3">// HLINKS array element</comment>
<typedef pos:line="602" pos:column="1">typedef <type><struct pos:line="602" pos:column="9">struct <name pos:line="602" pos:column="16">_hlinkprop</name>
<block pos:line="603" pos:column="1">{<public type="default" pos:line="603" pos:column="2">
	<decl_stmt><decl><type><name pos:line="604" pos:column="9">DWORD</name></type> <name pos:line="604" pos:column="15">dwHash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="605" pos:column="9">DWORD</name></type> <name pos:line="605" pos:column="15">dwApp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="606" pos:column="9">DWORD</name></type> <name pos:line="606" pos:column="15">dwEscher</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="607" pos:column="9">DWORD</name></type> <name pos:line="607" pos:column="15">dwInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="608" pos:column="9">WCHAR</name> <type:modifier pos:line="608" pos:column="15">*</type:modifier></type><name pos:line="608" pos:column="16">wzHlink1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="609" pos:column="9">WCHAR</name> <type:modifier pos:line="609" pos:column="15">*</type:modifier></type><name pos:line="609" pos:column="16">wzHlink2</name></decl>;</decl_stmt>
</public>}</block></struct></type> <name pos:line="610" pos:column="3">HLINKPROP</name>;</typedef>

<comment type="block" pos:line="612" pos:column="1">/* LiNK Kind -- stored in LOWORD(dwInfo) */</comment>
<cpp:define pos:line="613" pos:column="1">#<cpp:directive pos:line="613" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="613" pos:column="9">lnkkBackground</name></cpp:macro>		<cpp:value pos:line="613" pos:column="33">0</cpp:value></cpp:define>	<comment type="line" pos:line="613" pos:column="41">// graphic shown as background of doc</comment>
<cpp:define pos:line="614" pos:column="1">#<cpp:directive pos:line="614" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="614" pos:column="9">lnkkPicture</name></cpp:macro>			<cpp:value pos:line="614" pos:column="41">1</cpp:value></cpp:define>	<comment type="line" pos:line="614" pos:column="49">// graphic shown in doc</comment>
<cpp:define pos:line="615" pos:column="1">#<cpp:directive pos:line="615" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="615" pos:column="9">lnkkFill</name></cpp:macro>			<cpp:value pos:line="615" pos:column="41">2</cpp:value></cpp:define>	<comment type="line" pos:line="615" pos:column="49">// graphic used to fill a shape</comment>
<cpp:define pos:line="616" pos:column="1">#<cpp:directive pos:line="616" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="616" pos:column="9">lnkkLine</name></cpp:macro>			<cpp:value pos:line="616" pos:column="41">3</cpp:value></cpp:define>	<comment type="line" pos:line="616" pos:column="49">// graphic used for shape outline</comment>
<cpp:define pos:line="617" pos:column="1">#<cpp:directive pos:line="617" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="617" pos:column="9">lnkkHlinkShape</name></cpp:macro>		<cpp:value pos:line="617" pos:column="33">4</cpp:value></cpp:define>	<comment type="line" pos:line="617" pos:column="41">// hyperlink attached to a shape</comment>
<cpp:define pos:line="618" pos:column="1">#<cpp:directive pos:line="618" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="618" pos:column="9">lnkkHlinkField</name></cpp:macro>		<cpp:value pos:line="618" pos:column="33">5</cpp:value></cpp:define>	<comment type="line" pos:line="618" pos:column="41">// hyperlink attached to a (Word) field</comment>
<cpp:define pos:line="619" pos:column="1">#<cpp:directive pos:line="619" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="619" pos:column="9">lnkkHlinkRange</name></cpp:macro>		<cpp:value pos:line="619" pos:column="33">6</cpp:value></cpp:define>	<comment type="line" pos:line="619" pos:column="41">// hyperlink attached to an (Excel) range</comment>

<comment type="block" pos:line="621" pos:column="1">/* LiNK Action -- stored in HIWORD(dwInfo) */</comment>
<cpp:define pos:line="622" pos:column="1">#<cpp:directive pos:line="622" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="622" pos:column="9">lnkaNil</name></cpp:macro>				<cpp:value pos:line="622" pos:column="41">0</cpp:value></cpp:define>	<comment type="line" pos:line="622" pos:column="49">// nothing to do</comment>
<cpp:define pos:line="623" pos:column="1">#<cpp:directive pos:line="623" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="623" pos:column="9">lnkaChange</name></cpp:macro>			<cpp:value pos:line="623" pos:column="41">1</cpp:value></cpp:define>	<comment type="line" pos:line="623" pos:column="49">// change link to new wzHlink value</comment>
<cpp:define pos:line="624" pos:column="1">#<cpp:directive pos:line="624" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="624" pos:column="9">lnkaRemove</name></cpp:macro>			<cpp:value pos:line="624" pos:column="41">2</cpp:value></cpp:define>	<comment type="line" pos:line="624" pos:column="49">// remove link from object</comment>

<comment type="line" pos:line="626" pos:column="1">// VBA Project digital signature info structure</comment>
<typedef pos:line="627" pos:column="1">typedef <type><struct pos:line="627" pos:column="9">struct <name pos:line="627" pos:column="16">_DIGSIGBLOB</name> <block pos:line="627" pos:column="28">{<public type="default" pos:line="627" pos:column="29">
	<decl_stmt><decl><type><name pos:line="628" pos:column="9">DWORD</name></type>	<name pos:line="628" pos:column="17">cbData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="629" pos:column="9">BYTE</name>	<type:modifier pos:line="629" pos:column="17">*</type:modifier></type><name pos:line="629" pos:column="18">pbData</name></decl>;</decl_stmt>
</public>}</block></struct></type> <name pos:line="630" pos:column="3">DIGSIGBLOB</name><op:operator pos:line="630" pos:column="13">,</op:operator> *<name pos:line="630" pos:column="16">PDIGSIGBLOB</name>;</typedef>

<comment type="line" pos:line="632" pos:column="1">//</comment>
<comment type="line" pos:line="633" pos:column="1">// Given a null terminated string, computes a hash value.</comment>
<comment type="line" pos:line="634" pos:column="1">//</comment>
<comment type="line" pos:line="635" pos:column="1">// Parameters:</comment>
<comment type="line" pos:line="636" pos:column="1">//</comment>
<comment type="line" pos:line="637" pos:column="1">//		wz  - pointer to null terminated string</comment>
<comment type="line" pos:line="638" pos:column="1">//		pdw - pointer to an integer</comment>
<comment type="line" pos:line="639" pos:column="1">//</comment>
<comment type="line" pos:line="640" pos:column="1">// Returns:</comment>
<comment type="line" pos:line="641" pos:column="1">//</comment>
<comment type="line" pos:line="642" pos:column="1">//		The hash value in pdw.</comment>
<comment type="line" pos:line="643" pos:column="1">//</comment>
<comment type="line" pos:line="644" pos:column="1">// Notes:</comment>
<comment type="line" pos:line="645" pos:column="1">//</comment>
<comment type="line" pos:line="646" pos:column="1">//	1. The function uses a lower-case version of the string.</comment>
<comment type="line" pos:line="647" pos:column="1">//  2. Only the first 255 characters of the string are used.</comment>
<comment type="line" pos:line="648" pos:column="1">//</comment>
<macro><name pos:line="649" pos:column="1">MSOAPI_</name><argument_list pos:line="649" pos:column="8">(<argument pos:line="649" pos:column="9">VOID</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="649" pos:column="15">HashWzToInt</name><argument_list pos:line="649" pos:column="26">(<argument><expr pos:line="649" pos:column="27">const <name pos:line="649" pos:column="33">WCHAR</name> <op:operator pos:line="649" pos:column="39">*</op:operator><name pos:line="649" pos:column="40">wz</name></expr></argument>, <argument><expr><name pos:line="649" pos:column="44">DWORD</name> <op:operator pos:line="649" pos:column="50">*</op:operator><name pos:line="649" pos:column="51">pdw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:line="651" pos:column="1">//</comment>
<comment type="line" pos:line="652" pos:column="1">// Standard I/O routines</comment>
<comment type="line" pos:line="653" pos:column="1">//</comment>

    <comment type="line" pos:line="655" pos:column="5">// Indicates if the Document Summary Infodata has changed.</comment>
    <comment type="line" pos:line="656" pos:column="5">//</comment>
    <comment type="line" pos:line="657" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="658" pos:column="5">//</comment>
    <comment type="line" pos:line="659" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="660" pos:column="5">//</comment>
    <comment type="line" pos:line="661" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="662" pos:column="5">//</comment>
    <comment type="line" pos:line="663" pos:column="5">//   TRUE -- the data has changed, and should be saved.</comment>
    <comment type="line" pos:line="664" pos:column="5">//   FALSE -- the data has not changed.</comment>
    <comment type="line" pos:line="665" pos:column="5">//</comment>
<macro><name pos:line="666" pos:column="1">MSOAPI_</name><argument_list pos:line="666" pos:column="8">(<argument pos:line="666" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="666" pos:column="16">MsoFDocSumShouldSave</name> <argument_list pos:line="666" pos:column="37">(<argument pos:line="666" pos:column="38">LPDSIOBJ lpDSIObj</argument>)</argument_list></macro><empty_stmt pos:line="666" pos:column="56">;</empty_stmt>

<comment type="line" pos:line="668" pos:column="1">//</comment>
<comment type="line" pos:line="669" pos:column="1">// Data manipulation routines</comment>
<comment type="line" pos:line="670" pos:column="1">//</comment>

    <comment type="line" pos:line="672" pos:column="5">// Get the size of a given string (UNICODE) property.</comment>
    <comment type="line" pos:line="673" pos:column="5">//</comment>
    <comment type="line" pos:line="674" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="675" pos:column="5">//</comment>
    <comment type="line" pos:line="676" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object.</comment>
    <comment type="line" pos:line="677" pos:column="5">//   iw - specifies which string to get the size of and should be</comment>
    <comment type="line" pos:line="678" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="679" pos:column="5">//      DSI_CATEGORY</comment>
    <comment type="line" pos:line="680" pos:column="5">//      DSI_FORMAT</comment>
    <comment type="line" pos:line="681" pos:column="5">//      DSI_MANAGER</comment>
    <comment type="line" pos:line="682" pos:column="5">//      DSI_COMPANY</comment>
    <comment type="line" pos:line="683" pos:column="5">//</comment>
    <comment type="line" pos:line="684" pos:column="5">//   pdw - pointer to a dword, will contain the cb on return</comment>
    <comment type="line" pos:line="685" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="686" pos:column="5">//</comment>
	<comment type="line" pos:line="687" pos:column="9">// 		True on success, false otherwise</comment>
	<comment type="line" pos:line="688" pos:column="9">//</comment>
<macro><name pos:line="689" pos:column="1">MSOAPI_</name><argument_list pos:line="689" pos:column="8">(<argument pos:line="689" pos:column="9">BOOL</argument>)</argument_list></macro>  <macro><name pos:line="689" pos:column="16">MsoFCbDocSumString</name><argument_list pos:line="689" pos:column="34">(<argument pos:line="689" pos:column="35">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="689" pos:column="54">WORD iw</argument>, <argument pos:line="689" pos:column="63">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="689" pos:column="74">;</empty_stmt>

    <comment type="line" pos:line="691" pos:column="5">// Get a given string (UNICODE) property.</comment>
    <comment type="line" pos:line="692" pos:column="5">//</comment>
    <comment type="line" pos:line="693" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="694" pos:column="5">//</comment>
    <comment type="line" pos:line="695" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="696" pos:column="5">//   iw - specifies which string to set and should be</comment>
    <comment type="line" pos:line="697" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="698" pos:column="5">//      DSI_CATEGORY</comment>
    <comment type="line" pos:line="699" pos:column="5">//      DSI_FORMAT</comment>
    <comment type="line" pos:line="700" pos:column="5">//      DSI_MANAGER</comment>
    <comment type="line" pos:line="701" pos:column="5">//      DSI_COMPANY</comment>
    <comment type="line" pos:line="702" pos:column="5">//</comment>
    <comment type="line" pos:line="703" pos:column="5">//   wz - buffer to hold string (allocated by caller)</comment>
    <comment type="line" pos:line="704" pos:column="5">//   cbMax - size of buffer</comment>
    <comment type="line" pos:line="705" pos:column="5">//</comment>
    <comment type="line" pos:line="706" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="707" pos:column="5">//</comment>
	<comment type="line" pos:line="708" pos:column="9">//	True on success, False otherwise</comment>
    <comment type="line" pos:line="709" pos:column="5">//</comment>
<macro><name pos:line="710" pos:column="1">MSOAPI_</name><argument_list pos:line="710" pos:column="8">(<argument pos:line="710" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="710" pos:column="15">MsoFDocSumGetString</name> <argument_list pos:line="710" pos:column="35">(<argument pos:line="710" pos:column="36">LPDSIOBJ lpDSIObj</argument>,
				       <argument pos:line="711" pos:column="40">WORD iw</argument>,
				       <argument pos:line="712" pos:column="40">DWORD cbMax</argument>,
				       <argument pos:line="713" pos:column="40">WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="713" pos:column="50">;</empty_stmt>

    <comment type="line" pos:line="715" pos:column="5">// Set a string (UNICODE) property to a given value</comment>
    <comment type="line" pos:line="716" pos:column="5">//</comment>
    <comment type="line" pos:line="717" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="718" pos:column="5">//</comment>
    <comment type="line" pos:line="719" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="720" pos:column="5">//   iw - specifies which string to set and should be</comment>
    <comment type="line" pos:line="721" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="722" pos:column="5">//      DSI_CATEGORY</comment>
    <comment type="line" pos:line="723" pos:column="5">//      DSI_FORMAT</comment>
    <comment type="line" pos:line="724" pos:column="5">//      DSI_MANAGER</comment>
    <comment type="line" pos:line="725" pos:column="5">//      DSI_COMPANY</comment>
    <comment type="line" pos:line="726" pos:column="5">//</comment>
    <comment type="line" pos:line="727" pos:column="5">//   wz - buffer containing string value</comment>
    <comment type="line" pos:line="728" pos:column="5">//</comment>
    <comment type="line" pos:line="729" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="730" pos:column="5">//</comment>
    <comment type="line" pos:line="731" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="732" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="733" pos:column="5">//</comment>
    <comment type="line" pos:line="734" pos:column="5">// Note: The function will dirty the object on success.</comment>
    <comment type="line" pos:line="735" pos:column="5">//</comment>
<macro><name pos:line="736" pos:column="1">MSOAPI_</name><argument_list pos:line="736" pos:column="8">(<argument pos:line="736" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="736" pos:column="16">MsoFDocSumSetString</name><argument_list pos:line="736" pos:column="35">(<argument pos:line="736" pos:column="36">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="736" pos:column="55">WORD iw</argument>, <argument pos:line="736" pos:column="64">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="736" pos:column="80">;</empty_stmt>

  <comment type="line" pos:line="738" pos:column="3">//</comment>
  <comment type="line" pos:line="739" pos:column="3">// How Heading and Document parts work:</comment>
  <comment type="line" pos:line="740" pos:column="3">//</comment>
  <comment type="line" pos:line="741" pos:column="3">// Heading:</comment>
  <comment type="line" pos:line="742" pos:column="3">// --------</comment>
  <comment type="line" pos:line="743" pos:column="3">// Heading is a list of non-indented headings that will be</comment>
  <comment type="line" pos:line="744" pos:column="3">// displayed in the "Contents" ply.</comment>
  <comment type="line" pos:line="745" pos:column="3">//</comment>
  <comment type="line" pos:line="746" pos:column="3">// Associated with each Heading is the number of document parts</comment>
  <comment type="line" pos:line="747" pos:column="3">// that goes with the particular heading -- this is the concept of a</comment>
  <comment type="line" pos:line="748" pos:column="3">// Heading Pair.</comment>
  <comment type="line" pos:line="749" pos:column="3">//</comment>
  <comment type="line" pos:line="750" pos:column="3">// Document Parts:</comment>
  <comment type="line" pos:line="751" pos:column="3">// ---------------</comment>
  <comment type="line" pos:line="752" pos:column="3">// Document Parts is a list of parts associated with a heading.</comment>
  <comment type="line" pos:line="753" pos:column="3">//</comment>
  <comment type="line" pos:line="754" pos:column="3">// Example (as it could be implemented in Microsoft Excel):</comment>
  <comment type="line" pos:line="755" pos:column="3">// ----------------------------------------------</comment>
  <comment type="line" pos:line="756" pos:column="3">// Worksheets</comment>
  <comment type="line" pos:line="757" pos:column="3">//     Sheet1</comment>
  <comment type="line" pos:line="758" pos:column="3">//     Sheet2</comment>
  <comment type="line" pos:line="759" pos:column="3">// Modules</comment>
  <comment type="line" pos:line="760" pos:column="3">//     Module1                             Figure 1</comment>
  <comment type="line" pos:line="761" pos:column="3">// Charts</comment>
  <comment type="line" pos:line="762" pos:column="3">//     Chart1</comment>
  <comment type="line" pos:line="763" pos:column="3">//     Chart2</comment>
  <comment type="line" pos:line="764" pos:column="3">//     Chart3</comment>
  <comment type="line" pos:line="765" pos:column="3">//</comment>
  <comment type="line" pos:line="766" pos:column="3">// Thus the Heading Pairs would be:</comment>
  <comment type="line" pos:line="767" pos:column="3">//</comment>
  <comment type="line" pos:line="768" pos:column="3">// Heading Pair</comment>
  <comment type="line" pos:line="769" pos:column="3">//    string                           count</comment>
  <comment type="line" pos:line="770" pos:column="3">//------------------------------------</comment>
  <comment type="line" pos:line="771" pos:column="3">// Worksheets            2</comment>
  <comment type="line" pos:line="772" pos:column="3">// Modules               1                 Figure 2</comment>
  <comment type="line" pos:line="773" pos:column="3">// Charts                3</comment>
  <comment type="line" pos:line="774" pos:column="3">//</comment>
  <comment type="line" pos:line="775" pos:column="3">//</comment>
  <comment type="line" pos:line="776" pos:column="3">// And the Document Parts would be:</comment>
  <comment type="line" pos:line="777" pos:column="3">//</comment>
  <comment type="line" pos:line="778" pos:column="3">// Document Parts</comment>
  <comment type="line" pos:line="779" pos:column="3">//--------------------------</comment>
  <comment type="line" pos:line="780" pos:column="3">// Sheet1</comment>
  <comment type="line" pos:line="781" pos:column="3">// Sheet2</comment>
  <comment type="line" pos:line="782" pos:column="3">// Module1</comment>
  <comment type="line" pos:line="783" pos:column="3">// Chart1                                  Figure 3</comment>
  <comment type="line" pos:line="784" pos:column="3">// Chart2</comment>
  <comment type="line" pos:line="785" pos:column="3">// Chart3</comment>
  <comment type="line" pos:line="786" pos:column="3">//</comment>
  <comment type="line" pos:line="787" pos:column="3">//</comment>
  <comment type="line" pos:line="788" pos:column="3">// Note: Headings and Document Parts are not restricted to be parts of</comment>
  <comment type="line" pos:line="789" pos:column="3">//       a document, but can be whatever the client wants.  Car models,</comment>
  <comment type="line" pos:line="790" pos:column="3">//       car makes, customers, etc...</comment>
  <comment type="line" pos:line="791" pos:column="3">//</comment>
  <comment type="line" pos:line="792" pos:column="3">//       The above is just an example.</comment>
  <comment type="line" pos:line="793" pos:column="3">//</comment>

    <comment type="line" pos:line="795" pos:column="5">// Determine how many Document Parts there are total.</comment>
    <comment type="line" pos:line="796" pos:column="5">//</comment>
    <comment type="line" pos:line="797" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="798" pos:column="5">//</comment>
    <comment type="line" pos:line="799" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="800" pos:column="5">//   pdw      - pointer to dword, will contain the count on return</comment>
    <comment type="line" pos:line="801" pos:column="5">//</comment>
    <comment type="line" pos:line="802" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="803" pos:column="5">//</comment>
    <comment type="line" pos:line="804" pos:column="5">//   The function returns TRUE on success, FALSE on error.</comment>
    <comment type="line" pos:line="805" pos:column="5">//</comment>
<macro><name pos:line="806" pos:column="1">MSOAPIX_</name><argument_list pos:line="806" pos:column="9">(<argument pos:line="806" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="806" pos:column="17">MsoFCDocSumDocParts</name> <argument_list pos:line="806" pos:column="37">(<argument pos:line="806" pos:column="38">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="806" pos:column="57">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="806" pos:column="68">;</empty_stmt>

    <comment type="line" pos:line="808" pos:column="5">// Determine how many Document Parts there are for a given heading.</comment>
    <comment type="line" pos:line="809" pos:column="5">//</comment>
    <comment type="line" pos:line="810" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="811" pos:column="5">//</comment>
    <comment type="line" pos:line="812" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="813" pos:column="5">//   idwHeading  - 1-based index of Heading</comment>
    <comment type="line" pos:line="814" pos:column="5">//   wzHeading   - name of Heading (UNICODE)</comment>
    <comment type="line" pos:line="815" pos:column="5">//   pdw         - pointer to dword, will contain the count on return</comment>
    <comment type="line" pos:line="816" pos:column="5">//</comment>
    <comment type="line" pos:line="817" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="818" pos:column="5">//   the heading. Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="819" pos:column="5">//</comment>
    <comment type="line" pos:line="820" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="821" pos:column="5">//</comment>
    <comment type="line" pos:line="822" pos:column="5">//   The function returns TRUE on success, FALSE on error.</comment>
    <comment type="line" pos:line="823" pos:column="5">//</comment>
<macro><name pos:line="824" pos:column="1">MSOAPI_</name><argument_list pos:line="824" pos:column="8">(<argument pos:line="824" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="824" pos:column="16">MsoFCDocSumDocPartsByHeading</name><argument_list pos:line="824" pos:column="44">(<argument pos:line="824" pos:column="45">LPDSIOBJ lpDSIObj</argument>,
						       <argument pos:line="825" pos:column="56">DWORD idwHeading</argument>,
						       <argument pos:line="826" pos:column="56">const WCHAR *wzHeading</argument>,
						       <argument pos:line="827" pos:column="56">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="827" pos:column="67">;</empty_stmt>

    <comment type="line" pos:line="829" pos:column="5">// Determine the size of a specific (one) Document Part</comment>
    <comment type="line" pos:line="830" pos:column="5">// for a given heading.</comment>
    <comment type="line" pos:line="831" pos:column="5">//</comment>
    <comment type="line" pos:line="832" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="833" pos:column="5">//</comment>
    <comment type="line" pos:line="834" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object.</comment>
    <comment type="line" pos:line="835" pos:column="5">//   idwPart     - 1-based index of Document part.</comment>
    <comment type="line" pos:line="836" pos:column="5">//   idwHeading  - 1-based index of Heading</comment>
    <comment type="line" pos:line="837" pos:column="5">//   wzHeading   - name of Heading (UNICODE)</comment>
    <comment type="line" pos:line="838" pos:column="5">//   pdw         - pointer to dword, will contain cb</comment>
    <comment type="line" pos:line="839" pos:column="5">//</comment>
    <comment type="line" pos:line="840" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="841" pos:column="5">//   the heading. Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="842" pos:column="5">//</comment>
    <comment type="line" pos:line="843" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="844" pos:column="5">//</comment>
    <comment type="line" pos:line="845" pos:column="5">//   The function returns TRUE on success, FALSE on error</comment>
    <comment type="line" pos:line="846" pos:column="5">//   (including non-existing Heading).</comment>
    <comment type="line" pos:line="847" pos:column="5">//</comment>
<macro><name pos:line="848" pos:column="1">MSOAPIX_</name><argument_list pos:line="848" pos:column="9">(<argument pos:line="848" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="848" pos:column="17">MsoFCbDocSumDocPart</name><argument_list pos:line="848" pos:column="36">(<argument pos:line="848" pos:column="37">LPDSIOBJ lpDSIObj</argument>,
					      <argument pos:line="849" pos:column="47">DWORD idwPart</argument>,
					      <argument pos:line="850" pos:column="47">DWORD idwHeading</argument>,
					      <argument pos:line="851" pos:column="47">const WCHAR *wzHeading</argument>,
					      <argument pos:line="852" pos:column="47">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="852" pos:column="58">;</empty_stmt>

    <comment type="line" pos:line="854" pos:column="5">// Get one of the Document Parts for a given Heading.</comment>
    <comment type="line" pos:line="855" pos:column="5">//</comment>
    <comment type="line" pos:line="856" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="857" pos:column="5">//</comment>
    <comment type="line" pos:line="858" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="859" pos:column="5">//   idwPart     - 1-based index of Document part</comment>
    <comment type="line" pos:line="860" pos:column="5">//   idwHeading  - 1-based index of Heading</comment>
    <comment type="line" pos:line="861" pos:column="5">//   wzHeading   - name of Heading (UNICODE)</comment>
    <comment type="line" pos:line="862" pos:column="5">//   cbMax       -  number of bytes in wz</comment>
    <comment type="line" pos:line="863" pos:column="5">//   wz          -  buffer to hold Document part (allocated by caller)</comment>
    <comment type="line" pos:line="864" pos:column="5">//</comment>
    <comment type="line" pos:line="865" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="866" pos:column="5">//   the heading. Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="867" pos:column="5">//</comment>
    <comment type="line" pos:line="868" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="869" pos:column="5">//</comment>
    <comment type="line" pos:line="870" pos:column="5">//   The function returns lpsz on success.</comment>
    <comment type="line" pos:line="871" pos:column="5">//   The function returns NULL on errors.</comment>
    <comment type="line" pos:line="872" pos:column="5">//</comment>
<macro><name pos:line="873" pos:column="1">MSOAPI_</name><argument_list pos:line="873" pos:column="8">(<argument pos:line="873" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="873" pos:column="15">MsoFDocSumGetDocPart</name><argument_list pos:line="873" pos:column="35">(<argument pos:line="873" pos:column="36">LPDSIOBJ lpDSIObj</argument>,
						   <argument pos:line="874" pos:column="52">DWORD idwPart</argument>,
						   <argument pos:line="875" pos:column="52">DWORD idwHeading</argument>,
						   <argument pos:line="876" pos:column="52">const WCHAR *wzHeading</argument>,
						   <argument pos:line="877" pos:column="52">DWORD cbMax</argument>,
						   <argument pos:line="878" pos:column="52">WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="878" pos:column="62">;</empty_stmt>

    <comment type="line" pos:line="880" pos:column="5">// Set one (existing) Document Part by heading</comment>
    <comment type="line" pos:line="881" pos:column="5">//</comment>
    <comment type="line" pos:line="882" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="883" pos:column="5">//</comment>
    <comment type="line" pos:line="884" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="885" pos:column="5">//   idwPart     - 1-based index of Document part</comment>
    <comment type="line" pos:line="886" pos:column="5">//   idwHeading  - 1-based index of Heading</comment>
    <comment type="line" pos:line="887" pos:column="5">//   wzHeading   - name of Heading</comment>
    <comment type="line" pos:line="888" pos:column="5">//   wz          - buffer containing new Document Part</comment>
    <comment type="line" pos:line="889" pos:column="5">//</comment>
    <comment type="line" pos:line="890" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="891" pos:column="5">//   the heading. Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="892" pos:column="5">//</comment>
    <comment type="line" pos:line="893" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="894" pos:column="5">//</comment>
    <comment type="line" pos:line="895" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="896" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="897" pos:column="5">//</comment>
<macro><name pos:line="898" pos:column="1">MSOAPI_</name><argument_list pos:line="898" pos:column="8">(<argument pos:line="898" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="898" pos:column="16">MsoFDocSumSetDocPart</name><argument_list pos:line="898" pos:column="36">(<argument pos:line="898" pos:column="37">LPDSIOBJ lpDSIObj</argument>,
					       <argument pos:line="899" pos:column="48">DWORD idwPart</argument>,
					       <argument pos:line="900" pos:column="48">DWORD idwHeading</argument>,
					       <argument pos:line="901" pos:column="48">const WCHAR *wzHeading</argument>,
					       <argument pos:line="902" pos:column="48">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="902" pos:column="64">;</empty_stmt>

    <comment type="line" pos:line="904" pos:column="5">// Remove one (existing) Document Part by heading.</comment>
    <comment type="line" pos:line="905" pos:column="5">//</comment>
    <comment type="line" pos:line="906" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="907" pos:column="5">//</comment>
    <comment type="line" pos:line="908" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="909" pos:column="5">//   idwPart     - 1-based index of Document part</comment>
    <comment type="line" pos:line="910" pos:column="5">//   idwHeading  - 1-based index of Heading</comment>
    <comment type="line" pos:line="911" pos:column="5">//   wzHeading   - name of Heading</comment>
    <comment type="line" pos:line="912" pos:column="5">//</comment>
    <comment type="line" pos:line="913" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="914" pos:column="5">//   the heading. Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="915" pos:column="5">//</comment>
    <comment type="line" pos:line="916" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="917" pos:column="5">//</comment>
    <comment type="line" pos:line="918" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="919" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="920" pos:column="5">//</comment>
    <comment type="line" pos:line="921" pos:column="5">// Note: The count for the Heading will be adjusted on success.</comment>
    <comment type="line" pos:line="922" pos:column="5">//</comment>
<macro><name pos:line="923" pos:column="1">MSOAPIX_</name><argument_list pos:line="923" pos:column="9">(<argument pos:line="923" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="923" pos:column="17">MsoFDocSumDeleteDocPart</name><argument_list pos:line="923" pos:column="40">(<argument pos:line="923" pos:column="41">LPDSIOBJ lpDSIObj</argument>,
						  <argument pos:line="924" pos:column="51">DWORD idwPart</argument>,
						  <argument pos:line="925" pos:column="51">DWORD idwHeading</argument>,
						  <argument pos:line="926" pos:column="51">const WCHAR *wzHeading</argument>)</argument_list></macro><empty_stmt pos:line="926" pos:column="74">;</empty_stmt>

    <comment type="line" pos:line="928" pos:column="5">// Insert a Document Part at the given location for a given Heading.</comment>
    <comment type="line" pos:line="929" pos:column="5">//</comment>
    <comment type="line" pos:line="930" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="931" pos:column="5">//</comment>
    <comment type="line" pos:line="932" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="933" pos:column="5">//   idwPart     - 1-based index of Document part to insert at</comment>
    <comment type="line" pos:line="934" pos:column="5">//                   1 &lt;= idwPart &lt;= FCDocSumDocPartsByHeading(...)+1</comment>
    <comment type="line" pos:line="935" pos:column="5">//                   idwPart = FCDocSumDocPartsByHeading(...)+1 will append a Document Part</comment>
    <comment type="line" pos:line="936" pos:column="5">//   idwHeading  - 1-based index of Heading</comment>
    <comment type="line" pos:line="937" pos:column="5">//   wzHeading   - name of Heading</comment>
    <comment type="line" pos:line="938" pos:column="5">//   wz          - buffer containing new Document Part</comment>
    <comment type="line" pos:line="939" pos:column="5">//</comment>
    <comment type="line" pos:line="940" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="941" pos:column="5">//   the heading. Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="942" pos:column="5">//</comment>
    <comment type="line" pos:line="943" pos:column="5">// Note: If the Heading doesn't exist, the heading will be created and inserted</comment>
    <comment type="line" pos:line="944" pos:column="5">//       at idwHeaing.</comment>
    <comment type="line" pos:line="945" pos:column="5">//       1 &lt;= idwHeading &lt;= FCDocSumHeadingPairs(..)+1</comment>
    <comment type="line" pos:line="946" pos:column="5">//       idwHeading = FCDocSumHeadingPairs(...)+1 will append a Heading Pair</comment>
    <comment type="line" pos:line="947" pos:column="5">//</comment>
    <comment type="line" pos:line="948" pos:column="5">//       In this case wzHeading should contain the heading name.</comment>
    <comment type="line" pos:line="949" pos:column="5">//       idwPart will be ignored, and the docpart will be added as the first docpart</comment>
    <comment type="line" pos:line="950" pos:column="5">//       for the heading.</comment>
    <comment type="line" pos:line="951" pos:column="5">//</comment>
    <comment type="line" pos:line="952" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="953" pos:column="5">//</comment>
    <comment type="line" pos:line="954" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="955" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="956" pos:column="5">//</comment>
    <comment type="line" pos:line="957" pos:column="5">// Note: The count for the Heading will be adjusted on success.</comment>
    <comment type="line" pos:line="958" pos:column="5">//</comment>
<macro><name pos:line="959" pos:column="1">MSOAPI_</name><argument_list pos:line="959" pos:column="8">(<argument pos:line="959" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="959" pos:column="16">MsoFDocSumInsertDocPart</name><argument_list pos:line="959" pos:column="39">(<argument pos:line="959" pos:column="40">LPDSIOBJ lpDSIObj</argument>,
						  <argument pos:line="960" pos:column="51">DWORD idwPart</argument>,
						  <argument pos:line="961" pos:column="51">DWORD idwHeading</argument>,
						  <argument pos:line="962" pos:column="51">const WCHAR *wzHeading</argument>,
						  <argument pos:line="963" pos:column="51">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="963" pos:column="67">;</empty_stmt>

    <comment type="line" pos:line="965" pos:column="5">// Determine how many Heading Pairs there are.</comment>
    <comment type="line" pos:line="966" pos:column="5">//</comment>
    <comment type="line" pos:line="967" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="968" pos:column="5">//</comment>
    <comment type="line" pos:line="969" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="970" pos:column="5">//   pdw      - pointer to dword, will contain count</comment>
    <comment type="line" pos:line="971" pos:column="5">//</comment>
    <comment type="line" pos:line="972" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="973" pos:column="5">//</comment>
    <comment type="line" pos:line="974" pos:column="5">//   The function returns TRUE on success, FALSE on error.</comment>
    <comment type="line" pos:line="975" pos:column="5">//</comment>
<macro><name pos:line="976" pos:column="1">MSOAPI_</name><argument_list pos:line="976" pos:column="8">(<argument pos:line="976" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="976" pos:column="16">MsoFCDocSumHeadingPairs</name> <argument_list pos:line="976" pos:column="40">(<argument pos:line="976" pos:column="41">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="976" pos:column="60">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="976" pos:column="71">;</empty_stmt>

    <comment type="line" pos:line="978" pos:column="5">// Get the size of one heading string</comment>
    <comment type="line" pos:line="979" pos:column="5">//</comment>
    <comment type="line" pos:line="980" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="981" pos:column="5">//</comment>
    <comment type="line" pos:line="982" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object.</comment>
    <comment type="line" pos:line="983" pos:column="5">//   idwHeading  - 1-based index of heading</comment>
    <comment type="line" pos:line="984" pos:column="5">//   pdw         - pointer to dword, will contain cb</comment>
    <comment type="line" pos:line="985" pos:column="5">//</comment>
    <comment type="line" pos:line="986" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="987" pos:column="5">//</comment>
    <comment type="line" pos:line="988" pos:column="5">//   The function returns TRUE on success, FALSE on error.</comment>
    <comment type="line" pos:line="989" pos:column="5">//</comment>
<macro><name pos:line="990" pos:column="1">MSOAPIX_</name><argument_list pos:line="990" pos:column="9">(<argument pos:line="990" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="990" pos:column="17">MsoFCbDocSumHeadingPair</name> <argument_list pos:line="990" pos:column="41">(<argument pos:line="990" pos:column="42">LPDSIOBJ lpDSIObj</argument>,
						  <argument pos:line="991" pos:column="51">DWORD idwHeading</argument>,
						  <argument pos:line="992" pos:column="51">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="992" pos:column="62">;</empty_stmt>

    <comment type="line" pos:line="994" pos:column="5">// Get one heading pair.</comment>
    <comment type="line" pos:line="995" pos:column="5">//</comment>
    <comment type="line" pos:line="996" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="997" pos:column="5">//</comment>
    <comment type="line" pos:line="998" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="999" pos:column="5">//   idwheading  - 1-based index of heading pair</comment>
    <comment type="line" pos:line="1000" pos:column="5">//   wzHeading   - name of Heading</comment>
    <comment type="line" pos:line="1001" pos:column="5">//   cbMax       - number of bytes in lpsz</comment>
    <comment type="line" pos:line="1002" pos:column="5">//   wz          - buffer to hold heading string (allocated by user)</comment>
    <comment type="line" pos:line="1003" pos:column="5">//   pdwcParts   - will be set to number of document parts for the heading</comment>
    <comment type="line" pos:line="1004" pos:column="5">//</comment>
    <comment type="line" pos:line="1005" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="1006" pos:column="5">//   the heading (could be only dwcParts is wanted).</comment>
    <comment type="line" pos:line="1007" pos:column="5">//   Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="1008" pos:column="5">//</comment>
    <comment type="line" pos:line="1009" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1010" pos:column="5">//</comment>
    <comment type="line" pos:line="1011" pos:column="5">//   The function will return TRUE on success.</comment>
    <comment type="line" pos:line="1012" pos:column="5">//   The function will return FALSE on error.</comment>
    <comment type="line" pos:line="1013" pos:column="5">//</comment>
<macro><name pos:line="1014" pos:column="1">MSOAPIX_</name><argument_list pos:line="1014" pos:column="9">(<argument pos:line="1014" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1014" pos:column="16">MsoFDocSumGetHeadingPair</name><argument_list pos:line="1014" pos:column="40">(<argument pos:line="1014" pos:column="41">LPDSIOBJ lpDSIObj</argument>,
					    <argument pos:line="1015" pos:column="45">DWORD idwHeading</argument>,
					    <argument pos:line="1016" pos:column="45">const WCHAR *wzHeading</argument>,
					    <argument pos:line="1017" pos:column="45">DWORD cbMax</argument>,
					    <argument pos:line="1018" pos:column="45">WCHAR *wz</argument>,
					    <argument pos:line="1019" pos:column="45">DWORD *pdwcParts</argument>)</argument_list></macro><empty_stmt pos:line="1019" pos:column="62">;</empty_stmt>

<comment type="line" pos:line="1021" pos:column="1">// #ifdef UNUSED</comment>
<comment type="line" pos:line="1022" pos:column="1">// Used in Binder</comment>
    <comment type="line" pos:line="1023" pos:column="5">// Set one heading pair</comment>
    <comment type="line" pos:line="1024" pos:column="5">//</comment>
    <comment type="line" pos:line="1025" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1026" pos:column="5">//</comment>
    <comment type="line" pos:line="1027" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1028" pos:column="5">//   idwheading  - 1-based index of heading pair</comment>
    <comment type="line" pos:line="1029" pos:column="5">//   wzHeading   - name of Heading</comment>
    <comment type="line" pos:line="1030" pos:column="5">//   wz          - buffer containing heading string</comment>
    <comment type="line" pos:line="1031" pos:column="5">//</comment>
    <comment type="line" pos:line="1032" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="1033" pos:column="5">//   the heading (could be only dwcParts should be set).</comment>
    <comment type="line" pos:line="1034" pos:column="5">//   Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="1035" pos:column="5">//</comment>
    <comment type="line" pos:line="1036" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1037" pos:column="5">//</comment>
    <comment type="line" pos:line="1038" pos:column="5">//   The function will return TRUE on success.</comment>
    <comment type="line" pos:line="1039" pos:column="5">//   The function will return FALSE on error.</comment>
    <comment type="line" pos:line="1040" pos:column="5">//</comment>
<macro><name pos:line="1041" pos:column="1">MSOAPIX_</name><argument_list pos:line="1041" pos:column="9">(<argument pos:line="1041" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1041" pos:column="17">MsoFDocSumSetHeadingPair</name><argument_list pos:line="1041" pos:column="41">(<argument pos:line="1041" pos:column="42">LPDSIOBJ lpDSIObj</argument>,
						   <argument pos:line="1042" pos:column="52">DWORD idwHeading</argument>,
						   <argument pos:line="1043" pos:column="52">const WCHAR *wzHeading</argument>,
						   <argument pos:line="1044" pos:column="52">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="1044" pos:column="68">;</empty_stmt>
<comment type="line" pos:line="1045" pos:column="1">//#endif // UNUSED</comment>

    <comment type="line" pos:line="1047" pos:column="5">// Delete a heading pair</comment>
    <comment type="line" pos:line="1048" pos:column="5">//</comment>
    <comment type="line" pos:line="1049" pos:column="5">// Note:  This will also delete ALL document parts associated</comment>
    <comment type="line" pos:line="1050" pos:column="5">//        with the heading.</comment>
    <comment type="line" pos:line="1051" pos:column="5">//</comment>
    <comment type="line" pos:line="1052" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1053" pos:column="5">//</comment>
    <comment type="line" pos:line="1054" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1055" pos:column="5">//   idwheading  - 1-based index of heading pair</comment>
    <comment type="line" pos:line="1056" pos:column="5">//   wzHeading - name of Heading</comment>
    <comment type="line" pos:line="1057" pos:column="5">//</comment>
    <comment type="line" pos:line="1058" pos:column="5">//   If wzHeading is non-null, this value will be used to look up</comment>
    <comment type="line" pos:line="1059" pos:column="5">//   the heading.  Otherwise idwHeading will be used.</comment>
    <comment type="line" pos:line="1060" pos:column="5">//</comment>
    <comment type="line" pos:line="1061" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1062" pos:column="5">//</comment>
    <comment type="line" pos:line="1063" pos:column="5">//   The function will return TRUE on success.</comment>
    <comment type="line" pos:line="1064" pos:column="5">//   The function will return FALSE on error.</comment>
    <comment type="line" pos:line="1065" pos:column="5">//</comment>
<macro><name pos:line="1066" pos:column="1">MSOAPI_</name><argument_list pos:line="1066" pos:column="8">(<argument pos:line="1066" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1066" pos:column="16">MsoFDocSumDeleteHeadingPair</name><argument_list pos:line="1066" pos:column="43">(<argument pos:line="1066" pos:column="44">LPDSIOBJ lpDSIObj</argument>,
						      <argument pos:line="1067" pos:column="55">DWORD idwHeading</argument>,
						      <argument pos:line="1068" pos:column="55">const WCHAR *wzHeading</argument>)</argument_list></macro><empty_stmt pos:line="1068" pos:column="78">;</empty_stmt>

    <comment type="line" pos:line="1070" pos:column="5">// Delete all heading pair and all their document parts. I.e.</comment>
    <comment type="line" pos:line="1071" pos:column="5">// clear the contents data.</comment>
    <comment type="line" pos:line="1072" pos:column="5">//</comment>
    <comment type="line" pos:line="1073" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1074" pos:column="5">//</comment>
    <comment type="line" pos:line="1075" pos:column="5">//   lpDSIObj    - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1076" pos:column="5">//</comment>
    <comment type="line" pos:line="1077" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1078" pos:column="5">//</comment>
    <comment type="line" pos:line="1079" pos:column="5">//   The function will return TRUE on success.</comment>
    <comment type="line" pos:line="1080" pos:column="5">//   The function will return FALSE on error.</comment>
    <comment type="line" pos:line="1081" pos:column="5">//</comment>
<macro><name pos:line="1082" pos:column="1">MSOAPI_</name><argument_list pos:line="1082" pos:column="8">(<argument pos:line="1082" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1082" pos:column="16">MsoFDocSumDeleteAllHeadingPair</name> <argument_list pos:line="1082" pos:column="47">(<argument pos:line="1082" pos:column="48">LPDSIOBJ lpDSIObj</argument>)</argument_list></macro><empty_stmt pos:line="1082" pos:column="66">;</empty_stmt>

    <comment type="line" pos:line="1084" pos:column="5">// Insert a heading pair at the given location</comment>
    <comment type="line" pos:line="1085" pos:column="5">//</comment>
    <comment type="line" pos:line="1086" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1087" pos:column="5">//</comment>
    <comment type="line" pos:line="1088" pos:column="5">//   lpDSIObj          - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1089" pos:column="5">//   idwHeading        - 1-based index of Heading pair to insert at</comment>
    <comment type="line" pos:line="1090" pos:column="5">//                        1 &lt;= idwHeading &lt;= FCDocSumHeadingPairs(..)+1</comment>
    <comment type="line" pos:line="1091" pos:column="5">//                        idwHeading = FCDocSumHeadingPairs(...)+1 will append a Heading Pair</comment>
    <comment type="line" pos:line="1092" pos:column="5">//   wzHeadingBefore   - name of a Heading</comment>
    <comment type="line" pos:line="1093" pos:column="5">//   wzNewHeading      - buffer containing new Heading string</comment>
    <comment type="line" pos:line="1094" pos:column="5">//</comment>
    <comment type="line" pos:line="1095" pos:column="5">//   If wzHeadingBefore is non-null, the new Heading will be inserted right before</comment>
    <comment type="line" pos:line="1096" pos:column="5">//   wzHeadingBefore.  To insert at the end of the list pass NULL for this parameter,</comment>
    <comment type="line" pos:line="1097" pos:column="5">//   and set idwHeading = cDocSumHeadingPairs+1.</comment>
    <comment type="line" pos:line="1098" pos:column="5">//</comment>
    <comment type="line" pos:line="1099" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1100" pos:column="5">//</comment>
    <comment type="line" pos:line="1101" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="1102" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="1103" pos:column="5">//</comment>
<macro><name pos:line="1104" pos:column="1">MSOAPI_</name><argument_list pos:line="1104" pos:column="8">(<argument pos:line="1104" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1104" pos:column="16">MsoFDocSumInsertHeadingPair</name><argument_list pos:line="1104" pos:column="43">(<argument pos:line="1104" pos:column="44">LPDSIOBJ lpDSIObj</argument>,
					   <argument pos:line="1105" pos:column="44">DWORD idwHeading</argument>,
					   <argument pos:line="1106" pos:column="44">const WCHAR *wzHeadingBefore</argument>,
					   <argument pos:line="1107" pos:column="44">const WCHAR *wzNewHeading</argument>)</argument_list></macro><empty_stmt pos:line="1107" pos:column="70">;</empty_stmt>

    <comment type="line" pos:line="1109" pos:column="5">// Get an integer property</comment>
    <comment type="line" pos:line="1110" pos:column="5">//</comment>
    <comment type="line" pos:line="1111" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1112" pos:column="5">//</comment>
    <comment type="line" pos:line="1113" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1114" pos:column="5">//   iw - specifies which integer to get and should be</comment>
    <comment type="line" pos:line="1115" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="1116" pos:column="5">//      DSI_BYTES</comment>
    <comment type="line" pos:line="1117" pos:column="5">//      DSI_LINES</comment>
    <comment type="line" pos:line="1118" pos:column="5">//      DSI_PARAS</comment>
    <comment type="line" pos:line="1119" pos:column="5">//      DSI_SLIDES</comment>
    <comment type="line" pos:line="1120" pos:column="5">//      DSI_NOTES</comment>
    <comment type="line" pos:line="1121" pos:column="5">//      DSI_HIDDENSLIDES</comment>
    <comment type="line" pos:line="1122" pos:column="5">//      DSI_MMCLIPS</comment>
	<comment type="line" pos:line="1123" pos:column="9">//		DSI_CCHWSPACES</comment>
	<comment type="line" pos:line="1124" pos:column="9">//		DSI_VERSION</comment>
    <comment type="line" pos:line="1125" pos:column="5">//</comment>
    <comment type="line" pos:line="1126" pos:column="5">//   pdw - pointer to dword, will contain integer</comment>
    <comment type="line" pos:line="1127" pos:column="5">//</comment>
    <comment type="line" pos:line="1128" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1129" pos:column="5">//</comment>
    <comment type="line" pos:line="1130" pos:column="5">//   The function returns TRUE on success, FALSE on error</comment>
	<comment type="line" pos:line="1131" pos:column="9">//</comment>
	<comment type="line" pos:line="1132" pos:column="9">//	Note: If you ask for DSI_VERSION and the function returns false</comment>
	<comment type="line" pos:line="1133" pos:column="9">//		  that means (assuming all parameters are valid) that the property</comment>
	<comment type="line" pos:line="1134" pos:column="9">//		  wasn't in the stream, and as such the property data was originally </comment>
	<comment type="line" pos:line="1135" pos:column="9">//		  in the Office 95 property format.</comment>
	<comment type="line" pos:line="1136" pos:column="9">//		</comment>
<macro><name pos:line="1137" pos:column="1">MSOAPI_</name><argument_list pos:line="1137" pos:column="8">(<argument pos:line="1137" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1137" pos:column="16">MsoFDwDocSumGetInt</name> <argument_list pos:line="1137" pos:column="35">(<argument pos:line="1137" pos:column="36">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1137" pos:column="55">WORD iw</argument>, <argument pos:line="1137" pos:column="64">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="1137" pos:column="75">;</empty_stmt>

    <comment type="line" pos:line="1139" pos:column="5">// Set an integer property to a given value</comment>
    <comment type="line" pos:line="1140" pos:column="5">//</comment>
    <comment type="line" pos:line="1141" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1142" pos:column="5">//</comment>
    <comment type="line" pos:line="1143" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1144" pos:column="5">//   iw - specifies which integer to set and should be</comment>
    <comment type="line" pos:line="1145" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="1146" pos:column="5">//      DSI_BYTES</comment>
    <comment type="line" pos:line="1147" pos:column="5">//      DSI_LINES</comment>
    <comment type="line" pos:line="1148" pos:column="5">//      DSI_PARAS</comment>
    <comment type="line" pos:line="1149" pos:column="5">//      DSI_SLIDES</comment>
    <comment type="line" pos:line="1150" pos:column="5">//      DSI_NOTES</comment>
    <comment type="line" pos:line="1151" pos:column="5">//      DSI_HIDDENSLIDES</comment>
    <comment type="line" pos:line="1152" pos:column="5">//      DSI_MMCLIPS</comment>
	<comment type="line" pos:line="1153" pos:column="9">//		DSI_CCHWSPACES</comment>
    <comment type="line" pos:line="1154" pos:column="5">//</comment>
    <comment type="line" pos:line="1155" pos:column="5">//   dw - the value </comment>
    <comment type="line" pos:line="1156" pos:column="5">//</comment>
    <comment type="line" pos:line="1157" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1158" pos:column="5">//</comment>
    <comment type="line" pos:line="1159" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="1160" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="1161" pos:column="5">//</comment>
    <comment type="line" pos:line="1162" pos:column="5">// Note: The function will dirty the object on success.</comment>
    <comment type="line" pos:line="1163" pos:column="5">//</comment>
	<comment type="line" pos:line="1164" pos:column="9">// Note: You cannot set DSI_VERSION</comment>
	<comment type="line" pos:line="1165" pos:column="9">//	</comment>
<macro><name pos:line="1166" pos:column="1">MSOAPI_</name><argument_list pos:line="1166" pos:column="8">(<argument pos:line="1166" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1166" pos:column="16">MsoFDocSumSetInt</name> <argument_list pos:line="1166" pos:column="33">(<argument pos:line="1166" pos:column="34">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1166" pos:column="53">WORD iw</argument>, <argument pos:line="1166" pos:column="62">DWORD dw</argument>)</argument_list></macro><empty_stmt pos:line="1166" pos:column="71">;</empty_stmt>


<comment type="line" pos:line="1169" pos:column="1">// #ifdef UNUSED</comment>
<comment type="line" pos:line="1170" pos:column="1">// Used in Binder</comment>
    <comment type="line" pos:line="1171" pos:column="5">// Get the Scalability property</comment>
    <comment type="line" pos:line="1172" pos:column="5">//</comment>
    <comment type="line" pos:line="1173" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1174" pos:column="5">//</comment>
    <comment type="line" pos:line="1175" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1176" pos:column="5">//</comment>
    <comment type="line" pos:line="1177" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1178" pos:column="5">//</comment>
    <comment type="line" pos:line="1179" pos:column="5">//   The function returns TRUE when scaling, FALSE when cropping.</comment>
    <comment type="line" pos:line="1180" pos:column="5">//</comment>
    <comment type="line" pos:line="1181" pos:column="5">//   The function will also return FALSE on error, i.e. if lpDSIObj is null</comment>
    <comment type="line" pos:line="1182" pos:column="5">//   or there is no data in the object.</comment>
    <comment type="line" pos:line="1183" pos:column="5">//</comment>
<macro><name pos:line="1184" pos:column="1">MSOAPIX_</name><argument_list pos:line="1184" pos:column="9">(<argument pos:line="1184" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1184" pos:column="17">MsoFDocSumGetScalability</name> <argument_list pos:line="1184" pos:column="42">(<argument pos:line="1184" pos:column="43">LPDSIOBJ lpDSIObj</argument>)</argument_list></macro><empty_stmt pos:line="1184" pos:column="61">;</empty_stmt>
<comment type="line" pos:line="1185" pos:column="1">//#endif // UNUSED</comment>

    <comment type="line" pos:line="1187" pos:column="5">// Determine if the object has the Scalable property</comment>
    <comment type="line" pos:line="1188" pos:column="5">//</comment>
    <comment type="line" pos:line="1189" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1190" pos:column="5">//</comment>
    <comment type="line" pos:line="1191" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1192" pos:column="5">//</comment>
    <comment type="line" pos:line="1193" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1194" pos:column="5">//</comment>
    <comment type="line" pos:line="1195" pos:column="5">//   The function returns TRUE if scaling, FALSE otherwise.</comment>
    <comment type="line" pos:line="1196" pos:column="5">//</comment>
    <comment type="line" pos:line="1197" pos:column="5">//   The function will also return FALSE on error, i.e. if lpDSIObj is null</comment>
    <comment type="line" pos:line="1198" pos:column="5">//   or there is no data in the object.</comment>
    <comment type="line" pos:line="1199" pos:column="5">//</comment>
<macro><name pos:line="1200" pos:column="1">MSOAPIX_</name><argument_list pos:line="1200" pos:column="9">(<argument pos:line="1200" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1200" pos:column="17">MsoFDocSumIsScalable</name> <argument_list pos:line="1200" pos:column="38">(<argument pos:line="1200" pos:column="39">LPDSIOBJ lpDSIObj</argument>)</argument_list></macro><empty_stmt pos:line="1200" pos:column="57">;</empty_stmt>

    <comment type="line" pos:line="1202" pos:column="5">// Determine if the object has the Croppable property</comment>
    <comment type="line" pos:line="1203" pos:column="5">//</comment>
    <comment type="line" pos:line="1204" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1205" pos:column="5">//</comment>
    <comment type="line" pos:line="1206" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1207" pos:column="5">//</comment>
    <comment type="line" pos:line="1208" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1209" pos:column="5">//</comment>
    <comment type="line" pos:line="1210" pos:column="5">//   The function returns TRUE when cropping, FALSE otherwise.</comment>
    <comment type="line" pos:line="1211" pos:column="5">//</comment>
    <comment type="line" pos:line="1212" pos:column="5">//   The function will also return FALSE on error, i.e. if lpDSIObj is null</comment>
    <comment type="line" pos:line="1213" pos:column="5">//   or there is no data in the object.</comment>
    <comment type="line" pos:line="1214" pos:column="5">//</comment>
<macro><name pos:line="1215" pos:column="1">MSOAPIX_</name><argument_list pos:line="1215" pos:column="9">(<argument pos:line="1215" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1215" pos:column="17">MsoFDocSumIsCroppable</name> <argument_list pos:line="1215" pos:column="39">(<argument pos:line="1215" pos:column="40">LPDSIOBJ lpDSIObj</argument>)</argument_list></macro><empty_stmt pos:line="1215" pos:column="58">;</empty_stmt>

    <comment type="line" pos:line="1217" pos:column="5">// Set the Scalability property</comment>
    <comment type="line" pos:line="1218" pos:column="5">//</comment>
    <comment type="line" pos:line="1219" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1220" pos:column="5">//</comment>
    <comment type="line" pos:line="1221" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1222" pos:column="5">//   fScalable - should be set to TRUE if setting to scalable,</comment>
    <comment type="line" pos:line="1223" pos:column="5">//               should be set to FALSE if setting to cropping</comment>
    <comment type="line" pos:line="1224" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1225" pos:column="5">//</comment>
    <comment type="line" pos:line="1226" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="1227" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="1228" pos:column="5">//</comment>
    <comment type="line" pos:line="1229" pos:column="5">// Note: The function dirties the object on success.</comment>
    <comment type="line" pos:line="1230" pos:column="5">//</comment>
<macro><name pos:line="1231" pos:column="1">MSOAPIX_</name><argument_list pos:line="1231" pos:column="9">(<argument pos:line="1231" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1231" pos:column="17">MsoFDocSumSetScalability</name> <argument_list pos:line="1231" pos:column="42">(<argument pos:line="1231" pos:column="43">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1231" pos:column="62">BOOL fScalable</argument>)</argument_list></macro><empty_stmt pos:line="1231" pos:column="77">;</empty_stmt>

    <comment type="line" pos:line="1233" pos:column="5">// Determine if the actual values of the LINKED user defined properties has changed</comment>
	 <comment type="line" pos:line="1234" pos:column="10">// This function should only be called right after loading the properties to</comment>
	 <comment type="line" pos:line="1235" pos:column="10">// see if the caller should update the link values.</comment>
	 <comment type="line" pos:line="1236" pos:column="10">//</comment>
	 <comment type="line" pos:line="1237" pos:column="10">// NOTE: The function works by checking the value of the PID_LINKSDIRTY property.</comment>
	 <comment type="line" pos:line="1238" pos:column="10">//       When this function is called the property will be set to FALSE, so that</comment>
	 <comment type="line" pos:line="1239" pos:column="10">//       flag is cleared next time the properties are saved.</comment>
	 <comment type="line" pos:line="1240" pos:column="10">//</comment>
	 <comment type="line" pos:line="1241" pos:column="10">// NOTE: Only the app that created the file that are being loaded should call this</comment>
	 <comment type="line" pos:line="1242" pos:column="10">//       function.  I.e. Excel calls this for .xls files, noone else does, etc...</comment>
     <comment type="line" pos:line="1243" pos:column="6">//</comment>
     <comment type="line" pos:line="1244" pos:column="6">// Parameters:</comment>
     <comment type="line" pos:line="1245" pos:column="6">//</comment>
     <comment type="line" pos:line="1246" pos:column="6">//     lpDSIObj - pointer to Document Summary Info object</comment>
     <comment type="line" pos:line="1247" pos:column="6">//</comment>
     <comment type="line" pos:line="1248" pos:column="6">// Return value:</comment>
     <comment type="line" pos:line="1249" pos:column="6">//</comment>
     <comment type="line" pos:line="1250" pos:column="6">//     The function returns TRUE if the link values have changed.</comment>
     <comment type="line" pos:line="1251" pos:column="6">//     The function returns FALSE if the link value have not</comment>
     <comment type="line" pos:line="1252" pos:column="6">//     changed, or on error.</comment>
     <comment type="line" pos:line="1253" pos:column="6">//</comment>
<macro><name pos:line="1254" pos:column="1">MSOAPI_</name><argument_list pos:line="1254" pos:column="8">(<argument pos:line="1254" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1254" pos:column="16">MsoFLinkValsChanged</name><argument_list pos:line="1254" pos:column="35">(<argument pos:line="1254" pos:column="36">LPDSIOBJ lpDSIObj</argument>)</argument_list></macro><empty_stmt pos:line="1254" pos:column="54">;</empty_stmt>

    <comment type="line" pos:line="1256" pos:column="5">// Set the DSI_GUID string (UNICODE) property to the value of a newly </comment>
    <comment type="line" pos:line="1257" pos:column="5">// created GUID.  Applications should call this function only when saving</comment>
    <comment type="line" pos:line="1258" pos:column="5">// a document for the first time (such as during File-SaveAs).  </comment>
    <comment type="line" pos:line="1259" pos:column="5">// This function allocates a new GUID via CoCreateGuid, converts the GUID</comment>
    <comment type="line" pos:line="1260" pos:column="5">// to a string, and sets the DSI_GUID property to this string. </comment>
    <comment type="line" pos:line="1261" pos:column="5">//</comment>
    <comment type="line" pos:line="1262" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1263" pos:column="5">//</comment>
    <comment type="line" pos:line="1264" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1265" pos:column="5">//</comment>
    <comment type="line" pos:line="1266" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1267" pos:column="5">//</comment>
    <comment type="line" pos:line="1268" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="1269" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="1270" pos:column="5">//</comment>
    <comment type="line" pos:line="1271" pos:column="5">// Note: The function dirties the object on success.</comment>
    <comment type="line" pos:line="1272" pos:column="5">//</comment>
<macro><name pos:line="1273" pos:column="1">MSOAPI_</name><argument_list pos:line="1273" pos:column="8">(<argument pos:line="1273" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1273" pos:column="16">MsoFDocSumSetGUID</name><argument_list pos:line="1273" pos:column="33">(<argument pos:line="1273" pos:column="34">LPDSIOBJ lpDSIObj</argument>)</argument_list></macro><empty_stmt pos:line="1273" pos:column="52">;</empty_stmt>

    <comment type="line" pos:line="1275" pos:column="5">// Get a boolean property</comment>
    <comment type="line" pos:line="1276" pos:column="5">//</comment>
    <comment type="line" pos:line="1277" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1278" pos:column="5">//</comment>
    <comment type="line" pos:line="1279" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1280" pos:column="5">//   iw - specifies which boolean to get and should be</comment>
    <comment type="line" pos:line="1281" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="1282" pos:column="5">//      DSI_SHAREDDOC - is the document shared or not</comment>
    <comment type="line" pos:line="1283" pos:column="5">//		DSI_HYPERLINKSCHANGED - did the hyperlinks change</comment>
	<comment type="line" pos:line="1284" pos:column="9">//</comment>
    <comment type="line" pos:line="1285" pos:column="5">//   pf - pointer to BOOL, will contain boolean</comment>
    <comment type="line" pos:line="1286" pos:column="5">//</comment>
    <comment type="line" pos:line="1287" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1288" pos:column="5">//</comment>
    <comment type="line" pos:line="1289" pos:column="5">//   The function returns TRUE on success, FALSE on error</comment>
    <comment type="line" pos:line="1290" pos:column="5">//</comment>
<macro><name pos:line="1291" pos:column="1">MSOAPI_</name><argument_list pos:line="1291" pos:column="8">(<argument pos:line="1291" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1291" pos:column="16">MsoFDocSumGetBool</name> <argument_list pos:line="1291" pos:column="34">(<argument pos:line="1291" pos:column="35">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1291" pos:column="54">WORD iw</argument>, <argument pos:line="1291" pos:column="63">BOOL *pf</argument>)</argument_list></macro><empty_stmt pos:line="1291" pos:column="72">;</empty_stmt>

    <comment type="line" pos:line="1293" pos:column="5">// Set a boolean property </comment>
    <comment type="line" pos:line="1294" pos:column="5">//</comment>
    <comment type="line" pos:line="1295" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1296" pos:column="5">//</comment>
    <comment type="line" pos:line="1297" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1298" pos:column="5">//   iw - specifies which boolean to set and should be</comment>
    <comment type="line" pos:line="1299" pos:column="5">//        one of the following values:</comment>
    <comment type="line" pos:line="1300" pos:column="5">//      DSI_SHAREDDOC - is the document shared or not</comment>
    <comment type="line" pos:line="1301" pos:column="5">//		DSI_HYPERLINKSCHANGED - did the hyperlinks change</comment>
    <comment type="line" pos:line="1302" pos:column="5">//</comment>
    <comment type="line" pos:line="1303" pos:column="5">//   f - the value </comment>
    <comment type="line" pos:line="1304" pos:column="5">//</comment>
    <comment type="line" pos:line="1305" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1306" pos:column="5">//</comment>
    <comment type="line" pos:line="1307" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="1308" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="1309" pos:column="5">//</comment>
    <comment type="line" pos:line="1310" pos:column="5">// Note: The function will dirty the object on success.</comment>
    <comment type="line" pos:line="1311" pos:column="5">//</comment>
<macro><name pos:line="1312" pos:column="1">MSOAPI_</name><argument_list pos:line="1312" pos:column="8">(<argument pos:line="1312" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1312" pos:column="16">MsoFDocSumSetBool</name> <argument_list pos:line="1312" pos:column="34">(<argument pos:line="1312" pos:column="35">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1312" pos:column="54">WORD iw</argument>, <argument pos:line="1312" pos:column="63">BOOL f</argument>)</argument_list></macro><empty_stmt pos:line="1312" pos:column="70">;</empty_stmt>


	<comment type="line" pos:line="1315" pos:column="9">//</comment>
	<comment type="line" pos:line="1316" pos:column="9">// Get the count of elements in an array</comment>
	<comment type="line" pos:line="1317" pos:column="9">//</comment>
	<comment type="line" pos:line="1318" pos:column="9">// Parameters:</comment>
	<comment type="line" pos:line="1319" pos:column="9">//</comment>
	<comment type="line" pos:line="1320" pos:column="9">//		lpDSIObj   - pointer to a Document Summary Info object</comment>
	<comment type="line" pos:line="1321" pos:column="9">//		iArray     - specifies the array</comment>
	<comment type="line" pos:line="1322" pos:column="9">//		pcElements - will hold the count of elements, 0 if none</comment>
	<comment type="line" pos:line="1323" pos:column="9">//</comment>
	<comment type="line" pos:line="1324" pos:column="9">// Return value:</comment>
	<comment type="line" pos:line="1325" pos:column="9">//</comment>
	<comment type="line" pos:line="1326" pos:column="9">//		The function returns TRUE on success (even if count is 0)</comment>
	<comment type="line" pos:line="1327" pos:column="9">//		The function returns FALSE on error.</comment>
	<comment type="line" pos:line="1328" pos:column="9">//</comment>
	<comment type="line" pos:line="1329" pos:column="9">// Notes:</comment>
	<comment type="line" pos:line="1330" pos:column="9">//	</comment>
	<comment type="line" pos:line="1331" pos:column="9">// 1. Legal values for iArray are:</comment>
	<comment type="line" pos:line="1332" pos:column="9">//</comment>
	<comment type="line" pos:line="1333" pos:column="9">//		DSI_HLINKS</comment>
	<comment type="line" pos:line="1334" pos:column="9">//</comment>
<macro><name pos:line="1335" pos:column="1">MSOAPI_</name><argument_list pos:line="1335" pos:column="8">(<argument pos:line="1335" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1335" pos:column="15">MsoFDocSumGetArrayElementCount</name><argument_list pos:line="1335" pos:column="45">(<argument pos:line="1335" pos:column="46">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1335" pos:column="65">DWORD iArray</argument>, <argument pos:line="1335" pos:column="79">DWORD *pcElements</argument>)</argument_list></macro><empty_stmt pos:line="1335" pos:column="97">;</empty_stmt>

	<comment type="line" pos:line="1337" pos:column="9">//</comment>
	<comment type="line" pos:line="1338" pos:column="9">// Set the ith element in an array.</comment>
	<comment type="line" pos:line="1339" pos:column="9">//</comment>
	<comment type="line" pos:line="1340" pos:column="9">// Parameters:</comment>
	<comment type="line" pos:line="1341" pos:column="9">//</comment>
	<comment type="line" pos:line="1342" pos:column="9">//		lpDSIObj   - pointer to a Document Summary Info object</comment>
	<comment type="line" pos:line="1343" pos:column="9">//		iArray     - specifies the array</comment>
	<comment type="line" pos:line="1344" pos:column="9">//		iElement   - specifies the element</comment>
	<comment type="line" pos:line="1345" pos:column="9">//		pvData	   - points to the data (array element)</comment>
	<comment type="line" pos:line="1346" pos:column="9">//</comment>
	<comment type="line" pos:line="1347" pos:column="9">// Return value:</comment>
	<comment type="line" pos:line="1348" pos:column="9">//</comment>
	<comment type="line" pos:line="1349" pos:column="9">//		The function returns TRUE on success</comment>
	<comment type="line" pos:line="1350" pos:column="9">//		The function returns FALSE on error.</comment>
	<comment type="line" pos:line="1351" pos:column="9">//</comment>
	<comment type="line" pos:line="1352" pos:column="9">// Notes:</comment>
	<comment type="line" pos:line="1353" pos:column="9">//</comment>
	<comment type="line" pos:line="1354" pos:column="9">// 1. Legal values for iArray are:</comment>
	<comment type="line" pos:line="1355" pos:column="9">//</comment>
	<comment type="line" pos:line="1356" pos:column="9">//		DSI_HLINKS</comment>
	<comment type="line" pos:line="1357" pos:column="9">//</comment>
	<comment type="line" pos:line="1358" pos:column="9">// 2. If iElement == -1, the element will be added to the end of the array.</comment>
	<comment type="line" pos:line="1359" pos:column="9">// 3. iElement is 0-based.</comment>
	<comment type="line" pos:line="1360" pos:column="9">// 4. You can always set an element at position 0 or -1.  This is equivalent</comment>
	<comment type="line" pos:line="1361" pos:column="9">//    to creating the array if it doesn't exist.</comment>
	<comment type="line" pos:line="1362" pos:column="9">// 5. If iElement already exists in the array, the data will be replaced.</comment>
	<comment type="line" pos:line="1363" pos:column="9">// 6. pvData will be typecast to the correct type of array element.</comment>
	<comment type="line" pos:line="1364" pos:column="9">//</comment>
<macro><name pos:line="1365" pos:column="1">MSOAPI_</name><argument_list pos:line="1365" pos:column="8">(<argument pos:line="1365" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1365" pos:column="15">MsoFDocSumSetArrayElement</name><argument_list pos:line="1365" pos:column="40">(<argument pos:line="1365" pos:column="41">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1365" pos:column="60">DWORD iArray</argument>, <argument pos:line="1365" pos:column="74">DWORD iElement</argument>, <argument pos:line="1365" pos:column="90">PVOID pvData</argument>)</argument_list></macro><empty_stmt pos:line="1365" pos:column="103">;</empty_stmt>

	<comment type="line" pos:line="1367" pos:column="9">//</comment>
	<comment type="line" pos:line="1368" pos:column="9">// Get the ith element in an array.</comment>
	<comment type="line" pos:line="1369" pos:column="9">//</comment>
	<comment type="line" pos:line="1370" pos:column="9">// Parameters:</comment>
	<comment type="line" pos:line="1371" pos:column="9">//</comment>
	<comment type="line" pos:line="1372" pos:column="9">//		lpDSIObj   - pointer to a Document Summary Info object</comment>
	<comment type="line" pos:line="1373" pos:column="9">//		iArray     - specifies the array</comment>
	<comment type="line" pos:line="1374" pos:column="9">//		iElement   - specifies the element</comment>
	<comment type="line" pos:line="1375" pos:column="9">//		pvData	   - will point to the data (array element)</comment>
	<comment type="line" pos:line="1376" pos:column="9">//</comment>
	<comment type="line" pos:line="1377" pos:column="9">// Return value:</comment>
	<comment type="line" pos:line="1378" pos:column="9">//</comment>
	<comment type="line" pos:line="1379" pos:column="9">//		The function returns TRUE on success</comment>
	<comment type="line" pos:line="1380" pos:column="9">//		The function returns FALSE on error.</comment>
	<comment type="line" pos:line="1381" pos:column="9">//</comment>
	<comment type="line" pos:line="1382" pos:column="9">// Notes:</comment>
	<comment type="line" pos:line="1383" pos:column="9">//</comment>
	<comment type="line" pos:line="1384" pos:column="9">// 1. Legal values for iArray are:</comment>
	<comment type="line" pos:line="1385" pos:column="9">//</comment>
	<comment type="line" pos:line="1386" pos:column="9">//		DSI_HLINKS</comment>
	<comment type="line" pos:line="1387" pos:column="9">//</comment>
	<comment type="line" pos:line="1388" pos:column="9">// 2. iElement is 0-based.</comment>
	<comment type="line" pos:line="1389" pos:column="9">// 3. pvData can be typecast to the appropriate type of array element.</comment>
	<comment type="line" pos:line="1390" pos:column="9">//    The caller should not free any memory hanging off of pvData.</comment>
	<comment type="line" pos:line="1391" pos:column="9">// 4. It's the caller's resposibility to make sure that pvData points</comment>
	<comment type="line" pos:line="1392" pos:column="9">//    to the correct data structure.</comment>
	<comment type="line" pos:line="1393" pos:column="9">//</comment>
<macro><name pos:line="1394" pos:column="1">MSOAPI_</name><argument_list pos:line="1394" pos:column="8">(<argument pos:line="1394" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1394" pos:column="15">MsoFDocSumGetArrayElement</name><argument_list pos:line="1394" pos:column="40">(<argument pos:line="1394" pos:column="41">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1394" pos:column="60">DWORD iArray</argument>, <argument pos:line="1394" pos:column="74">DWORD iElement</argument>, <argument pos:line="1394" pos:column="90">PVOID pvData</argument>)</argument_list></macro><empty_stmt pos:line="1394" pos:column="103">;</empty_stmt>

	<comment type="line" pos:line="1396" pos:column="9">//</comment>
	<comment type="line" pos:line="1397" pos:column="9">// Delete the ith element from an array</comment>
	<comment type="line" pos:line="1398" pos:column="9">//</comment>
	<comment type="line" pos:line="1399" pos:column="9">// Parameters:</comment>
	<comment type="line" pos:line="1400" pos:column="9">//</comment>
	<comment type="line" pos:line="1401" pos:column="9">//		lpDSIObj   - pointer to a Document Summary Info object</comment>
	<comment type="line" pos:line="1402" pos:column="9">//		iArray     - specifies the array</comment>
	<comment type="line" pos:line="1403" pos:column="9">//		iElement   - specifies the element</comment>
	<comment type="line" pos:line="1404" pos:column="9">//</comment>
	<comment type="line" pos:line="1405" pos:column="9">// Return value:</comment>
	<comment type="line" pos:line="1406" pos:column="9">//</comment>
	<comment type="line" pos:line="1407" pos:column="9">//		The function returns TRUE on success</comment>
	<comment type="line" pos:line="1408" pos:column="9">//		The function returns FALSE on error.</comment>
	<comment type="line" pos:line="1409" pos:column="9">//</comment>
	<comment type="line" pos:line="1410" pos:column="9">// Notes:</comment>
	<comment type="line" pos:line="1411" pos:column="9">//</comment>
	<comment type="line" pos:line="1412" pos:column="9">// 1. Legal values for iArray are:</comment>
	<comment type="line" pos:line="1413" pos:column="9">//</comment>
	<comment type="line" pos:line="1414" pos:column="9">//		DSI_HLINKS</comment>
	<comment type="line" pos:line="1415" pos:column="9">//</comment>
	<comment type="line" pos:line="1416" pos:column="9">// 2. iElement is 0-based.</comment>
	<comment type="line" pos:line="1417" pos:column="9">//</comment>
<macro><name pos:line="1418" pos:column="1">MSOAPI_</name><argument_list pos:line="1418" pos:column="8">(<argument pos:line="1418" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1418" pos:column="15">MsoFDocSumDeleteArrayElement</name><argument_list pos:line="1418" pos:column="43">(<argument pos:line="1418" pos:column="44">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1418" pos:column="63">DWORD iArray</argument>, <argument pos:line="1418" pos:column="77">DWORD iElement</argument>)</argument_list></macro><empty_stmt pos:line="1418" pos:column="92">;</empty_stmt>

	<comment type="line" pos:line="1420" pos:column="9">// </comment>
	<comment type="line" pos:line="1421" pos:column="9">// Delete the entire array</comment>
	<comment type="line" pos:line="1422" pos:column="9">//</comment>
	<comment type="line" pos:line="1423" pos:column="9">// Parameters:</comment>
	<comment type="line" pos:line="1424" pos:column="9">//</comment>
	<comment type="line" pos:line="1425" pos:column="9">//		lpDSIObj   - pointer to a Document Summary Info object</comment>
	<comment type="line" pos:line="1426" pos:column="9">//		iArray     - specifies the array</comment>
	<comment type="line" pos:line="1427" pos:column="9">//</comment>
	<comment type="line" pos:line="1428" pos:column="9">// Return value:</comment>
	<comment type="line" pos:line="1429" pos:column="9">//</comment>
	<comment type="line" pos:line="1430" pos:column="9">//		The function returns TRUE on success</comment>
	<comment type="line" pos:line="1431" pos:column="9">//		The function returns FALSE on error.</comment>
	<comment type="line" pos:line="1432" pos:column="9">//</comment>
	<comment type="line" pos:line="1433" pos:column="9">// Notes:</comment>

	<comment type="line" pos:line="1435" pos:column="9">// 1. Legal values for iArray are:</comment>
	<comment type="line" pos:line="1436" pos:column="9">//</comment>
	<comment type="line" pos:line="1437" pos:column="9">//		DSI_HLINKS</comment>
	<comment type="line" pos:line="1438" pos:column="9">//</comment>
	<comment type="line" pos:line="1439" pos:column="9">// 2. Deleting the last element from the array also deletes the array.</comment>
	<comment type="line" pos:line="1440" pos:column="9">//</comment>
<macro><name pos:line="1441" pos:column="1">MSOAPI_</name><argument_list pos:line="1441" pos:column="8">(<argument pos:line="1441" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1441" pos:column="15">MsoFDocSumDeleteArray</name><argument_list pos:line="1441" pos:column="36">(<argument pos:line="1441" pos:column="37">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1441" pos:column="56">DWORD iArray</argument>)</argument_list></macro><empty_stmt pos:line="1441" pos:column="69">;</empty_stmt>

    <comment type="line" pos:line="1443" pos:column="5">// Set the digital signature property to a given value</comment>
    <comment type="line" pos:line="1444" pos:column="5">//</comment>
    <comment type="line" pos:line="1445" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1446" pos:column="5">//</comment>
    <comment type="line" pos:line="1447" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1448" pos:column="5">//</comment>
    <comment type="line" pos:line="1449" pos:column="5">//   pDigSig - the value </comment>
    <comment type="line" pos:line="1450" pos:column="5">//</comment>
    <comment type="line" pos:line="1451" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1452" pos:column="5">//</comment>
    <comment type="line" pos:line="1453" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="1454" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="1455" pos:column="5">//</comment>
    <comment type="line" pos:line="1456" pos:column="5">// Note: The function will dirty the object on success.</comment>
    <comment type="line" pos:line="1457" pos:column="5">//</comment>
<macro><name pos:line="1458" pos:column="1">MSOAPI_</name><argument_list pos:line="1458" pos:column="8">(<argument pos:line="1458" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1458" pos:column="15">MsoFDocSumSetDigSig</name> <argument_list pos:line="1458" pos:column="35">(<argument pos:line="1458" pos:column="36">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1458" pos:column="55">PDIGSIGBLOB pDigSig</argument>)</argument_list></macro><empty_stmt pos:line="1458" pos:column="75">;</empty_stmt>

    <comment type="line" pos:line="1460" pos:column="5">// Get the digital signature property</comment>
    <comment type="line" pos:line="1461" pos:column="5">//</comment>
    <comment type="line" pos:line="1462" pos:column="5">// Parameters:</comment>
    <comment type="line" pos:line="1463" pos:column="5">//</comment>
    <comment type="line" pos:line="1464" pos:column="5">//   lpDSIObj - pointer to Document Summary Info object</comment>
    <comment type="line" pos:line="1465" pos:column="5">//</comment>
    <comment type="line" pos:line="1466" pos:column="5">//   pDigSig - the value </comment>
    <comment type="line" pos:line="1467" pos:column="5">//</comment>
    <comment type="line" pos:line="1468" pos:column="5">// Return value:</comment>
    <comment type="line" pos:line="1469" pos:column="5">//</comment>
    <comment type="line" pos:line="1470" pos:column="5">//   The function returns TRUE on success.</comment>
    <comment type="line" pos:line="1471" pos:column="5">//   The function returns FALSE on error.</comment>
    <comment type="line" pos:line="1472" pos:column="5">//</comment>
<macro><name pos:line="1473" pos:column="1">MSOAPI_</name><argument_list pos:line="1473" pos:column="8">(<argument pos:line="1473" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1473" pos:column="15">MsoFDocSumGetDigSig</name> <argument_list pos:line="1473" pos:column="35">(<argument pos:line="1473" pos:column="36">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="1473" pos:column="55">PDIGSIGBLOB *ppDigSig</argument>)</argument_list></macro><empty_stmt pos:line="1473" pos:column="77">;</empty_stmt>

<macro><name pos:line="1475" pos:column="1">MSOAPI_</name><argument_list pos:line="1475" pos:column="8">(<argument pos:line="1475" pos:column="9">BPSC</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1475" pos:column="15">MsoBpscBulletProofDsinfo</name><argument_list pos:line="1475" pos:column="39">(<argument><expr><name pos:line="1475" pos:column="40">MSOBPCB</name> <op:operator pos:line="1475" pos:column="48">*</op:operator><name pos:line="1475" pos:column="49">pmsobpcb</name></expr></argument>, <argument><expr><name pos:line="1475" pos:column="59">LPDSIOBJ</name> <op:operator pos:line="1475" pos:column="68">*</op:operator><name pos:line="1475" pos:column="69">ppdsiobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:line="1477" pos:column="1">#<cpp:directive pos:line="1477" pos:column="2">ifdef</cpp:directive> <name pos:line="1477" pos:column="8">__cplusplus</name></cpp:ifdef>
}</block></extern><empty_stmt pos:line="1478" pos:column="2">;</empty_stmt> <comment type="line" pos:line="1478" pos:column="4">// extern "C"</comment>
<cpp:endif pos:line="1479" pos:column="1">#<cpp:directive pos:line="1479" pos:column="2">endif</cpp:directive></cpp:endif>


<comment type="line" format="doxygen" pos:line="1482" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="1483" pos:column="1">//</comment>
<comment type="line" pos:line="1484" pos:column="1">// MS Office User Defined Property Information</comment>
<comment type="line" pos:line="1485" pos:column="1">//</comment>
<comment type="line" pos:line="1486" pos:column="1">// The User Defined Property Information follows the serialized format for</comment>
<comment type="line" pos:line="1487" pos:column="1">// property sets defined in Appendix B ("OLE Property Sets") of</comment>
<comment type="line" pos:line="1488" pos:column="1">// "OLE 2 Programmer's Reference, Volume 1"</comment>
<comment type="line" pos:line="1489" pos:column="1">//</comment>
<comment type="line" pos:line="1490" pos:column="1">// Notes:</comment>
<comment type="line" pos:line="1491" pos:column="1">//  - define OLE_PROPS to build OLE 2 interface objects too.</comment>
<comment type="line" pos:line="1492" pos:column="1">//</comment>
<comment type="line" pos:line="1493" pos:column="1">// The actual data is stored in USERPROP.  The layout of the first</comment>
<comment type="line" pos:line="1494" pos:column="1">// 3 entries must not be changed, since it will be overlayed with</comment>
<comment type="line" pos:line="1495" pos:column="1">// other structures.  All property exchange data structures have</comment>
<comment type="line" pos:line="1496" pos:column="1">// this format.</comment>
<comment type="line" pos:line="1497" pos:column="1">//</comment>
<comment type="line" pos:line="1498" pos:column="1">// The first parameter of all functions must be LPUDOBJ in order for these</comment>
<comment type="line" pos:line="1499" pos:column="1">// functions to work as OLE objects.</comment>
<comment type="line" pos:line="1500" pos:column="1">//</comment>
<comment type="line" pos:line="1501" pos:column="1">// All functions defined here have "UserDef" in them.</comment>
<comment type="line" pos:line="1502" pos:column="1">//</comment>
<comment type="line" pos:line="1503" pos:column="1">// Several macros are used to hide the stuff that changes in this</comment>
<comment type="line" pos:line="1504" pos:column="1">// file when it is used to support OLE 2 objects.</comment>
<comment type="line" pos:line="1505" pos:column="1">// They are:</comment>
<comment type="line" pos:line="1506" pos:column="1">//   UDPVTBLSTRUCT - For OLE, expands to the pointer to the interface Vtbl</comment>
<comment type="line" pos:line="1507" pos:column="1">//              - Otherwise, expands to dummy struct same size as Vtbl</comment>
<comment type="line" pos:line="1508" pos:column="1">//   LPUDOBJ    - For OLE, expands to a pointer to the interface which is</comment>
<comment type="line" pos:line="1509" pos:column="1">//                just the lpVtbl portion of the data, to be overlayed later.</comment>
<comment type="line" pos:line="1510" pos:column="1">//              - Otherwise, expands to a pointer to the whole data</comment>
<comment type="line" pos:line="1511" pos:column="1">//</comment>
<comment type="line" format="doxygen" pos:line="1512" pos:column="1">////////////////////////////////////////////////////////////////////////////////</comment>

  <comment type="line" pos:line="1514" pos:column="3">// Create a placeholder Vtbl for non-OLE objects.</comment>
<cpp:define pos:line="1515" pos:column="1">#<cpp:directive pos:line="1515" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1515" pos:column="9">UDPVTBLSTRUCT</name></cpp:macro> <cpp:value pos:line="1515" pos:column="23">struct _UDPVTBLSTRUCT { void FAR *lpVtbl; } UDPVTBLSTRUCT</cpp:value></cpp:define>

  <comment type="line" pos:line="1517" pos:column="3">// For non-OLE objects, first param is pointer to real data.</comment>
<cpp:define pos:line="1518" pos:column="1">#<cpp:directive pos:line="1518" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1518" pos:column="9">LPUDOBJ</name></cpp:macro> <cpp:value pos:line="1518" pos:column="17">LPUSERPROP</cpp:value></cpp:define>

  <comment type="line" pos:line="1520" pos:column="3">// User-defined property data.  Callers should *never* access this</comment>
  <comment type="line" pos:line="1521" pos:column="3">// data directly, always use the supplied API's.</comment>

<typedef pos:line="1523" pos:column="1">typedef <type><struct pos:line="1523" pos:column="9">struct <name pos:line="1523" pos:column="16">_USERPROP</name> <block pos:line="1523" pos:column="26">{<public type="default" pos:line="1523" pos:column="27">

  <macro><name pos:line="1525" pos:column="3">UDPVTBLSTRUCT</name></macro><empty_stmt pos:line="1525" pos:column="16">;</empty_stmt>                            <comment type="line" pos:line="1525" pos:column="45">// Vtbl goes here for OLE objs,</comment>
					    <comment type="line" pos:line="1526" pos:column="45">// Must be here for overlays to work!</comment>
  <decl_stmt><decl><type><name pos:line="1527" pos:column="3">BOOL</name></type>                <name pos:line="1527" pos:column="23">m_fObjChanged</name></decl>;</decl_stmt>        <comment type="line" pos:line="1527" pos:column="45">// Indicates the object has changed</comment>
  <decl_stmt><decl><type><name pos:line="1528" pos:column="3">LPVOID</name></type>              <name pos:line="1528" pos:column="23">m_lpData</name></decl>;</decl_stmt>             <comment type="line" pos:line="1528" pos:column="45">// Pointer to the real data</comment>

</public>}</block></struct></type> <name pos:line="1530" pos:column="3">USERPROP</name><op:operator pos:line="1530" pos:column="11">,</op:operator> <name pos:line="1530" pos:column="13">FAR</name> <type:modifier pos:line="1530" pos:column="17">*</type:modifier> <name pos:line="1530" pos:column="19">LPUSERPROP</name>;</typedef>


<comment type="line" pos:line="1533" pos:column="1">//</comment>
<comment type="line" pos:line="1534" pos:column="1">// Interface API's for User Property Information.</comment>
<comment type="line" pos:line="1535" pos:column="1">//</comment>
<cpp:ifdef pos:line="1536" pos:column="1">#<cpp:directive pos:line="1536" pos:column="2">ifdef</cpp:directive> <name pos:line="1536" pos:column="8">__cplusplus</name></cpp:ifdef>
<extern pos:line="1537" pos:column="1">extern <lit:literal type="string" pos:line="1537" pos:column="8">"C"</lit:literal> <block pos:line="1537" pos:column="12">{
<cpp:endif pos:line="1538" pos:column="1">#<cpp:directive pos:line="1538" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="1540" pos:column="1">//</comment>
<comment type="line" pos:line="1541" pos:column="1">// Standard I/O routines</comment>
<comment type="line" pos:line="1542" pos:column="1">//</comment>
    <comment type="line" pos:line="1543" pos:column="5">// Indicates if the data has changed, meaning a write is needed.</comment>
<macro><name pos:line="1544" pos:column="1">MSOAPI_</name><argument_list pos:line="1544" pos:column="8">(<argument pos:line="1544" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1544" pos:column="16">MsoFUserDefShouldSave</name> <argument_list pos:line="1544" pos:column="38">(<argument pos:line="1544" pos:column="39">LPUDOBJ lpUDObj</argument>)</argument_list></macro><empty_stmt pos:line="1544" pos:column="55">;</empty_stmt>

<comment type="line" pos:line="1546" pos:column="1">//</comment>
<comment type="line" pos:line="1547" pos:column="1">// Routines to query and modify data.</comment>
<comment type="line" pos:line="1548" pos:column="1">//</comment>
  <comment type="line" pos:line="1549" pos:column="3">//</comment>
  <comment type="line" pos:line="1550" pos:column="3">// How User-defined properties work:</comment>
  <comment type="line" pos:line="1551" pos:column="3">//</comment>
  <comment type="line" pos:line="1552" pos:column="3">// See the OLE Property Exchange spec for full details.</comment>
  <comment type="line" pos:line="1553" pos:column="3">//</comment>
  <comment type="line" pos:line="1554" pos:column="3">// Each User-defined type has a string "Name" and integer Property Id</comment>
  <comment type="line" pos:line="1555" pos:column="3">// value associated with it.  The Property Id's are sequential, but</comment>
  <comment type="line" pos:line="1556" pos:column="3">// are only good for the current object in memory (i.e. you can't count</comment>
  <comment type="line" pos:line="1557" pos:column="3">// on the Property Id value remaining the same between loads of the</comment>
  <comment type="line" pos:line="1558" pos:column="3">// data.  The string will remain the same, if it has not been changed</comment>
  <comment type="line" pos:line="1559" pos:column="3">// or deleted.)</comment>
  <comment type="line" pos:line="1560" pos:column="3">// Currently, the User-defined types can have 5 types for the value:</comment>
  <comment type="line" pos:line="1561" pos:column="3">// String, Date, Integer, float and boolean.  When setting and getting the values, you</comment>
  <comment type="line" pos:line="1562" pos:column="3">// must make sure that the type stored matches what you expect to</comment>
  <comment type="line" pos:line="1563" pos:column="3">// retreive.  For Int's, the LPVOID should be the int itself, not</comment>
  <comment type="line" pos:line="1564" pos:column="3">// a pointer.  In all other cases, the LPVOID should point to a buffer</comment>
  <comment type="line" pos:line="1565" pos:column="3">// of appropriate size for the type.</comment>
  <comment type="line" pos:line="1566" pos:column="3">//</comment>

  <comment type="line" pos:line="1568" pos:column="3">// Masks used for querying property data.  Note that these are</comment>
  <comment type="line" pos:line="1569" pos:column="3">// mutually exclusive.</comment>
<cpp:define pos:line="1570" pos:column="1">#<cpp:directive pos:line="1570" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1570" pos:column="9">UD_STATIC</name></cpp:macro>       <cpp:value pos:line="1570" pos:column="25">0x00</cpp:value></cpp:define>
<cpp:define pos:line="1571" pos:column="1">#<cpp:directive pos:line="1571" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1571" pos:column="9">UD_LINK</name></cpp:macro>         <cpp:value pos:line="1571" pos:column="25">0x01</cpp:value></cpp:define>
<cpp:define pos:line="1572" pos:column="1">#<cpp:directive pos:line="1572" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1572" pos:column="9">UD_IMONIKER</name></cpp:macro>     <cpp:value pos:line="1572" pos:column="25">0x10</cpp:value></cpp:define>

    <comment type="line" pos:line="1574" pos:column="5">// Determine the number of user-defined properties for the object.</comment>
    <comment type="line" pos:line="1575" pos:column="5">// Returns -1 on error</comment>
<macro><name pos:line="1576" pos:column="1">MSOAPI_</name><argument_list pos:line="1576" pos:column="8">(<argument pos:line="1576" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1576" pos:column="16">MsoFCUserDefNumProps</name> <argument_list pos:line="1576" pos:column="37">(<argument pos:line="1576" pos:column="38">LPUDOBJ lpUDObj</argument>, <argument pos:line="1576" pos:column="55">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="1576" pos:column="66">;</empty_stmt>

    <comment type="line" pos:line="1578" pos:column="5">// Determine the size of the Property Value for the given Property string</comment>
    <comment type="line" pos:line="1579" pos:column="5">// Note that for types other that wUDlpsz, this will return the size</comment>
    <comment type="line" pos:line="1580" pos:column="5">// of the structure that holds the data.</comment>
    <comment type="line" pos:line="1581" pos:column="5">// dwMask is used to specify whether the cb is for the static value</comment>
    <comment type="line" pos:line="1582" pos:column="5">//   or for the link or IMoniker name.  For Links &amp; IMonikers,</comment>
    <comment type="line" pos:line="1583" pos:column="5">//   the type is wUDlpsz.</comment>
    <comment type="line" pos:line="1584" pos:column="5">// pcb - will hold the cb</comment>
    <comment type="line" pos:line="1585" pos:column="5">// Returns FALSE on error, TRUE on success</comment>
	<comment type="line" pos:line="1586" pos:column="9">//</comment>
	<comment type="line" pos:line="1587" pos:column="9">// Note that all strings are UNICODE</comment>
	<comment type="line" pos:line="1588" pos:column="9">//</comment>
<macro><name pos:line="1589" pos:column="1">MSOAPI_</name><argument_list pos:line="1589" pos:column="8">(<argument pos:line="1589" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1589" pos:column="15">MsoFCbUserDefPropVal</name>
  <argument_list pos:line="1590" pos:column="3">(<argument pos:line="1590" pos:column="4">LPUDOBJ lpUDObj</argument>,             <comment type="line" pos:line="1590" pos:column="33">// Pointer to object</comment>
   <argument pos:line="1591" pos:column="4">const WCHAR *wz</argument>,                   <comment type="line" pos:line="1591" pos:column="39">// Pointer to string</comment>
   <argument pos:line="1592" pos:column="4">DWORD dwMask</argument>,                <comment type="line" pos:line="1592" pos:column="33">// Mask telling what value to get cb for</comment>
   <argument pos:line="1593" pos:column="4">DWORD *pdw</argument>)</argument_list></macro><empty_stmt pos:line="1593" pos:column="15">;</empty_stmt>                 <comment type="line" pos:line="1593" pos:column="33">// Pointer to dword</comment>

    <comment type="line" pos:line="1595" pos:column="5">// Returns the type of the given Property Value from the string</comment>
    <comment type="line" pos:line="1596" pos:column="5">// Returns wUDInvalid on error</comment>
	<comment type="line" pos:line="1597" pos:column="9">// </comment>
<macro><name pos:line="1598" pos:column="1">MSOAPI_</name><argument_list pos:line="1598" pos:column="8">(<argument pos:line="1598" pos:column="9">UDTYPES</argument>)</argument_list></macro> <macro><name pos:line="1598" pos:column="18">MsoUdtypesUserDefType</name><argument_list pos:line="1598" pos:column="39">(<argument pos:line="1598" pos:column="40">LPUDOBJ lpUDObj</argument>, <argument pos:line="1598" pos:column="57">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="1598" pos:column="73">;</empty_stmt>

    <comment type="line" pos:line="1600" pos:column="5">// This will return the Property Value for the given Property string.</comment>
    <comment type="line" pos:line="1601" pos:column="5">// lpszProp is the property string</comment>
    <comment type="line" pos:line="1602" pos:column="5">// lpv is a buffer to hold the value, of size cbMax.</comment>
    <comment type="line" pos:line="1603" pos:column="5">// pfLink tells if the value is a link,</comment>
    <comment type="line" pos:line="1604" pos:column="5">// pfIMoniker tells if the value is a moniker.</comment>
    <comment type="line" pos:line="1605" pos:column="5">// pfLinkInvalid tells if the link is invalid</comment>
    <comment type="line" pos:line="1606" pos:column="5">// dwMask is used to specify whether the value returned is the</comment>
    <comment type="line" pos:line="1607" pos:column="5">//  static value, link name or IMoniker name.</comment>
	<comment type="line" pos:line="1608" pos:column="9">//</comment>
    <comment type="line" pos:line="1609" pos:column="5">// Function returns NULL on error.</comment>
	<comment type="line" pos:line="1610" pos:column="9">//</comment>
    <comment type="line" pos:line="1611" pos:column="5">// WARNING! Be very careful calling this.  Be sure that the</comment>
    <comment type="line" pos:line="1612" pos:column="5">// buffer and return value match the type for the Property Value!</comment>
	<comment type="line" pos:line="1613" pos:column="9">//</comment>

<macro><name pos:line="1615" pos:column="1">MSOAPI_</name><argument_list pos:line="1615" pos:column="8">(<argument pos:line="1615" pos:column="9">LPVOID</argument>)</argument_list></macro> <macro><name pos:line="1615" pos:column="17">MsoLpvoidUserDefGetPropVal</name>
  <argument_list pos:line="1616" pos:column="3">(<argument pos:line="1616" pos:column="4">LPUDOBJ lpUDObj</argument>,             <comment type="line" pos:line="1616" pos:column="33">// Pointer to object</comment>
   <argument pos:line="1617" pos:column="4">const WCHAR *wzProp</argument>,               <comment type="line" pos:line="1617" pos:column="39">// Property string</comment>
   <argument pos:line="1618" pos:column="4">DWORD cbMax</argument>,                 <comment type="line" pos:line="1618" pos:column="33">// Size of lpv</comment>
   <argument pos:line="1619" pos:column="4">LPVOID lpv</argument>,                  <comment type="line" pos:line="1619" pos:column="33">// Buffer for prop val</comment>
   <argument pos:line="1620" pos:column="4">DWORD dwMask</argument>,                <comment type="line" pos:line="1620" pos:column="33">// Mask for what value is needed</comment>
   <argument pos:line="1621" pos:column="4">BOOL *pfLink</argument>,                <comment type="line" pos:line="1621" pos:column="33">// Indicates a link</comment>
   <argument pos:line="1622" pos:column="4">BOOL *pfIMoniker</argument>,            <comment type="line" pos:line="1622" pos:column="33">// Indicates an IMoniker</comment>
   <argument pos:line="1623" pos:column="4">BOOL *pfLinkInvalid</argument>)</argument_list></macro><empty_stmt pos:line="1623" pos:column="24">;</empty_stmt>        <comment type="line" pos:line="1623" pos:column="33">// Is the link invalid</comment>

    <comment type="line" pos:line="1625" pos:column="5">// Set the value of a given property to a new value.</comment>
    <comment type="line" pos:line="1626" pos:column="5">// Be careful when setting properties that are linked - be sure</comment>
    <comment type="line" pos:line="1627" pos:column="5">// that the type the iterator is set to matches what the link is to.</comment>
    <comment type="line" pos:line="1628" pos:column="5">// If udtype == wUDinvalid, the type of the iterator will not change,</comment>
    <comment type="line" pos:line="1629" pos:column="5">// the value will be assumed to be the current type.</comment>
    <comment type="line" pos:line="1630" pos:column="5">//</comment>
	<comment type="line" pos:line="1631" pos:column="9">// fLinkInvalid : If the link is no longer valid, set this flag to true.</comment>
 	<comment type="line" pos:line="1632" pos:column="9">//                A special icon will displayed in the listview and the last</comment>
	<comment type="line" pos:line="1633" pos:column="9">//                known value and type will be used.  Thus the values passed</comment>
	<comment type="line" pos:line="1634" pos:column="9">//                to this function will be ignored in this case.</comment>
	<comment type="line" pos:line="1635" pos:column="9">//</comment>
	<comment type="line" pos:line="1636" pos:column="9">//                If fLinkInvalid is true, but the iterator is not a link,</comment>
	<comment type="line" pos:line="1637" pos:column="9">//                the function will return FALSE</comment>
    <comment type="line" pos:line="1638" pos:column="5">//</comment>
    <comment type="line" pos:line="1639" pos:column="5">//                If fLinkInvalid is true the value will _not_ be changed.</comment>
	<comment type="line" pos:line="1640" pos:column="9">//</comment>
	<comment type="line" pos:line="1641" pos:column="9">// NOTE: If udtype == wUDDate you can set the value to 0 (not NULL)</comment>
	<comment type="line" pos:line="1642" pos:column="9">//       This will be interpreted as an invalid date and the date will</comment>
	<comment type="line" pos:line="1643" pos:column="9">//              be displayed as the empty string in the list box.</comment>
<macro><name pos:line="1644" pos:column="1">MSOAPI_</name><argument_list pos:line="1644" pos:column="8">( <argument pos:line="1644" pos:column="10">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1644" pos:column="17">MsoFUserDefChangeVal</name>
  <argument_list pos:line="1645" pos:column="3">(<argument pos:line="1645" pos:column="4">LPUDOBJ lpUDObj</argument>,                     <comment type="line" pos:line="1645" pos:column="41">// Pointer to object</comment>
   <argument pos:line="1646" pos:column="4">const WCHAR *wzProp</argument>,                       <comment type="line" pos:line="1646" pos:column="47">// Property string</comment>
   <argument pos:line="1647" pos:column="4">UDTYPES udtype</argument>,                      <comment type="line" pos:line="1647" pos:column="41">// Type of new value</comment>
   <argument pos:line="1648" pos:column="4">LPVOID lpv</argument>,                          <comment type="line" pos:line="1648" pos:column="41">// New value.</comment>
   <argument pos:line="1649" pos:column="4">BOOL fLinkInvalid</argument>)</argument_list></macro><empty_stmt pos:line="1649" pos:column="22">;</empty_stmt>				    <comment type="line" pos:line="1649" pos:column="53">// Is the link still valid?</comment>

    <comment type="line" pos:line="1651" pos:column="5">// Set the string (i.e. the name) for the given Property String (lpszOld) </comment>
    <comment type="line" pos:line="1652" pos:column="5">// to the new string (lpszNew).</comment>
<macro><name pos:line="1653" pos:column="1">MSOAPIX_</name><argument_list pos:line="1653" pos:column="9">(<argument pos:line="1653" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1653" pos:column="16">MsoFUserDefSetPropString</name>
  <argument_list pos:line="1654" pos:column="3">(<argument pos:line="1654" pos:column="4">LPUDOBJ lpUDObj</argument>,             <comment type="line" pos:line="1654" pos:column="33">// Pointer to object</comment>
   <argument pos:line="1655" pos:column="4">const WCHAR *wzOld</argument>,                <comment type="line" pos:line="1655" pos:column="39">// Old prop string</comment>
   <argument pos:line="1656" pos:column="4">const WCHAR *wzNew</argument>)</argument_list></macro><empty_stmt pos:line="1656" pos:column="23">;</empty_stmt>               <comment type="line" pos:line="1656" pos:column="39">// New prop string</comment>

<comment type="line" pos:line="1658" pos:column="1">//</comment>
<comment type="line" pos:line="1659" pos:column="1">// Routines to create and remove data from the Property Set.</comment>
<comment type="line" pos:line="1660" pos:column="1">//</comment>

    <comment type="line" pos:line="1662" pos:column="5">// This will add a new Property to the set, with the given</comment>
    <comment type="line" pos:line="1663" pos:column="5">// Property string.  This function can also be used to modify</comment>
    <comment type="line" pos:line="1664" pos:column="5">// an existing property.</comment>
    <comment type="line" pos:line="1665" pos:column="5">//</comment>
    <comment type="line" pos:line="1666" pos:column="5">// lpUDObj      - pointer to the UD properties</comment>
    <comment type="line" pos:line="1667" pos:column="5">// wzPropName   - name of property to be added/modified</comment>
    <comment type="line" pos:line="1668" pos:column="5">// lpvVal       - value of the property</comment>
    <comment type="line" pos:line="1669" pos:column="5">// udtype       - value type</comment>
    <comment type="line" pos:line="1670" pos:column="5">// wzLinkMonik  - name of the link/moniker</comment>
    <comment type="line" pos:line="1671" pos:column="5">// fLink        - true if the property is a link</comment>
    <comment type="line" pos:line="1672" pos:column="5">// fIMoniker    - true if the property is an imoniker</comment>
    <comment type="line" pos:line="1673" pos:column="5">// fHidden      - true if the property is hidden</comment>
    <comment type="line" pos:line="1674" pos:column="5">//</comment>
    <comment type="line" pos:line="1675" pos:column="5">// NOTE: fLink and fIMoniker cannot be true at the same time.  If</comment>
    <comment type="line" pos:line="1676" pos:column="5">//       so, the property will not be added and the function will</comment>
    <comment type="line" pos:line="1677" pos:column="5">//       return FALSE.</comment>
    <comment type="line" pos:line="1678" pos:column="5">//</comment>
    <comment type="line" pos:line="1679" pos:column="5">//</comment>
    <comment type="line" pos:line="1680" pos:column="5">// NOTE: If udtype == wUDbool, lpv must point to a DWORD, but the</comment>
    <comment type="line" pos:line="1681" pos:column="5">//       HIWORD must be 0.</comment>
    <comment type="line" pos:line="1682" pos:column="5">//</comment>
    <comment type="line" pos:line="1683" pos:column="5">// WARNING: Be sure that the type matches what the lpv really is!</comment>
    <comment type="line" pos:line="1684" pos:column="5">//</comment>
    <comment type="line" pos:line="1685" pos:column="5">// The caller is responsible for freeing any memory</comment>
    <comment type="line" pos:line="1686" pos:column="5">// associated with a property value after it is added to the</comment>
    <comment type="line" pos:line="1687" pos:column="5">// User-defined Property object.</comment>
    <comment type="line" pos:line="1688" pos:column="5">//</comment>
	<comment type="line" pos:line="1689" pos:column="9">// NOTE: If udtype == wUDDate you can set the value to 0 (not NULL)</comment>
	<comment type="line" pos:line="1690" pos:column="9">//       This will be interpreted as an invalid date and the date will</comment>
	<comment type="line" pos:line="1691" pos:column="9">//              be displayed as the empty string in the list box.</comment>
    <comment type="line" pos:line="1692" pos:column="5">//</comment>
    <comment type="line" pos:line="1693" pos:column="5">// The function returns TRUE if the property was succesfully added,</comment>
    <comment type="line" pos:line="1694" pos:column="5">// FALSE otherwise.</comment>
    <comment type="line" pos:line="1695" pos:column="5">//</comment>
<macro><name pos:line="1696" pos:column="1">MSOAPI_</name><argument_list pos:line="1696" pos:column="8">(<argument pos:line="1696" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1696" pos:column="15">MsoFUserDefAddProp</name>
  <argument_list pos:line="1697" pos:column="3">(<argument pos:line="1697" pos:column="4">LPUDOBJ lpUDObj</argument>,             <comment type="line" pos:line="1697" pos:column="33">// Pointer to object</comment>
   <argument pos:line="1698" pos:column="4">const WCHAR *wzPropName</argument>,           <comment type="line" pos:line="1698" pos:column="39">// Property string</comment>
   <argument pos:line="1699" pos:column="4">LPVOID lpv</argument>,                  <comment type="line" pos:line="1699" pos:column="33">// Property value</comment>
   <argument pos:line="1700" pos:column="4">UDTYPES udtype</argument>,              <comment type="line" pos:line="1700" pos:column="33">// Property type</comment>
   <argument pos:line="1701" pos:column="4">const WCHAR *wzLinkMonik</argument>,          <comment type="line" pos:line="1701" pos:column="39">// The link/imoniker name</comment>
   <argument pos:line="1702" pos:column="4">BOOL fLink</argument>,                  <comment type="line" pos:line="1702" pos:column="33">// Indicates the property is a link</comment>
   <argument pos:line="1703" pos:column="4">BOOL fHidden</argument>,                <comment type="line" pos:line="1703" pos:column="33">// Indicates the property is hidden</comment>
   <argument pos:line="1704" pos:column="4">BOOL fIMoniker</argument>)</argument_list></macro><empty_stmt pos:line="1704" pos:column="19">;</empty_stmt>             <comment type="line" pos:line="1704" pos:column="33">// Indicates the property is a moniker.</comment>

    <comment type="line" pos:line="1706" pos:column="5">// This will delete a Property from the set given a Property string.</comment>
<macro><name pos:line="1707" pos:column="1">MSOAPI_</name><argument_list pos:line="1707" pos:column="8">(<argument pos:line="1707" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1707" pos:column="16">MsoFUserDefDeleteProp</name> <argument_list pos:line="1707" pos:column="38">(<argument pos:line="1707" pos:column="39">LPUDOBJ lpUDObj</argument>, <argument pos:line="1707" pos:column="56">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="1707" pos:column="72">;</empty_stmt>

<comment type="line" pos:line="1709" pos:column="1">//</comment>
<comment type="line" pos:line="1710" pos:column="1">// Routines to iterate through the User-defined properties</comment>
<comment type="line" pos:line="1711" pos:column="1">//</comment>
<comment type="line" pos:line="1712" pos:column="1">// Notes: Adding and deleting elements invalidates the iterator.</comment>
<comment type="line" pos:line="1713" pos:column="1">//</comment>
    <comment type="line" pos:line="1714" pos:column="5">// An iterator for User-defined Properties</comment>
  <typedef pos:line="1715" pos:column="3">typedef <type pos:line="1715" pos:column="11">struct <name pos:line="1715" pos:column="18">_UDITER</name> <name pos:line="1715" pos:column="26">FAR</name> <type:modifier pos:line="1715" pos:column="30">*</type:modifier></type> <name pos:line="1715" pos:column="32">LPUDITER</name>;</typedef>

    <comment type="line" pos:line="1717" pos:column="5">// Create a User-defined Properties iterator</comment>
<macro><name pos:line="1718" pos:column="1">MSOAPI_</name><argument_list pos:line="1718" pos:column="8">(<argument pos:line="1718" pos:column="9">LPUDITER</argument> )</argument_list></macro> <macro><name pos:line="1718" pos:column="20">MsoLpudiUserDefCreateIterator</name> <argument_list pos:line="1718" pos:column="50">(<argument pos:line="1718" pos:column="51">LPUDOBJ lpUDObj</argument>)</argument_list></macro><empty_stmt pos:line="1718" pos:column="67">;</empty_stmt>

    <comment type="line" pos:line="1720" pos:column="5">// Destroy a User-defined Properties iterator</comment>
<macro><name pos:line="1721" pos:column="1">MSOAPI_</name><argument_list pos:line="1721" pos:column="8">(<argument pos:line="1721" pos:column="9">BOOL</argument> )</argument_list></macro> <expr_stmt><expr><call><name pos:line="1721" pos:column="16">MsoFUserDefDestroyIterator</name> <argument_list pos:line="1721" pos:column="43">(<argument><expr><name pos:line="1721" pos:column="44">LPUDITER</name> <op:operator pos:line="1721" pos:column="53">*</op:operator><name pos:line="1721" pos:column="54">lplpUDIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="1723" pos:column="5">// Determine if an iterator is still valid</comment>
<macro><name pos:line="1724" pos:column="1">MSOAPI_</name><argument_list pos:line="1724" pos:column="8">(<argument pos:line="1724" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1724" pos:column="16">MsoFUserDefIteratorValid</name> <argument_list pos:line="1724" pos:column="41">(<argument pos:line="1724" pos:column="42">LPUDITER lpUDIter</argument>)</argument_list></macro><empty_stmt pos:line="1724" pos:column="60">;</empty_stmt>

    <comment type="line" pos:line="1726" pos:column="5">// Iterate to the next element</comment>
	 <comment type="line" pos:line="1727" pos:column="10">// Returns TRUE if we could get to the next element, FALSE otherwise.</comment>
<macro><name pos:line="1728" pos:column="1">MSOAPI_</name><argument_list pos:line="1728" pos:column="8">(<argument pos:line="1728" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1728" pos:column="16">MsoFUserDefIteratorNext</name> <argument_list pos:line="1728" pos:column="40">(<argument pos:line="1728" pos:column="41">LPUDITER lpUDIter</argument>)</argument_list></macro><empty_stmt pos:line="1728" pos:column="59">;</empty_stmt>

    <comment type="line" pos:line="1730" pos:column="5">// Returns true if the iterator is a link, false otherwise</comment>
<macro><name pos:line="1731" pos:column="1">MSOAPI_</name><argument_list pos:line="1731" pos:column="8">(<argument pos:line="1731" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1731" pos:column="15">MsoFUserDefIteratorIsLink</name> <argument_list pos:line="1731" pos:column="41">(<argument pos:line="1731" pos:column="42">LPUDITER lpUDIter</argument>)</argument_list></macro><empty_stmt pos:line="1731" pos:column="60">;</empty_stmt>

    <comment type="line" pos:line="1733" pos:column="5">// Returns true if the iterator is an invalid link, returns false if the</comment>
    <comment type="line" pos:line="1734" pos:column="5">// iterator is not a link or if the iterator is a valid link</comment>
<macro><name pos:line="1735" pos:column="1">MSOAPI_</name><argument_list pos:line="1735" pos:column="8">(<argument pos:line="1735" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1735" pos:column="15">MsoFUserDefIteratorIsLinkInvalid</name> <argument_list pos:line="1735" pos:column="48">(<argument pos:line="1735" pos:column="49">LPUDITER lpUDIter</argument>)</argument_list></macro><empty_stmt pos:line="1735" pos:column="67">;</empty_stmt>

    <comment type="line" pos:line="1737" pos:column="5">// Determine the size of the Property Value for the given iterator</comment>
    <comment type="line" pos:line="1738" pos:column="5">// Note that for types other that UDlpsz, this will return the size</comment>
    <comment type="line" pos:line="1739" pos:column="5">// of the structure that holds the data.</comment>
    <comment type="line" pos:line="1740" pos:column="5">// dwMask is used to specify whether the cb is for the static value</comment>
    <comment type="line" pos:line="1741" pos:column="5">//   or for the link or IMoniker name.  For Links &amp; IMonikers,</comment>
    <comment type="line" pos:line="1742" pos:column="5">//   the type is wUDlpsz.</comment>
    <comment type="line" pos:line="1743" pos:column="5">// Returns 0 on error</comment>
<macro><name pos:line="1744" pos:column="1">MSOAPI_</name><argument_list pos:line="1744" pos:column="8">(<argument pos:line="1744" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1744" pos:column="16">MsoFCbUserDefIteratorVal</name> <argument_list pos:line="1744" pos:column="41">(<argument pos:line="1744" pos:column="42">LPUDITER lpUDIter</argument>, <argument pos:line="1744" pos:column="61">DWORD dwMask</argument>, <argument pos:line="1744" pos:column="75">DWORD *pcb</argument>)</argument_list></macro><empty_stmt pos:line="1744" pos:column="86">;</empty_stmt>

    <comment type="line" pos:line="1746" pos:column="5">// Returns the type of the given Property Value from the iterator</comment>
    <comment type="line" pos:line="1747" pos:column="5">// Returns wUDInvalid on error</comment>
<macro><name pos:line="1748" pos:column="1">MSOAPI_</name><argument_list pos:line="1748" pos:column="8">(<argument pos:line="1748" pos:column="9">UDTYPES</argument> )</argument_list></macro> <macro><name pos:line="1748" pos:column="19">MsoUdtypesUserDefIteratorType</name> <argument_list pos:line="1748" pos:column="49">(<argument pos:line="1748" pos:column="50">LPUDITER lpUDIter</argument>)</argument_list></macro><empty_stmt pos:line="1748" pos:column="68">;</empty_stmt>

    <comment type="line" pos:line="1750" pos:column="5">// This will return the Property Value for the given iterator</comment>
    <comment type="line" pos:line="1751" pos:column="5">// lpv is a buffer to hold the value, of size cbMax.</comment>
    <comment type="line" pos:line="1752" pos:column="5">// dwMask is used to specify whether the value returned is the</comment>
    <comment type="line" pos:line="1753" pos:column="5">//  static value, link name or IMoniker name.</comment>
    <comment type="line" pos:line="1754" pos:column="5">// pfLink tells if the value is a link,</comment>
    <comment type="line" pos:line="1755" pos:column="5">// pfIMoniker tells if the value is a moniker.</comment>
	 <comment type="line" pos:line="1756" pos:column="10">// pfLinkInvalid tells if the link is invalid.</comment>
    <comment type="line" pos:line="1757" pos:column="5">// Function returns NULL on error.</comment>
    <comment type="line" pos:line="1758" pos:column="5">// WARNING! Be very careful calling this.  Be sure that the</comment>
    <comment type="line" pos:line="1759" pos:column="5">// buffer and return value match the type for the Property Value!</comment>
	<comment type="line" pos:line="1760" pos:column="9">// </comment>
	<comment type="line" pos:line="1761" pos:column="9">// Note that strings are UNICODE</comment>
	<comment type="line" pos:line="1762" pos:column="9">//</comment>
<macro><name pos:line="1763" pos:column="1">MSOAPI_</name><argument_list pos:line="1763" pos:column="8">(<argument pos:line="1763" pos:column="9">LPVOID</argument> )</argument_list></macro> <macro><name pos:line="1763" pos:column="18">MsoLpvoidUserDefGetIteratorVal</name> <argument_list pos:line="1763" pos:column="49">(<argument pos:line="1763" pos:column="50">LPUDITER lpUDIter</argument>,
						<argument pos:line="1764" pos:column="49">DWORD cbMax</argument>,
						<argument pos:line="1765" pos:column="49">LPVOID lpv</argument>,
						<argument pos:line="1766" pos:column="49">DWORD dwMask</argument>,
						<argument pos:line="1767" pos:column="49">BOOL *pfLink</argument>,
						<argument pos:line="1768" pos:column="49">BOOL *pfIMoniker</argument>,
						<argument pos:line="1769" pos:column="49">BOOL *pfLinkInvalid</argument>)</argument_list></macro><empty_stmt pos:line="1769" pos:column="69">;</empty_stmt>

    <comment type="line" pos:line="1771" pos:column="5">// Set the value of the iterator item to a new value.</comment>
    <comment type="line" pos:line="1772" pos:column="5">// Be careful when setting properties that are linked - be sure</comment>
    <comment type="line" pos:line="1773" pos:column="5">// that the type the iterator is set to matches what the link is to.</comment>
    <comment type="line" pos:line="1774" pos:column="5">// If udtype == wUDinvalid, the type of the iterator will not change,</comment>
    <comment type="line" pos:line="1775" pos:column="5">// the value will be assumed to be the current type.</comment>
    <comment type="line" pos:line="1776" pos:column="5">//</comment>
	<comment type="line" pos:line="1777" pos:column="9">// fLinkInvalid : If the link is no longer valid, set this flag to true.</comment>
	<comment type="line" pos:line="1778" pos:column="9">//                A special icon will displayed in the listview and the last</comment>
	<comment type="line" pos:line="1779" pos:column="9">//                known value and type will be used.  Thus the values passed</comment>
	<comment type="line" pos:line="1780" pos:column="9">//                to this function will be ignored in this case.</comment>
	<comment type="line" pos:line="1781" pos:column="9">//</comment>
	<comment type="line" pos:line="1782" pos:column="9">//                If fLinkInvalid is true, but the iterator is not a link,</comment>
	<comment type="line" pos:line="1783" pos:column="9">//                the function will return FALSE</comment>
    <comment type="line" pos:line="1784" pos:column="5">//</comment>
    <comment type="line" pos:line="1785" pos:column="5">//                If fLinkInvalid is true the value will _not_ be changed.</comment>
    <comment type="line" pos:line="1786" pos:column="5">//</comment>
    <comment type="line" pos:line="1787" pos:column="5">//                If fLinkInvalid is false, the value _will_ be changed.</comment>
	<comment type="line" pos:line="1788" pos:column="9">//</comment>
	<comment type="line" pos:line="1789" pos:column="9">// NOTE: If udtype == wUDDate you can set the value to 0 (not NULL)</comment>
	<comment type="line" pos:line="1790" pos:column="9">//       This will be interpreted as an invalid date and the date will</comment>
	<comment type="line" pos:line="1791" pos:column="9">//              be displayed as the empty string in the list box.</comment>

<macro><name pos:line="1793" pos:column="1">MSOAPI_</name><argument_list pos:line="1793" pos:column="8">(<argument pos:line="1793" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1793" pos:column="16">MsoFUserDefIteratorChangeVal</name> <argument_list pos:line="1793" pos:column="45">(<argument pos:line="1793" pos:column="46">LPUDOBJ lpUDObj</argument>,
						   <argument pos:line="1794" pos:column="52">LPUDITER lpUDIter</argument>,
						   <argument pos:line="1795" pos:column="52">UDTYPES udtype</argument>,
						   <argument pos:line="1796" pos:column="52">LPVOID lpv</argument>,
						   <argument pos:line="1797" pos:column="52">BOOL fLinkInvalid</argument>)</argument_list></macro><empty_stmt pos:line="1797" pos:column="70">;</empty_stmt>

    <comment type="line" pos:line="1799" pos:column="5">// This will return the size of the Property string for the property</comment>
<macro><name pos:line="1800" pos:column="1">MSOAPI_</name><argument_list pos:line="1800" pos:column="8">(<argument pos:line="1800" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1800" pos:column="16">MsoFCbUserDefIteratorName</name> <argument_list pos:line="1800" pos:column="42">(<argument pos:line="1800" pos:column="43">LPUDITER lpUDIter</argument>, <argument pos:line="1800" pos:column="62">DWORD *pcb</argument>)</argument_list></macro><empty_stmt pos:line="1800" pos:column="73">;</empty_stmt>

    <comment type="line" pos:line="1802" pos:column="5">// This will return the Property String (name) for the property</comment>
<macro><name pos:line="1803" pos:column="1">MSOAPI_</name><argument_list pos:line="1803" pos:column="8">(<argument pos:line="1803" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1803" pos:column="15">MsoFUserDefIteratorName</name>
  <argument_list pos:line="1804" pos:column="3">(<argument pos:line="1804" pos:column="4">LPUDITER lpUDIter</argument>,                   <comment type="line" pos:line="1804" pos:column="41">// Pointer to iterator</comment>
   <argument pos:line="1805" pos:column="4">DWORD cbMax</argument>,                         <comment type="line" pos:line="1805" pos:column="41">// Max size of lpsz</comment>
   <argument pos:line="1806" pos:column="4">WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="1806" pos:column="14">;</empty_stmt>                          <comment type="line" pos:line="1806" pos:column="41">// Buffer to copy into</comment>

    <comment type="line" pos:line="1808" pos:column="5">// Set the string (i.e. property name) for the given Property String (lpszOld) </comment>
    <comment type="line" pos:line="1809" pos:column="5">// to the new string (lpszNew).</comment>
<macro><name pos:line="1810" pos:column="1">MSOAPIX_</name><argument_list pos:line="1810" pos:column="9">( <argument pos:line="1810" pos:column="11">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1810" pos:column="18">MsoFUserDefIteratorSetPropString</name>
  <argument_list pos:line="1811" pos:column="3">(<argument pos:line="1811" pos:column="4">LPUDOBJ lpUDObj</argument>,                     <comment type="line" pos:line="1811" pos:column="41">// Pointer to object</comment>
   <argument pos:line="1812" pos:column="4">LPUDITER lpUDIter</argument>,                   <comment type="line" pos:line="1812" pos:column="41">// Pointer to iterator</comment>
   <argument pos:line="1813" pos:column="4">const WCHAR *wzNew</argument>)</argument_list></macro><empty_stmt pos:line="1813" pos:column="23">;</empty_stmt>                  <comment type="line" pos:line="1813" pos:column="42">// Pointer to new name</comment>

<comment type="line" pos:line="1815" pos:column="1">//</comment>
<comment type="line" pos:line="1816" pos:column="1">// Misc. utility routines</comment>
<comment type="line" pos:line="1817" pos:column="1">//</comment>

  <comment type="line" pos:line="1819" pos:column="3">// Routines dealing with hidden Properties.</comment>

    <comment type="line" pos:line="1821" pos:column="5">// Determine if a Property string is hidden.</comment>
<macro><name pos:line="1822" pos:column="1">MSOAPI_</name><argument_list pos:line="1822" pos:column="8">(<argument pos:line="1822" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1822" pos:column="15">MsoFUserDefIsHidden</name>
  <argument_list pos:line="1823" pos:column="3">(<argument pos:line="1823" pos:column="4">LPUDOBJ lpUDObj</argument>,             <comment type="line" pos:line="1823" pos:column="33">// Pointer to object</comment>
   <argument pos:line="1824" pos:column="4">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="1824" pos:column="20">;</empty_stmt>                  <comment type="line" pos:line="1824" pos:column="39">// Property string</comment>

    <comment type="line" pos:line="1826" pos:column="5">// Make a property visible based on the Property string</comment>
<macro><name pos:line="1827" pos:column="1">MSOAPIX_</name><argument_list pos:line="1827" pos:column="9">(<argument pos:line="1827" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1827" pos:column="16">MsoFUserDefMakeVisible</name>
  <argument_list pos:line="1828" pos:column="3">(<argument pos:line="1828" pos:column="4">LPUDOBJ lpUDObj</argument>,             <comment type="line" pos:line="1828" pos:column="33">// Pointer to object</comment>
   <argument pos:line="1829" pos:column="4">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="1829" pos:column="20">;</empty_stmt>                  <comment type="line" pos:line="1829" pos:column="39">// String to show.</comment>

    <comment type="line" pos:line="1831" pos:column="5">// Hide a Property based on the Property string.</comment>
<macro><name pos:line="1832" pos:column="1">MSOAPIX_</name><argument_list pos:line="1832" pos:column="9">(<argument pos:line="1832" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1832" pos:column="16">MsoFUserDefMakeHidden</name>
  <argument_list pos:line="1833" pos:column="3">(<argument pos:line="1833" pos:column="4">LPUDOBJ lpUDObj</argument>,             <comment type="line" pos:line="1833" pos:column="33">// Pointer to object</comment>
   <argument pos:line="1834" pos:column="4">const WCHAR *wz</argument>)</argument_list></macro><empty_stmt pos:line="1834" pos:column="20">;</empty_stmt>                  <comment type="line" pos:line="1834" pos:column="39">// String to hide</comment>

<macro><name pos:line="1836" pos:column="1">MSOAPI_</name><argument_list pos:line="1836" pos:column="8">(<argument pos:line="1836" pos:column="9">BPSC</argument>)</argument_list></macro> <expr_stmt><expr><call><name pos:line="1836" pos:column="15">MsoBpscBulletProofUdinfo</name>
  <argument_list pos:line="1837" pos:column="3">(<argument><expr><name pos:line="1837" pos:column="4">MSOBPCB</name> <op:operator pos:line="1837" pos:column="12">*</op:operator><name pos:line="1837" pos:column="13">pmsobpcb</name></expr></argument>,
  <argument><expr><name pos:line="1838" pos:column="3">LPUDOBJ</name> <op:operator pos:line="1838" pos:column="11">*</op:operator><name pos:line="1838" pos:column="12">ppudobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:line="1840" pos:column="1">#<cpp:directive pos:line="1840" pos:column="2">ifdef</cpp:directive> <name pos:line="1840" pos:column="8">__cplusplus</name></cpp:ifdef>
}</block></extern><empty_stmt pos:line="1841" pos:column="2">;</empty_stmt> <comment type="line" pos:line="1841" pos:column="4">// extern "C"</comment>
<cpp:endif pos:line="1842" pos:column="1">#<cpp:directive pos:line="1842" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="1844" pos:column="1">#<cpp:directive pos:line="1844" pos:column="2">ifdef</cpp:directive> <name pos:line="1844" pos:column="8">__cplusplus</name></cpp:ifdef>
<extern pos:line="1845" pos:column="1">extern <lit:literal type="string" pos:line="1845" pos:column="8">"C"</lit:literal> <block pos:line="1845" pos:column="12">{
<cpp:endif pos:line="1846" pos:column="1">#<cpp:directive pos:line="1846" pos:column="2">endif</cpp:directive></cpp:endif>

  <comment type="line" pos:line="1848" pos:column="3">// Commands for DWQUERYLD</comment>
<cpp:define pos:line="1849" pos:column="1">#<cpp:directive pos:line="1849" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1849" pos:column="9">QLD_CLINKS</name></cpp:macro>      <cpp:value pos:line="1849" pos:column="25">1</cpp:value></cpp:define>  <comment type="block" pos:line="1849" pos:column="28">/* Return the number of links */</comment>
<cpp:define pos:line="1850" pos:column="1">#<cpp:directive pos:line="1850" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1850" pos:column="9">QLD_LINKNAME</name></cpp:macro>    <cpp:value pos:line="1850" pos:column="25">2</cpp:value></cpp:define>  <comment type="block" pos:line="1850" pos:column="28">/* Return a pointer to the string for index */</comment>
<cpp:define pos:line="1851" pos:column="1">#<cpp:directive pos:line="1851" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1851" pos:column="9">QLD_LINKTYPE</name></cpp:macro>    <cpp:value pos:line="1851" pos:column="25">3</cpp:value></cpp:define>  <comment type="block" pos:line="1851" pos:column="28">/* Returns the type of the value of the index */</comment>
<cpp:define pos:line="1852" pos:column="1">#<cpp:directive pos:line="1852" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1852" pos:column="9">QLD_LINKVAL</name></cpp:macro>     <cpp:value pos:line="1852" pos:column="25">4</cpp:value></cpp:define>  <comment type="block" pos:line="1852" pos:column="28">/* Return value for the index, use same
						      rules as for LPVOIDs in UserDef functions */</comment>

  <comment type="line" pos:line="1855" pos:column="3">// This functions should respond to the above commands by returning the</comment>
  <comment type="line" pos:line="1856" pos:column="3">// appropriate value.  For commands that require an index, the</comment>
  <comment type="line" pos:line="1857" pos:column="3">// wzName parameter will be the Name of the link item previously</comment>
  <comment type="line" pos:line="1858" pos:column="3">// retrieved from the index, if it is not NULL.</comment>
  <comment type="line" pos:line="1859" pos:column="3">// lplpvBuf is the buffer supplied by "us" (the dll) to copy the</comment>
  <comment type="line" pos:line="1860" pos:column="3">// value to.  Use the function LpvOfficeCopyValToBuffer() to </comment>
  <comment type="line" pos:line="1861" pos:column="3">// copy the data.  This parameter will be NULL for QLD_CLINKS and</comment>
  <comment type="line" pos:line="1862" pos:column="3">// QLD_VALTYPE</comment>
<typedef pos:line="1863" pos:column="1">typedef <function_decl><type><name pos:line="1863" pos:column="9">DWORD_PTR</name></type> (<name pos:line="1863" pos:column="20">OFC_CALLBACK</name> <type:modifier pos:line="1863" pos:column="33">*</type:modifier><name pos:line="1863" pos:column="34">DWQUERYLD</name>)<parameter_list pos:line="1863" pos:column="44">(<param><decl><type><name pos:line="1863" pos:column="45">DWORD</name></type> <name pos:line="1863" pos:column="51">dwCommand</name></decl></param>, <param><decl><type><name pos:line="1863" pos:column="62">DWORD_PTR</name></type> <name pos:line="1863" pos:column="72">dwi</name></decl></param>, <param><decl><type><name pos:line="1863" pos:column="77">LPVOID</name> <type:modifier pos:line="1863" pos:column="84">*</type:modifier></type><name pos:line="1863" pos:column="85">lplpvBuf</name></decl></param>, <param><decl><type><name pos:line="1863" pos:column="95">WCHAR</name> <type:modifier pos:line="1863" pos:column="101">*</type:modifier></type><name pos:line="1863" pos:column="102">wzName</name></decl></param>)</parameter_list>;</function_decl></typedef>


    <comment type="line" pos:line="1866" pos:column="5">// Copies the given data to the given buffer.  Pointer to the</comment>
    <comment type="line" pos:line="1867" pos:column="5">// buffer is returned.</comment>
    <comment type="line" pos:line="1868" pos:column="5">// lpvVal - Value to copy into buffer</comment>
    <comment type="line" pos:line="1869" pos:column="5">// udtype - Type for the value</comment>
    <comment type="line" pos:line="1870" pos:column="5">// lplpvBuf - Buffer to copy into</comment>
	<comment type="line" pos:line="1871" pos:column="9">//</comment>
<macro><name pos:line="1872" pos:column="1">MSOAPI_</name><argument_list pos:line="1872" pos:column="8">(<argument pos:line="1872" pos:column="9">LPVOID</argument> )</argument_list></macro> <macro><name pos:line="1872" pos:column="18">MsoLpvOfficeCopyValToBuffer</name> <argument_list pos:line="1872" pos:column="46">(<argument pos:line="1872" pos:column="47">LPVOID lpvVal</argument>,
				 							  <argument pos:line="1873" pos:column="91">UDTYPES udtype</argument>,
						    				  <argument pos:line="1874" pos:column="83">LPVOID *lplpvBuf</argument>)</argument_list></macro><empty_stmt pos:line="1874" pos:column="100">;</empty_stmt>

  <comment type="line" pos:line="1876" pos:column="3">// Masks for different options</comment>
<cpp:define pos:line="1877" pos:column="1">#<cpp:directive pos:line="1877" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1877" pos:column="9">OSPD_ALLOWLINKS</name></cpp:macro>         <cpp:value pos:line="1877" pos:column="33">0x01</cpp:value></cpp:define>   <comment type="line" pos:line="1877" pos:column="40">// The Custom dialog will allow fields to be linked if this is set.</comment>
<cpp:define pos:line="1878" pos:column="1">#<cpp:directive pos:line="1878" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1878" pos:column="9">OSPD_NOSAVEPREVIEW</name></cpp:macro>      <cpp:value pos:line="1878" pos:column="33">0x02</cpp:value></cpp:define>   <comment type="line" pos:line="1878" pos:column="40">// Don't show the Save Preview Picture checkbox</comment>
<cpp:define pos:line="1879" pos:column="1">#<cpp:directive pos:line="1879" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1879" pos:column="9">OSPD_SAVEPREVIEW_ON</name></cpp:macro>     <cpp:value pos:line="1879" pos:column="33">0x04</cpp:value></cpp:define>   <comment type="line" pos:line="1879" pos:column="40">// Save Preview Picture should be on by default</comment>
<cpp:define pos:line="1880" pos:column="1">#<cpp:directive pos:line="1880" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1880" pos:column="9">OSPD_CAPTIONFORFILENAME</name></cpp:macro> <cpp:value pos:line="1880" pos:column="33">0x08</cpp:value></cpp:define>   <comment type="line" pos:line="1880" pos:column="40">// Display the caption as the filename too.</comment>
<cpp:define pos:line="1881" pos:column="1">#<cpp:directive pos:line="1881" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1881" pos:column="9">OSPD_NOLASTACCESSED</name></cpp:macro>     <cpp:value pos:line="1881" pos:column="33">0x10</cpp:value></cpp:define>   <comment type="line" pos:line="1881" pos:column="40">// Don't display the Last Accessed field on the Statistics tab.</comment>
<cpp:define pos:line="1882" pos:column="1">#<cpp:directive pos:line="1882" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1882" pos:column="9">OSPD_NOLASTPRINT</name></cpp:macro>        <cpp:value pos:line="1882" pos:column="33">0x20</cpp:value></cpp:define>   <comment type="line" pos:line="1882" pos:column="40">// Don't display the Last Print field on the Statistics tab.</comment>
<cpp:define pos:line="1883" pos:column="1">#<cpp:directive pos:line="1883" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1883" pos:column="9">OSPD_READONLY</name></cpp:macro>           <cpp:value pos:line="1883" pos:column="33">0x40</cpp:value></cpp:define>   <comment type="line" pos:line="1883" pos:column="40">// Display the dialog in read-only mode</comment>

    <comment type="line" pos:line="1885" pos:column="5">// LPUDObj is a pointer to a pointer to a user-defined property object.</comment>
    <comment type="line" pos:line="1886" pos:column="5">// If *lplpUDObj == NULL, an object will be created by the dialog as needed.</comment>
    <comment type="line" pos:line="1887" pos:column="5">// Note that the object will use the same malloc &amp; free routines as</comment>
    <comment type="line" pos:line="1888" pos:column="5">// the lpSIObj uses.</comment>
    <comment type="line" pos:line="1889" pos:column="5">//</comment>
    <comment type="line" pos:line="1890" pos:column="5">// wzFileName is the fully qualified name of the storage as it appears</comment>
    <comment type="line" pos:line="1891" pos:column="5">// in the filesystem.  This can be NULL if no file exists.</comment>
    <comment type="line" pos:line="1892" pos:column="5">//</comment>
    <comment type="line" pos:line="1893" pos:column="5">// dwMask contains either 0 or a set of valid flags for various options.</comment>
    <comment type="line" pos:line="1894" pos:column="5">//</comment>
    <comment type="line" pos:line="1895" pos:column="5">// LPFN_DWQLD is a callback, that when given a dwCommand of 0</comment>
    <comment type="line" pos:line="1896" pos:column="5">// returns the number of links, and for any other number 0 &lt; NumLinks,</comment>
    <comment type="line" pos:line="1897" pos:column="5">// places the link data &amp; static value in the lpld buffer and returns non-0</comment>
    <comment type="line" pos:line="1898" pos:column="5">// if the function succeeded.</comment>
    <comment type="line" pos:line="1899" pos:column="5">//</comment>
    <comment type="line" pos:line="1900" pos:column="5">// The storage for the buffer is to be allocated by the app, and a pointer</comment>
    <comment type="line" pos:line="1901" pos:column="5">// to that storage passed back.</comment>
    <comment type="line" pos:line="1902" pos:column="5">//</comment>
    <comment type="line" pos:line="1903" pos:column="5">// pptCtr - POINT struct filled with the coordinates of the center </comment>
    <comment type="line" pos:line="1904" pos:column="5">//          of the dialog.  Used to make sure we are using sticky</comment>
    <comment type="line" pos:line="1905" pos:column="5">//          dialog coordinates.  If pPoint-&gt;x == -1, we ignore and use</comment>
    <comment type="line" pos:line="1906" pos:column="5">//          the default position for the dialog.</comment>
    <comment type="line" pos:line="1907" pos:column="5">//</comment>
    <comment type="line" pos:line="1908" pos:column="5">//          pptCtr will be filled with the coordinates of the new position</comment>
    <comment type="line" pos:line="1909" pos:column="5">//          of the dialog on returning.</comment>
    <comment type="line" pos:line="1910" pos:column="5">//</comment>
    <comment type="line" pos:line="1911" pos:column="5">//          The coordinates should be in client area coordinates, i.e. in</comment>
    <comment type="line" pos:line="1912" pos:column="5">//          hWndParent coordinates.</comment>
    <comment type="line" pos:line="1913" pos:column="5">//</comment>
    <comment type="line" pos:line="1914" pos:column="5">// wzCaption - caption for the dialog.  This should be the filename as it is</comment>
    <comment type="line" pos:line="1915" pos:column="5">//             displayed in the apps document title bar.</comment>
    <comment type="line" pos:line="1916" pos:column="5">//             The properties dialog caption will be as follows:</comment>
    <comment type="line" pos:line="1917" pos:column="5">//</comment>
    <comment type="line" pos:line="1918" pos:column="5">//               &lt;foo&gt; Properties</comment>
    <comment type="line" pos:line="1919" pos:column="5">//</comment>
    <comment type="line" pos:line="1920" pos:column="5">//               where foo is the string pointed to by wzCaption.</comment>
    <comment type="line" pos:line="1921" pos:column="5">//</comment>
	<comment type="line" pos:line="1922" pos:column="9">// wzFileType - Override for the file type field on the General tab.</comment>
	<comment type="line" pos:line="1923" pos:column="9">//              If NULL is passed in, the system will determine the file type.</comment>
	<comment type="line" pos:line="1924" pos:column="9">//</comment>
    <comment type="line" pos:line="1925" pos:column="5">// The function returns TRUE on success, FALSE on error or if the user hit Cancel.</comment>
    <comment type="line" pos:line="1926" pos:column="5">//</comment>
    <comment type="line" pos:line="1927" pos:column="5">// Note: It's the caller's resposibility to invalidate any links (if appropriate)</comment>
    <comment type="line" pos:line="1928" pos:column="5">//       before calling this function.</comment>
    <comment type="line" pos:line="1929" pos:column="5">//</comment>
    <comment type="line" pos:line="1930" pos:column="5">// Note: If lpfnDwQueryLinkData is NULL, the caller must invalidate any linked properties.</comment>
    <comment type="line" pos:line="1931" pos:column="5">//</comment>
<macro><name pos:line="1932" pos:column="1">MSOAPI_</name><argument_list pos:line="1932" pos:column="8">(<argument pos:line="1932" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="1932" pos:column="16">MsoFOfficeShowPropDlg</name> <argument_list pos:line="1932" pos:column="38">(<argument pos:line="1932" pos:column="39">HWND hWndParent</argument>,
				     				  <argument pos:line="1933" pos:column="67">const WCHAR *wzFileName</argument>,
				     				  <argument pos:line="1934" pos:column="67">LPSIOBJ lpSIObj</argument>,
				     				  <argument pos:line="1935" pos:column="67">LPDSIOBJ lpDSIObj</argument>,
				     				  <argument pos:line="1936" pos:column="67">LPUDOBJ FAR *lplpUDObj</argument>,
					      			  <argument pos:line="1937" pos:column="67">DWORD dwMask</argument>,
				     				  <argument pos:line="1938" pos:column="67">DWQUERYLD lpfnDwQueryLinkData</argument>,
				     				  <argument pos:line="1939" pos:column="67">LPPOINT pptCtr</argument>,
				     				  <argument pos:line="1940" pos:column="67">const WCHAR *wzCaption</argument>,
				     				  <argument pos:line="1941" pos:column="67">const WCHAR *wzFileType</argument>)</argument_list></macro><empty_stmt pos:line="1941" pos:column="91">;</empty_stmt>


<comment type="block" pos:line="1944" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFOfficeShowPropDlgEx

	Same as MsoFOfficeShowPropDlg with addition of the "signatures" tab if
	pissc is not NULL

	new params:
	[in] pissc --&gt; signature set client implemented by client app
	[in] pvSignatureClient --&gt; client specific data
	[in] fSigOnly --&gt; TRUE if only want to show the signatrue tab, set
	                  when calling this API through sigature toolbar button.
	                  reuse the code whenever we can (not elegant design, but
	                  cheap in terms of dev time)
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="1958" pos:column="1">MSOAPI_</name><argument_list pos:line="1958" pos:column="8">(<argument pos:line="1958" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="1958" pos:column="15">MsoFOfficeShowPropDlgEx</name><argument_list pos:line="1958" pos:column="38">(<argument pos:line="1958" pos:column="39">HWND hWndParent</argument>,
				     				  <argument pos:line="1959" pos:column="67">const WCHAR *wzFileName</argument>,
				     				  <argument pos:line="1960" pos:column="67">LPSIOBJ lpSIObj</argument>,
				     				  <argument pos:line="1961" pos:column="67">LPDSIOBJ lpDSIObj</argument>,
				     				  <argument pos:line="1962" pos:column="67">LPUDOBJ FAR *lplpUDObj</argument>,
					      			  <argument pos:line="1963" pos:column="67">DWORD dwMask</argument>,
				     				  <argument pos:line="1964" pos:column="67">DWQUERYLD lpfnDwQueryLinkData</argument>,
				     				  <argument pos:line="1965" pos:column="67">LPPOINT pptCtr</argument>,
				     				  <argument pos:line="1966" pos:column="67">const WCHAR *wzCaption</argument>,
				     				  <argument pos:line="1967" pos:column="67">const WCHAR *wzFileType</argument>,
									  <argument pos:line="1968" pos:column="75">IMsoSignatureSetClient *pissc</argument>,
									  <argument pos:line="1969" pos:column="75">LPVOID pvSignatureClient</argument>,
									  <argument pos:line="1970" pos:column="75">BOOL fSigOnly</argument>
				     				  )</argument_list></macro><empty_stmt pos:line="1971" pos:column="68">;</empty_stmt>
				     				  
    <comment type="line" pos:line="1973" pos:column="5">// Creates and initializes all non-NULL objects.</comment>
    <comment type="line" pos:line="1974" pos:column="5">// Create the object and return it.  Caller responsible for destruction.</comment>
    <comment type="line" pos:line="1975" pos:column="5">//</comment>
    <comment type="line" pos:line="1976" pos:column="5">// rglpfn is an array, with the following callbacks supplied by the user:</comment>
    <comment type="line" pos:line="1977" pos:column="5">//</comment>
    <comment type="line" pos:line="1978" pos:column="5">//  Code Page Conversion</comment>
    <comment type="line" pos:line="1979" pos:column="5">//</comment>
    <comment type="line" pos:line="1980" pos:column="5">//  rglpfn[ifnCPConvert] = (BOOL) (OFC_CALLBACK *lpfnFCPConvert) (LPSTR lpsz,</comment>
    <comment type="line" pos:line="1981" pos:column="5">//                                                  DWORD dwFrom,</comment>
    <comment type="line" pos:line="1982" pos:column="5">//                                                  DWORD dwTo,</comment>
    <comment type="line" pos:line="1983" pos:column="5">//                                                  BOOL fMacintosh)</comment>
    <comment type="line" pos:line="1984" pos:column="5">//    lpsz is a 0 terminated C string, dwFrom is the code page</comment>
    <comment type="line" pos:line="1985" pos:column="5">//    lpsz is currently stored as, dwTo is the code page it should</comment>
    <comment type="line" pos:line="1986" pos:column="5">//    be converted to, fMacintosh indicates whether dwFrom is a Mac</comment>
    <comment type="line" pos:line="1987" pos:column="5">//    or Windows code page identifier.</comment>
	<comment type="line" pos:line="1988" pos:column="9">//</comment>
	<comment type="line" pos:line="1989" pos:column="9">//	  For the MAC, the following code page indentifiers are used for dwTo.</comment>
	<comment type="line" pos:line="1990" pos:column="9">//	  (Mac code pages (10000+script ids))</comment>
	<comment type="line" pos:line="1991" pos:column="9">//</comment>
	<comment type="line" pos:line="1992" pos:column="9">//	  To determine if dwTo is Mac or Win, use MsoFMacCp defined below.</comment>
	<comment type="line" pos:line="1993" pos:column="9">//</comment>
<cpp:define pos:line="1994" pos:column="1">#<cpp:directive pos:line="1994" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1994" pos:column="9">msocpidMac</name></cpp:macro>		<cpp:value pos:line="1994" pos:column="33">(10000)</cpp:value></cpp:define>			<comment type="block" pos:line="1994" pos:column="57">/* Mac, smRoman */</comment>
<cpp:define pos:line="1995" pos:column="1">#<cpp:directive pos:line="1995" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1995" pos:column="9">msocpidMacSJIS</name></cpp:macro> <cpp:value pos:line="1995" pos:column="24">((10000+1))</cpp:value></cpp:define>		<comment type="block" pos:line="1995" pos:column="49">/* Mac, smJapanese */</comment>
<cpp:define pos:line="1996" pos:column="1">#<cpp:directive pos:line="1996" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1996" pos:column="9">msocpidMacBIG5</name></cpp:macro> <cpp:value pos:line="1996" pos:column="24">((10000+2))</cpp:value></cpp:define>		<comment type="block" pos:line="1996" pos:column="49">/* Mac, smTradChinese */</comment>
<cpp:define pos:line="1997" pos:column="1">#<cpp:directive pos:line="1997" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1997" pos:column="9">msocpidMacKSC</name></cpp:macro>  <cpp:value pos:line="1997" pos:column="24">((10000+3))</cpp:value></cpp:define>		<comment type="block" pos:line="1997" pos:column="49">/* Mac, smKorean */</comment>
<cpp:define pos:line="1998" pos:column="1">#<cpp:directive pos:line="1998" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1998" pos:column="9">msocpidMArab</name></cpp:macro>	<cpp:value pos:line="1998" pos:column="25">((10000+4))</cpp:value></cpp:define>		<comment type="block" pos:line="1998" pos:column="49">/* Mac, smArabic */</comment>
<cpp:define pos:line="1999" pos:column="1">#<cpp:directive pos:line="1999" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="1999" pos:column="9">msocpidMHebr</name></cpp:macro>	<cpp:value pos:line="1999" pos:column="25">((10000+5))</cpp:value></cpp:define>		<comment type="block" pos:line="1999" pos:column="49">/* Mac, smHebrew */</comment>
<cpp:define pos:line="2000" pos:column="1">#<cpp:directive pos:line="2000" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2000" pos:column="9">msocpidMGreek</name></cpp:macro>	<cpp:value pos:line="2000" pos:column="25">((10000+6))</cpp:value></cpp:define>		<comment type="block" pos:line="2000" pos:column="49">/* Mac, smGreek */</comment>
<cpp:define pos:line="2001" pos:column="1">#<cpp:directive pos:line="2001" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2001" pos:column="9">msocpidMCyril</name></cpp:macro>	<cpp:value pos:line="2001" pos:column="25">((10000+7))</cpp:value></cpp:define>		<comment type="block" pos:line="2001" pos:column="49">/* Mac, smCyrillic */</comment>
<cpp:define pos:line="2002" pos:column="1">#<cpp:directive pos:line="2002" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2002" pos:column="9">msocpidMacPRC</name></cpp:macro>  <cpp:value pos:line="2002" pos:column="24">((10000+25))</cpp:value></cpp:define>		<comment type="block" pos:line="2002" pos:column="49">/* Mac, smSimpChinese */</comment>
<cpp:define pos:line="2003" pos:column="1">#<cpp:directive pos:line="2003" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2003" pos:column="9">msocpidMSlavic</name></cpp:macro>	<cpp:value pos:line="2003" pos:column="25">((10000+29))</cpp:value></cpp:define>		<comment type="block" pos:line="2003" pos:column="49">/* Mac, smEastEurRoman */</comment>
<cpp:define pos:line="2004" pos:column="1">#<cpp:directive pos:line="2004" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2004" pos:column="9">msocpidMIce</name></cpp:macro>    <cpp:value pos:line="2004" pos:column="24">((10000+64+15))</cpp:value></cpp:define>	<comment type="block" pos:line="2004" pos:column="41">/* Mac, smRoman,langIcelandic */</comment>
<cpp:define pos:line="2005" pos:column="1">#<cpp:directive pos:line="2005" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2005" pos:column="9">msocpidMTurk</name></cpp:macro>   <cpp:value pos:line="2005" pos:column="24">((10000+64+17))</cpp:value></cpp:define>	<comment type="block" pos:line="2005" pos:column="41">/* Mac, smRoman,langTurkish */</comment>
<cpp:define pos:line="2006" pos:column="1">#<cpp:directive pos:line="2006" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2006" pos:column="9">msocpidMacGB2312</name></cpp:macro>	<cpp:value pos:line="2006" pos:column="33">((10000+31))</cpp:value></cpp:define>		<comment type="block" pos:line="2006" pos:column="57">/* Mac, smChinese */</comment>

<cpp:define pos:line="2008" pos:column="1">#<cpp:directive pos:line="2008" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2008" pos:column="9">msocpidMacLast</name></cpp:macro>	<cpp:value pos:line="2008" pos:column="25">((10000+64+256))</cpp:value></cpp:define>	<comment type="block" pos:line="2008" pos:column="49">/* highest Mac msocpid (just a guess) */</comment>

<cpp:define pos:line="2010" pos:column="1">#<cpp:directive pos:line="2010" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2010" pos:column="9">MsoFMacCp</name><parameter_list pos:line="2010" pos:column="18">(<param><type><name pos:line="2010" pos:column="19">cp</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="2010" pos:column="23">((cp) &gt;= msocpidMac &amp;&amp; (cp) &lt;= msocpidMacLast)</cpp:value></cpp:define>

    <comment type="line" pos:line="2012" pos:column="5">//</comment>
    <comment type="line" pos:line="2013" pos:column="5">//  Convert an sz to a double</comment>
    <comment type="line" pos:line="2014" pos:column="5">//</comment>
    <comment type="line" pos:line="2015" pos:column="5">//  rglpfn[ifnFWzToNum] = (BOOL) (OFC_CALLBACK *lpfnFWzToNum)(</comment>
    <comment type="line" pos:line="2016" pos:column="5">//                                   double *lpdbl,</comment>
    <comment type="line" pos:line="2017" pos:column="5">//                                   LPSTR lpszNum)</comment>
    <comment type="line" pos:line="2018" pos:column="5">//</comment>
    <comment type="line" pos:line="2019" pos:column="5">//   lpdbl - pointer to a double, this is set by the app</comment>
    <comment type="line" pos:line="2020" pos:column="5">//   lpszNum - zero-terminated string representing the number</comment>
    <comment type="line" pos:line="2021" pos:column="5">//</comment>
    <comment type="line" pos:line="2022" pos:column="5">//  Convert a double to an sz</comment>
    <comment type="line" pos:line="2023" pos:column="5">//</comment>
    <comment type="line" pos:line="2024" pos:column="5">//  rglpfn[ifnFNumToWz] = (BOOL) (OFC_CALLBACK *lpfnFNumToWz)(</comment>
    <comment type="line" pos:line="2025" pos:column="5">//                                   double *lpdbl,</comment>
    <comment type="line" pos:line="2026" pos:column="5">//                                   LPSTR lpszNum,</comment>
    <comment type="line" pos:line="2027" pos:column="5">//                                   DWORD cbMax)</comment>
    <comment type="line" pos:line="2028" pos:column="5">//   lpdbl   - pointer to a double</comment>
    <comment type="line" pos:line="2029" pos:column="5">//   lpszNum - on return a zero-terminated string representing the number</comment>
    <comment type="line" pos:line="2030" pos:column="5">//   cbMax   - Max number of bytes in lpszNum</comment>
    <comment type="line" pos:line="2031" pos:column="5">//</comment>
    <comment type="line" pos:line="2032" pos:column="5">//   Update the statistics on the Statistics tab</comment>
    <comment type="line" pos:line="2033" pos:column="5">//</comment>
    <comment type="line" pos:line="2034" pos:column="5">//   rglpfn[ifnFUpdateStats] = (BOOL) (OFC_CALLBACK *lpfnFUpdateStats)(</comment>
    <comment type="line" pos:line="2035" pos:column="5">//                                       HWND hwndParent,</comment>
    <comment type="line" pos:line="2036" pos:column="5">//                                       LPSIOBJ lpSIObj,</comment>
    <comment type="line" pos:line="2037" pos:column="5">//                                       LPDSIOBJ lpDSIObj)</comment>
    <comment type="line" pos:line="2038" pos:column="5">//</comment>
    <comment type="line" pos:line="2039" pos:column="5">//      hwndParent - window of the properties dialog, so that the app</comment>
    <comment type="line" pos:line="2040" pos:column="5">//                   can put up an alert, letting the user know the the</comment>
    <comment type="line" pos:line="2041" pos:column="5">//                   data is being updated.</comment>
    <comment type="line" pos:line="2042" pos:column="5">//</comment>
    <comment type="line" pos:line="2043" pos:column="5">//      lpSIObj, lpDSIObj - objects to update</comment>
    <comment type="line" pos:line="2044" pos:column="5">//</comment>
    <comment type="line" pos:line="2045" pos:column="5">//   Note:  If the app does not want to set the statistics before bringing up</comment>
    <comment type="line" pos:line="2046" pos:column="5">//          the dialog, they can provide this callback function.  If the</comment>
    <comment type="line" pos:line="2047" pos:column="5">//          function pointer is not NULL, the function will be called the first</comment>
    <comment type="line" pos:line="2048" pos:column="5">//          time the user clicks on the Statistics tab.  The app should then update</comment>
    <comment type="line" pos:line="2049" pos:column="5">//          all appropriate statistics for the tab and return TRUE on success, FALSE</comment>
    <comment type="line" pos:line="2050" pos:column="5">//          on failure.  If the function pointer is NULL, the existing data will be</comment>
    <comment type="line" pos:line="2051" pos:column="5">//          used.</comment>
    <comment type="line" pos:line="2052" pos:column="5">//</comment>
    <comment type="line" pos:line="2053" pos:column="5">//  Note:</comment>
    <comment type="line" pos:line="2054" pos:column="5">//         Only rglpfn[ifnCPConvert] must be non-NULL.  If it is NULL, the</comment>
    <comment type="line" pos:line="2055" pos:column="5">//         function will return FALSE, and the objects will not be created.</comment>
    <comment type="line" pos:line="2056" pos:column="5">//</comment>
    <comment type="line" pos:line="2057" pos:column="5">//         rglpfn[ifnFWzToNum] and rglpfn[ifnFNumToWz] must either both be</comment>
    <comment type="line" pos:line="2058" pos:column="5">//         non-NULL, or NULL.  Otherwise, the function will return FALSE, and</comment>
    <comment type="line" pos:line="2059" pos:column="5">//         the objects will not be created.  If both functions are NULL, there</comment>
    <comment type="line" pos:line="2060" pos:column="5">//         will be no floating point support in OLE Extended Properties (i.e. on</comment>
    <comment type="line" pos:line="2061" pos:column="5">//         the Custom tab), but integers will be supported.</comment>
	<comment type="line" pos:line="2062" pos:column="9">//</comment>
	<comment type="line" pos:line="2063" pos:column="9">//  Note:  hinst must be non-NULL.</comment>
    <comment type="line" pos:line="2064" pos:column="5">//</comment>
<macro><name pos:line="2065" pos:column="1">MSOAPI_</name><argument_list pos:line="2065" pos:column="8">(<argument pos:line="2065" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="2065" pos:column="16">MsoFOfficeCreateAndInitObjects</name> <argument_list pos:line="2065" pos:column="47">(<argument pos:line="2065" pos:column="48">LPSIOBJ *lplpSIObj</argument>,
										     <argument pos:line="2066" pos:column="86">LPDSIOBJ *lplpDSIObj</argument>,
										     <argument pos:line="2067" pos:column="86">LPUDOBJ *lplpUDObj</argument>,
										     <argument pos:line="2068" pos:column="86">void *prglpfn[]</argument>,
										     <argument pos:line="2069" pos:column="86">HMSOINST hinst</argument>)</argument_list></macro><empty_stmt pos:line="2069" pos:column="101">;</empty_stmt>

    <comment type="line" pos:line="2071" pos:column="5">// Clear any non-null objects</comment>
<macro><name pos:line="2072" pos:column="1">MSOAPI_</name><argument_list pos:line="2072" pos:column="8">(<argument pos:line="2072" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="2072" pos:column="16">MsoFOfficeClearObjects</name> <argument_list pos:line="2072" pos:column="39">(<argument pos:line="2072" pos:column="40">LPSIOBJ lpSIObj</argument>,
								     <argument pos:line="2073" pos:column="70">LPDSIOBJ lpDSIObj</argument>,
								     <argument pos:line="2074" pos:column="70">LPUDOBJ lpUDObj</argument>)</argument_list></macro><empty_stmt pos:line="2074" pos:column="86">;</empty_stmt>

    <comment type="line" pos:line="2076" pos:column="5">// Destroy any non-null objects</comment>
<macro><name pos:line="2077" pos:column="1">MSOAPI_</name><argument_list pos:line="2077" pos:column="8">(<argument pos:line="2077" pos:column="9">BOOL</argument> )</argument_list></macro> <expr_stmt><expr><call><name pos:line="2077" pos:column="16">MsoFOfficeDestroyObjects</name> <argument_list pos:line="2077" pos:column="41">(<argument><expr><name pos:line="2077" pos:column="42">LPSIOBJ</name> <op:operator pos:line="2077" pos:column="50">*</op:operator><name pos:line="2077" pos:column="51">lplpSIObj</name></expr></argument>,
								       <argument><expr><name pos:line="2078" pos:column="72">LPDSIOBJ</name> <op:operator pos:line="2078" pos:column="81">*</op:operator><name pos:line="2078" pos:column="82">lplpDSIObj</name></expr></argument>,
					    			   <argument><expr><name pos:line="2079" pos:column="68">LPUDOBJ</name> <op:operator pos:line="2079" pos:column="76">*</op:operator><name pos:line="2079" pos:column="77">lplpUDObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line" pos:line="2081" pos:column="3">// Use these functions to set the dirty flag of the given object.</comment>
  <comment type="line" pos:line="2082" pos:column="3">// Note: It's the caller's responsibility to make sure that the</comment>
  <comment type="line" pos:line="2083" pos:column="3">//       object is non-NULL</comment>
<macro><name pos:line="2084" pos:column="1">MSOAPI_</name><argument_list pos:line="2084" pos:column="8">(<argument pos:line="2084" pos:column="9">VOID</argument> )</argument_list></macro> <macro><name pos:line="2084" pos:column="16">MsoOfficeDirtySIObj</name><argument_list pos:line="2084" pos:column="35">(<argument pos:line="2084" pos:column="36">LPSIOBJ lpSIObj</argument>, <argument pos:line="2084" pos:column="53">BOOL fDirty</argument>)</argument_list></macro><empty_stmt pos:line="2084" pos:column="65">;</empty_stmt>

<macro><name pos:line="2086" pos:column="1">MSOAPI_</name><argument_list pos:line="2086" pos:column="8">(<argument pos:line="2086" pos:column="9">VOID</argument> )</argument_list></macro> <macro><name pos:line="2086" pos:column="16">MsoOfficeDirtyDSIObj</name><argument_list pos:line="2086" pos:column="36">(<argument pos:line="2086" pos:column="37">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="2086" pos:column="56">BOOL fDirty</argument>)</argument_list></macro><empty_stmt pos:line="2086" pos:column="68">;</empty_stmt>

<macro><name pos:line="2088" pos:column="1">MSOAPI_</name><argument_list pos:line="2088" pos:column="8">(<argument pos:line="2088" pos:column="9">VOID</argument> )</argument_list></macro> <macro><name pos:line="2088" pos:column="16">MsoOfficeDirtyUDObj</name><argument_list pos:line="2088" pos:column="35">(<argument pos:line="2088" pos:column="36">LPUDOBJ lpUDObj</argument>, <argument pos:line="2088" pos:column="53">BOOL fDirty</argument>)</argument_list></macro><empty_stmt pos:line="2088" pos:column="65">;</empty_stmt>


<comment type="line" pos:line="2091" pos:column="1">// Flags for Load &amp; Save</comment>
<cpp:define pos:line="2092" pos:column="1">#<cpp:directive pos:line="2092" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2092" pos:column="9">OIO_ANSI</name></cpp:macro>                <cpp:value pos:line="2092" pos:column="33">0x0001</cpp:value></cpp:define> <comment type="line" pos:line="2092" pos:column="40">// The storage is an ANSI storage (UNICODE is the default)</comment>
<cpp:define pos:line="2093" pos:column="1">#<cpp:directive pos:line="2093" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2093" pos:column="9">OIO_SAVEIFCHANGEONLY</name></cpp:macro>    <cpp:value pos:line="2093" pos:column="33">0x0002</cpp:value></cpp:define> <comment type="line" pos:line="2093" pos:column="40">// Only streams that are dirty should be saved.</comment>
<cpp:define pos:line="2094" pos:column="1">#<cpp:directive pos:line="2094" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2094" pos:column="9">OIO_SAVESIMPLEDOCFILE</name></cpp:macro>   <cpp:value pos:line="2094" pos:column="33">0x0004</cpp:value></cpp:define> <comment type="line" pos:line="2094" pos:column="40">// The storage is a simple DOC file.</comment>
<cpp:define pos:line="2095" pos:column="1">#<cpp:directive pos:line="2095" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2095" pos:column="9">OIO_SAVE_AS_95</name></cpp:macro>          <cpp:value pos:line="2095" pos:column="33">0x0008</cpp:value></cpp:define> <comment type="line" pos:line="2095" pos:column="40">// Save the properties in the 95 format</comment>
<cpp:define pos:line="2096" pos:column="1">#<cpp:directive pos:line="2096" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2096" pos:column="9">OIO_SAVE_AS_UNICODE</name></cpp:macro>     <cpp:value pos:line="2096" pos:column="33">0x0010</cpp:value></cpp:define> <comment type="line" pos:line="2096" pos:column="40">// Save the properties in UNICODE format. </comment>
                                       <comment type="line" pos:line="2097" pos:column="40">// Not supported in 97!!!</comment>
<cpp:define pos:line="2098" pos:column="1">#<cpp:directive pos:line="2098" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2098" pos:column="9">OIO_LINKSCHANGED</name></cpp:macro>        <cpp:value pos:line="2098" pos:column="33">0x0020</cpp:value></cpp:define> <comment type="line" pos:line="2098" pos:column="40">// Added for Outlook.  Force the links changed flag to be TRUE</comment>
<cpp:define pos:line="2099" pos:column="1">#<cpp:directive pos:line="2099" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2099" pos:column="9">OIO_SAVE_AS_HTML</name></cpp:macro>        <cpp:value pos:line="2099" pos:column="33">0x0040</cpp:value></cpp:define> <comment type="line" pos:line="2099" pos:column="40">// Save the properties in HTML format</comment>
<cpp:define pos:line="2100" pos:column="1">#<cpp:directive pos:line="2100" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2100" pos:column="9">OIO_SAVE_ONLY_VBASIG</name></cpp:macro>    <cpp:value pos:line="2100" pos:column="33">0x0080</cpp:value></cpp:define> <comment type="line" pos:line="2100" pos:column="40">// When the doc is encrypted, only save VBA signature unencrypted</comment>
                                       <comment type="line" pos:line="2101" pos:column="40">// this flag used internally, client app should not use it.</comment>
<cpp:define pos:line="2102" pos:column="1">#<cpp:directive pos:line="2102" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2102" pos:column="9">OIO_SAVE_TITLE_XML</name></cpp:macro>      <cpp:value pos:line="2102" pos:column="33">0x0100</cpp:value></cpp:define> <comment type="line" pos:line="2102" pos:column="40">// Save the title prop in the xml collection (if OIO_SAVE_AS_HTML set)</comment>
<cpp:define pos:line="2103" pos:column="1">#<cpp:directive pos:line="2103" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2103" pos:column="9">OIO_SKIP_VBASIG</name></cpp:macro>         <cpp:value pos:line="2103" pos:column="33">0x0200</cpp:value></cpp:define> <comment type="line" pos:line="2103" pos:column="40">// Skip the SAVE_ONLY_VBASIG logic, client will do a separate step</comment>
<cpp:define pos:line="2104" pos:column="1">#<cpp:directive pos:line="2104" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2104" pos:column="9">OIO_SAVE_LINKBASE_XML</name></cpp:macro>   <cpp:value pos:line="2104" pos:column="33">0x0400</cpp:value></cpp:define> <comment type="line" pos:line="2104" pos:column="40">// Save the hyperlink base prop in the xml collection (if OIO_SAVE_AS_HTML set)</comment>

    <comment type="line" pos:line="2106" pos:column="5">// Populate the objects with data.  lpStg is the root stream.</comment>
    <comment type="line" pos:line="2107" pos:column="5">// Returns the number of streams loaded.</comment>
    <comment type="line" pos:line="2108" pos:column="5">// dwFlags: OIO_ANSI specifies that lpStg is an ANSI storage (UNICODE is the default)</comment>
    <comment type="line" pos:line="2109" pos:column="5">//</comment>
    <comment type="line" pos:line="2110" pos:column="5">// The function returns the following:</comment>
    <comment type="line" pos:line="2111" pos:column="5">//</comment>
<cpp:define pos:line="2112" pos:column="1">#<cpp:directive pos:line="2112" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2112" pos:column="9">MSO_IO_ERROR</name></cpp:macro>   <cpp:value pos:line="2112" pos:column="24">0</cpp:value></cpp:define>     <comment type="line" pos:line="2112" pos:column="30">// The stream(s) were found, but the load failed</comment>
<cpp:define pos:line="2113" pos:column="1">#<cpp:directive pos:line="2113" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2113" pos:column="9">MSO_IO_NOSTM</name></cpp:macro>   <cpp:value pos:line="2113" pos:column="24">1</cpp:value></cpp:define>     <comment type="line" pos:line="2113" pos:column="30">// The stream(s) were not found</comment>
<cpp:define pos:line="2114" pos:column="1">#<cpp:directive pos:line="2114" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="2114" pos:column="9">MSO_IO_SUCCESS</name></cpp:macro> <cpp:value pos:line="2114" pos:column="24">2</cpp:value></cpp:define>     <comment type="line" pos:line="2114" pos:column="30">// The stream(s) were found, and the load succeeded</comment>
    <comment type="line" pos:line="2115" pos:column="5">//</comment>
    <comment type="line" pos:line="2116" pos:column="5">// NOTE: The caller can load either the summary info stream (lpSIObj != NULL), or</comment>
    <comment type="line" pos:line="2117" pos:column="5">//       the Document Summary Info stream (lpDSIObj != NULL &amp;&amp; lpUDObj != NULL) or</comment>
    <comment type="line" pos:line="2118" pos:column="5">//       both.</comment>
    <comment type="line" pos:line="2119" pos:column="5">//</comment>
    <comment type="line" pos:line="2120" pos:column="5">// NOTE: If the caller asks to load both streams, MSO_IO_NOSTM will not be returned, as</comment>
    <comment type="line" pos:line="2121" pos:column="5">//       long as one of the streams exists.</comment>

<macro><name pos:line="2123" pos:column="1">MSOAPI_</name><argument_list pos:line="2123" pos:column="8">(<argument pos:line="2123" pos:column="9">DWORD</argument> )</argument_list></macro> <macro><name pos:line="2123" pos:column="17">MsoDwOfficeLoadProperties</name> <argument_list pos:line="2123" pos:column="43">(<argument pos:line="2123" pos:column="44">LPSTORAGE lpStg</argument>,
						 <argument pos:line="2124" pos:column="50">LPSIOBJ lpSIObj</argument>,
						 <argument pos:line="2125" pos:column="50">LPDSIOBJ lpDSIObj</argument>,
						 <argument pos:line="2126" pos:column="50">LPUDOBJ lpUDObj</argument>,
						 <argument pos:line="2127" pos:column="50">DWORD dwFlags</argument>)</argument_list></macro><empty_stmt pos:line="2127" pos:column="64">;</empty_stmt>


<comment type="block" pos:line="2130" pos:column="1">/*-----------------------------------------------------------------------------
	MsoDwOfficeLoadPropertiesEx

	same as MsoDwOfficeLoadProperties, but with the option for encryption
	MsoDwOfficeLoadProperties calls MsoDwOfficeLoadPropertiesEx
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="2136" pos:column="1">MSOAPI_</name><argument_list pos:line="2136" pos:column="8">(<argument pos:line="2136" pos:column="9">DWORD</argument> )</argument_list></macro> <macro><name pos:line="2136" pos:column="17">MsoDwOfficeLoadPropertiesEx</name> <argument_list pos:line="2136" pos:column="45">(<argument pos:line="2136" pos:column="46">LPSTORAGE lpStg</argument>,
						 <argument pos:line="2137" pos:column="50">LPSIOBJ lpSIObj</argument>,
						 <argument pos:line="2138" pos:column="50">LPDSIOBJ lpDSIObj</argument>,
						 <argument pos:line="2139" pos:column="50">LPUDOBJ lpUDObj</argument>,
						 <argument pos:line="2140" pos:column="50">IMsoCryptSession *pics</argument>,
						 <argument pos:line="2141" pos:column="50">DWORD dwFlags</argument>)</argument_list></macro><empty_stmt pos:line="2141" pos:column="64">;</empty_stmt>


<macro><name pos:line="2144" pos:column="1">MSOAPIX_</name><argument_list pos:line="2144" pos:column="9">(<argument pos:line="2144" pos:column="10">DWORD</argument> )</argument_list></macro> <macro><name pos:line="2144" pos:column="18">MsoDwOfficeLoadIntProperties</name> <argument_list pos:line="2144" pos:column="47">(<argument pos:line="2144" pos:column="48">LPSTORAGE lpStg</argument>,
						 <argument pos:line="2145" pos:column="50">LPSIOBJ lpSIObj</argument>,
						 <argument pos:line="2146" pos:column="50">LPDSIOBJ lpDSIObj</argument>,
						 <argument pos:line="2147" pos:column="50">LPUDOBJ lpUDObj</argument>,

						 <argument pos:line="2149" pos:column="50">DWORD dwFlags</argument>)</argument_list></macro><empty_stmt pos:line="2149" pos:column="64">;</empty_stmt>
<comment type="line" pos:line="2150" pos:column="1">//</comment>
<comment type="line" pos:line="2151" pos:column="1">// Do a normal load (like calling MsoDwOfficeLoadProperties),</comment>
<comment type="line" pos:line="2152" pos:column="1">// but also return the codepage.</comment>
<comment type="line" pos:line="2153" pos:column="1">//</comment>
<comment type="line" pos:line="2154" pos:column="1">// Used by the Office Compatible dudes...</comment>
<comment type="line" pos:line="2155" pos:column="1">//</comment>
<macro><name pos:line="2156" pos:column="1">MSOAPIMX_</name><argument_list pos:line="2156" pos:column="10">(<argument pos:line="2156" pos:column="11">DWORD</argument>)</argument_list></macro>  <macro><name pos:line="2156" pos:column="19">MsoDwLoadPropertiesCodePage</name><argument_list pos:line="2156" pos:column="46">(<argument pos:line="2156" pos:column="47">LPSTORAGE lpStg</argument>,
						 <argument pos:line="2157" pos:column="50">LPSIOBJ lpSIObj</argument>,
						 <argument pos:line="2158" pos:column="50">LPDSIOBJ lpDSIObj</argument>,
						 <argument pos:line="2159" pos:column="50">LPUDOBJ lpUDObj</argument>,
						 <argument pos:line="2160" pos:column="50">DWORD dwFlags</argument>,
						 <argument pos:line="2161" pos:column="50">ULONG *pdwCodePage</argument>)</argument_list></macro><empty_stmt pos:line="2161" pos:column="69">;</empty_stmt>

    <comment type="line" pos:line="2163" pos:column="5">// Write the data in the given objects.</comment>
    <comment type="line" pos:line="2164" pos:column="5">// pvContent is either the root stream or IMsoHtmlExport.</comment>
    <comment type="line" pos:line="2165" pos:column="5">// Returns the number of streams saved.</comment>
    <comment type="line" pos:line="2166" pos:column="5">// dwFlags: OIO_ANSI specifies that root stream is an ANSI storage (UNICODE is the default)</comment>
    <comment type="line" pos:line="2167" pos:column="5">//</comment>
    <comment type="line" pos:line="2168" pos:column="5">//          OIO_SAVEIFCHANGEONLY specificies that only streams that are</comment>
    <comment type="line" pos:line="2169" pos:column="5">//           "dirty" will be saved.  Do NOT specify this if you are </comment>
    <comment type="line" pos:line="2170" pos:column="5">//           saving to a tmp file.  Also do not attempt to "outsmart"</comment>
    <comment type="line" pos:line="2171" pos:column="5">//           the save by passing NULL objects, use this flag instead.</comment>
    <comment type="line" pos:line="2172" pos:column="5">//</comment>
    <comment type="line" pos:line="2173" pos:column="5">//          OIO_SAVESIMPLEDOCFILE specifies that the storage is a simple DOC file.</comment>
	<comment type="line" pos:line="2174" pos:column="9">//</comment>
	<comment type="line" pos:line="2175" pos:column="9">//			OIO_SAVE_AS_HTML specifies that pvContent is an IMsoHtmlExport and</comment>
	<comment type="line" pos:line="2176" pos:column="9">//			 we will be exporting as html.  If not set, then pvContent is an</comment>
	<comment type="line" pos:line="2177" pos:column="9">//			 LPSTORAGE and we will be saving as binary.</comment>
    <comment type="line" pos:line="2178" pos:column="5">//</comment>
<macro><name pos:line="2179" pos:column="1">MSOAPI_</name><argument_list pos:line="2179" pos:column="8">(<argument pos:line="2179" pos:column="9">DWORD</argument> )</argument_list></macro> <macro><name pos:line="2179" pos:column="17">MsoDwOfficeSaveProperties</name> <argument_list pos:line="2179" pos:column="43">(<argument pos:line="2179" pos:column="44">LPVOID pvContent</argument>,
						 <argument pos:line="2180" pos:column="50">LPSIOBJ lpSIObj</argument>,
						 <argument pos:line="2181" pos:column="50">LPDSIOBJ lpDSIObj</argument>,
						 <argument pos:line="2182" pos:column="50">LPUDOBJ lpUDObj</argument>,
						 <argument pos:line="2183" pos:column="50">DWORD dwFlags</argument>)</argument_list></macro><empty_stmt pos:line="2183" pos:column="64">;</empty_stmt>


<comment type="block" pos:line="2186" pos:column="1">/*-----------------------------------------------------------------------------
	MsoDwOfficeSavePropertiesEx

	Same as MsoDwOfficeSaveProperties but with option for encryption
	MsoDwOfficeSaveProperties now calls MsoDwOfficeSavePropertiesEx with NULL for pics
-------------------------------------------------------------------- HAILIU -*/</comment>
<macro><name pos:line="2192" pos:column="1">MSOAPI_</name><argument_list pos:line="2192" pos:column="8">( <argument pos:line="2192" pos:column="10">DWORD</argument> )</argument_list></macro> <macro><name pos:line="2192" pos:column="18">MsoDwOfficeSavePropertiesEx</name>
  <argument_list pos:line="2193" pos:column="3">(<argument pos:line="2193" pos:column="4">LPVOID pvContent</argument>,							 <comment type="line" pos:line="2193" pos:column="74">// Pointer to root storage or pihe</comment>
   <argument pos:line="2194" pos:column="4">LPSIOBJ lpSIObj</argument>,                     <comment type="line" pos:line="2194" pos:column="41">// Pointer to Summary Obj</comment>
   <argument pos:line="2195" pos:column="4">LPDSIOBJ lpDSIObj</argument>,                   <comment type="line" pos:line="2195" pos:column="41">// Pointer to Document Summary obj</comment>
   <argument pos:line="2196" pos:column="4">LPUDOBJ lpUDObj</argument>,                     <comment type="line" pos:line="2196" pos:column="41">// Pointer to User-defined Obj</comment>
   <argument pos:line="2197" pos:column="4">IMsoCryptSession *pics</argument>,              <comment type="line" pos:line="2197" pos:column="41">// non=NULL, if the property should be encrypted</comment>
   <argument pos:line="2198" pos:column="4">DWORD dwFlags</argument>)</argument_list></macro><empty_stmt pos:line="2198" pos:column="18">;</empty_stmt>                      <comment type="line" pos:line="2198" pos:column="41">// Flags</comment>
   
 
<comment type="block" pos:line="2201" pos:column="1">/*-----------------------------------------------------------------------------
	MsoDwOfficeSaveVBASig
 
 	A lot like MsoDwOfficeSaveProperties, but only saves the VBASig property
 	in the stream.  Gives the client a chance to close down the flattening stream
 	during encryption before creating the property stream.
------------------------------------------------------------------- MarkWal -*/</comment>
<macro><name pos:line="2208" pos:column="1">MSOAPI_</name><argument_list pos:line="2208" pos:column="8">(<argument pos:line="2208" pos:column="9">DWORD</argument>)</argument_list></macro> <macro><name pos:line="2208" pos:column="16">MsoDwOfficeSaveVBASig</name>
	<argument_list pos:line="2209" pos:column="9">(<argument pos:line="2209" pos:column="10">LPVOID pvContent</argument>,
	 <argument pos:line="2210" pos:column="10">LPDSIOBJ lpdsiobj</argument>,
	 <argument pos:line="2211" pos:column="10">DWORD dwFlags</argument>)</argument_list></macro><empty_stmt pos:line="2211" pos:column="24">;</empty_stmt>

<cpp:ifdef pos:line="2213" pos:column="1">#<cpp:directive pos:line="2213" pos:column="2">ifdef</cpp:directive> <name pos:line="2213" pos:column="8">VSMSODEBUG</name></cpp:ifdef>

<comment type="block" pos:line="2215" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFWriteOlePropBe

	Account for memory allocated for the OLE Properties objects.

	Will only check non-NULL paramters (lpSIObj, lpDSIObj, lpUDObj)

------------------------------------------------------------------ MARTINTH -*/</comment>
<macro><name pos:line="2223" pos:column="1">MSOAPI_</name><argument_list pos:line="2223" pos:column="8">(<argument pos:line="2223" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2223" pos:column="15">MsoFWriteOlePropBe</name><argument_list pos:line="2223" pos:column="33">(<argument pos:line="2223" pos:column="34">LPSIOBJ lpSIObj</argument>, <argument pos:line="2223" pos:column="51">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="2223" pos:column="70">LPUDOBJ lpUDObj</argument>)</argument_list></macro><empty_stmt pos:line="2223" pos:column="86">;</empty_stmt>

<cpp:endif pos:line="2225" pos:column="1">#<cpp:directive pos:line="2225" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="2225" pos:column="8">// VSMSODEBUG</comment>

<comment type="line" format="doxygen" pos:line="2227" pos:column="1">////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="2228" pos:column="1">// VB support routines - see spec for details.</comment>
<comment type="line" format="doxygen" pos:line="2229" pos:column="1">////////////////////////////////////////////////////</comment>

<comment type="line" pos:line="2231" pos:column="1">//</comment>
<comment type="line" pos:line="2232" pos:column="1">//  Used by Office Compatible.  Don't unexport.</comment>
<comment type="line" pos:line="2233" pos:column="1">// </comment>

<comment type="line" pos:line="2235" pos:column="1">// Converts a FileTime to a VariantDate</comment>
<comment type="line" pos:line="2236" pos:column="1">//</comment>
<macro><name pos:line="2237" pos:column="1">MSOAPIX_</name><argument_list pos:line="2237" pos:column="9">(<argument pos:line="2237" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2237" pos:column="16">FFtToVariantDate</name><argument_list pos:line="2237" pos:column="32">(<argument pos:line="2237" pos:column="33">LPFILETIME lpft</argument>, <argument pos:line="2237" pos:column="50">LPVARIANTARG lpvarg</argument>)</argument_list></macro><empty_stmt pos:line="2237" pos:column="70">;</empty_stmt>
<macro><name pos:line="2238" pos:column="1">MSOAPIX_</name><argument_list pos:line="2238" pos:column="9">(<argument pos:line="2238" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2238" pos:column="16">FVariantDateToSt</name><argument_list pos:line="2238" pos:column="32">(<argument pos:line="2238" pos:column="33">LPVARIANTARG lpvarg</argument>, <argument pos:line="2238" pos:column="54">LPSYSTEMTIME lpst</argument>)</argument_list></macro><empty_stmt pos:line="2238" pos:column="72">;</empty_stmt>

<comment type="line" pos:line="2240" pos:column="1">// Converts a VariantDate to a FileTime.</comment>
<comment type="line" pos:line="2241" pos:column="1">//</comment>
<macro><name pos:line="2242" pos:column="1">MSOAPIX_</name><argument_list pos:line="2242" pos:column="9">(<argument pos:line="2242" pos:column="10">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2242" pos:column="16">FVariantDateToFt</name><argument_list pos:line="2242" pos:column="32">(<argument pos:line="2242" pos:column="33">LPVARIANTARG lpvarg</argument>, <argument pos:line="2242" pos:column="54">LPFILETIME lpft</argument>)</argument_list></macro><empty_stmt pos:line="2242" pos:column="70">;</empty_stmt>

    <comment type="line" pos:line="2244" pos:column="5">// Creates a Builtin property collection and returns it.</comment>
    <comment type="line" pos:line="2245" pos:column="5">// pParent is the parent IDispatch object.</comment>
    <comment type="line" pos:line="2246" pos:column="5">// The new IDispatch object is returned via pvarg.</comment>
<macro><name pos:line="2247" pos:column="1">MSOAPI_</name><argument_list pos:line="2247" pos:column="8">(<argument pos:line="2247" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="2247" pos:column="16">MsoFGetBuiltinPropCollection</name> <argument_list pos:line="2247" pos:column="45">(<argument pos:line="2247" pos:column="46">LCID lcid</argument>,
						   <argument pos:line="2248" pos:column="52">LPSIOBJ lpSIObj</argument>,
						   <argument pos:line="2249" pos:column="52">LPDSIOBJ lpDSIObj</argument>,
						   <argument pos:line="2250" pos:column="52">IDispatch *pParent</argument>,
						   <argument pos:line="2251" pos:column="52">VARIANT *pvarg</argument>,
						   <argument pos:line="2252" pos:column="52">HMSOINST hinst</argument>)</argument_list></macro><empty_stmt pos:line="2252" pos:column="67">;</empty_stmt>

    <comment type="line" pos:line="2254" pos:column="5">// Creates a Custom property collection and returns it.</comment>
    <comment type="line" pos:line="2255" pos:column="5">// pParent is the parent IDispatch object.</comment>
    <comment type="line" pos:line="2256" pos:column="5">// The new IDispatch object is returned via pvarg.</comment>
<macro><name pos:line="2257" pos:column="1">MSOAPI_</name><argument_list pos:line="2257" pos:column="8">(<argument pos:line="2257" pos:column="9">BOOL</argument> )</argument_list></macro> <macro><name pos:line="2257" pos:column="16">MsoFGetCustomPropCollection</name> <argument_list pos:line="2257" pos:column="44">(<argument pos:line="2257" pos:column="45">LCID lcid</argument>,
						  <argument pos:line="2258" pos:column="51">LPUDOBJ lpUDObj</argument>,
						  <argument pos:line="2259" pos:column="51">IDispatch *pParent</argument>,
						  <argument pos:line="2260" pos:column="51">VARIANT *pvarg</argument>,
						  <argument pos:line="2261" pos:column="51">HMSOINST hinst</argument>)</argument_list></macro><empty_stmt pos:line="2261" pos:column="66">;</empty_stmt>

<comment type="block" pos:line="2263" pos:column="1">/*-----------------------------------------------------------------------------
	MsoFRemovePrivateProperties

	Clears properties with private information
-------------------------------------------------------------------- JORGEF -*/</comment>
<macro><name pos:line="2268" pos:column="1">MSOAPI_</name><argument_list pos:line="2268" pos:column="8">(<argument pos:line="2268" pos:column="9">BOOL</argument>)</argument_list></macro> <macro><name pos:line="2268" pos:column="15">MsoFRemovePrivateProperties</name><argument_list pos:line="2268" pos:column="42">(<argument pos:line="2268" pos:column="43">LPSIOBJ lpSIObj</argument>, <argument pos:line="2268" pos:column="60">LPDSIOBJ lpDSIObj</argument>, <argument pos:line="2268" pos:column="79">LPUDOBJ lpUDObj</argument>)</argument_list></macro><empty_stmt pos:line="2268" pos:column="95">;</empty_stmt>

<cpp:ifdef pos:line="2270" pos:column="1">#<cpp:directive pos:line="2270" pos:column="2">ifdef</cpp:directive> <name pos:line="2270" pos:column="8">__cplusplus</name></cpp:ifdef>
}</block></extern><empty_stmt pos:line="2271" pos:column="2">;</empty_stmt> <comment type="line" pos:line="2271" pos:column="4">// extern "C"</comment>
<cpp:endif pos:line="2272" pos:column="1">#<cpp:directive pos:line="2272" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:pragma pos:line="2274" pos:column="1">#<cpp:directive pos:line="2274" pos:column="2">pragma</cpp:directive> pack( pop, msoprops )</cpp:pragma>
<cpp:endif pos:line="2275" pos:column="1">#<cpp:directive pos:line="2275" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
