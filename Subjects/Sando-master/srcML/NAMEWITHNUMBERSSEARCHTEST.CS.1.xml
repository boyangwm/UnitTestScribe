<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="D:\Research\Subjects\Sando-master\IntegrationTests\Search\NAMEWITHNUMBERSSEARCHTEST.CS" pos:tabs="8"><using pos:line="1" pos:column="1">using <name pos:line="1" pos:column="7">System</name>;</using>
<using pos:line="2" pos:column="1">using <name><name pos:line="2" pos:column="7">System</name><op:operator pos:line="2" pos:column="13">.</op:operator><name pos:line="2" pos:column="14">Collections</name><op:operator pos:line="2" pos:column="25">.</op:operator><name pos:line="2" pos:column="26">Generic</name></name>;</using>
<using pos:line="3" pos:column="1">using <name><name pos:line="3" pos:column="7">System</name><op:operator pos:line="3" pos:column="13">.</op:operator><name pos:line="3" pos:column="14">IO</name></name>;</using>
<using pos:line="4" pos:column="1">using <name><name pos:line="4" pos:column="7">Lucene</name><op:operator pos:line="4" pos:column="13">.</op:operator><name pos:line="4" pos:column="14">Net</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">Analysis</name></name>;</using>
<using pos:line="5" pos:column="1">using <name><name pos:line="5" pos:column="7">Lucene</name><op:operator pos:line="5" pos:column="13">.</op:operator><name pos:line="5" pos:column="14">Net</name><op:operator pos:line="5" pos:column="17">.</op:operator><name pos:line="5" pos:column="18">Analysis</name><op:operator pos:line="5" pos:column="26">.</op:operator><name pos:line="5" pos:column="27">Snowball</name></name>;</using>
<using pos:line="6" pos:column="1">using <name><name pos:line="6" pos:column="7">NUnit</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">Framework</name></name>;</using>
<using pos:line="7" pos:column="1">using <name><name pos:line="7" pos:column="7">Sando</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">Core</name></name>;</using>
<using pos:line="8" pos:column="1">using <name><name pos:line="8" pos:column="7">Sando</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">DependencyInjection</name></name>;</using>
<using pos:line="9" pos:column="1">using <name><name pos:line="9" pos:column="7">Sando</name><op:operator pos:line="9" pos:column="12">.</op:operator><name pos:line="9" pos:column="13">ExtensionContracts</name><op:operator pos:line="9" pos:column="31">.</op:operator><name pos:line="9" pos:column="32">ProgramElementContracts</name></name>;</using>
<using pos:line="10" pos:column="1">using <name><name pos:line="10" pos:column="7">Sando</name><op:operator pos:line="10" pos:column="12">.</op:operator><name pos:line="10" pos:column="13">ExtensionContracts</name><op:operator pos:line="10" pos:column="31">.</op:operator><name pos:line="10" pos:column="32">ResultsReordererContracts</name></name>;</using>
<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">Sando</name><op:operator pos:line="11" pos:column="12">.</op:operator><name pos:line="11" pos:column="13">Indexer</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">Sando</name><op:operator pos:line="12" pos:column="12">.</op:operator><name pos:line="12" pos:column="13">Indexer</name><op:operator pos:line="12" pos:column="20">.</op:operator><name pos:line="12" pos:column="21">Searching</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Sando</name><op:operator pos:line="13" pos:column="12">.</op:operator><name pos:line="13" pos:column="13">SearchEngine</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Sando</name><op:operator pos:line="14" pos:column="12">.</op:operator><name pos:line="14" pos:column="13">UI</name><op:operator pos:line="14" pos:column="15">.</op:operator><name pos:line="14" pos:column="16">Monitoring</name></name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">UnitTestHelpers</name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Sando</name><op:operator pos:line="16" pos:column="12">.</op:operator><name pos:line="16" pos:column="13">Recommender</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name><name pos:line="18" pos:column="11">Sando</name><op:operator pos:line="18" pos:column="16">.</op:operator><name pos:line="18" pos:column="17">IntegrationTests</name><op:operator pos:line="18" pos:column="33">.</op:operator><name pos:line="18" pos:column="34">Search</name></name>
<block pos:line="19" pos:column="1">{
	<class><attribute pos:line="20" pos:column="9">[<expr><name pos:line="20" pos:column="10">TestFixture</name></expr>]</attribute>
	<specifier pos:line="21" pos:column="9">public</specifier> class <name pos:line="21" pos:column="22">NamesWithNumbersSearchTest</name> <super pos:line="21" pos:column="49">:<name pos:line="21" pos:column="50">AutomaticallyIndexingTestClass</name></super>
	<block pos:line="22" pos:column="9">{
		<function><type><attribute pos:line="23" pos:column="17">[<expr><name pos:line="23" pos:column="18">Test</name></expr>]</attribute>
		<specifier pos:line="24" pos:column="17">public</specifier> <name pos:line="24" pos:column="24">void</name></type> <name pos:line="24" pos:column="29">SearchReturnsElementsWithNumbersInNames</name><parameter_list pos:line="24" pos:column="68">()</parameter_list>
		<block pos:line="25" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var</name></type> <name pos:line="26" pos:column="17">codeSearcher</name> <init pos:line="26" pos:column="30">= <expr><op:operator pos:line="26" pos:column="32">new</op:operator> <call><name pos:line="26" pos:column="36">CodeSearcher</name><argument_list pos:line="26" pos:column="48">(<argument><expr><op:operator pos:line="26" pos:column="49">new</op:operator> <call><name pos:line="26" pos:column="53">IndexerSearcher</name><argument_list pos:line="26" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">string</name></type> <name pos:line="27" pos:column="32">keywords</name> <init pos:line="27" pos:column="41">= <expr><lit:literal type="string" pos:line="27" pos:column="43">"problem"</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="28" pos:column="25">List</name><argument_list pos:line="28" pos:column="29">&lt;<argument><name pos:line="28" pos:column="30">CodeSearchResult</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="48">codeSearchResults</name> <init pos:line="28" pos:column="66">= <expr><call><name><name pos:line="28" pos:column="68">codeSearcher</name><op:operator pos:line="28" pos:column="80">.</op:operator><name pos:line="28" pos:column="81">Search</name></name><argument_list pos:line="28" pos:column="87">(<argument><expr><name pos:line="28" pos:column="88">keywords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="29" pos:column="25">Assert</name><op:operator pos:line="29" pos:column="31">.</op:operator><name pos:line="29" pos:column="32">AreEqual</name></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name><name pos:line="29" pos:column="41">codeSearchResults</name><op:operator pos:line="29" pos:column="58">.</op:operator><name pos:line="29" pos:column="59">Count</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="29" pos:column="66">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="29" pos:column="69">"Invalid results number"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="30" pos:column="25">var</name></type> <name pos:line="30" pos:column="29">classSearchResult</name> <init pos:line="30" pos:column="47">= <expr><call><name><name pos:line="30" pos:column="49">codeSearchResults</name><op:operator pos:line="30" pos:column="66">.</op:operator><name pos:line="30" pos:column="67">Find</name></name><argument_list pos:line="30" pos:column="71">(<argument><expr><lambda><name pos:line="30" pos:column="72">el</name> <op:operator pos:line="30" pos:column="75">=&gt;</op:operator> <name><name pos:line="30" pos:column="78">el</name><op:operator pos:line="30" pos:column="80">.</op:operator><name pos:line="30" pos:column="81">ProgramElement</name><op:operator pos:line="30" pos:column="95">.</op:operator><name pos:line="30" pos:column="96">ProgramElementType</name></name> <op:operator pos:line="30" pos:column="115">==</op:operator> <name><name pos:line="30" pos:column="118">ProgramElementType</name><op:operator pos:line="30" pos:column="136">.</op:operator><name pos:line="30" pos:column="137">Class</name> <type:modifier pos:line="30" pos:column="143">&amp;&amp;</type:modifier></name> <name><name pos:line="30" pos:column="146">el</name><op:operator pos:line="30" pos:column="148">.</op:operator><name pos:line="30" pos:column="149">ProgramElement</name><op:operator pos:line="30" pos:column="163">.</op:operator><name pos:line="30" pos:column="164">Name</name></name> <op:operator pos:line="30" pos:column="169">==</op:operator> <lit:literal type="string" pos:line="30" pos:column="172">"Problem0010Resolver"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="31" pos:column="25">if<condition pos:line="31" pos:column="27">(<expr><name pos:line="31" pos:column="28">classSearchResult</name> <op:operator pos:line="31" pos:column="46">==</op:operator> <name pos:line="31" pos:column="49">null</name></expr>)</condition><then pos:line="31" pos:column="54">
			<block pos:line="32" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="33" pos:column="33">Assert</name><op:operator pos:line="33" pos:column="39">.</op:operator><name pos:line="33" pos:column="40">Fail</name></name><argument_list pos:line="33" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="45">"Failed to find relevant search result for search: "</lit:literal> <op:operator pos:line="33" pos:column="98">+</op:operator> <name pos:line="33" pos:column="100">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="35" pos:column="25">var</name></type> <name pos:line="35" pos:column="29">classElement</name> <init pos:line="35" pos:column="42">= <expr><name><name pos:line="35" pos:column="44">classSearchResult</name><op:operator pos:line="35" pos:column="61">.</op:operator><name pos:line="35" pos:column="62">ProgramElement</name></name> <op:operator pos:line="35" pos:column="77">as</op:operator> <name pos:line="35" pos:column="80">ClassElement</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="36" pos:column="25">Assert</name><op:operator pos:line="36" pos:column="31">.</op:operator><name pos:line="36" pos:column="32">AreEqual</name></name><argument_list pos:line="36" pos:column="40">(<argument><expr><name><name pos:line="36" pos:column="41">classElement</name><op:operator pos:line="36" pos:column="53">.</op:operator><name pos:line="36" pos:column="54">AccessLevel</name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="67">AccessLevel</name><op:operator pos:line="36" pos:column="78">.</op:operator><name pos:line="36" pos:column="79">Public</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="36" pos:column="87">"Class access level differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="37" pos:column="25">Assert</name><op:operator pos:line="37" pos:column="31">.</op:operator><name pos:line="37" pos:column="32">AreEqual</name></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name><name pos:line="37" pos:column="41">classElement</name><op:operator pos:line="37" pos:column="53">.</op:operator><name pos:line="37" pos:column="54">ExtendedClasses</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="71">"IResolver"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="84">"Class extended classes differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="38" pos:column="25">Assert</name><op:operator pos:line="38" pos:column="31">.</op:operator><name pos:line="38" pos:column="32">AreEqual</name></name><argument_list pos:line="38" pos:column="40">(<argument><expr><name><name pos:line="38" pos:column="41">classElement</name><op:operator pos:line="38" pos:column="53">.</op:operator><name pos:line="38" pos:column="54">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="38" pos:column="76">8</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="38" pos:column="79">"Class definition line number differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">Assert</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">True</name></name><argument_list pos:line="39" pos:column="24">(<argument><expr><call><name><name pos:line="39" pos:column="25">classElement</name><op:operator pos:line="39" pos:column="37">.</op:operator><name pos:line="39" pos:column="38">FullFilePath</name><op:operator pos:line="39" pos:column="50">.</op:operator><name pos:line="39" pos:column="51">EndsWith</name></name><argument_list pos:line="39" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="60">"\\TestFiles\\NamesWithNumbersTestFiles\\Problem0010Resolver.cs"</lit:literal><op:operator pos:line="39" pos:column="124">.</op:operator><call><name pos:line="39" pos:column="125">ToLowerInvariant</name><argument_list pos:line="39" pos:column="141">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="39" pos:column="146">"Class full file path is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="40" pos:column="25">Assert</name><op:operator pos:line="40" pos:column="31">.</op:operator><name pos:line="40" pos:column="32">AreEqual</name></name><argument_list pos:line="40" pos:column="40">(<argument><expr><name><name pos:line="40" pos:column="41">classElement</name><op:operator pos:line="40" pos:column="53">.</op:operator><name pos:line="40" pos:column="54">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="40" pos:column="60">"Problem0010Resolver"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="40" pos:column="83">"Class name differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="41" pos:column="25">Assert</name><op:operator pos:line="41" pos:column="31">.</op:operator><name pos:line="41" pos:column="32">AreEqual</name></name><argument_list pos:line="41" pos:column="40">(<argument><expr><name><name pos:line="41" pos:column="41">classElement</name><op:operator pos:line="41" pos:column="53">.</op:operator><name pos:line="41" pos:column="54">ProgramElementType</name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="74">ProgramElementType</name><op:operator pos:line="41" pos:column="92">.</op:operator><name pos:line="41" pos:column="93">Class</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="41" pos:column="100">"Program element type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="42" pos:column="25">Assert</name><op:operator pos:line="42" pos:column="31">.</op:operator><name pos:line="42" pos:column="32">AreEqual</name></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name><name pos:line="42" pos:column="41">classElement</name><op:operator pos:line="42" pos:column="53">.</op:operator><name pos:line="42" pos:column="54">ImplementedInterfaces</name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="77">String</name><op:operator pos:line="42" pos:column="83">.</op:operator><name pos:line="42" pos:column="84">Empty</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="42" pos:column="91">"Class implemented interfaces differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="43" pos:column="25">Assert</name><op:operator pos:line="43" pos:column="31">.</op:operator><name pos:line="43" pos:column="32">False</name></name><argument_list pos:line="43" pos:column="37">(<argument><expr><call><name><name pos:line="43" pos:column="38">String</name><op:operator pos:line="43" pos:column="44">.</op:operator><name pos:line="43" pos:column="45">IsNullOrWhiteSpace</name></name><argument_list pos:line="43" pos:column="63">(<argument><expr><name><name pos:line="43" pos:column="64">classElement</name><op:operator pos:line="43" pos:column="76">.</op:operator><name pos:line="43" pos:column="77">RawSource</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="89">"Class snippet is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="45" pos:column="25">var</name></type> <name pos:line="45" pos:column="29">constructorSearchResult</name> <init pos:line="45" pos:column="53">= <expr><call><name><name pos:line="45" pos:column="55">codeSearchResults</name><op:operator pos:line="45" pos:column="72">.</op:operator><name pos:line="45" pos:column="73">Find</name></name><argument_list pos:line="45" pos:column="77">(<argument><expr><lambda><name pos:line="45" pos:column="78">el</name> <op:operator pos:line="45" pos:column="81">=&gt;</op:operator> <name><name pos:line="45" pos:column="84">el</name><op:operator pos:line="45" pos:column="86">.</op:operator><name pos:line="45" pos:column="87">ProgramElement</name><op:operator pos:line="45" pos:column="101">.</op:operator><name pos:line="45" pos:column="102">ProgramElementType</name></name> <op:operator pos:line="45" pos:column="121">==</op:operator> <name><name pos:line="45" pos:column="124">ProgramElementType</name><op:operator pos:line="45" pos:column="142">.</op:operator><name pos:line="45" pos:column="143">Method</name> <type:modifier pos:line="45" pos:column="150">&amp;&amp;</type:modifier></name> <name><name pos:line="45" pos:column="153">el</name><op:operator pos:line="45" pos:column="155">.</op:operator><name pos:line="45" pos:column="156">ProgramElement</name><op:operator pos:line="45" pos:column="170">.</op:operator><name pos:line="45" pos:column="171">Name</name></name> <op:operator pos:line="45" pos:column="176">==</op:operator> <lit:literal type="string" pos:line="45" pos:column="179">"Problem0010Resolver"</lit:literal></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="46" pos:column="25">if<condition pos:line="46" pos:column="27">(<expr><name pos:line="46" pos:column="28">constructorSearchResult</name> <op:operator pos:line="46" pos:column="52">==</op:operator> <name pos:line="46" pos:column="55">null</name></expr>)</condition><then pos:line="46" pos:column="60">
			<block pos:line="47" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="48" pos:column="33">Assert</name><op:operator pos:line="48" pos:column="39">.</op:operator><name pos:line="48" pos:column="40">Fail</name></name><argument_list pos:line="48" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="45">"Failed to find relevant search result for search: "</lit:literal> <op:operator pos:line="48" pos:column="98">+</op:operator> <name pos:line="48" pos:column="100">keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="50" pos:column="25">var</name></type> <name pos:line="50" pos:column="29">constructorElement</name> <init pos:line="50" pos:column="48">= <expr><name><name pos:line="50" pos:column="50">constructorSearchResult</name><op:operator pos:line="50" pos:column="73">.</op:operator><name pos:line="50" pos:column="74">ProgramElement</name></name> <op:operator pos:line="50" pos:column="89">as</op:operator> <name pos:line="50" pos:column="92">MethodElement</name></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="51" pos:column="25">//Assert.AreEqual(constructorElement.AccessLevel, AccessLevel.Public, "Constructor access level differs!");</comment>
			<expr_stmt><expr><call><name><name pos:line="52" pos:column="25">Assert</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">IsTrue</name></name><argument_list pos:line="52" pos:column="38">(<argument><expr><name><name pos:line="52" pos:column="39">constructorElement</name><op:operator pos:line="52" pos:column="57">.</op:operator><name pos:line="52" pos:column="58">IsConstructor</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="73">"IResolver"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="86">"Constructor extended classes differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="53" pos:column="25">Assert</name><op:operator pos:line="53" pos:column="31">.</op:operator><name pos:line="53" pos:column="32">AreEqual</name></name><argument_list pos:line="53" pos:column="40">(<argument><expr><name><name pos:line="53" pos:column="41">constructorElement</name><op:operator pos:line="53" pos:column="59">.</op:operator><name pos:line="53" pos:column="60">DefinitionLineNumber</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="53" pos:column="82">10</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="86">"Constructor definition line number differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">Assert</name><op:operator pos:line="54" pos:column="19">.</op:operator><name pos:line="54" pos:column="20">True</name></name><argument_list pos:line="54" pos:column="24">(<argument><expr><call><name><name pos:line="54" pos:column="25">constructorElement</name><op:operator pos:line="54" pos:column="43">.</op:operator><name pos:line="54" pos:column="44">FullFilePath</name><op:operator pos:line="54" pos:column="56">.</op:operator><name pos:line="54" pos:column="57">EndsWith</name></name><argument_list pos:line="54" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="66">"\\TestFiles\\NamesWithNumbersTestFiles\\Problem0010Resolver.cs"</lit:literal><op:operator pos:line="54" pos:column="130">.</op:operator><call><name pos:line="54" pos:column="131">ToLowerInvariant</name><argument_list pos:line="54" pos:column="147">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="54" pos:column="152">"Constructor full file path is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="55" pos:column="25">Assert</name><op:operator pos:line="55" pos:column="31">.</op:operator><name pos:line="55" pos:column="32">AreEqual</name></name><argument_list pos:line="55" pos:column="40">(<argument><expr><name><name pos:line="55" pos:column="41">constructorElement</name><op:operator pos:line="55" pos:column="59">.</op:operator><name pos:line="55" pos:column="60">Name</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="66">"Problem0010Resolver"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="89">"Constructor name differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="56" pos:column="25">Assert</name><op:operator pos:line="56" pos:column="31">.</op:operator><name pos:line="56" pos:column="32">AreEqual</name></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name><name pos:line="56" pos:column="41">constructorElement</name><op:operator pos:line="56" pos:column="59">.</op:operator><name pos:line="56" pos:column="60">ProgramElementType</name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="80">ProgramElementType</name><op:operator pos:line="56" pos:column="98">.</op:operator><name pos:line="56" pos:column="99">Method</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="107">"Program element type differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="57" pos:column="25">Assert</name><op:operator pos:line="57" pos:column="31">.</op:operator><name pos:line="57" pos:column="32">AreEqual</name></name><argument_list pos:line="57" pos:column="40">(<argument><expr><name><name pos:line="57" pos:column="41">constructorElement</name><op:operator pos:line="57" pos:column="59">.</op:operator><name pos:line="57" pos:column="60">ReturnType</name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="72">String</name><op:operator pos:line="57" pos:column="78">.</op:operator><name pos:line="57" pos:column="79">Empty</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="57" pos:column="86">"Constructor should have an empty return type!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="58" pos:column="25">Assert</name><op:operator pos:line="58" pos:column="31">.</op:operator><name pos:line="58" pos:column="32">AreEqual</name></name><argument_list pos:line="58" pos:column="40">(<argument><expr><name><name pos:line="58" pos:column="41">constructorElement</name><op:operator pos:line="58" pos:column="59">.</op:operator><name pos:line="58" pos:column="60">Modifiers</name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="71">String</name><op:operator pos:line="58" pos:column="77">.</op:operator><name pos:line="58" pos:column="78">Empty</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="58" pos:column="85">"Constructor modifiers differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="59" pos:column="25">Assert</name><op:operator pos:line="59" pos:column="31">.</op:operator><name pos:line="59" pos:column="32">AreEqual</name></name><argument_list pos:line="59" pos:column="40">(<argument><expr><name><name pos:line="59" pos:column="41">constructorElement</name><op:operator pos:line="59" pos:column="59">.</op:operator><name pos:line="59" pos:column="60">Arguments</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="71">"long max"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="59" pos:column="83">"Constructor modifiers differs!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="60" pos:column="25">Assert</name><op:operator pos:line="60" pos:column="31">.</op:operator><name pos:line="60" pos:column="32">False</name></name><argument_list pos:line="60" pos:column="37">(<argument><expr><call><name><name pos:line="60" pos:column="38">String</name><op:operator pos:line="60" pos:column="44">.</op:operator><name pos:line="60" pos:column="45">IsNullOrWhiteSpace</name></name><argument_list pos:line="60" pos:column="63">(<argument><expr><name><name pos:line="60" pos:column="64">constructorElement</name><op:operator pos:line="60" pos:column="82">.</op:operator><name pos:line="60" pos:column="83">RawSource</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="60" pos:column="95">"Constructor snippet is invalid!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

        <function><type><specifier pos:line="63" pos:column="9">public</specifier> <specifier pos:line="63" pos:column="16">override</specifier> <name pos:line="63" pos:column="25">string</name></type> <name pos:line="63" pos:column="32">GetIndexDirName</name><parameter_list pos:line="63" pos:column="47">()</parameter_list>
        <block pos:line="64" pos:column="9">{
            <return pos:line="65" pos:column="13">return <expr><lit:literal type="string" pos:line="65" pos:column="20">"NamesWithNumbersSearchTest"</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="68" pos:column="9">public</specifier> <specifier pos:line="68" pos:column="16">override</specifier> <name pos:line="68" pos:column="25">string</name></type> <name pos:line="68" pos:column="32">GetFilesDirectory</name><parameter_list pos:line="68" pos:column="49">()</parameter_list>
        <block pos:line="69" pos:column="9">{
            <return pos:line="70" pos:column="13">return <expr><lit:literal type="string" pos:line="70" pos:column="20">"..\\..\\IntegrationTests\\TestFiles\\NamesWithNumbersTestFiles"</lit:literal></expr>;</return>
        }</block></function>

        <function><type><specifier pos:line="73" pos:column="9">public</specifier> <specifier pos:line="73" pos:column="16">override</specifier> <name pos:line="73" pos:column="25">TimeSpan</name><type:modifier pos:line="73" pos:column="33">?</type:modifier></type> <name pos:line="73" pos:column="35">GetTimeToCommit</name><parameter_list pos:line="73" pos:column="50">()</parameter_list>
        <block pos:line="74" pos:column="9">{
            <return pos:line="75" pos:column="13">return <expr><call><name><name pos:line="75" pos:column="20">TimeSpan</name><op:operator pos:line="75" pos:column="28">.</op:operator><name pos:line="75" pos:column="29">FromSeconds</name></name><argument_list pos:line="75" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="75" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line" pos:line="78" pos:column="9">//[TestFixtureSetUp]</comment>
        <comment type="line" pos:line="79" pos:column="9">//public void Setup()</comment>
        <comment type="line" pos:line="80" pos:column="9">//{</comment>
            <comment type="line" pos:line="81" pos:column="13">//TestUtils.InitializeDefaultExtensionPoints();</comment>
            <comment type="line" pos:line="82" pos:column="13">//indexPath = Path.Combine(Path.GetTempPath(), "NamesWithNumbersSearchTest");</comment>
            <comment type="line" pos:line="83" pos:column="13">//Directory.CreateDirectory(indexPath);</comment>
            <comment type="line" pos:line="84" pos:column="13">//key = new SolutionKey(Guid.NewGuid(), "..\\..\\IntegrationTests\\TestFiles\\NamesWithNumbersTestFiles", indexPath);</comment>
            <comment type="line" pos:line="85" pos:column="13">//ServiceLocator.RegisterInstance(key); ServiceLocator.RegisterInstance&lt;Analyzer&gt;(new SnowballAnalyzer("English"));</comment>

            <comment type="line" pos:line="87" pos:column="13">//var indexer = new DocumentIndexer(TimeSpan.FromSeconds(1));</comment>
            <comment type="line" pos:line="88" pos:column="13">//ServiceLocator.RegisterInstance(indexer);</comment>

            <comment type="line" pos:line="90" pos:column="13">//monitor = new SolutionMonitor(new SolutionWrapper(), indexer, false);</comment>
            <comment type="line" pos:line="91" pos:column="13">//string[] files = Directory.GetFiles("..\\..\\IntegrationTests\\TestFiles\\NamesWithNumbersTestFiles");</comment>
            <comment type="line" pos:line="92" pos:column="13">//SwumManager.Instance.Initialize(key.IndexPath, true);</comment>
            <comment type="line" pos:line="93" pos:column="13">//SwumManager.Instance.Generator = new ABB.SrcML.SrcMLGenerator("LIBS\\SrcML"); ;</comment>
            <comment type="line" pos:line="94" pos:column="13">//foreach(var file in files)</comment>
            <comment type="line" pos:line="95" pos:column="13">//{</comment>
            <comment type="line" pos:line="96" pos:column="13">//    string fullPath = Path.GetFullPath(file);</comment>
            <comment type="line" pos:line="97" pos:column="13">//    monitor.ProcessFileForTesting(fullPath);</comment>
            <comment type="line" pos:line="98" pos:column="13">//}</comment>
            <comment type="line" pos:line="99" pos:column="13">//monitor.UpdateAfterAdditions();</comment>
		<comment type="line" pos:line="100" pos:column="17">//}</comment>

        <comment type="line" pos:line="102" pos:column="9">//[TestFixtureTearDown]</comment>
        <comment type="line" pos:line="103" pos:column="9">//public void TearDown()</comment>
        <comment type="line" pos:line="104" pos:column="9">//{</comment>
        <comment type="line" pos:line="105" pos:column="9">//    monitor.StopMonitoring(true);</comment>
        <comment type="line" pos:line="106" pos:column="9">//    Directory.Delete(indexPath, true);</comment>
        <comment type="line" pos:line="107" pos:column="9">//}</comment>

		<decl_stmt><decl><type><specifier pos:line="109" pos:column="17">private</specifier> <name pos:line="109" pos:column="25">string</name></type> <name pos:line="109" pos:column="32">indexPath</name></decl>;</decl_stmt>
		<comment type="line" pos:line="110" pos:column="17">//private static SolutionMonitor monitor;</comment>
		
	}</block></class>
}</block></namespace>
</unit>
