<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="D:\Research\Subjects\Sando-master\LIBS\Extensions\inc\unicase.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// unicase.h - Unicode letter case</comment>
<comment type="line" pos:line="2" pos:column="1">//-----------------------------------------------------------------</comment>
<comment type="line" pos:line="3" pos:column="1">// Copyright 1998-2000 Microsoft Corporation.  All Rights Reserved.</comment>
<comment type="line" pos:line="4" pos:column="1">//</comment>
<comment type="line" pos:line="5" pos:column="1">// June 1, 1998</comment>
<comment type="line" pos:line="6" pos:column="1">//</comment>
<comment type="line" pos:line="7" pos:column="1">//-----------------------------------------------------------------</comment>
<cpp:ifdef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifdef</cpp:directive> <name pos:line="8" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">pragma</cpp:directive> once</cpp:pragma>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifndef</cpp:directive> <name pos:line="12" pos:column="9">__UNICASE_H__</name></cpp:ifndef>
<cpp:define pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="13" pos:column="9">__UNICASE_H__</name></cpp:macro></cpp:define>

<function_decl><type><name pos:line="15" pos:column="1">WCHAR</name>   <name pos:line="15" pos:column="9">WINAPI</name></type>  <name pos:line="15" pos:column="17">UpperCase</name> <parameter_list pos:line="15" pos:column="27">(<param><decl><type><name pos:line="15" pos:column="28">WCHAR</name></type> <name pos:line="15" pos:column="34">c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="16" pos:column="1">WCHAR</name>   <name pos:line="16" pos:column="9">WINAPI</name></type>  <name pos:line="16" pos:column="17">LowerCase</name> <parameter_list pos:line="16" pos:column="27">(<param><decl><type><name pos:line="16" pos:column="28">WCHAR</name></type> <name pos:line="16" pos:column="34">c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="17" pos:column="1">PWSTR</name>   <name pos:line="17" pos:column="9">WINAPI</name></type>  <name pos:line="17" pos:column="17">UpperCaseStr</name>   <parameter_list pos:line="17" pos:column="32">(<param><decl><type><name pos:line="17" pos:column="33">_Inout_opt_z_</name> <name pos:line="17" pos:column="47">PWSTR</name></type> <name pos:line="17" pos:column="53">pSrc</name></decl></param>)</parameter_list>;</function_decl> <comment type="line" pos:line="17" pos:column="60">// Returns ptr to 0 terminator</comment>
<function_decl><type><name pos:line="18" pos:column="1">PWSTR</name>   <name pos:line="18" pos:column="9">WINAPI</name></type>  <name pos:line="18" pos:column="17">LowerCaseStr</name>   <parameter_list pos:line="18" pos:column="32">(<param><decl><type><name pos:line="18" pos:column="33">_Inout_opt_z_</name> <name pos:line="18" pos:column="47">PWSTR</name></type> <name pos:line="18" pos:column="53">pSrc</name></decl></param>)</parameter_list>;</function_decl> <comment type="line" pos:line="18" pos:column="60">// Returns ptr to 0 terminator</comment>

<function_decl><type><name pos:line="20" pos:column="1">WCHAR</name>   <name pos:line="20" pos:column="9">WINAPI</name></type>  <name pos:line="20" pos:column="17">FileSystemUpperCase</name> <parameter_list pos:line="20" pos:column="37">(<param><decl><type><name pos:line="20" pos:column="38">WCHAR</name></type> <name pos:line="20" pos:column="44">c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="21" pos:column="1">WCHAR</name>   <name pos:line="21" pos:column="9">WINAPI</name></type>  <name pos:line="21" pos:column="17">FileSystemLowerCase</name> <parameter_list pos:line="21" pos:column="37">(<param><decl><type><name pos:line="21" pos:column="38">WCHAR</name></type> <name pos:line="21" pos:column="44">c</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// To{Upper|Lower}Case - Convert buffer to Upper/Lower case.</comment>
<comment type="line" pos:line="25" pos:column="1">// pSrc -- Source string</comment>
<comment type="line" pos:line="26" pos:column="1">// pDst -- Destination buffer</comment>
<comment type="line" pos:line="27" pos:column="1">// cch  -- For zero-terminated mode, pass -1. pDst assumed to be large enough.</comment>
<comment type="line" pos:line="28" pos:column="1">//         Otherwise pass maximum number of characters to convert into pDst</comment>
<comment type="line" pos:line="29" pos:column="1">//         including the zero terminator. Conversion always stops at a 0 char</comment>
<comment type="line" pos:line="30" pos:column="1">//         in pSrc.</comment>
<comment type="line" pos:line="31" pos:column="1">// Returns: pointer to END of pDst</comment>
<comment type="line" pos:line="32" pos:column="1">//</comment>
<decl_stmt><decl><type><name pos:line="33" pos:column="1">PWSTR</name>   <name pos:line="33" pos:column="9">WINAPI</name></type>  <name pos:line="33" pos:column="17">ToUpperCase</name>    <argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">_In_opt_z_</name> <macro><name pos:line="33" pos:column="44">_In_count_</name><argument_list pos:line="33" pos:column="54">(<argument pos:line="33" pos:column="55">cch</argument>)</argument_list></macro> <name pos:line="33" pos:column="60">PCWSTR</name> <name pos:line="33" pos:column="67">pSrc</name></expr></argument>, <argument><expr><macro><name pos:line="33" pos:column="73">_Out_z_cap_</name><argument_list pos:line="33" pos:column="84">(<argument pos:line="33" pos:column="85">cch</argument>)</argument_list></macro> <name pos:line="33" pos:column="90">PWSTR</name> <name pos:line="33" pos:column="96">pDst</name></expr></argument>, <argument><expr><name pos:line="33" pos:column="102">size_t</name> <name pos:line="33" pos:column="109">cch</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="34" pos:column="1">PWSTR</name>   <name pos:line="34" pos:column="9">WINAPI</name></type>  <name pos:line="34" pos:column="17">ToLowerCase</name>    <argument_list pos:line="34" pos:column="32">(<argument><expr><name pos:line="34" pos:column="33">_In_opt_z_</name> <macro><name pos:line="34" pos:column="44">_In_count_</name><argument_list pos:line="34" pos:column="54">(<argument pos:line="34" pos:column="55">cch</argument>)</argument_list></macro> <name pos:line="34" pos:column="60">PCWSTR</name> <name pos:line="34" pos:column="67">pSrc</name></expr></argument>, <argument><expr><macro><name pos:line="34" pos:column="73">_Out_z_cap_</name><argument_list pos:line="34" pos:column="84">(<argument pos:line="34" pos:column="85">cch</argument>)</argument_list></macro> <name pos:line="34" pos:column="90">PWSTR</name> <name pos:line="34" pos:column="96">pDst</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="102">size_t</name> <name pos:line="34" pos:column="109">cch</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line" pos:line="36" pos:column="1">//</comment>
<comment type="line" pos:line="37" pos:column="1">// To{Upper|Lower}Case - Convert buffer to Upper/Lower case in place.</comment>
<comment type="line" pos:line="38" pos:column="1">// pBuffer -- String to {upper|lower} case.</comment>
<comment type="line" pos:line="39" pos:column="1">// Returns: pointer to BEGINNING of pBuffer.</comment>
<comment type="line" pos:line="40" pos:column="1">//</comment>
<function_decl><type><name pos:line="41" pos:column="1">PWSTR</name>   <name pos:line="41" pos:column="9">WINAPI</name></type>  <name pos:line="41" pos:column="17">ToUpperCaseInPlace</name>    <parameter_list pos:line="41" pos:column="39">(<param><decl><type><name pos:line="41" pos:column="40">_Inout_opt_z_</name> <name pos:line="41" pos:column="54">PWSTR</name></type> <name pos:line="41" pos:column="60">pBuffer</name></decl></param>)</parameter_list>;</function_decl> 
<function_decl><type><name pos:line="42" pos:column="1">PWSTR</name>   <name pos:line="42" pos:column="9">WINAPI</name></type>  <name pos:line="42" pos:column="17">ToLowerCaseInPlace</name>    <parameter_list pos:line="42" pos:column="39">(<param><decl><type><name pos:line="42" pos:column="40">_Inout_opt_z_</name> <name pos:line="42" pos:column="54">PWSTR</name></type> <name pos:line="42" pos:column="60">pBuffer</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="44" pos:column="1">//</comment>
<comment type="line" pos:line="45" pos:column="1">// Compare[No]Case[N][Prepared]</comment>
<comment type="line" pos:line="46" pos:column="1">//</comment>
<comment type="line" pos:line="47" pos:column="1">// The szA and/or szB params may be NULL.</comment>
<comment type="line" pos:line="48" pos:column="1">//</comment>
<comment type="line" pos:line="49" pos:column="1">// *Prepared variations assume that szA is prepared according to </comment>
<comment type="line" pos:line="50" pos:column="1">// LowerCaseStr or ToLowerCase.</comment>
<comment type="line" pos:line="51" pos:column="1">//</comment>
<comment type="line" pos:line="52" pos:column="1">// Returns:</comment>
<comment type="line" pos:line="53" pos:column="1">//      -1  A &lt; B</comment>
<comment type="line" pos:line="54" pos:column="1">//       0  A == B</comment>
<comment type="line" pos:line="55" pos:column="1">//       1  A &gt; B</comment>
<comment type="line" pos:line="56" pos:column="1">//</comment>
<function_decl><type><name pos:line="57" pos:column="1">int</name>     <name pos:line="57" pos:column="9">WINAPI</name></type>  <name pos:line="57" pos:column="17">CompareCase</name>            <parameter_list pos:line="57" pos:column="40">(<param><decl><type><name pos:line="57" pos:column="41">_In_opt_z_</name> <name pos:line="57" pos:column="52">PCWSTR</name></type> <name pos:line="57" pos:column="59">szA</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="64">_In_opt_z_</name> <name pos:line="57" pos:column="75">PCWSTR</name></type> <name pos:line="57" pos:column="82">szB</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="58" pos:column="1">int</name>     <name pos:line="58" pos:column="9">WINAPI</name></type>  <name pos:line="58" pos:column="17">CompareNoCase</name>          <parameter_list pos:line="58" pos:column="40">(<param><decl><type><name pos:line="58" pos:column="41">_In_opt_z_</name> <name pos:line="58" pos:column="52">PCWSTR</name></type> <name pos:line="58" pos:column="59">szA</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="64">_In_opt_z_</name> <name pos:line="58" pos:column="75">PCWSTR</name></type> <name pos:line="58" pos:column="82">szB</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name pos:line="59" pos:column="1">int</name>     <name pos:line="59" pos:column="9">WINAPI</name></type>  <name pos:line="59" pos:column="17">CompareCaseN</name>           <argument_list pos:line="59" pos:column="40">(<argument><expr><macro><name pos:line="59" pos:column="41">_In_opt_count_</name><argument_list pos:line="59" pos:column="55">(<argument pos:line="59" pos:column="56">cch</argument>)</argument_list></macro> <name pos:line="59" pos:column="61">PCWSTR</name> <name pos:line="59" pos:column="68">szA</name></expr></argument>, <argument><expr><macro><name pos:line="59" pos:column="73">_In_opt_count_</name><argument_list pos:line="59" pos:column="87">(<argument pos:line="59" pos:column="88">cch</argument>)</argument_list></macro> <name pos:line="59" pos:column="93">PCWSTR</name> <name pos:line="59" pos:column="100">szB</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="105">size_t</name> <name pos:line="59" pos:column="112">cch</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="60" pos:column="1">int</name>     <name pos:line="60" pos:column="9">WINAPI</name></type>  <name pos:line="60" pos:column="17">CompareNoCaseN</name>         <argument_list pos:line="60" pos:column="40">(<argument><expr><macro><name pos:line="60" pos:column="41">_In_opt_count_</name><argument_list pos:line="60" pos:column="55">(<argument pos:line="60" pos:column="56">cch</argument>)</argument_list></macro> <name pos:line="60" pos:column="61">PCWSTR</name> <name pos:line="60" pos:column="68">szA</name></expr></argument>, <argument><expr><macro><name pos:line="60" pos:column="73">_In_opt_count_</name><argument_list pos:line="60" pos:column="87">(<argument pos:line="60" pos:column="88">cch</argument>)</argument_list></macro> <name pos:line="60" pos:column="93">PCWSTR</name> <name pos:line="60" pos:column="100">szB</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="105">size_t</name> <name pos:line="60" pos:column="112">cch</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name pos:line="61" pos:column="1">int</name>     <name pos:line="61" pos:column="9">WINAPI</name></type>  <name pos:line="61" pos:column="17">CompareNoCasePrepared</name>  <parameter_list pos:line="61" pos:column="40">(<param><decl><type><name pos:line="61" pos:column="41">_In_opt_z_</name> <name pos:line="61" pos:column="52">PCWSTR</name></type> <name pos:line="61" pos:column="59">szA</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="64">_In_opt_z_</name> <name pos:line="61" pos:column="75">PCWSTR</name></type> <name pos:line="61" pos:column="82">szB</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="62" pos:column="1">int</name>     <name pos:line="62" pos:column="9">WINAPI</name></type>  <name pos:line="62" pos:column="17">CompareNoCaseNPrepared</name> <parameter_list pos:line="62" pos:column="40">(<param><function_decl><type><name pos:line="62" pos:column="41">_In_opt_z_</name></type> <name pos:line="62" pos:column="52">_In_count_</name><parameter_list pos:line="62" pos:column="62">(<param><decl><type><name pos:line="62" pos:column="63">cch</name></type></decl></param>)</parameter_list> <param><decl><type><name pos:line="62" pos:column="68">PCWSTR</name></type> <name pos:line="62" pos:column="75">szA</name></decl></param><op:operator pos:line="62" pos:column="78">,</op:operator> <param><decl><type><name pos:line="62" pos:column="80">_In_opt_z_</name> <name pos:line="62" pos:column="91">PCWSTR</name></type> <name pos:line="62" pos:column="98">szB</name></decl></param><op:operator pos:line="62" pos:column="101">,</op:operator> <param><decl><type><name pos:line="62" pos:column="103">size_t</name></type> <name pos:line="62" pos:column="110">cch</name></decl></param></function_decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="64" pos:column="1">//</comment>
<comment type="line" pos:line="65" pos:column="1">// CompareString32[NoCase]</comment>
<comment type="line" pos:line="66" pos:column="1">//</comment>
<comment type="line" pos:line="67" pos:column="1">// String comparision using Win32 CompareString().  Operates on</comment>
<comment type="line" pos:line="68" pos:column="1">// the user default locale.  This is just a convenience wrapper</comment>
<comment type="line" pos:line="69" pos:column="1">// to make CompareString() appear like wcscmp().  </comment>
<comment type="line" pos:line="70" pos:column="1">// szA and szB cannot be NULL.  </comment>
<comment type="line" pos:line="71" pos:column="1">//</comment>
<comment type="line" pos:line="72" pos:column="1">// Returns:   </comment>
<comment type="line" pos:line="73" pos:column="1">//      -1 if A &lt; B</comment>
<comment type="line" pos:line="74" pos:column="1">//       0 if A == B</comment>
<comment type="line" pos:line="75" pos:column="1">//       1 if A &gt; B</comment>
<comment type="line" pos:line="76" pos:column="1">//</comment>
<function_decl><type><name pos:line="77" pos:column="1">int</name>     <name pos:line="77" pos:column="9">WINAPI</name></type>  <name pos:line="77" pos:column="17">CompareString32</name>          <parameter_list pos:line="77" pos:column="42">(<param><decl><type><name pos:line="77" pos:column="43">_In_opt_z_</name> <name pos:line="77" pos:column="54">PCWSTR</name></type> <name pos:line="77" pos:column="61">szA</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="66">_In_opt_z_</name> <name pos:line="77" pos:column="77">PCWSTR</name></type> <name pos:line="77" pos:column="84">szB</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="78" pos:column="1">int</name>     <name pos:line="78" pos:column="9">WINAPI</name></type>  <name pos:line="78" pos:column="17">CompareString32NoCase</name>    <parameter_list pos:line="78" pos:column="42">(<param><decl><type><name pos:line="78" pos:column="43">_In_opt_z_</name> <name pos:line="78" pos:column="54">PCWSTR</name></type> <name pos:line="78" pos:column="61">szA</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="66">_In_opt_z_</name> <name pos:line="78" pos:column="77">PCWSTR</name></type> <name pos:line="78" pos:column="84">szB</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="80" pos:column="1">//</comment>
<comment type="line" pos:line="81" pos:column="1">// CompareFilenames</comment>
<comment type="line" pos:line="82" pos:column="1">//</comment>
<comment type="line" pos:line="83" pos:column="1">// String comparision for two strings which are filenames or</comment>
<comment type="line" pos:line="84" pos:column="1">// extensions.  This is a wrapper around CompareNoCase[N].  </comment>
<comment type="line" pos:line="85" pos:column="1">// szA and/or szB can be NULL. </comment>
<comment type="line" pos:line="86" pos:column="1">//</comment>
<comment type="line" pos:line="87" pos:column="1">// Returns:   </comment>
<comment type="line" pos:line="88" pos:column="1">//      -1 if A &lt; B</comment>
<comment type="line" pos:line="89" pos:column="1">//       0 if A == B</comment>
<comment type="line" pos:line="90" pos:column="1">//       1 if A &gt; B</comment>
<comment type="line" pos:line="91" pos:column="1">//</comment>
<function_decl><type><name pos:line="92" pos:column="1">int</name>     <name pos:line="92" pos:column="9">WINAPI</name></type>  <name pos:line="92" pos:column="17">CompareFilenames</name>         <parameter_list pos:line="92" pos:column="42">(<param><decl><type><name pos:line="92" pos:column="43">_In_opt_z_</name> <name pos:line="92" pos:column="54">PCWSTR</name></type> <name pos:line="92" pos:column="61">szA</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="66">_In_opt_z_</name> <name pos:line="92" pos:column="77">PCWSTR</name></type> <name pos:line="92" pos:column="84">szB</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name pos:line="93" pos:column="1">int</name>     <name pos:line="93" pos:column="9">WINAPI</name></type>  <name pos:line="93" pos:column="17">CompareFilenamesN</name>        <argument_list pos:line="93" pos:column="42">(<argument><expr><macro><name pos:line="93" pos:column="43">_In_opt_count_</name><argument_list pos:line="93" pos:column="57">(<argument pos:line="93" pos:column="58">cch</argument>)</argument_list></macro> <name pos:line="93" pos:column="63">PCWSTR</name> <name pos:line="93" pos:column="70">szA</name></expr></argument>, <argument><expr><macro><name pos:line="93" pos:column="75">_In_opt_count_</name><argument_list pos:line="93" pos:column="89">(<argument pos:line="93" pos:column="90">cch</argument>)</argument_list></macro> <name pos:line="93" pos:column="95">PCWSTR</name> <name pos:line="93" pos:column="102">szB</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="107">size_t</name> <name pos:line="93" pos:column="114">cch</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name pos:line="94" pos:column="1">int</name>     <name pos:line="94" pos:column="9">WINAPI</name></type>  <name pos:line="94" pos:column="17">CompareFilenamesForSort</name>  <parameter_list pos:line="94" pos:column="42">(<param><decl><type><name pos:line="94" pos:column="43">_In_opt_z_</name> <name pos:line="94" pos:column="54">PCWSTR</name></type> <name pos:line="94" pos:column="61">szA</name></decl></param>, <param><decl><type><name pos:line="94" pos:column="66">_In_opt_z_</name> <name pos:line="94" pos:column="77">PCWSTR</name></type> <name pos:line="94" pos:column="84">szB</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="96" pos:column="1">//</comment>
<comment type="line" pos:line="97" pos:column="1">// FilenameTo{Upper|Lower}CaseInPlace - Convert filename to Upper/Lower case in place.</comment>
<comment type="line" pos:line="98" pos:column="1">// pBuffer -- Filename to {upper|lower} case.</comment>
<comment type="line" pos:line="99" pos:column="1">// Returns: pointer to BEGINNING of pBuffer.</comment>
<comment type="line" pos:line="100" pos:column="1">//</comment>
<function_decl><type><name pos:line="101" pos:column="1">PWSTR</name>   <name pos:line="101" pos:column="9">WINAPI</name></type>  <name pos:line="101" pos:column="17">FilenameToUpperCaseInPlace</name>    <parameter_list pos:line="101" pos:column="47">(<param><decl><type><name pos:line="101" pos:column="48">_Inout_opt_z_</name> <name pos:line="101" pos:column="62">PWSTR</name></type> <name pos:line="101" pos:column="68">pBuffer</name></decl></param>)</parameter_list>;</function_decl> 
<function_decl><type><name pos:line="102" pos:column="1">PWSTR</name>   <name pos:line="102" pos:column="9">WINAPI</name></type>  <name pos:line="102" pos:column="17">FilenameToLowerCaseInPlace</name>    <parameter_list pos:line="102" pos:column="47">(<param><decl><type><name pos:line="102" pos:column="48">_Inout_opt_z_</name> <name pos:line="102" pos:column="62">PWSTR</name></type> <name pos:line="102" pos:column="68">pBuffer</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="104" pos:column="1">//</comment>
<comment type="line" pos:line="105" pos:column="1">// StrStrNoCase[prepared] - Find &lt;pattern&gt; within &lt;text&gt;</comment>
<comment type="line" pos:line="106" pos:column="1">//</comment>
<comment type="line" pos:line="107" pos:column="1">// StrStrNoCasePrepared assumes that &lt;pattern&gt; is prepared </comment>
<comment type="line" pos:line="108" pos:column="1">// according to LowerCaseStr or ToLowerCase.</comment>
<comment type="line" pos:line="109" pos:column="1">//</comment>
<comment type="line" pos:line="110" pos:column="1">// For case-sensitive, you can use the CRT's wcsstr from wchar.h.</comment>
<comment type="line" pos:line="111" pos:column="1">//</comment>
<function_decl><type><name pos:line="112" pos:column="1">PCWSTR</name>  <name pos:line="112" pos:column="9">WINAPI</name></type>  <name pos:line="112" pos:column="17">StrStrNoCase</name>           <parameter_list pos:line="112" pos:column="40">(<param><decl><type><name pos:line="112" pos:column="41">_In_opt_z_</name> <name pos:line="112" pos:column="52">PCWSTR</name></type> <name pos:line="112" pos:column="59">text</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="65">_In_opt_z_</name> <name pos:line="112" pos:column="76">PCWSTR</name></type> <name pos:line="112" pos:column="83">pattern</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="113" pos:column="1">PCWSTR</name>  <name pos:line="113" pos:column="9">WINAPI</name></type>  <name pos:line="113" pos:column="17">StrStrNoCasePrepared</name>   <parameter_list pos:line="113" pos:column="40">(<param><decl><type><name pos:line="113" pos:column="41">_In_opt_z_</name> <name pos:line="113" pos:column="52">PCWSTR</name></type> <name pos:line="113" pos:column="59">text</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="65">_In_opt_z_</name> <name pos:line="113" pos:column="76">PCWSTR</name></type> <name pos:line="113" pos:column="83">pattern</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name pos:line="114" pos:column="1">PCWSTR</name>  <name pos:line="114" pos:column="9">WINAPI</name></type>  <name pos:line="114" pos:column="17">StrStrNoCaseN</name>          <argument_list pos:line="114" pos:column="40">(<argument><expr><macro><name pos:line="114" pos:column="41">_In_opt_count_</name><argument_list pos:line="114" pos:column="55">(<argument pos:line="114" pos:column="56">cch</argument>)</argument_list></macro> <name pos:line="114" pos:column="61">PCWSTR</name> <name pos:line="114" pos:column="68">text</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="74">size_t</name> <name pos:line="114" pos:column="81">cch</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="86">_In_opt_z_</name> <name pos:line="114" pos:column="97">PCWSTR</name> <name pos:line="114" pos:column="104">pattern</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line" pos:line="116" pos:column="1">// VS7:32377  non-const variants</comment>
<function><type><specifier pos:line="117" pos:column="1">inline</specifier> <name pos:line="117" pos:column="8">PWSTR</name> <name pos:line="117" pos:column="14">WINAPI</name></type>  <name pos:line="117" pos:column="22">StrStrNoCase</name>           <parameter_list pos:line="117" pos:column="45">(<param><decl><type><name pos:line="117" pos:column="46">_In_opt_z_</name> <name pos:line="117" pos:column="57">PWSTR</name></type> <name pos:line="117" pos:column="63">text</name></decl></param>, <param><decl><type><name pos:line="117" pos:column="69">_In_opt_z_</name> <name pos:line="117" pos:column="80">PCWSTR</name></type> <name pos:line="117" pos:column="87">pattern</name></decl></param>)</parameter_list><block pos:line="117" pos:column="95">{<return pos:line="117" pos:column="96">return <expr><call><name><name pos:line="117" pos:column="103">const_cast</name><argument_list pos:line="117" pos:column="113">&lt;<argument><expr><name pos:line="117" pos:column="114">PWSTR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="117" pos:column="120">(<argument><expr><call><name pos:line="117" pos:column="121">StrStrNoCase</name> <argument_list pos:line="117" pos:column="134">(<argument><expr><call><name><name pos:line="117" pos:column="135">const_cast</name><argument_list pos:line="117" pos:column="145">&lt;<argument><expr><name pos:line="117" pos:column="146">PCWSTR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="117" pos:column="153">(<argument><expr><name pos:line="117" pos:column="154">text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="117" pos:column="161">pattern</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><specifier pos:line="118" pos:column="1">inline</specifier> <name pos:line="118" pos:column="8">PWSTR</name> <name pos:line="118" pos:column="14">WINAPI</name></type>  <name pos:line="118" pos:column="22">StrStrNoCasePrepared</name>   <parameter_list pos:line="118" pos:column="45">(<param><decl><type><name pos:line="118" pos:column="46">_In_opt_z_</name> <name pos:line="118" pos:column="57">PWSTR</name></type> <name pos:line="118" pos:column="63">text</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="69">_In_opt_z_</name> <name pos:line="118" pos:column="80">PCWSTR</name></type> <name pos:line="118" pos:column="87">pattern</name></decl></param>)</parameter_list><block pos:line="118" pos:column="95">{<return pos:line="118" pos:column="96">return <expr><call><name><name pos:line="118" pos:column="103">const_cast</name><argument_list pos:line="118" pos:column="113">&lt;<argument><expr><name pos:line="118" pos:column="114">PWSTR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="118" pos:column="120">(<argument><expr><call><name pos:line="118" pos:column="121">StrStrNoCasePrepared</name> <argument_list pos:line="118" pos:column="142">(<argument><expr><call><name><name pos:line="118" pos:column="143">const_cast</name><argument_list pos:line="118" pos:column="153">&lt;<argument><expr><name pos:line="118" pos:column="154">PCWSTR</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="118" pos:column="161">(<argument><expr><name pos:line="118" pos:column="162">text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="118" pos:column="169">pattern</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<function_decl><type><name pos:line="120" pos:column="1">WCHAR</name>   <name pos:line="120" pos:column="9">WINAPI</name></type>  <name pos:line="120" pos:column="17">TitleCaseForUpperCase</name> <parameter_list pos:line="120" pos:column="39">(<param><decl><type><name pos:line="120" pos:column="40">WCHAR</name></type> <name pos:line="120" pos:column="46">ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="121" pos:column="1">BOOL</name>    <name pos:line="121" pos:column="9">WINAPI</name></type>  <name pos:line="121" pos:column="17">ExcludeTitleCase</name>      <parameter_list pos:line="121" pos:column="39">(<param><decl><type><name pos:line="121" pos:column="40">WCHAR</name></type> <name pos:line="121" pos:column="46">ch</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="123" pos:column="1">//----------------------------------------------------------------</comment>
<comment type="line" pos:line="124" pos:column="1">// CopyCase  - Copy the letter case of one string to another.</comment>
<comment type="line" pos:line="125" pos:column="1">// Changes the case of text in pDst to match the case of the text</comment>
<comment type="line" pos:line="126" pos:column="1">// in pSrc. Can be used to implement "Keep Case"-type feature in </comment>
<comment type="line" pos:line="127" pos:column="1">// Find/Replace.</comment>
<function_decl><type><name pos:line="128" pos:column="1">PWSTR</name> <name pos:line="128" pos:column="7">WINAPI</name></type> <name pos:line="128" pos:column="14">CopyCase</name> <parameter_list pos:line="128" pos:column="23">(<param><decl><type><name pos:line="128" pos:column="24">_In_z_</name> <name pos:line="128" pos:column="31">PCWSTR</name></type> <name pos:line="128" pos:column="38">pSrc</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="44">_Inout_z_</name> <name pos:line="128" pos:column="54">PWSTR</name></type> <name pos:line="128" pos:column="60">pDst</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="130" pos:column="1">//</comment>
<comment type="line" pos:line="131" pos:column="1">// QCompare[No]Case - qsort WCHAR ptr array functions</comment>
<comment type="line" pos:line="132" pos:column="1">//</comment>
<comment type="line" pos:line="133" pos:column="1">// qsort(arr, cel, sizeof(PCWSTR), QCompareCase);</comment>
<comment type="line" pos:line="134" pos:column="1">//</comment>
<function_decl><type><name pos:line="135" pos:column="1">int</name> <name pos:line="135" pos:column="5">__cdecl</name></type> <name pos:line="135" pos:column="13">QCompareCase</name>           <parameter_list pos:line="135" pos:column="36">(<param><decl><type><specifier pos:line="135" pos:column="37">const</specifier> <name pos:line="135" pos:column="43">void</name> <type:modifier pos:line="135" pos:column="48">*</type:modifier></type> <name pos:line="135" pos:column="50">pvA</name></decl></param>, <param><decl><type><specifier pos:line="135" pos:column="55">const</specifier> <name pos:line="135" pos:column="61">void</name> <type:modifier pos:line="135" pos:column="66">*</type:modifier></type> <name pos:line="135" pos:column="68">pvB</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="136" pos:column="1">int</name> <name pos:line="136" pos:column="5">__cdecl</name></type> <name pos:line="136" pos:column="13">QCompareNoCase</name>         <parameter_list pos:line="136" pos:column="36">(<param><decl><type><specifier pos:line="136" pos:column="37">const</specifier> <name pos:line="136" pos:column="43">void</name> <type:modifier pos:line="136" pos:column="48">*</type:modifier></type> <name pos:line="136" pos:column="50">pvA</name></decl></param>, <param><decl><type><specifier pos:line="136" pos:column="55">const</specifier> <name pos:line="136" pos:column="61">void</name> <type:modifier pos:line="136" pos:column="66">*</type:modifier></type> <name pos:line="136" pos:column="68">pvB</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="138" pos:column="1">//</comment>
<comment type="line" pos:line="139" pos:column="1">// BCompare[No]Case[Prepared] - bsearch WCHAR ptr array</comment>
<comment type="line" pos:line="140" pos:column="1">//</comment>
<comment type="line" pos:line="141" pos:column="1">// PCWSTR pszKey = L"Find this";</comment>
<comment type="line" pos:line="142" pos:column="1">// PCWSTR psz = bsearch(pszKey, arr, cel, sizeof(PCWSTR), BCompareCase);</comment>
<comment type="line" pos:line="143" pos:column="1">//</comment>
<comment type="line" pos:line="144" pos:column="1">// BCompareNoCasePrepared assumes pvKey is prepared according to </comment>
<comment type="line" pos:line="145" pos:column="1">// LowerCaseStr or ToLowerCase.</comment>
<comment type="line" pos:line="146" pos:column="1">//</comment>
<function_decl><type><name pos:line="147" pos:column="1">int</name> <name pos:line="147" pos:column="5">__cdecl</name></type> <name pos:line="147" pos:column="13">BCompareCase</name>           <parameter_list pos:line="147" pos:column="36">(<param><decl><type><specifier pos:line="147" pos:column="37">const</specifier> <name pos:line="147" pos:column="43">void</name> <type:modifier pos:line="147" pos:column="48">*</type:modifier></type> <name pos:line="147" pos:column="50">pvKey</name></decl></param>, <param><decl><type><specifier pos:line="147" pos:column="57">const</specifier> <name pos:line="147" pos:column="63">void</name> <type:modifier pos:line="147" pos:column="68">*</type:modifier></type> <name pos:line="147" pos:column="70">pvEl</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="148" pos:column="1">int</name> <name pos:line="148" pos:column="5">__cdecl</name></type> <name pos:line="148" pos:column="13">BCompareNoCase</name>         <parameter_list pos:line="148" pos:column="36">(<param><decl><type><specifier pos:line="148" pos:column="37">const</specifier> <name pos:line="148" pos:column="43">void</name> <type:modifier pos:line="148" pos:column="48">*</type:modifier></type> <name pos:line="148" pos:column="50">pvKey</name></decl></param>, <param><decl><type><specifier pos:line="148" pos:column="57">const</specifier> <name pos:line="148" pos:column="63">void</name> <type:modifier pos:line="148" pos:column="68">*</type:modifier></type> <name pos:line="148" pos:column="70">pvEl</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="149" pos:column="1">int</name> <name pos:line="149" pos:column="5">__cdecl</name></type> <name pos:line="149" pos:column="13">BCompareNoCasePrepared</name> <parameter_list pos:line="149" pos:column="36">(<param><decl><type><specifier pos:line="149" pos:column="37">const</specifier> <name pos:line="149" pos:column="43">void</name> <type:modifier pos:line="149" pos:column="48">*</type:modifier></type> <name pos:line="149" pos:column="50">pvKey</name></decl></param>, <param><decl><type><specifier pos:line="149" pos:column="57">const</specifier> <name pos:line="149" pos:column="63">void</name> <type:modifier pos:line="149" pos:column="68">*</type:modifier></type> <name pos:line="149" pos:column="70">pvEl</name></decl></param>)</parameter_list>;</function_decl>

<cpp:include pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="151" pos:column="10">"unipriv.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="153" pos:column="1">// PHarring: Performance optimization for LowerCase most common case</comment>
<function_decl><type><name pos:line="154" pos:column="1">WCHAR</name> <name pos:line="154" pos:column="7">WINAPI</name></type> <name pos:line="154" pos:column="14">LowerCaseComplete</name><parameter_list pos:line="154" pos:column="31">(<param><decl><type><name pos:line="154" pos:column="32">WCHAR</name></type> <name pos:line="154" pos:column="38">ch</name></decl></param>)</parameter_list>;</function_decl>

<comment type="line" pos:line="156" pos:column="1">// Deal with the most frequent cases first for performance</comment>
<comment type="line" pos:line="157" pos:column="1">// To get the best performance out of this, compile with /Ot (optimize for speed)</comment>
<function><type><specifier pos:line="158" pos:column="1">inline</specifier> <name pos:line="158" pos:column="8">WCHAR</name> <name pos:line="158" pos:column="14">WINAPI</name></type> <name pos:line="158" pos:column="21">LowerCase</name><parameter_list pos:line="158" pos:column="30">(<param><decl><type><name pos:line="158" pos:column="31">WCHAR</name></type> <name pos:line="158" pos:column="37">ch</name></decl></param>)</parameter_list>
<block pos:line="159" pos:column="1">{
    <if pos:line="160" pos:column="5">if <condition pos:line="160" pos:column="8">(<expr><name pos:line="160" pos:column="9">ch</name> <op:operator pos:line="160" pos:column="12">&lt;</op:operator>  <lit:literal type="string" pos:line="160" pos:column="15">L'</lit:literal>A'</expr>)</condition><then pos:line="160" pos:column="20">
    <block pos:line="161" pos:column="5">{
        <return pos:line="162" pos:column="9">return <expr><name pos:line="162" pos:column="16">ch</name></expr>;</return>
    }</block></then></if>
    
    <comment type="line" pos:line="165" pos:column="5">// For upper-case A-Z, convert to 'a'-'z' (constant offset)</comment>
    <if pos:line="166" pos:column="5">if<condition pos:line="166" pos:column="7">( <expr><name pos:line="166" pos:column="9">ch</name> <op:operator pos:line="166" pos:column="12">&lt;=</op:operator> <lit:literal type="string" pos:line="166" pos:column="15">L'</lit:literal>Z'</expr> )</condition><then pos:line="166" pos:column="21">
    <block pos:line="167" pos:column="5">{
        <return pos:line="168" pos:column="9">return <expr><name pos:line="168" pos:column="16">ch</name> <op:operator pos:line="168" pos:column="19">+</op:operator> <op:operator pos:line="168" pos:column="21">(</op:operator><lit:literal type="string" pos:line="168" pos:column="22">L'</lit:literal>a' <op:operator pos:line="168" pos:column="27">-</op:operator> <lit:literal type="string" pos:line="168" pos:column="29">L'</lit:literal>A'<op:operator pos:line="168" pos:column="33">)</op:operator></expr>;</return>
    }</block></then></if>

    <comment type="line" pos:line="171" pos:column="5">// For chars less than 0x00c0 (Latin Capital Letter A With Grave)</comment>
    <comment type="line" pos:line="172" pos:column="5">// leave them as-is (already lower-case)</comment>
    <if pos:line="173" pos:column="5">if<condition pos:line="173" pos:column="7">( <expr><name pos:line="173" pos:column="9">ch</name> <op:operator pos:line="173" pos:column="12">&lt;</op:operator> <lit:literal type="number" pos:line="173" pos:column="14">0x00c0</lit:literal></expr> )</condition><then pos:line="173" pos:column="22">
    <block pos:line="174" pos:column="5">{
        <return pos:line="175" pos:column="9">return <expr><name pos:line="175" pos:column="16">ch</name></expr>;</return>
    }</block></then></if>

    <comment type="line" pos:line="178" pos:column="5">// For everything else, do the full test</comment>
    <return pos:line="179" pos:column="5">return <expr><call><name pos:line="179" pos:column="12">LowerCaseComplete</name><argument_list pos:line="179" pos:column="29">(<argument><expr><name pos:line="179" pos:column="30">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="182" pos:column="1">/////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="183" pos:column="1">// Title case</comment>
<comment type="line" pos:line="184" pos:column="1">//</comment>

<comment type="line" pos:line="186" pos:column="1">//---------------------------------------------------------------</comment>
<comment type="line" pos:line="187" pos:column="1">// TitleCaseForUpperCase</comment>
<comment type="line" pos:line="188" pos:column="1">//</comment>
<comment type="line" pos:line="189" pos:column="1">// When you have determined that a character is initial and have </comment>
<comment type="line" pos:line="190" pos:column="1">// the Uppercase form, this function substitutes another character </comment>
<comment type="line" pos:line="191" pos:column="1">// that is better for Titlecase than the Uppercase char, otherwise</comment>
<comment type="line" pos:line="192" pos:column="1">// it passes the character through.</comment>
<comment type="line" pos:line="193" pos:column="1">//</comment>
<function><type><specifier pos:line="194" pos:column="1">inline</specifier> <name pos:line="194" pos:column="8">WCHAR</name> <name pos:line="194" pos:column="14">WINAPI</name></type> <name pos:line="194" pos:column="21">TitleCaseForUpperCase</name><parameter_list pos:line="194" pos:column="42">(<param><decl><type><name pos:line="194" pos:column="43">WCHAR</name></type> <name pos:line="194" pos:column="49">ch</name></decl></param>)</parameter_list>
<block pos:line="195" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="196" pos:column="5">UASSERT</name><argument_list pos:line="196" pos:column="12">(<argument><expr><name pos:line="196" pos:column="13">ch</name> <op:operator pos:line="196" pos:column="16">==</op:operator> <call><name pos:line="196" pos:column="19">UpperCase</name><argument_list pos:line="196" pos:column="28">(<argument><expr><name pos:line="196" pos:column="29">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="196" pos:column="35">// Call this function only with uppercase form!</comment>
    
    <comment type="line" pos:line="198" pos:column="5">// probably not</comment>
    <if pos:line="199" pos:column="5">if <condition pos:line="199" pos:column="8">(<expr><name><name pos:line="199" pos:column="9">ch</name> <argument_list pos:line="199" pos:column="12">&lt; <argument><expr><lit:literal type="number" pos:line="199" pos:column="14">0x01c4</lit:literal> <op:operator pos:line="199" pos:column="21">||</op:operator> <name pos:line="199" pos:column="24">ch</name></expr></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="199" pos:column="29">0x01f1</lit:literal></expr>)</condition><then pos:line="199" pos:column="36">
        <return pos:line="200" pos:column="9">return <expr><name pos:line="200" pos:column="16">ch</name></expr>;</return></then></if>

    <comment type="line" pos:line="202" pos:column="5">// 01C4;LATIN CAPITAL LETTER DZ WITH CARON -&gt; 01C5;LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON</comment>
    <comment type="line" pos:line="203" pos:column="5">// 01C7;LATIN CAPITAL LETTER LJ -&gt; 01C8;LATIN CAPITAL LETTER L WITH SMALL LETTER J</comment>
    <comment type="line" pos:line="204" pos:column="5">// 01CA;LATIN CAPITAL LETTER NJ -&gt; 01CB;LATIN CAPITAL LETTER N WITH SMALL LETTER J</comment>
    <comment type="line" pos:line="205" pos:column="5">// 01F1;LATIN CAPITAL LETTER DZ -&gt; 01F2;LATIN CAPITAL LETTER D WITH SMALL LETTER Z</comment>
    <comment type="line" pos:line="206" pos:column="5">//</comment>
    <comment type="line" pos:line="207" pos:column="5">// Unicode nicely places all these adjacent with the Titlecase code point </comment>
    <comment type="line" pos:line="208" pos:column="5">// between the Upper and Lower code points.</comment>
    <if pos:line="209" pos:column="5">if <condition pos:line="209" pos:column="8">(<expr><op:operator pos:line="209" pos:column="9">(</op:operator><lit:literal type="number" pos:line="209" pos:column="10">0x01C4</lit:literal> <op:operator pos:line="209" pos:column="17">==</op:operator> <name pos:line="209" pos:column="20">ch</name><op:operator pos:line="209" pos:column="22">)</op:operator> <op:operator pos:line="209" pos:column="24">||</op:operator> <op:operator pos:line="209" pos:column="27">(</op:operator><lit:literal type="number" pos:line="209" pos:column="28">0x01C7</lit:literal> <op:operator pos:line="209" pos:column="35">==</op:operator> <name pos:line="209" pos:column="38">ch</name><op:operator pos:line="209" pos:column="40">)</op:operator> <op:operator pos:line="209" pos:column="42">||</op:operator> <op:operator pos:line="209" pos:column="45">(</op:operator><lit:literal type="number" pos:line="209" pos:column="46">0x01CA</lit:literal> <op:operator pos:line="209" pos:column="53">==</op:operator> <name pos:line="209" pos:column="56">ch</name><op:operator pos:line="209" pos:column="58">)</op:operator> <op:operator pos:line="209" pos:column="60">||</op:operator> <op:operator pos:line="209" pos:column="63">(</op:operator><lit:literal type="number" pos:line="209" pos:column="64">0x01F1</lit:literal> <op:operator pos:line="209" pos:column="71">==</op:operator> <name pos:line="209" pos:column="74">ch</name><op:operator pos:line="209" pos:column="76">)</op:operator></expr>)</condition><then pos:line="209" pos:column="78">
        <expr_stmt><expr><name pos:line="210" pos:column="9">ch</name><op:operator pos:line="210" pos:column="11">++</op:operator></expr>;</expr_stmt></then></if> 

    <return pos:line="212" pos:column="5">return <expr><name pos:line="212" pos:column="12">ch</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="215" pos:column="1">//---------------------------------------------------------------</comment>
<comment type="line" pos:line="216" pos:column="1">// ExcludeTitleCase</comment>
<comment type="line" pos:line="217" pos:column="1">//</comment>
<comment type="line" pos:line="218" pos:column="1">// For a character with a mapping to Uppercase, excludes that </comment>
<comment type="line" pos:line="219" pos:column="1">// character from mapping to Titlecase.</comment>
<comment type="line" pos:line="220" pos:column="1">//</comment>
<comment type="line" pos:line="221" pos:column="1">// These are all Greek technical symbols that have Uppercase </comment>
<comment type="line" pos:line="222" pos:column="1">// equivalents, but not for Titlecase use.</comment>
<comment type="line" pos:line="223" pos:column="1">//</comment>
<comment type="line" pos:line="224" pos:column="1">// Pass this function the original, unmapped char -- not the Upppercase char</comment>
<comment type="line" pos:line="225" pos:column="1">//</comment>
<function><type><specifier pos:line="226" pos:column="1">inline</specifier> <name pos:line="226" pos:column="8">BOOL</name> <name pos:line="226" pos:column="13">WINAPI</name></type> <name pos:line="226" pos:column="20">ExcludeTitleCase</name><parameter_list pos:line="226" pos:column="36">(<param><decl><type><name pos:line="226" pos:column="37">WCHAR</name></type> <name pos:line="226" pos:column="43">ch</name></decl></param>)</parameter_list>
<block pos:line="227" pos:column="1">{
    <comment type="line" pos:line="228" pos:column="5">// probably not</comment>
    <if pos:line="229" pos:column="5">if <condition pos:line="229" pos:column="8">(<expr><op:operator pos:line="229" pos:column="9">(</op:operator><name pos:line="229" pos:column="10">ch</name> <op:operator pos:line="229" pos:column="13">&lt;</op:operator> <lit:literal type="number" pos:line="229" pos:column="15">0x3D0</lit:literal><op:operator pos:line="229" pos:column="20">)</op:operator> <op:operator pos:line="229" pos:column="22">||</op:operator> <op:operator pos:line="229" pos:column="25">(</op:operator><name pos:line="229" pos:column="26">ch</name> <op:operator pos:line="229" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="229" pos:column="31">0x03F1</lit:literal><op:operator pos:line="229" pos:column="37">)</op:operator></expr>)</condition><then pos:line="229" pos:column="39">
        <return pos:line="230" pos:column="9">return <expr><name pos:line="230" pos:column="16">FALSE</name></expr>;</return></then></if>

    <comment type="line" pos:line="232" pos:column="5">// In the absence of frequency data to determine an optimal </comment>
    <comment type="line" pos:line="233" pos:column="5">// test ordering, use an ordering with strictly humorous value.</comment>
    <return pos:line="234" pos:column="5">return <expr><op:operator pos:line="234" pos:column="12">(</op:operator><op:operator pos:line="234" pos:column="13">(</op:operator><name pos:line="234" pos:column="14">ch</name> <op:operator pos:line="234" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="234" pos:column="20">0x03D1</lit:literal><op:operator pos:line="234" pos:column="26">)</op:operator> <op:operator pos:line="234" pos:column="28">||</op:operator> <comment type="line" pos:line="234" pos:column="31">// GREEK THETA SYMBOL   // this one I've actually used back in college...</comment>
            <op:operator pos:line="235" pos:column="13">(</op:operator><name pos:line="235" pos:column="14">ch</name> <op:operator pos:line="235" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="235" pos:column="20">0x03D5</lit:literal><op:operator pos:line="235" pos:column="26">)</op:operator> <op:operator pos:line="235" pos:column="28">||</op:operator> <comment type="line" pos:line="235" pos:column="31">// GREEK PHI SYMBOL     // to the</comment>
            <op:operator pos:line="236" pos:column="13">(</op:operator><name pos:line="236" pos:column="14">ch</name> <op:operator pos:line="236" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="236" pos:column="20">0x03D0</lit:literal><op:operator pos:line="236" pos:column="26">)</op:operator> <op:operator pos:line="236" pos:column="28">||</op:operator> <comment type="line" pos:line="236" pos:column="31">// GREEK BETA SYMBOL    //    head of</comment>
            <op:operator pos:line="237" pos:column="13">(</op:operator><name pos:line="237" pos:column="14">ch</name> <op:operator pos:line="237" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="237" pos:column="20">0x03F0</lit:literal><op:operator pos:line="237" pos:column="26">)</op:operator> <op:operator pos:line="237" pos:column="28">||</op:operator> <comment type="line" pos:line="237" pos:column="31">// GREEK KAPPA SYMBOL   //       the class</comment>
            <op:operator pos:line="238" pos:column="13">(</op:operator><name pos:line="238" pos:column="14">ch</name> <op:operator pos:line="238" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="238" pos:column="20">0x03F1</lit:literal><op:operator pos:line="238" pos:column="26">)</op:operator> <op:operator pos:line="238" pos:column="28">||</op:operator> <comment type="line" pos:line="238" pos:column="31">// GREEK RHO SYMBOL     // rho your boat downstream</comment>
            <op:operator pos:line="239" pos:column="13">(</op:operator><name pos:line="239" pos:column="14">ch</name> <op:operator pos:line="239" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="239" pos:column="20">0x03D6</lit:literal><op:operator pos:line="239" pos:column="26">)</op:operator>    <comment type="line" pos:line="239" pos:column="31">// GREEK PI SYMBOL      // dessert comes last (I'd have it first, but it's an odd flavor of pi)</comment>
        <op:operator pos:line="240" pos:column="9">)</op:operator></expr>;</return>
}</block></function>

<cpp:endif pos:line="243" pos:column="1">#<cpp:directive pos:line="243" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="243" pos:column="8">// __UNICASE_H__</comment>
</unit>
